!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=263)}([function(e,t,n){"use strict";e.exports=n(264)},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var a=typeof r;if("string"===a||"number"===a)e.push(r);else if(Array.isArray(r)&&r.length){var i=o.apply(null,r);i&&e.push(i)}else if("object"===a)for(var l in r)n.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){e.exports=n(269)()},function(e,t,n){var r=n(299),o=n(52)(r);e.exports=o},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(41),o=n(3);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t,n){var r=n(272);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t,n){var r=n(1);e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?Object(arguments[t]):{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){r(e,t,n[t])}))}return e}},function(e,t){e.exports=function(e){return null==e}},function(e,t,n){var r=n(43),o=n(35),a=n(391),i=n(17);e.exports=function(e,t){return(i(e)?r:a)(e,o(t,3))}},function(e,t,n){"use strict";for(var r=function(e){return null!==e&&!Array.isArray(e)&&"object"==typeof e},o={3:"Cancel",6:"Help",8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",28:"Convert",29:"NonConvert",30:"Accept",31:"ModeChange",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",41:"Select",42:"Print",43:"Execute",44:"PrintScreen",45:"Insert",46:"Delete",48:["0",")"],49:["1","!"],50:["2","@"],51:["3","#"],52:["4","$"],53:["5","%"],54:["6","^"],55:["7","&"],56:["8","*"],57:["9","("],91:"OS",93:"ContextMenu",144:"NumLock",145:"ScrollLock",181:"VolumeMute",182:"VolumeDown",183:"VolumeUp",186:[";",":"],187:["=","+"],188:[",","<"],189:["-","_"],190:[".",">"],191:["/","?"],192:["`","~"],219:["[","{"],220:["\\","|"],221:["]","}"],222:["'",'"'],224:"Meta",225:"AltGraph",246:"Attn",247:"CrSel",248:"ExSel",249:"EraseEof",250:"Play",251:"ZoomOut"},a=0;a<24;a+=1)o[112+a]="F"+(a+1);for(var i=0;i<26;i+=1){var l=i+65;o[l]=[String.fromCharCode(l+32),String.fromCharCode(l)]}var u={codes:o,getCode:function(e){return r(e)?e.keyCode||e.which||this[e.key]:this[e]},getKey:function(e){var t=r(e);if(t&&e.key)return e.key;var n=o[t?e.keyCode||e.which:e];return Array.isArray(n)&&(n=t?n[e.shiftKey?1:0]:n[0]),n},Cancel:3,Help:6,Backspace:8,Tab:9,Clear:12,Enter:13,Shift:16,Control:17,Alt:18,Pause:19,CapsLock:20,Escape:27,Convert:28,NonConvert:29,Accept:30,ModeChange:31," ":32,PageUp:33,PageDown:34,End:35,Home:36,ArrowLeft:37,ArrowUp:38,ArrowRight:39,ArrowDown:40,Select:41,Print:42,Execute:43,PrintScreen:44,Insert:45,Delete:46,0:48,")":48,1:49,"!":49,2:50,"@":50,3:51,"#":51,4:52,$:52,5:53,"%":53,6:54,"^":54,7:55,"&":55,8:56,"*":56,9:57,"(":57,a:65,A:65,b:66,B:66,c:67,C:67,d:68,D:68,e:69,E:69,f:70,F:70,g:71,G:71,h:72,H:72,i:73,I:73,j:74,J:74,k:75,K:75,l:76,L:76,m:77,M:77,n:78,N:78,o:79,O:79,p:80,P:80,q:81,Q:81,r:82,R:82,s:83,S:83,t:84,T:84,u:85,U:85,v:86,V:86,w:87,W:87,x:88,X:88,y:89,Y:89,z:90,Z:90,OS:91,ContextMenu:93,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,F13:124,F14:125,F15:126,F16:127,F17:128,F18:129,F19:130,F20:131,F21:132,F22:133,F23:134,F24:135,NumLock:144,ScrollLock:145,VolumeMute:181,VolumeDown:182,VolumeUp:183,";":186,":":186,"=":187,"+":187,",":188,"<":188,"-":189,_:189,".":190,">":190,"/":191,"?":191,"`":192,"~":192,"[":219,"{":219,"\\":220,"|":220,"]":221,"}":221,"'":222,'"':222,Meta:224,AltGraph:225,Attn:246,CrSel:247,ExSel:248,EraseEof:249,Play:250,ZoomOut:251};u.Spacebar=u[" "],u.Digit0=u[0],u.Digit1=u[1],u.Digit2=u[2],u.Digit3=u[3],u.Digit4=u[4],u.Digit5=u[5],u.Digit6=u[6],u.Digit7=u[7],u.Digit8=u[8],u.Digit9=u[9],u.Tilde=u["~"],u.GraveAccent=u["`"],u.ExclamationPoint=u["!"],u.AtSign=u["@"],u.PoundSign=u["#"],u.PercentSign=u["%"],u.Caret=u["^"],u.Ampersand=u["&"],u.PlusSign=u["+"],u.MinusSign=u["-"],u.EqualsSign=u["="],u.DivisionSign=u["/"],u.MultiplicationSign=u["*"],u.Comma=u[","],u.Decimal=u["."],u.Colon=u[":"],u.Semicolon=u[";"],u.Pipe=u["|"],u.BackSlash=u["\\"],u.QuestionMark=u["?"],u.SingleQuote=u["'"],u.DoubleQuote=u['"'],u.LeftCurlyBrace=u["{"],u.RightCurlyBrace=u["}"],u.LeftParenthesis=u["("],u.RightParenthesis=u[")"],u.LeftAngleBracket=u["<"],u.RightAngleBracket=u[">"],u.LeftSquareBracket=u["["],u.RightSquareBracket=u["]"],e.exports=u},function(e,t,n){var r=n(182),o=n(52),a=n(73),i=o((function(e,t){return a(e)?r(e,t):[]}));e.exports=i},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){var r=n(85);e.exports=function(e,t,n){var o=null==e?void 0:r(e,t);return void 0===o?n:o}},function(e,t,n){var r=n(162),o=n(34),a=n(75),i=n(44),l=n(55),u=Math.max;e.exports=function(e,t,n,s){e=o(e)?e:l(e),n=n&&!s?i(n):0;var c=e.length;return n<0&&(n=u(c+n,0)),a(e)?n<=c&&e.indexOf(t,n)>-1:!!c&&r(e,t,n)>-1}},function(e,t,n){var r=n(340),o=n(341),a=n(342);e.exports=function(e){return r(e)||o(e)||a()}},function(e,t,n){"use strict";var r;r=n(337),e.exports=r.default,e.exports.instance=r.instance},function(e,t,n){var r=n(164),o=n(90),a=n(34);e.exports=function(e){return a(e)?r(e):o(e)}},function(e,t,n){var r=n(344),o=n(345),a=n(346);e.exports=function(e,t){return r(e)||o(e,t)||a()}},function(e,t,n){var r=n(97),o=n(54),a=n(184),i=n(17);e.exports=function(e,t){return(i(e)?r:o)(e,a(t))}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},,,function(e,t,n){var r=n(152),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();e.exports=a},function(e,t){e.exports=function(e){return void 0===e}},function(e,t,n){"use strict";var r=n(211),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===o.call(e)}function s(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return l(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:s,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),u=0;u<a.length;u++){var s=a[u];if(!l(s))return!1;var c=e[s],p=t[s];if(!1===(o=n?n.call(r,c,p,s):void 0)||void 0===o&&c!==p)return!1}return!0}},function(e,t,n){var r=n(49),o=n(274),a=n(275),i=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?o(e):a(e)}},function(e,t,n){var r=n(40),o=n(117);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(315),o=n(330),a=n(53),i=n(17),l=n(331);e.exports=function(e){return"function"==typeof e?e:null==e?a:"object"==typeof e?i(e)?o(e[0],e[1]):r(e):l(e)}},function(e,t,n){var r=n(273),o=n(151);e.exports=function(e,t){return null!=e&&o(e,t,r)}},function(e,t,n){var r=n(90),o=n(45),a=n(68),i=n(17),l=n(34),u=n(71),s=n(91),c=n(88),p=Object.prototype.hasOwnProperty;e.exports=function(e){if(null==e)return!0;if(l(e)&&(i(e)||"string"==typeof e||"function"==typeof e.splice||u(e)||c(e)||a(e)))return!e.length;var t=o(e);if("[object Map]"==t||"[object Set]"==t)return!e.size;if(s(e))return!r(e).length;for(var n in e)if(p.call(e,n))return!1;return!0}},function(e,t,n){var r=n(116);e.exports=function(e){return null==e?"":r(e)}},function(e,t){e.exports={}},function(e,t,n){var r=n(33),o=n(31);e.exports=function(e){if(!o(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t){function n(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=n=function(e){return typeof e}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(t)}e.exports=n},function(e,t,n){var r=n(143);e.exports=function(e,t){if(null==e)return{};var n,o,a=r(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},function(e,t,n){var r=n(123);e.exports=function(e){var t=r(e),n=t%1;return t==t?n?t-n:t:0}},function(e,t,n){var r=n(327),o=n(115),a=n(328),i=n(177),l=n(178),u=n(33),s=n(154),c=s(r),p=s(o),f=s(a),d=s(i),h=s(l),m=u;(r&&"[object DataView]"!=m(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=m(new o)||a&&"[object Promise]"!=m(a.resolve())||i&&"[object Set]"!=m(new i)||l&&"[object WeakMap]"!=m(new l))&&(m=function(e){var t=u(e),n="[object Object]"==t?e.constructor:void 0,r=n?s(n):"";if(r)switch(r){case c:return"[object DataView]";case p:return"[object Map]";case f:return"[object Promise]";case d:return"[object Set]";case h:return"[object WeakMap]"}return t}),e.exports=m},function(e,t,n){var r=n(347),o=n(349);e.exports=function(e,t,n){return r(o,e,t,n)}},function(e,t,n){var r=n(167),o=n(54),a=n(35),i=n(333),l=n(17);e.exports=function(e,t,n){var u=l(e)?r:i,s=arguments.length<3;return u(e,a(t,4),n,s,o)}},function(e,t,n){var r=n(170),o=n(35),a=n(336),i=n(17),l=n(72);e.exports=function(e,t,n){var u=i(e)?r:a;return n&&l(e,t,n)&&(t=void 0),u(e,o(t,3))}},function(e,t,n){var r=n(28).Symbol;e.exports=r},function(e,t,n){var r=n(280),o=n(283);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){var r=n(66);e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(e,t,n){var r=n(53),o=n(155),a=n(119);e.exports=function(e,t){return a(o(e,t,r),e+"")}},function(e,t){e.exports=function(e){return e}},function(e,t,n){var r=n(125),o=n(314)(r);e.exports=o},function(e,t,n){var r=n(309),o=n(22);e.exports=function(e){return null==e?[]:r(e,o(e))}},function(e,t,n){var r=n(175),o=n(384),a=n(35),i=n(17);e.exports=function(e,t){return(i(e)?r:o)(e,a(t,3))}},function(e,t,n){var r=n(183);e.exports=function(e){return e&&e.length?r(e):[]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},function(e,t,n){var r=n(33),o=n(129),a=n(25),i=Function.prototype,l=Object.prototype,u=i.toString,s=l.hasOwnProperty,c=u.call(Object);e.exports=function(e){if(!a(e)||"[object Object]"!=r(e))return!1;var t=o(e);if(null===t)return!0;var n=s.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&u.call(n)==c}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(265)},function(e,t,n){var r=n(303),o=n(121)((function(e,t){return null==e?{}:r(e,t)}));e.exports=o},function(e,t,n){var r=n(182),o=n(86),a=n(52),i=n(73),l=a((function(e,t){return i(e)?r(e,o(t,1,i,!0)):[]}));e.exports=l},,function(e,t,n){var r=n(17),o=n(113),a=n(153),i=n(38);e.exports=function(e,t){return r(e)?e:o(e,t)?[e]:a(i(e))}},function(e,t,n){var r=n(33),o=n(25);e.exports=function(e){return"symbol"==typeof e||o(e)&&"[object Symbol]"==r(e)}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(298),o=n(25),a=Object.prototype,i=a.hasOwnProperty,l=a.propertyIsEnumerable,u=r(function(){return arguments}())?r:function(e){return o(e)&&i.call(e,"callee")&&!l.call(e,"callee")};e.exports=u},function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(157);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t,n){(function(e){var r=n(28),o=n(310),a=t&&!t.nodeType&&t,i=a&&"object"==typeof e&&e&&!e.nodeType&&e,l=i&&i.exports===a?r.Buffer:void 0,u=(l?l.isBuffer:void 0)||o;e.exports=u}).call(this,n(124)(e))},function(e,t,n){var r=n(67),o=n(34),a=n(69),i=n(31);e.exports=function(e,t,n){if(!i(n))return!1;var l=typeof t;return!!("number"==l?o(n)&&a(t,n.length):"string"==l&&t in n)&&r(n[t],e)}},function(e,t,n){var r=n(34),o=n(25);e.exports=function(e){return o(e)&&r(e)}},function(e,t,n){var r=n(120),o=n(70);e.exports=function(e,t,n,a){var i=!n;n||(n={});for(var l=-1,u=t.length;++l<u;){var s=t[l],c=a?a(n[s],e[s],s,n,e):void 0;void 0===c&&(c=e[s]),i?o(n,s,c):r(n,s,c)}return n}},function(e,t,n){var r=n(33),o=n(17),a=n(25);e.exports=function(e){return"string"==typeof e||!o(e)&&a(e)&&"[object String]"==r(e)}},function(e,t,n){var r=n(334),o=n(123),a=n(87);e.exports=function(e,t,n){return t=o(t),void 0===n?(n=t,t=0):n=o(n),e=a(e),r(e,t,n)}},,,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(50)(Object,"create");e.exports=r},function(e,t,n){var r=n(288),o=n(289),a=n(290),i=n(291),l=n(292);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=l,e.exports=u},function(e,t,n){var r=n(67);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(294);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},function(e,t,n){var r=n(65),o=n(51);e.exports=function(e,t){for(var n=0,a=(t=r(t,e)).length;null!=e&&n<a;)e=e[o(t[n++])];return n&&n==a?e:void 0}},function(e,t,n){var r=n(122),o=n(306);e.exports=function e(t,n,a,i,l){var u=-1,s=t.length;for(a||(a=o),l||(l=[]);++u<s;){var c=t[u];n>0&&a(c)?n>1?e(c,n-1,a,i,l):r(l,c):i||(l[l.length]=c)}return l}},function(e,t,n){var r=n(31),o=n(66),a=/^\s+|\s+$/g,i=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,u=/^0o[0-7]+$/i,s=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return NaN;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(a,"");var n=l.test(e);return n||u.test(e)?s(e.slice(2),n?2:8):i.test(e)?NaN:+e}},function(e,t,n){var r=n(311),o=n(58),a=n(89),i=a&&a.isTypedArray,l=i?o(i):r;e.exports=l},function(e,t,n){(function(e){var r=n(152),o=t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=a&&a.exports===o&&r.process,l=function(){try{var e=a&&a.require&&a.require("util").types;return e||i&&i.binding&&i.binding("util")}catch(e){}}();e.exports=l}).call(this,n(124)(e))},function(e,t,n){var r=n(91),o=n(312),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))a.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(81),o=n(317),a=n(318),i=n(319),l=n(320),u=n(321);function s(e){var t=this.__data__=new r(e);this.size=t.size}s.prototype.clear=o,s.prototype.delete=a,s.prototype.get=i,s.prototype.has=l,s.prototype.set=u,e.exports=s},function(e,t,n){var r=n(114),o=n(323),a=n(324);function i(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}i.prototype.add=i.prototype.push=o,i.prototype.has=a,e.exports=i},function(e,t){e.exports=function(e,t){return e.has(t)}},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},function(e,t,n){var r=n(162);e.exports=function(e,t){return!!(null==e?0:e.length)&&r(e,t,0)>-1}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}},function(e,t,n){var r=n(185),o=n(351),a=n(352),i=n(187),l=n(361),u=n(132),s=n(362),c=n(193),p=n(194),f=n(44),d=Math.max;e.exports=function(e,t,n,h,m,v,y,g){var b=2&t;if(!b&&"function"!=typeof e)throw new TypeError("Expected a function");var w=h?h.length:0;if(w||(t&=-97,h=m=void 0),y=void 0===y?y:d(f(y),0),g=void 0===g?g:f(g),w-=m?m.length:0,64&t){var x=h,k=m;h=m=void 0}var E=b?void 0:u(e),N=[e,t,n,h,m,x,k,v,y,g];if(E&&s(N,E),e=N[0],t=N[1],n=N[2],h=N[3],m=N[4],!(g=N[9]=void 0===N[9]?b?0:e.length:d(N[9]-w,0))&&24&t&&(t&=-25),t&&1!=t)S=8==t||16==t?a(e,t,g):32!=t&&33!=t||m.length?i.apply(void 0,N):l(e,t,n,h);else var S=o(e,t,n);return p((E?r:c)(S,N),e,t)}},function(e,t,n){var r=n(100),o=n(31);e.exports=function(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=r(e.prototype),a=e.apply(n,t);return o(a)?a:n}}},function(e,t,n){var r=n(31),o=Object.create,a=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=a},function(e,t){e.exports=function(e,t){for(var n=-1,r=e.length,o=0,a=[];++n<r;){var i=e[n];i!==t&&"__lodash_placeholder__"!==i||(e[n]="__lodash_placeholder__",a[o++]=n)}return a}},function(e,t,n){var r=n(164),o=n(365),a=n(34);e.exports=function(e){return a(e)?r(e,!0):o(e)}},function(e,t){var n=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");e.exports=function(e){return n.test(e)}},function(e,t){e.exports=function(){}},function(e,t,n){"use strict";var r=n(0),o=function(e,t){return e&&!!e.current&&!!e.current[t]};t.a=function(e){var t=e.capture,n=e.listener,a=e.type,i=e.targetRef,l=r.useRef(n);l.current=n;var u=r.useCallback((function(e){return l.current(e)}),[]);r.useEffect((function(){return o(i,"addEventListener")&&i.current.addEventListener(a,u,t),function(){o(i,"removeEventListener")&&i.current.removeEventListener(a,u,t)}}),[t,i,a])}},function(e,t,n){var r=n(339)(n(141));e.exports=r},function(e,t,n){var r=n(403),o=n(38),a=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,i=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]","g");e.exports=function(e){return(e=o(e))&&e.replace(a,r).replace(i,"")}},function(e,t,n){var r=n(411);function o(t,n,a){return"undefined"!=typeof Reflect&&Reflect.get?e.exports=o=Reflect.get:e.exports=o=function(e,t,n){var o=r(e,t);if(o){var a=Object.getOwnPropertyDescriptor(o,t);return a.get?a.get.call(n):a.value}},o(t,n,a||t)}e.exports=o},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},,,,function(e,t,n){var r=n(17),o=n(66),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!o(e))||(i.test(e)||!a.test(e)||null!=t&&e in Object(t))}},function(e,t,n){var r=n(277),o=n(293),a=n(295),i=n(296),l=n(297);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=l,e.exports=u},function(e,t,n){var r=n(50)(n(28),"Map");e.exports=r},function(e,t,n){var r=n(49),o=n(43),a=n(17),i=n(66),l=r?r.prototype:void 0,u=l?l.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(a(t))return o(t,e)+"";if(i(t))return u?u.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t){e.exports=function(e,t,n){var r=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var a=Array(o);++r<o;)a[r]=e[r+t];return a}},function(e,t,n){var r=n(302),o=n(158)(r);e.exports=o},function(e,t,n){var r=n(70),o=n(67),a=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var i=e[t];a.call(e,t)&&o(i,n)&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){var r=n(305),o=n(155),a=n(119);e.exports=function(e){return a(o(e,void 0,r),e+"")}},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},function(e,t,n){var r=n(87);e.exports=function(e){return e?(e=r(e))===1/0||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r=n(168),o=n(22);e.exports=function(e,t){return e&&r(e,t,o)}},function(e,t,n){var r=n(322),o=n(25);e.exports=function e(t,n,a,i,l){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,a,i,e,l))}},function(e,t,n){var r=n(175),o=n(176),a=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,l=i?function(e){return null==e?[]:(e=Object(e),r(i(e),(function(t){return a.call(e,t)})))}:o;e.exports=l},function(e,t){e.exports=function(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}},function(e,t,n){var r=n(166)(Object.getPrototypeOf,Object);e.exports=r},function(e,t,n){var r=n(100),o=n(131);function a(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}a.prototype=r(o.prototype),a.prototype.constructor=a,e.exports=a},function(e,t){e.exports=function(){}},function(e,t,n){var r=n(186),o=n(104),a=r?function(e){return r.get(e)}:o;e.exports=a},function(e,t,n){var r=n(100),o=n(131);function a(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=void 0}a.prototype=r(o.prototype),a.prototype.constructor=a,e.exports=a},function(e,t){e.exports=function(e){return e.placeholder}},function(e,t,n){var r=n(171);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},function(e,t){e.exports={cap:!1,curry:!1,fixed:!1,immutable:!1,rearg:!1}},function(e,t,n){var r=n(388),o=n(103),a=n(389);e.exports=function(e){return o(e)?a(e):r(e)}},function(e,t,n){"use strict";var r=n(432);e.exports=Function.prototype.bind||r},function(e,t,n){"use strict";var r=n(206),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),a=Object.prototype.toString,i=Array.prototype.concat,l=Object.defineProperty,u=l&&function(){var e={};try{for(var t in l(e,"x",{enumerable:!1,value:e}),e)return!1;return e.x===e}catch(e){return!1}}(),s=function(e,t,n,r){var o;t in e&&("function"!=typeof(o=r)||"[object Function]"!==a.call(o)||!r())||(u?l(e,t,{configurable:!0,enumerable:!1,value:n,writable:!0}):e[t]=n)},c=function(e,t){var n=arguments.length>2?arguments[2]:{},a=r(t);o&&(a=i.call(a,Object.getOwnPropertySymbols(t)));for(var l=0;l<a.length;l+=1)s(e,a[l],t[a[l]],n[a[l]])};c.supportsDescriptors=!!u,e.exports=c},function(e,t,n){var r=n(114);function o(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],a=n.cache;if(a.has(o))return a.get(o);var i=e.apply(this,r);return n.cache=a.set(o,i)||a,i};return n.cache=new(o.Cache||r),n}o.Cache=r,e.exports=o},function(e,t,n){var r=n(163),o=n(35),a=n(44),i=Math.max;e.exports=function(e,t,n){var l=null==e?0:e.length;if(!l)return-1;var u=null==n?0:a(n);return u<0&&(u=i(l+u,0)),r(e,o(t,3),u)}},function(e,t,n){e.exports=n(24)},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},function(e,t,n){var r=n(86),o=n(52),a=n(183),i=n(73),l=o((function(e){return a(r(e,1,i,!0))}));e.exports=l},function(e,t,n){"use strict";(function(e){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,r=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(n&&navigator.userAgent.indexOf(e[t])>=0)return 1;return 0}();var o=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then((function(){t=!1,e()})))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout((function(){t=!1,e()}),r))}};function a(e){return e&&"[object Function]"==={}.toString.call(e)}function i(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function l(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function u(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=i(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?e:u(l(e))}function s(e){return e&&e.referenceNode?e.referenceNode:e}var c=n&&!(!window.MSInputMethodContext||!document.documentMode),p=n&&/MSIE 10/.test(navigator.userAgent);function f(e){return 11===e?c:10===e?p:c||p}function d(e){if(!e)return document.documentElement;for(var t=f(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===i(n,"position")?d(n):n:e?e.ownerDocument.documentElement:document.documentElement}function h(e){return null!==e.parentNode?h(e.parentNode):e}function m(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,a=document.createRange();a.setStart(r,0),a.setEnd(o,0);var i,l,u=a.commonAncestorContainer;if(e!==u&&t!==u||r.contains(o))return"BODY"===(l=(i=u).nodeName)||"HTML"!==l&&d(i.firstElementChild)!==i?d(u):u;var s=h(e);return s.host?m(s.host,t):m(e,h(t).host)}function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",r=e.nodeName;if("BODY"===r||"HTML"===r){var o=e.ownerDocument.documentElement,a=e.ownerDocument.scrollingElement||o;return a[n]}return e[n]}function y(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=v(t,"top"),o=v(t,"left"),a=n?-1:1;return e.top+=r*a,e.bottom+=r*a,e.left+=o*a,e.right+=o*a,e}function g(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"])+parseFloat(e["border"+r+"Width"])}function b(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],f(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function w(e){var t=e.body,n=e.documentElement,r=f(10)&&getComputedStyle(n);return{height:b("Height",t,n,r),width:b("Width",t,n,r)}}var x=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},k=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),E=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},N=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function S(e){return N({},e,{right:e.left+e.width,bottom:e.top+e.height})}function C(e){var t={};try{if(f(10)){t=e.getBoundingClientRect();var n=v(e,"top"),r=v(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},a="HTML"===e.nodeName?w(e.ownerDocument):{},l=a.width||e.clientWidth||o.width,u=a.height||e.clientHeight||o.height,s=e.offsetWidth-l,c=e.offsetHeight-u;if(s||c){var p=i(e);s-=g(p,"x"),c-=g(p,"y"),o.width-=s,o.height-=c}return S(o)}function T(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=f(10),o="HTML"===t.nodeName,a=C(e),l=C(t),s=u(e),c=i(t),p=parseFloat(c.borderTopWidth),d=parseFloat(c.borderLeftWidth);n&&o&&(l.top=Math.max(l.top,0),l.left=Math.max(l.left,0));var h=S({top:a.top-l.top-p,left:a.left-l.left-d,width:a.width,height:a.height});if(h.marginTop=0,h.marginLeft=0,!r&&o){var m=parseFloat(c.marginTop),v=parseFloat(c.marginLeft);h.top-=p-m,h.bottom-=p-m,h.left-=d-v,h.right-=d-v,h.marginTop=m,h.marginLeft=v}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(h=y(h,t)),h}function P(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=T(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),a=Math.max(n.clientHeight,window.innerHeight||0),i=t?0:v(n),l=t?0:v(n,"left"),u={top:i-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:o,height:a};return S(u)}function O(e){var t=e.nodeName;if("BODY"===t||"HTML"===t)return!1;if("fixed"===i(e,"position"))return!0;var n=l(e);return!!n&&O(n)}function A(e){if(!e||!e.parentElement||f())return document.documentElement;for(var t=e.parentElement;t&&"none"===i(t,"transform");)t=t.parentElement;return t||document.documentElement}function I(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={top:0,left:0},i=o?A(e):m(e,s(t));if("viewport"===r)a=P(i,o);else{var c=void 0;"scrollParent"===r?"BODY"===(c=u(l(t))).nodeName&&(c=e.ownerDocument.documentElement):c="window"===r?e.ownerDocument.documentElement:r;var p=T(c,i,o);if("HTML"!==c.nodeName||O(i))a=p;else{var f=w(e.ownerDocument),d=f.height,h=f.width;a.top+=p.top-p.marginTop,a.bottom=d+p.top,a.left+=p.left-p.marginLeft,a.right=h+p.left}}var v="number"==typeof(n=n||0);return a.left+=v?n:n.left||0,a.top+=v?n:n.top||0,a.right-=v?n:n.right||0,a.bottom-=v?n:n.bottom||0,a}function _(e){return e.width*e.height}function R(e,t,n,r,o){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var i=I(n,r,a,o),l={top:{width:i.width,height:t.top-i.top},right:{width:i.right-t.right,height:i.height},bottom:{width:i.width,height:i.bottom-t.bottom},left:{width:t.left-i.left,height:i.height}},u=Object.keys(l).map((function(e){return N({key:e},l[e],{area:_(l[e])})})).sort((function(e,t){return t.area-e.area})),s=u.filter((function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight})),c=s.length>0?s[0].key:u[0].key,p=e.split("-")[1];return c+(p?"-"+p:"")}function j(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=r?A(t):m(t,s(n));return T(n,o,r)}function M(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function D(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return t[e]}))}function F(e,t,n){n=n.split("-")[0];var r=M(e),o={width:r.width,height:r.height},a=-1!==["right","left"].indexOf(n),i=a?"top":"left",l=a?"left":"top",u=a?"height":"width",s=a?"width":"height";return o[i]=t[i]+t[u]/2-r[u]/2,o[l]=n===l?t[l]-r[s]:t[D(l)],o}function U(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function z(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex((function(e){return e[t]===n}));var r=U(e,(function(e){return e[t]===n}));return e.indexOf(r)}(e,"name",n))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&a(n)&&(t.offsets.popper=S(t.offsets.popper),t.offsets.reference=S(t.offsets.reference),t=n(t,e))})),t}function L(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=j(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=R(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=F(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=z(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function B(e,t){return e.some((function(e){var n=e.name;return e.enabled&&n===t}))}function W(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var o=t[r],a=o?""+o+n:e;if(void 0!==document.body.style[a])return a}return null}function q(){return this.state.isDestroyed=!0,B(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[W("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function H(e){var t=e.ownerDocument;return t?t.defaultView:window}function V(e,t,n,r){n.updateBound=r,H(e).addEventListener("resize",n.updateBound,{passive:!0});var o=u(e);return function e(t,n,r,o){var a="BODY"===t.nodeName,i=a?t.ownerDocument.defaultView:t;i.addEventListener(n,r,{passive:!0}),a||e(u(i.parentNode),n,r,o),o.push(i)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function K(){this.state.eventsEnabled||(this.state=V(this.reference,this.options,this.state,this.scheduleUpdate))}function G(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,H(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach((function(e){e.removeEventListener("scroll",t.updateBound)})),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function $(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function Q(e,t){Object.keys(t).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&$(t[n])&&(r="px"),e.style[n]=t[n]+r}))}var Y=n&&/Firefox/i.test(navigator.userAgent);function X(e,t,n){var r=U(e,(function(e){return e.name===t})),o=!!r&&e.some((function(e){return e.name===n&&e.enabled&&e.order<r.order}));if(!o){var a="`"+t+"`",i="`"+n+"`";console.warn(i+" modifier is required by "+a+" modifier in order to work, be sure to include it before "+a+"!")}return o}var Z=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],J=Z.slice(3);function ee(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=J.indexOf(e),r=J.slice(n+1).concat(J.slice(0,n));return t?r.reverse():r}var te="flip",ne="clockwise",re="counterclockwise";function oe(e,t,n,r){var o=[0,0],a=-1!==["right","left"].indexOf(r),i=e.split(/(\+|\-)/).map((function(e){return e.trim()})),l=i.indexOf(U(i,(function(e){return-1!==e.search(/,|\s/)})));i[l]&&-1===i[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,s=-1!==l?[i.slice(0,l).concat([i[l].split(u)[0]]),[i[l].split(u)[1]].concat(i.slice(l+1))]:[i];return(s=s.map((function(e,r){var o=(1===r?!a:a)?"height":"width",i=!1;return e.reduce((function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,i=!0,e):i?(e[e.length-1]+=t,i=!1,e):e.concat(t)}),[]).map((function(e){return function(e,t,n,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+o[1],i=o[2];if(!a)return e;if(0===i.indexOf("%")){var l=void 0;switch(i){case"%p":l=n;break;case"%":case"%r":default:l=r}return S(l)[t]/100*a}if("vh"===i||"vw"===i){return("vh"===i?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*a}return a}(e,o,t,n)}))}))).forEach((function(e,t){e.forEach((function(n,r){$(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))}))})),o}var ae={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var o=e.offsets,a=o.reference,i=o.popper,l=-1!==["bottom","top"].indexOf(n),u=l?"left":"top",s=l?"width":"height",c={start:E({},u,a[u]),end:E({},u,a[u]+a[s]-i[s])};e.offsets.popper=N({},i,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,o=e.offsets,a=o.popper,i=o.reference,l=r.split("-")[0],u=void 0;return u=$(+n)?[+n,0]:oe(n,a,i,l),"left"===l?(a.top+=u[0],a.left-=u[1]):"right"===l?(a.top+=u[0],a.left+=u[1]):"top"===l?(a.left+=u[0],a.top-=u[1]):"bottom"===l&&(a.left+=u[0],a.top+=u[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||d(e.instance.popper);e.instance.reference===n&&(n=d(n));var r=W("transform"),o=e.instance.popper.style,a=o.top,i=o.left,l=o[r];o.top="",o.left="",o[r]="";var u=I(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=a,o.left=i,o[r]=l,t.boundaries=u;var s=t.priority,c=e.offsets.popper,p={primary:function(e){var n=c[e];return c[e]<u[e]&&!t.escapeWithReference&&(n=Math.max(c[e],u[e])),E({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>u[e]&&!t.escapeWithReference&&(r=Math.min(c[n],u[e]-("right"===e?c.width:c.height))),E({},n,r)}};return s.forEach((function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=N({},c,p[t](e))})),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],a=Math.floor,i=-1!==["top","bottom"].indexOf(o),l=i?"right":"bottom",u=i?"left":"top",s=i?"width":"height";return n[l]<a(r[u])&&(e.offsets.popper[u]=a(r[u])-n[s]),n[u]>a(r[l])&&(e.offsets.popper[u]=a(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!X(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],a=e.offsets,l=a.popper,u=a.reference,s=-1!==["left","right"].indexOf(o),c=s?"height":"width",p=s?"Top":"Left",f=p.toLowerCase(),d=s?"left":"top",h=s?"bottom":"right",m=M(r)[c];u[h]-m<l[f]&&(e.offsets.popper[f]-=l[f]-(u[h]-m)),u[f]+m>l[h]&&(e.offsets.popper[f]+=u[f]+m-l[h]),e.offsets.popper=S(e.offsets.popper);var v=u[f]+u[c]/2-m/2,y=i(e.instance.popper),g=parseFloat(y["margin"+p]),b=parseFloat(y["border"+p+"Width"]),w=v-e.offsets.popper[f]-g-b;return w=Math.max(Math.min(l[c]-m,w),0),e.arrowElement=r,e.offsets.arrow=(E(n={},f,Math.round(w)),E(n,d,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(B(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=I(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=D(r),a=e.placement.split("-")[1]||"",i=[];switch(t.behavior){case te:i=[r,o];break;case ne:i=ee(r);break;case re:i=ee(r,!0);break;default:i=t.behavior}return i.forEach((function(l,u){if(r!==l||i.length===u+1)return e;r=e.placement.split("-")[0],o=D(r);var s=e.offsets.popper,c=e.offsets.reference,p=Math.floor,f="left"===r&&p(s.right)>p(c.left)||"right"===r&&p(s.left)<p(c.right)||"top"===r&&p(s.bottom)>p(c.top)||"bottom"===r&&p(s.top)<p(c.bottom),d=p(s.left)<p(n.left),h=p(s.right)>p(n.right),m=p(s.top)<p(n.top),v=p(s.bottom)>p(n.bottom),y="left"===r&&d||"right"===r&&h||"top"===r&&m||"bottom"===r&&v,g=-1!==["top","bottom"].indexOf(r),b=!!t.flipVariations&&(g&&"start"===a&&d||g&&"end"===a&&h||!g&&"start"===a&&m||!g&&"end"===a&&v),w=!!t.flipVariationsByContent&&(g&&"start"===a&&h||g&&"end"===a&&d||!g&&"start"===a&&v||!g&&"end"===a&&m),x=b||w;(f||y||x)&&(e.flipped=!0,(f||y)&&(r=i[u+1]),x&&(a=function(e){return"end"===e?"start":"start"===e?"end":e}(a)),e.placement=r+(a?"-"+a:""),e.offsets.popper=N({},e.offsets.popper,F(e.instance.popper,e.offsets.reference,e.placement)),e=z(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,a=r.reference,i=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return o[i?"left":"top"]=a[n]-(l?o[i?"width":"height"]:0),e.placement=D(t),e.offsets.popper=S(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!X(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=U(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,o=e.offsets.popper,a=U(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var i=void 0!==a?a:t.gpuAcceleration,l=d(e.instance.popper),u=C(l),s={position:o.position},c=function(e,t){var n=e.offsets,r=n.popper,o=n.reference,a=Math.round,i=Math.floor,l=function(e){return e},u=a(o.width),s=a(r.width),c=-1!==["left","right"].indexOf(e.placement),p=-1!==e.placement.indexOf("-"),f=t?c||p||u%2==s%2?a:i:l,d=t?a:l;return{left:f(u%2==1&&s%2==1&&!p&&t?r.left-1:r.left),top:d(r.top),bottom:d(r.bottom),right:f(r.right)}}(e,window.devicePixelRatio<2||!Y),p="bottom"===n?"top":"bottom",f="right"===r?"left":"right",h=W("transform"),m=void 0,v=void 0;if(v="bottom"===p?"HTML"===l.nodeName?-l.clientHeight+c.bottom:-u.height+c.bottom:c.top,m="right"===f?"HTML"===l.nodeName?-l.clientWidth+c.right:-u.width+c.right:c.left,i&&h)s[h]="translate3d("+m+"px, "+v+"px, 0)",s[p]=0,s[f]=0,s.willChange="transform";else{var y="bottom"===p?-1:1,g="right"===f?-1:1;s[p]=v*y,s[f]=m*g,s.willChange=p+", "+f}var b={"x-placement":e.placement};return e.attributes=N({},b,e.attributes),e.styles=N({},s,e.styles),e.arrowStyles=N({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return Q(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach((function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&Q(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var a=j(o,t,e,n.positionFixed),i=R(n.placement,a,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",i),Q(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},ie=function(){function e(t,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=o(this.update.bind(this)),this.options=N({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(N({},e.Defaults.modifiers,i.modifiers)).forEach((function(t){r.options.modifiers[t]=N({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return N({name:e},r.options.modifiers[e])})).sort((function(e,t){return e.order-t.order})),this.modifiers.forEach((function(e){e.enabled&&a(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)})),this.update();var l=this.options.eventsEnabled;l&&this.enableEventListeners(),this.state.eventsEnabled=l}return k(e,[{key:"update",value:function(){return L.call(this)}},{key:"destroy",value:function(){return q.call(this)}},{key:"enableEventListeners",value:function(){return K.call(this)}},{key:"disableEventListeners",value:function(){return G.call(this)}}]),e}();ie.Utils=("undefined"!=typeof window?window:e).PopperUtils,ie.placements=Z,ie.Defaults=ae,t.a=ie}).call(this,n(79))},function(e,t,n){"use strict";t.__esModule=!0;var r=a(n(0)),o=a(n(440));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.createContext||o.default,e.exports=t.default},,,,function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=i(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){l=r(n);for(var p=0;p<l.length;p++)a.call(n,l[p])&&(u[l[p]]=n[l[p]])}}return u}},function(e,t,n){var r=n(65),o=n(68),a=n(17),i=n(69),l=n(117),u=n(51);e.exports=function(e,t,n){for(var s=-1,c=(t=r(t,e)).length,p=!1;++s<c;){var f=u(t[s]);if(!(p=null!=e&&n(e,f)))break;e=e[f]}return p||++s!=c?p:!!(c=null==e?0:e.length)&&l(c)&&i(f,c)&&(a(e)||o(e))}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(79))},function(e,t,n){var r=n(276),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=r((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(o,(function(e,n,r,o){t.push(r?o.replace(a,"$1"):n||e)})),t}));e.exports=i},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var r=n(84),o=Math.max;e.exports=function(e,t,n){return t=o(void 0===t?e.length-1:t,0),function(){for(var a=arguments,i=-1,l=o(a.length-t,0),u=Array(l);++i<l;)u[i]=a[t+i];i=-1;for(var s=Array(t+1);++i<t;)s[i]=a[i];return s[t]=n(u),r(e,this,s)}}},function(e,t){e.exports=function(e){return function(){return e}}},function(e,t,n){var r=n(50),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},function(e,t){var n=Date.now;e.exports=function(e){var t=0,r=0;return function(){var o=n(),a=16-(o-r);if(r=o,a>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},function(e,t,n){var r=n(85),o=n(160),a=n(65);e.exports=function(e,t,n){for(var i=-1,l=t.length,u={};++i<l;){var s=t[i],c=r(e,s);n(c,s)&&o(u,a(s,e),c)}return u}},function(e,t,n){var r=n(120),o=n(65),a=n(69),i=n(31),l=n(51);e.exports=function(e,t,n,u){if(!i(e))return e;for(var s=-1,c=(t=o(t,e)).length,p=c-1,f=e;null!=f&&++s<c;){var d=l(t[s]),h=n;if(s!=p){var m=f[d];void 0===(h=u?u(m,d,f):void 0)&&(h=i(m)?m:a(t[s+1])?[]:{})}r(f,d,h),f=f[d]}return e}},function(e,t,n){var r=n(304),o=n(151);e.exports=function(e,t){return null!=e&&o(e,t,r)}},function(e,t,n){var r=n(163),o=n(307),a=n(308);e.exports=function(e,t,n){return t==t?a(e,t,n):r(e,o,n)}},function(e,t){e.exports=function(e,t,n,r){for(var o=e.length,a=n+(r?1:-1);r?a--:++a<o;)if(t(e[a],a,e))return a;return-1}},function(e,t,n){var r=n(165),o=n(68),a=n(17),i=n(71),l=n(69),u=n(88),s=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=a(e),c=!n&&o(e),p=!n&&!c&&i(e),f=!n&&!c&&!p&&u(e),d=n||c||p||f,h=d?r(e.length,String):[],m=h.length;for(var v in e)!t&&!s.call(e,v)||d&&("length"==v||p&&("offset"==v||"parent"==v)||f&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||l(v,m))||h.push(v);return h}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t){e.exports=function(e,t,n,r){var o=-1,a=null==e?0:e.length;for(r&&a&&(n=e[++o]);++o<a;)n=t(n,e[o],o,e);return n}},function(e,t,n){var r=n(313)();e.exports=r},function(e,t,n){var r=n(93),o=n(170),a=n(94);e.exports=function(e,t,n,i,l,u){var s=1&n,c=e.length,p=t.length;if(c!=p&&!(s&&p>c))return!1;var f=u.get(e);if(f&&u.get(t))return f==t;var d=-1,h=!0,m=2&n?new r:void 0;for(u.set(e,t),u.set(t,e);++d<c;){var v=e[d],y=t[d];if(i)var g=s?i(y,v,d,t,e,u):i(v,y,d,e,t,u);if(void 0!==g){if(g)continue;h=!1;break}if(m){if(!o(t,(function(e,t){if(!a(m,t)&&(v===e||l(v,e,n,i,u)))return m.push(t)}))){h=!1;break}}else if(v!==y&&!l(v,y,n,i,u)){h=!1;break}}return u.delete(e),u.delete(t),h}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},function(e,t,n){var r=n(28).Uint8Array;e.exports=r},function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},function(e,t,n){var r=n(174),o=n(127),a=n(22);e.exports=function(e){return r(e,a,o)}},function(e,t,n){var r=n(122),o=n(17);e.exports=function(e,t,n){var a=t(e);return o(e)?a:r(a,n(e))}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,a=[];++n<r;){var i=e[n];t(i,n,e)&&(a[o++]=i)}return a}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(50)(n(28),"Set");e.exports=r},function(e,t,n){var r=n(50)(n(28),"WeakMap");e.exports=r},function(e,t,n){var r=n(31);e.exports=function(e){return e==e&&!r(e)}},function(e,t){e.exports=function(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}},function(e,t){e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},function(e,t,n){var r=n(93),o=n(96),a=n(128),i=n(43),l=n(58),u=n(94);e.exports=function(e,t,n,s){var c=-1,p=o,f=!0,d=e.length,h=[],m=t.length;if(!d)return h;n&&(t=i(t,l(n))),s?(p=a,f=!1):t.length>=200&&(p=u,f=!1,t=new r(t));e:for(;++c<d;){var v=e[c],y=null==n?v:n(v);if(v=s||0!==v?v:0,f&&y==y){for(var g=m;g--;)if(t[g]===y)continue e;h.push(v)}else p(t,y,s)||h.push(v)}return h}},function(e,t,n){var r=n(93),o=n(96),a=n(128),i=n(94),l=n(343),u=n(95);e.exports=function(e,t,n){var s=-1,c=o,p=e.length,f=!0,d=[],h=d;if(n)f=!1,c=a;else if(p>=200){var m=t?null:l(e);if(m)return u(m);f=!1,c=i,h=new r}else h=t?[]:d;e:for(;++s<p;){var v=e[s],y=t?t(v):v;if(v=n||0!==v?v:0,f&&y==y){for(var g=h.length;g--;)if(h[g]===y)continue e;t&&h.push(y),d.push(v)}else c(h,y,n)||(h!==d&&h.push(y),d.push(v))}return d}},function(e,t,n){var r=n(53);e.exports=function(e){return"function"==typeof e?e:r}},function(e,t,n){var r=n(53),o=n(186),a=o?function(e,t){return o.set(e,t),e}:r;e.exports=a},function(e,t,n){var r=n(178),o=r&&new r;e.exports=o},function(e,t,n){var r=n(188),o=n(189),a=n(353),i=n(99),l=n(190),u=n(134),s=n(360),c=n(101),p=n(28);e.exports=function e(t,n,f,d,h,m,v,y,g,b){var w=128&n,x=1&n,k=2&n,E=24&n,N=512&n,S=k?void 0:i(t);return function C(){for(var T=arguments.length,P=Array(T),O=T;O--;)P[O]=arguments[O];if(E)var A=u(C),I=a(P,A);if(d&&(P=r(P,d,h,E)),m&&(P=o(P,m,v,E)),T-=I,E&&T<b){var _=c(P,A);return l(t,n,e,C.placeholder,f,P,_,y,g,b-T)}var R=x?f:this,j=k?R[t]:t;return T=P.length,y?P=s(P,y):N&&T>1&&P.reverse(),w&&g<T&&(P.length=g),this&&this!==p&&this instanceof C&&(j=S||i(j)),j.apply(R,P)}}},function(e,t){var n=Math.max;e.exports=function(e,t,r,o){for(var a=-1,i=e.length,l=r.length,u=-1,s=t.length,c=n(i-l,0),p=Array(s+c),f=!o;++u<s;)p[u]=t[u];for(;++a<l;)(f||a<i)&&(p[r[a]]=e[a]);for(;c--;)p[u++]=e[a++];return p}},function(e,t){var n=Math.max;e.exports=function(e,t,r,o){for(var a=-1,i=e.length,l=-1,u=r.length,s=-1,c=t.length,p=n(i-u,0),f=Array(p+c),d=!o;++a<p;)f[a]=e[a];for(var h=a;++s<c;)f[h+s]=t[s];for(;++l<u;)(d||a<i)&&(f[h+r[l]]=e[a++]);return f}},function(e,t,n){var r=n(191),o=n(193),a=n(194);e.exports=function(e,t,n,i,l,u,s,c,p,f){var d=8&t;t|=d?32:64,4&(t&=~(d?64:32))||(t&=-4);var h=[e,t,l,d?u:void 0,d?s:void 0,d?void 0:u,d?void 0:s,c,p,f],m=n.apply(void 0,h);return r(e)&&o(m,h),m.placeholder=i,a(m,e,t)}},function(e,t,n){var r=n(130),o=n(132),a=n(192),i=n(355);e.exports=function(e){var t=a(e),n=i[t];if("function"!=typeof n||!(t in r.prototype))return!1;if(e===n)return!0;var l=o(n);return!!l&&e===l[0]}},function(e,t,n){var r=n(354),o=Object.prototype.hasOwnProperty;e.exports=function(e){for(var t=e.name+"",n=r[t],a=o.call(r,t)?n.length:0;a--;){var i=n[a],l=i.func;if(null==l||l==e)return i.name}return t}},function(e,t,n){var r=n(185),o=n(158)(r);e.exports=o},function(e,t,n){var r=n(357),o=n(358),a=n(119),i=n(359);e.exports=function(e,t,n){var l=t+"";return a(e,o(l,i(r(l),n)))}},function(e,t,n){var r=n(74),o=n(22);e.exports=function(e,t){return e&&r(t,o(t),e)}},function(e,t,n){var r=n(92),o=n(97),a=n(120),i=n(195),l=n(364),u=n(197),s=n(59),c=n(367),p=n(368),f=n(173),d=n(199),h=n(45),m=n(369),v=n(370),y=n(201),g=n(17),b=n(71),w=n(374),x=n(31),k=n(376),E=n(22),N={};N["[object Arguments]"]=N["[object Array]"]=N["[object ArrayBuffer]"]=N["[object DataView]"]=N["[object Boolean]"]=N["[object Date]"]=N["[object Float32Array]"]=N["[object Float64Array]"]=N["[object Int8Array]"]=N["[object Int16Array]"]=N["[object Int32Array]"]=N["[object Map]"]=N["[object Number]"]=N["[object Object]"]=N["[object RegExp]"]=N["[object Set]"]=N["[object String]"]=N["[object Symbol]"]=N["[object Uint8Array]"]=N["[object Uint8ClampedArray]"]=N["[object Uint16Array]"]=N["[object Uint32Array]"]=!0,N["[object Error]"]=N["[object Function]"]=N["[object WeakMap]"]=!1,e.exports=function e(t,n,S,C,T,P){var O,A=1&n,I=2&n,_=4&n;if(S&&(O=T?S(t,C,T,P):S(t)),void 0!==O)return O;if(!x(t))return t;var R=g(t);if(R){if(O=m(t),!A)return s(t,O)}else{var j=h(t),M="[object Function]"==j||"[object GeneratorFunction]"==j;if(b(t))return u(t,A);if("[object Object]"==j||"[object Arguments]"==j||M&&!T){if(O=I||M?{}:y(t),!A)return I?p(t,l(O,t)):c(t,i(O,t))}else{if(!N[j])return T?t:{};O=v(t,j,A)}}P||(P=new r);var D=P.get(t);if(D)return D;P.set(t,O),k(t)?t.forEach((function(r){O.add(e(r,n,S,r,t,P))})):w(t)&&t.forEach((function(r,o){O.set(o,e(r,n,S,o,t,P))}));var F=_?I?d:f:I?keysIn:E,U=R?void 0:F(t);return o(U||t,(function(r,o){U&&(r=t[o=r]),a(O,o,e(r,n,S,o,t,P))})),O}},function(e,t,n){(function(e){var r=n(28),o=t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=a&&a.exports===o?r.Buffer:void 0,l=i?i.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=l?l(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(124)(e))},function(e,t,n){var r=n(122),o=n(129),a=n(127),i=n(176),l=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)r(t,a(e)),e=o(e);return t}:i;e.exports=l},function(e,t,n){var r=n(174),o=n(198),a=n(102);e.exports=function(e){return r(e,a,o)}},function(e,t,n){var r=n(135);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){var r=n(100),o=n(129),a=n(91);e.exports=function(e){return"function"!=typeof e.constructor||a(e)?{}:r(o(e))}},function(e,t,n){var r=n(118);e.exports=function(e,t,n){var o=e.length;return n=void 0===n?o:n,!t&&n>=o?e:r(e,t,n)}},function(e,t){e.exports=function(e,t,n){return e==e&&(void 0!==n&&(e=e<=n?e:n),void 0!==t&&(e=e>=t?e:t)),e}},function(e,t,n){var r=n(70),o=n(67);e.exports=function(e,t,n){(void 0===n||o(e[t],n))&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t){e.exports=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}},function(e,t,n){"use strict";var r=Array.prototype.slice,o=n(207),a=Object.keys,i=a?function(e){return a(e)}:n(427),l=Object.keys;i.shim=function(){Object.keys?function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2)||(Object.keys=function(e){return o(e)?l(r.call(e)):l(e)}):Object.keys=i;return Object.keys||i},e.exports=i},function(e,t,n){"use strict";var r=Object.prototype.toString;e.exports=function(e){var t=r.call(e),n="[object Arguments]"===t;return n||(n="[object Array]"!==t&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===r.call(e.callee)),n}},function(e,t,n){"use strict";var r=Object,o=TypeError;e.exports=function(){if(null!=this&&this!==r(this))throw new o("RegExp.prototype.flags getter called on non-object");var e="";return this.global&&(e+="g"),this.ignoreCase&&(e+="i"),this.multiline&&(e+="m"),this.dotAll&&(e+="s"),this.unicode&&(e+="u"),this.sticky&&(e+="y"),e}},function(e,t,n){"use strict";var r=n(208),o=n(139).supportsDescriptors,a=Object.getOwnPropertyDescriptor,i=TypeError;e.exports=function(){if(!o)throw new i("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");if("gim"===/a/gim.flags){var e=a(RegExp.prototype,"flags");if(e&&"function"==typeof e.get&&"boolean"==typeof/a/.dotAll)return e.get}return r}},function(e,t,n){"use strict";n(5);var r=n(105);function o(e){return Object(r.a)(e),null}o.displayName="EventListener",o.propTypes={},o.defaultProps={capture:!1},t.a=o},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(30);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(30),o=n(451),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,u={adapter:("undefined"!=typeof XMLHttpRequest?l=n(215):void 0!==t&&"[object process]"===Object.prototype.toString.call(t)&&(l=n(215)),l),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(a)})),e.exports=u}).call(this,n(450))},function(e,t,n){"use strict";var r=n(30),o=n(452),a=n(212),i=n(454),l=n(457),u=n(458),s=n(216);e.exports=function(e){return new Promise((function(t,c){var p=e.data,f=e.headers;r.isFormData(p)&&delete f["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password||"";f.Authorization="Basic "+btoa(h+":"+m)}var v=i(e.baseURL,e.url);if(d.open(e.method.toUpperCase(),a(v,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?l(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:n,config:e,request:d};o(t,c,r),d=null}},d.onabort=function(){d&&(c(s("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){c(s("Network Error",e,null,d)),d=null},d.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),c(s(t,e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var y=n(459),g=(e.withCredentials||u(v))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;g&&(f[e.xsrfHeaderName]=g)}if("setRequestHeader"in d&&r.forEach(f,(function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete f[t]:d.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(d.withCredentials=!!e.withCredentials),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){d&&(d.abort(),c(e),d=null)})),void 0===p&&(p=null),d.send(p)}))}},function(e,t,n){"use strict";var r=n(453);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},function(e,t,n){"use strict";var r=n(30);e.exports=function(e,t){t=t||{};var n={},o=["url","method","params","data"],a=["headers","auth","proxy"],i=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(o,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(a,(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(i,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var l=o.concat(a).concat(i),u=Object.keys(t).filter((function(e){return-1===l.indexOf(e)}));return r.forEach(u,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";e.exports=n(271)},function(e,t,n){e.exports=n(335)},function(e,t,n){var r=n(33),o=n(25);e.exports=function(e){return"number"==typeof e||o(e)&&"[object Number]"==r(e)}},function(e,t,n){var r=n(33),o=n(25);e.exports=function(e){return!0===e||!1===e||o(e)&&"[object Boolean]"==r(e)}},function(e,t,n){var r=n(46)("uniq",n(57),n(136));r.placeholder=n(39),e.exports=r},function(e,t,n){var r=n(46)("identity",n(53),n(136));r.placeholder=n(39),e.exports=r},function(e,t,n){var r=n(46)("filter",n(56));r.placeholder=n(39),e.exports=r},function(e,t,n){var r=n(46)("split",n(385));r.placeholder=n(39),e.exports=r},function(e,t,n){var r=n(46)("flatMap",n(390));r.placeholder=n(39),e.exports=r},function(e,t,n){var r=n(46)("map",n(14));r.placeholder=n(39),e.exports=r},function(e,t,n){var r=n(46)("toArray",n(392),n(136));r.placeholder=n(39),e.exports=r},function(e,t,n){var r=n(46)("flow",n(394));r.placeholder=n(39),e.exports=r},function(e,t,n){var r=n(400)();e.exports=r},function(e,t,n){var r=n(402),o=n(409),a=r((function(e,t,n){return e+(n?" ":"")+o(t)}));e.exports=a},function(e,t,n){var r=n(160);e.exports=function(e,t,n){return null==e?e:r(e,t,n)}},function(e,t){e.exports=function(e){for(var t=-1,n=null==e?0:e.length,r=0,o=[];++t<n;){var a=e[t];a&&(o[r++]=a)}return o}},function(e,t,n){var r=n(412),o=n(413),a=n(35),i=n(17),l=n(72);e.exports=function(e,t,n){var u=i(e)?r:o;return n&&l(e,t,n)&&(t=void 0),u(e,a(t,3))}},function(e,t,n){var r=n(38),o=/[\\^$.*+?()[\]{}|]/g,a=RegExp(o.source);e.exports=function(e){return(e=r(e))&&a.test(e)?e.replace(o,"\\$&"):e}},function(e,t,n){var r=n(118),o=n(44);e.exports=function(e,t,n){var a=null==e?0:e.length;return a?(t=n||void 0===t?1:o(t),r(e,0,(t=a-t)<0?0:t)):[]}},function(e,t,n){var r=n(90),o=n(45),a=n(34),i=n(75),l=n(414);e.exports=function(e){if(null==e)return 0;if(a(e))return i(e)?l(e):e.length;var t=o(e);return"[object Map]"==t||"[object Set]"==t?e.size:r(e).length}},function(e,t,n){var r=n(126);e.exports=function(e,t){return r(e,t)}},function(e,t,n){var r=n(70),o=n(125),a=n(35);e.exports=function(e,t){var n={};return t=a(t,3),o(e,(function(e,o,a){r(n,o,t(e,o,a))})),n}},function(e,t,n){var r=n(70),o=n(417)((function(e,t,n){r(e,n,t)}));e.exports=o},function(e,t,n){var r=n(421),o=n(424)((function(e,t,n){r(e,t,n)}));e.exports=o},function(e,t,n){var r=n(156),o=n(425),a=n(53),i=Object.prototype.toString,l=o((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=i.call(t)),e[t]=n}),r(a));e.exports=l},function(e,t,n){var r=n(206),o=n(428),a=n(429),i=n(430),l=n(433),u=n(439),s=Date.prototype.getTime;function c(e,t,n){var d=n||{};return!(d.strict?!a(e,t):e!==t)||(!e||!t||"object"!=typeof e&&"object"!=typeof t?d.strict?a(e,t):e==t:function(e,t,n){var a,d;if(typeof e!=typeof t)return!1;if(p(e)||p(t))return!1;if(e.prototype!==t.prototype)return!1;if(o(e)!==o(t))return!1;var h=i(e),m=i(t);if(h!==m)return!1;if(h||m)return e.source===t.source&&l(e)===l(t);if(u(e)&&u(t))return s.call(e)===s.call(t);var v=f(e),y=f(t);if(v!==y)return!1;if(v||y){if(e.length!==t.length)return!1;for(a=0;a<e.length;a++)if(e[a]!==t[a])return!1;return!0}if(typeof e!=typeof t)return!1;try{var g=r(e),b=r(t)}catch(e){return!1}if(g.length!==b.length)return!1;for(g.sort(),b.sort(),a=g.length-1;a>=0;a--)if(g[a]!=b[a])return!1;for(a=g.length-1;a>=0;a--)if(d=g[a],!c(e[d],t[d],n))return!1;return!0}(e,t,d))}function p(e){return null==e}function f(e){return!(!e||"object"!=typeof e||"number"!=typeof e.length)&&("function"==typeof e.copy&&"function"==typeof e.slice&&!(e.length>0&&"number"!=typeof e[0]))}e.exports=c},function(e,t,n){var r=n(443)("round");e.exports=r},function(e,t,n){var r=n(203),o=n(87);e.exports=function(e,t,n){return void 0===n&&(n=t,t=void 0),void 0!==n&&(n=(n=o(n))==n?n:0),void 0!==t&&(t=(t=o(t))==t?t:0),r(o(e),t,n)}},function(e,t,n){var r=n(165),o=n(184),a=n(44),i=Math.min;e.exports=function(e,t){if((e=a(e))<1||e>9007199254740991)return[];var n=4294967295,l=i(e,4294967295);t=o(t),e-=4294967295;for(var u=r(l,t);++n<e;)t(n);return u}},function(e,t,n){var r=n(52),o=n(98),a=n(134),i=n(101),l=r((function(e,t){var n=i(t,a(l));return o(e,64,void 0,t,n)}));l.placeholder={},e.exports=l},function(e,t,n){"use strict";n.d(t,"documentRef",(function(){return r}));var r={current:"undefined"==typeof document?null:document};"undefined"==typeof window||window},,,,,,,,,,,,,,function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(0)),a=r(n(61)),i=r(n(268));a.default.render(o.default.createElement(i.default,null),document.getElementById("root"))},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(150),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,p=o?Symbol.for("react.context"):60110,f=o?Symbol.for("react.forward_ref"):60112,d=o?Symbol.for("react.suspense"):60113;o&&Symbol.for("react.suspense_list");var h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder"),o&&Symbol.for("react.scope");var v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function x(){}function k(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var E=k.prototype=new x;E.constructor=k,r(E,w.prototype),E.isPureReactComponent=!0;var N={current:null},S={current:null},C=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:S.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var A=/\/+/g,I=[];function _(e,t,n,r){if(I.length){var o=I.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>I.length&&I.push(e)}function j(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case a:case i:u=!0}}if(u)return r(o,t,""===n?"."+M(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+M(l=t[s],s);u+=e(l,c,r,o)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+M(l,s++),r,o);else if("object"===l)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function F(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,(function(e){return e})):null!=e&&(O(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(A,"$&/")+"/")+n)),r.push(e))}function U(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(A,"$&/")+"/"),j(e,F,t=_(t,a,r,o)),R(t)}function z(){var e=N.current;if(null===e)throw Error(y(321));return e}var L={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;j(e,D,t=_(null,null,t,n)),R(t)},count:function(e){return j(e,(function(){return null}),null)},toArray:function(e){var t=[];return U(e,t,null,(function(e){return e})),t},only:function(e){if(!O(e))throw Error(y(143));return e}},createRef:function(){return{current:null}},Component:w,PureComponent:k,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:p,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:f,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return z().useCallback(e,t)},useContext:function(e,t){return z().useContext(e,t)},useEffect:function(e,t){return z().useEffect(e,t)},useImperativeHandle:function(e,t,n){return z().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return z().useLayoutEffect(e,t)},useMemo:function(e,t){return z().useMemo(e,t)},useReducer:function(e,t,n){return z().useReducer(e,t,n)},useRef:function(e){return z().useRef(e)},useState:function(e){return z().useState(e)},Fragment:l,Profiler:s,StrictMode:u,Suspense:d,createElement:P,cloneElement:function(e,t,n){if(null==e)throw Error(y(267,e));var o=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=S.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)C.call(t,c)&&!T.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){s=Array(c);for(var p=0;p<c;p++)s[p]=arguments[p+2];o.children=s}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:u}},createFactory:function(e){var t=P.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.12.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r}},B={default:L},W=B&&L||B;e.exports=W.default||W},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(150),a=n(266);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=null,u={};function s(){if(l)for(var e in u){var t=u[e],n=l.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!p[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in p[n]=t,n=t.eventTypes){var o=void 0,a=n[r],s=t,d=r;if(f.hasOwnProperty(d))throw Error(i(99,d));f[d]=a;var h=a.phasedRegistrationNames;if(h){for(o in h)h.hasOwnProperty(o)&&c(h[o],s,d);o=!0}else a.registrationName?(c(a.registrationName,s,d),o=!0):o=!1;if(!o)throw Error(i(98,r,e))}}}}function c(e,t,n){if(d[e])throw Error(i(100,e));d[e]=t,h[e]=t.eventTypes[n].dependencies}var p=[],f={},d={},h={};function m(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var v=!1,y=null,g=!1,b=null,w={onError:function(e){v=!0,y=e}};function x(e,t,n,r,o,a,i,l,u){v=!1,y=null,m.apply(w,arguments)}var k=null,E=null,N=null;function S(e,t,n){var r=e.type||"unknown-event";e.currentTarget=N(n),function(e,t,n,r,o,a,l,u,s){if(x.apply(this,arguments),v){if(!v)throw Error(i(198));var c=y;v=!1,y=null,g||(g=!0,b=c)}}(r,t,void 0,e),e.currentTarget=null}function C(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)S(e,t[r],n[r]);else t&&S(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function A(e){if(null!==e&&(P=C(P,e)),e=P,P=null,e){if(T(e,O),P)throw Error(i(95));if(g)throw e=b,g=!1,b=null,e}}var I={injectEventPluginOrder:function(e){if(l)throw Error(i(101));l=Array.prototype.slice.call(e),s()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!u.hasOwnProperty(t)||u[t]!==r){if(u[t])throw Error(i(102,t));u[t]=r,n=!0}}n&&s()}};function _(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var R=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;R.hasOwnProperty("ReactCurrentDispatcher")||(R.ReactCurrentDispatcher={current:null}),R.hasOwnProperty("ReactCurrentBatchConfig")||(R.ReactCurrentBatchConfig={suspense:null});var j=/^(.*)[\\\/]/,M="function"==typeof Symbol&&Symbol.for,D=M?Symbol.for("react.element"):60103,F=M?Symbol.for("react.portal"):60106,U=M?Symbol.for("react.fragment"):60107,z=M?Symbol.for("react.strict_mode"):60108,L=M?Symbol.for("react.profiler"):60114,B=M?Symbol.for("react.provider"):60109,W=M?Symbol.for("react.context"):60110,q=M?Symbol.for("react.concurrent_mode"):60111,H=M?Symbol.for("react.forward_ref"):60112,V=M?Symbol.for("react.suspense"):60113,K=M?Symbol.for("react.suspense_list"):60120,G=M?Symbol.for("react.memo"):60115,$=M?Symbol.for("react.lazy"):60116;M&&Symbol.for("react.fundamental"),M&&Symbol.for("react.responder"),M&&Symbol.for("react.scope");var Q="function"==typeof Symbol&&Symbol.iterator;function Y(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Q&&e[Q]||e["@@iterator"])?e:null}function X(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case U:return"Fragment";case F:return"Portal";case L:return"Profiler";case z:return"StrictMode";case V:return"Suspense";case K:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case W:return"Context.Consumer";case B:return"Context.Provider";case H:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case G:return X(e.type);case $:if(e=1===e._status?e._result:null)return X(e)}return null}function Z(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,a=X(e.type);n=null,r&&(n=X(r.type)),r=a,a="",o?a=" (at "+o.fileName.replace(j,"")+":"+o.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}var J=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=E(e)){if("function"!=typeof ee)throw Error(i(280));var t=k(e.stateNode);ee(e.stateNode,e.type,t)}}function oe(e){te?ne?ne.push(e):ne=[e]:te=e}function ae(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ie(e,t){return e(t)}function le(e,t,n,r){return e(t,n,r)}function ue(){}var se=ie,ce=!1,pe=!1;function fe(){null===te&&null===ne||(ue(),ae())}new Map;var de=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,me={},ve={};function ye(e,t,n,r,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var ge={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){ge[e]=new ye(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];ge[t]=new ye(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){ge[e]=new ye(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){ge[e]=new ye(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){ge[e]=new ye(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){ge[e]=new ye(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){ge[e]=new ye(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){ge[e]=new ye(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){ge[e]=new ye(e,5,!1,e.toLowerCase(),null,!1)}));var be=/[\-:]([a-z])/g;function we(e){return e[1].toUpperCase()}function xe(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ke(e,t,n,r){var o=ge.hasOwnProperty(t)?ge[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!he.call(ve,e)||!he.call(me,e)&&(de.test(e)?ve[e]=!0:(me[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Ee(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ne(e){e._valueTracker||(e._valueTracker=function(e){var t=Ee(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Se(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ee(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Ce(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Te(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=xe(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Pe(e,t){null!=(t=t.checked)&&ke(e,"checked",t,!1)}function Oe(e,t){Pe(e,t);var n=xe(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ie(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ie(e,t.type,xe(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ae(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ie(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function _e(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Re(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+xe(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function je(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Me(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(i(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(i(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:xe(n)}}function De(e,t){var n=xe(t.value),r=xe(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Fe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(be,we);ge[t]=new ye(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){ge[e]=new ye(e,1,!1,e.toLowerCase(),null,!1)})),ge.xlinkHref=new ye("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){ge[e]=new ye(e,1,!1,e.toLowerCase(),null,!0)}));var Ue="http://www.w3.org/1999/xhtml",ze="http://www.w3.org/2000/svg";function Le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Be(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var We,qe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==ze||"innerHTML"in e)e.innerHTML=t;else{for((We=We||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=We.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function He(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ve(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ke={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},Ge={},$e={};function Qe(e){if(Ge[e])return Ge[e];if(!Ke[e])return e;var t,n=Ke[e];for(t in n)if(n.hasOwnProperty(t)&&t in $e)return Ge[e]=n[t];return e}J&&($e=document.createElement("div").style,"AnimationEvent"in window||(delete Ke.animationend.animation,delete Ke.animationiteration.animation,delete Ke.animationstart.animation),"TransitionEvent"in window||delete Ke.transitionend.transition);var Ye=Qe("animationend"),Xe=Qe("animationiteration"),Ze=Qe("animationstart"),Je=Qe("transitionend"),et="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function tt(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function nt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function rt(e){if(tt(e)!==e)throw Error(i(188))}function ot(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=tt(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return rt(o),e;if(a===r)return rt(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var at,it,lt,ut=!1,st=[],ct=null,pt=null,ft=null,dt=new Map,ht=new Map,mt=[],vt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),yt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function gt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function bt(e,t){switch(e){case"focus":case"blur":ct=null;break;case"dragenter":case"dragleave":pt=null;break;case"mouseover":case"mouseout":ft=null;break;case"pointerover":case"pointerout":dt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ht.delete(t.pointerId)}}function wt(e,t,n,r,o){return null===e||e.nativeEvent!==o?(e=gt(t,n,r,o),null!==t&&(null!==(t=sr(t))&&it(t)),e):(e.eventSystemFlags|=r,e)}function xt(e){var t=ur(e.target);if(null!==t){var n=tt(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=nt(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){lt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function kt(e){if(null!==e.blockedOn)return!1;var t=In(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=sr(t);return null!==n&&it(n),e.blockedOn=t,!1}return!0}function Et(e,t,n){kt(e)&&n.delete(t)}function Nt(){for(ut=!1;0<st.length;){var e=st[0];if(null!==e.blockedOn){null!==(e=sr(e.blockedOn))&&at(e);break}var t=In(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:st.shift()}null!==ct&&kt(ct)&&(ct=null),null!==pt&&kt(pt)&&(pt=null),null!==ft&&kt(ft)&&(ft=null),dt.forEach(Et),ht.forEach(Et)}function St(e,t){e.blockedOn===t&&(e.blockedOn=null,ut||(ut=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Nt)))}function Ct(e){function t(t){return St(t,e)}if(0<st.length){St(st[0],e);for(var n=1;n<st.length;n++){var r=st[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ct&&St(ct,e),null!==pt&&St(pt,e),null!==ft&&St(ft,e),dt.forEach(t),ht.forEach(t),n=0;n<mt.length;n++)(r=mt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<mt.length&&null===(n=mt[0]).blockedOn;)xt(n),null===n.blockedOn&&mt.shift()}function Tt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Pt(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ot(e,t,n){(t=_(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function At(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Pt(t);for(t=n.length;0<t--;)Ot(n[t],"captured",e);for(t=0;t<n.length;t++)Ot(n[t],"bubbled",e)}}function It(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=_(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function _t(e){e&&e.dispatchConfig.registrationName&&It(e._targetInst,null,e)}function Rt(e){T(e,At)}function jt(){return!0}function Mt(){return!1}function Dt(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?jt:Mt,this.isPropagationStopped=Mt,this}function Ft(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Ut(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function zt(e){e.eventPool=[],e.getPooled=Ft,e.release=Ut}o(Dt.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=jt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=jt)},persist:function(){this.isPersistent=jt},isPersistent:Mt,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Mt,this._dispatchInstances=this._dispatchListeners=null}}),Dt.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Dt.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,zt(n),n},zt(Dt);var Lt=Dt.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Bt=Dt.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Wt=Dt.extend({view:null,detail:null}),qt=Wt.extend({relatedTarget:null});function Ht(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Vt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Kt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Gt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function $t(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Gt[e])&&!!t[e]}function Qt(){return $t}for(var Yt=Wt.extend({key:function(e){if(e.key){var t=Vt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ht(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Kt[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qt,charCode:function(e){return"keypress"===e.type?Ht(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ht(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Xt=0,Zt=0,Jt=!1,en=!1,tn=Wt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Xt;return Xt=e.screenX,Jt?"mousemove"===e.type?e.screenX-t:0:(Jt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Zt;return Zt=e.screenY,en?"mousemove"===e.type?e.screenY-t:0:(en=!0,0)}}),nn=tn.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),rn=tn.extend({dataTransfer:null}),on=Wt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qt}),an=Dt.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ln=tn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),un=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Ye,"animationEnd",2],[Xe,"animationIteration",2],[Ze,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Je,"transitionEnd",2],["waiting","waiting",2]],sn={},cn={},pn=0;pn<un.length;pn++){var fn=un[pn],dn=fn[0],hn=fn[1],mn=fn[2],vn="on"+(hn[0].toUpperCase()+hn.slice(1)),yn={phasedRegistrationNames:{bubbled:vn,captured:vn+"Capture"},dependencies:[dn],eventPriority:mn};sn[hn]=yn,cn[dn]=yn}var gn={eventTypes:sn,getEventPriority:function(e){return void 0!==(e=cn[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var o=cn[e];if(!o)return null;switch(e){case"keypress":if(0===Ht(n))return null;case"keydown":case"keyup":e=Yt;break;case"blur":case"focus":e=qt;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=on;break;case Ye:case Xe:case Ze:e=Lt;break;case Je:e=an;break;case"scroll":e=Wt;break;case"wheel":e=ln;break;case"copy":case"cut":case"paste":e=Bt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=nn;break;default:e=Dt}return Rt(t=e.getPooled(o,t,n,r)),t}},bn=a.unstable_UserBlockingPriority,wn=a.unstable_runWithPriority,xn=gn.getEventPriority,kn=[];function En(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=ur(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Tt(e.nativeEvent);r=e.topLevelType;for(var a=e.nativeEvent,i=e.eventSystemFlags,l=null,u=0;u<p.length;u++){var s=p[u];s&&(s=s.extractEvents(r,t,a,o,i))&&(l=C(l,s))}A(l)}}var Nn=!0;function Sn(e,t){Cn(t,e,!1)}function Cn(e,t,n){switch(xn(t)){case 0:var r=Tn.bind(null,t,1);break;case 1:r=Pn.bind(null,t,1);break;default:r=An.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Tn(e,t,n){ce||ue();var r=An,o=ce;ce=!0;try{le(r,e,t,n)}finally{(ce=o)||fe()}}function Pn(e,t,n){wn(bn,An.bind(null,e,t,n))}function On(e,t,n,r){if(kn.length){var o=kn.pop();o.topLevelType=e,o.eventSystemFlags=t,o.nativeEvent=n,o.targetInst=r,e=o}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=En,n=e,pe)t(n,void 0);else{pe=!0;try{se(t,n,void 0)}finally{pe=!1,fe()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,kn.length<10&&kn.push(e)}}function An(e,t,n){if(Nn)if(0<st.length&&-1<vt.indexOf(e))e=gt(null,e,t,n),st.push(e);else{var r=In(e,t,n);null===r?bt(e,n):-1<vt.indexOf(e)?(e=gt(r,e,t,n),st.push(e)):function(e,t,n,r){switch(t){case"focus":return ct=wt(ct,e,t,n,r),!0;case"dragenter":return pt=wt(pt,e,t,n,r),!0;case"mouseover":return ft=wt(ft,e,t,n,r),!0;case"pointerover":var o=r.pointerId;return dt.set(o,wt(dt.get(o)||null,e,t,n,r)),!0;case"gotpointercapture":return o=r.pointerId,ht.set(o,wt(ht.get(o)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(bt(e,n),On(e,t,n,null))}}function In(e,t,n){var r=Tt(n);if(null!==(r=ur(r))){var o=tt(r);if(null===o)r=null;else{var a=o.tag;if(13===a){if(null!==(r=nt(o)))return r;r=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}return On(e,t,n,r),null}function _n(e){if(!J)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Rn=new("function"==typeof WeakMap?WeakMap:Map);function jn(e){var t=Rn.get(e);return void 0===t&&(t=new Set,Rn.set(e,t)),t}function Mn(e,t,n){if(!n.has(e)){switch(e){case"scroll":Cn(t,"scroll",!0);break;case"focus":case"blur":Cn(t,"focus",!0),Cn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":_n(e)&&Cn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===et.indexOf(e)&&Sn(e,t)}n.add(e)}}var Dn={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Fn=["Webkit","ms","Moz","O"];function Un(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Dn.hasOwnProperty(e)&&Dn[e]?(""+t).trim():t+"px"}function zn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=Un(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Dn).forEach((function(e){Fn.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Dn[t]=Dn[e]}))}));var Ln=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Bn(e,t){if(t){if(Ln[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function Wn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function qn(e,t){var n=jn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)Mn(t[r],e,n)}function Hn(){}function Vn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Kn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Gn(e,t){var n,r=Kn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Kn(r)}}function $n(){for(var e=window,t=Vn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Vn((e=t.contentWindow).document)}return t}function Qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Yn=null,Xn=null;function Zn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Jn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var er="function"==typeof setTimeout?setTimeout:void 0,tr="function"==typeof clearTimeout?clearTimeout:void 0;function nr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function rr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var or=Math.random().toString(36).slice(2),ar="__reactInternalInstance$"+or,ir="__reactEventHandlers$"+or,lr="__reactContainere$"+or;function ur(e){var t=e[ar];if(t)return t;for(var n=e.parentNode;n;){if(t=n[lr]||n[ar]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=rr(e);null!==e;){if(n=e[ar])return n;e=rr(e)}return t}n=(e=n).parentNode}return null}function sr(e){return!(e=e[ar]||e[lr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function cr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function pr(e){return e[ir]||null}var fr=null,dr=null,hr=null;function mr(){if(hr)return hr;var e,t,n=dr,r=n.length,o="value"in fr?fr.value:fr.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return hr=o.slice(e,1<t?1-t:void 0)}var vr=Dt.extend({data:null}),yr=Dt.extend({data:null}),gr=[9,13,27,32],br=J&&"CompositionEvent"in window,wr=null;J&&"documentMode"in document&&(wr=document.documentMode);var xr=J&&"TextEvent"in window&&!wr,kr=J&&(!br||wr&&8<wr&&11>=wr),Er=String.fromCharCode(32),Nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Sr=!1;function Cr(e,t){switch(e){case"keyup":return-1!==gr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Tr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Pr=!1;var Or={eventTypes:Nr,extractEvents:function(e,t,n,r){var o;if(br)e:{switch(e){case"compositionstart":var a=Nr.compositionStart;break e;case"compositionend":a=Nr.compositionEnd;break e;case"compositionupdate":a=Nr.compositionUpdate;break e}a=void 0}else Pr?Cr(e,n)&&(a=Nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=Nr.compositionStart);return a?(kr&&"ko"!==n.locale&&(Pr||a!==Nr.compositionStart?a===Nr.compositionEnd&&Pr&&(o=mr()):(dr="value"in(fr=r)?fr.value:fr.textContent,Pr=!0)),a=vr.getPooled(a,t,n,r),o?a.data=o:null!==(o=Tr(n))&&(a.data=o),Rt(a),o=a):o=null,(e=xr?function(e,t){switch(e){case"compositionend":return Tr(t);case"keypress":return 32!==t.which?null:(Sr=!0,Er);case"textInput":return(e=t.data)===Er&&Sr?null:e;default:return null}}(e,n):function(e,t){if(Pr)return"compositionend"===e||!br&&Cr(e,t)?(e=mr(),hr=dr=fr=null,Pr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return kr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=yr.getPooled(Nr.beforeInput,t,n,r)).data=e,Rt(t)):t=null,null===o?t:null===t?o:[o,t]}},Ar={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ir(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ar[e.type]:"textarea"===t}var _r={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Rr(e,t,n){return(e=Dt.getPooled(_r.change,e,t,n)).type="change",oe(n),Rt(e),e}var jr=null,Mr=null;function Dr(e){A(e)}function Fr(e){if(Se(cr(e)))return e}function Ur(e,t){if("change"===e)return t}var zr=!1;function Lr(){jr&&(jr.detachEvent("onpropertychange",Br),Mr=jr=null)}function Br(e){if("value"===e.propertyName&&Fr(Mr))if(e=Rr(Mr,e,Tt(e)),ce)A(e);else{ce=!0;try{ie(Dr,e)}finally{ce=!1,fe()}}}function Wr(e,t,n){"focus"===e?(Lr(),Mr=n,(jr=t).attachEvent("onpropertychange",Br)):"blur"===e&&Lr()}function qr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Fr(Mr)}function Hr(e,t){if("click"===e)return Fr(t)}function Vr(e,t){if("input"===e||"change"===e)return Fr(t)}J&&(zr=_n("input")&&(!document.documentMode||9<document.documentMode));var Kr,Gr={eventTypes:_r,_isInputEventSupported:zr,extractEvents:function(e,t,n,r){var o=t?cr(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=Ur;else if(Ir(o))if(zr)i=Vr;else{i=qr;var l=Wr}else(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Hr);if(i&&(i=i(e,t)))return Rr(i,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ie(o,"number",o.value)}},$r={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Qr={eventTypes:$r,extractEvents:function(e,t,n,r,o){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!i&&!a)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?ur(t):null)&&(t!==(a=tt(t))||5!==t.tag&&6!==t.tag)&&(t=null)):i=null,i===t)return null;if("mouseout"===e||"mouseover"===e)var l=tn,u=$r.mouseLeave,s=$r.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=nn,u=$r.pointerLeave,s=$r.pointerEnter,c="pointer");if(e=null==i?o:cr(i),o=null==t?o:cr(t),(u=l.getPooled(u,i,n,r)).type=c+"leave",u.target=e,u.relatedTarget=o,(r=l.getPooled(s,t,n,r)).type=c+"enter",r.target=o,r.relatedTarget=e,c=t,(l=i)&&c)e:{for(e=c,i=0,t=s=l;t;t=Pt(t))i++;for(t=0,o=e;o;o=Pt(o))t++;for(;0<i-t;)s=Pt(s),i--;for(;0<t-i;)e=Pt(e),t--;for(;i--;){if(s===e||s===e.alternate)break e;s=Pt(s),e=Pt(e)}s=null}else s=null;for(e=s,s=[];l&&l!==e&&(null===(i=l.alternate)||i!==e);)s.push(l),l=Pt(l);for(l=[];c&&c!==e&&(null===(i=c.alternate)||i!==e);)l.push(c),c=Pt(c);for(c=0;c<s.length;c++)It(s[c],"bubbled",u);for(c=l.length;0<c--;)It(l[c],"captured",r);return n===Kr?(Kr=null,[u]):(Kr=n,[u,r])}};var Yr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Xr=Object.prototype.hasOwnProperty;function Zr(e,t){if(Yr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Xr.call(t,n[r])||!Yr(e[n[r]],t[n[r]]))return!1;return!0}var Jr=J&&"documentMode"in document&&11>=document.documentMode,eo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},to=null,no=null,ro=null,oo=!1;function ao(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return oo||null==to||to!==Vn(n)?null:("selectionStart"in(n=to)&&Qn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},ro&&Zr(ro,n)?null:(ro=n,(e=Dt.getPooled(eo.select,no,e,t)).type="select",e.target=to,Rt(e),e))}var io={eventTypes:eo,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=jn(a),o=h.onSelect;for(var i=0;i<o.length;i++)if(!a.has(o[i])){a=!1;break e}a=!0}o=!a}if(o)return null;switch(a=t?cr(t):window,e){case"focus":(Ir(a)||"true"===a.contentEditable)&&(to=a,no=t,ro=null);break;case"blur":ro=no=to=null;break;case"mousedown":oo=!0;break;case"contextmenu":case"mouseup":case"dragend":return oo=!1,ao(n,r);case"selectionchange":if(Jr)break;case"keydown":case"keyup":return ao(n,r)}return null}};I.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=pr,E=sr,N=cr,I.injectEventPluginsByName({SimpleEventPlugin:gn,EnterLeaveEventPlugin:Qr,ChangeEventPlugin:Gr,SelectEventPlugin:io,BeforeInputEventPlugin:Or}),new Set;var lo=[],uo=-1;function so(e){0>uo||(e.current=lo[uo],lo[uo]=null,uo--)}function co(e,t){uo++,lo[uo]=e.current,e.current=t}var po={},fo={current:po},ho={current:!1},mo=po;function vo(e,t){var n=e.type.contextTypes;if(!n)return po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function yo(e){return null!=(e=e.childContextTypes)}function go(e){so(ho),so(fo)}function bo(e){so(ho),so(fo)}function wo(e,t,n){if(fo.current!==po)throw Error(i(168));co(fo,t),co(ho,n)}function xo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,X(t)||"Unknown",a));return o({},n,{},r)}function ko(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||po,mo=fo.current,co(fo,t),co(ho,ho.current),!0}function Eo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(t=xo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=t,so(ho),so(fo),co(fo,t)):so(ho),co(ho,n)}var No=a.unstable_runWithPriority,So=a.unstable_scheduleCallback,Co=a.unstable_cancelCallback,To=a.unstable_shouldYield,Po=a.unstable_requestPaint,Oo=a.unstable_now,Ao=a.unstable_getCurrentPriorityLevel,Io=a.unstable_ImmediatePriority,_o=a.unstable_UserBlockingPriority,Ro=a.unstable_NormalPriority,jo=a.unstable_LowPriority,Mo=a.unstable_IdlePriority,Do={},Fo=void 0!==Po?Po:function(){},Uo=null,zo=null,Lo=!1,Bo=Oo(),Wo=1e4>Bo?Oo:function(){return Oo()-Bo};function qo(){switch(Ao()){case Io:return 99;case _o:return 98;case Ro:return 97;case jo:return 96;case Mo:return 95;default:throw Error(i(332))}}function Ho(e){switch(e){case 99:return Io;case 98:return _o;case 97:return Ro;case 96:return jo;case 95:return Mo;default:throw Error(i(332))}}function Vo(e,t){return e=Ho(e),No(e,t)}function Ko(e,t,n){return e=Ho(e),So(e,t,n)}function Go(e){return null===Uo?(Uo=[e],zo=So(Io,Qo)):Uo.push(e),Do}function $o(){if(null!==zo){var e=zo;zo=null,Co(e)}Qo()}function Qo(){if(!Lo&&null!==Uo){Lo=!0;var e=0;try{var t=Uo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Uo=null}catch(t){throw null!==Uo&&(Uo=Uo.slice(e+1)),So(Io,$o),t}finally{Lo=!1}}}var Yo=3;function Xo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Zo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Jo={current:null},ea=null,ta=null,na=null;function ra(){na=ta=ea=null}function oa(e,t){var n=e.type._context;co(Jo,n._currentValue),n._currentValue=t}function aa(e){var t=Jo.current;so(Jo),e.type._context._currentValue=t}function ia(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function la(e,t){ea=e,na=ta=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Bi=!0),e.firstContext=null)}function ua(e,t){if(na!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(na=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ta){if(null===ea)throw Error(i(308));ta=t,ea.dependencies={expirationTime:0,firstContext:t,responders:null}}else ta=ta.next=t;return e._currentValue}var sa=!1;function ca(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function pa(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function fa(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function da(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function ha(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=ca(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=ca(e.memoizedState),o=n.updateQueue=ca(n.memoizedState)):r=e.updateQueue=pa(o):null===o&&(o=n.updateQueue=pa(r));null===o||r===o?da(r,t):null===r.lastUpdate||null===o.lastUpdate?(da(r,t),da(o,t)):(da(r,t),o.lastUpdate=t)}function ma(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=ca(e.memoizedState):va(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function va(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=pa(t)),t}function ya(e,t,n,r,a,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,a):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(a="function"==typeof(e=n.payload)?e.call(i,r,a):e))break;return o({},r,a);case 2:sa=!0}return r}function ga(e,t,n,r,o){sa=!1;for(var a=(t=va(e,t)).baseState,i=null,l=0,u=t.firstUpdate,s=a;null!==u;){var c=u.expirationTime;c<o?(null===i&&(i=u,a=s),l<c&&(l=c)):(pu(c,u.suspenseConfig),s=ya(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var p=u.expirationTime;p<o?(null===c&&(c=u,null===i&&(a=s)),l<p&&(l=p)):(s=ya(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===i&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===c&&(a=s),t.baseState=a,t.firstUpdate=i,t.firstCapturedUpdate=c,fu(l),e.expirationTime=l,e.memoizedState=s}function ba(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),wa(t.firstEffect,n),t.firstEffect=t.lastEffect=null,wa(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function wa(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(i(191,n));n.call(r)}e=e.nextEffect}}var xa=R.ReactCurrentBatchConfig,ka=(new r.Component).refs;function Ea(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Na={isMounted:function(e){return!!(e=e._reactInternalFiber)&&tt(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Zl(),o=xa.suspense;(o=fa(r=Jl(r,e,o),o)).payload=t,null!=n&&(o.callback=n),ha(e,o),eu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Zl(),o=xa.suspense;(o=fa(r=Jl(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),ha(e,o),eu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Zl(),r=xa.suspense;(r=fa(n=Jl(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ha(e,r),eu(e,n)}};function Sa(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!Zr(n,r)||!Zr(o,a))}function Ca(e,t,n){var r=!1,o=po,a=t.contextType;return"object"==typeof a&&null!==a?a=ua(a):(o=yo(t)?mo:fo.current,a=(r=null!=(r=t.contextTypes))?vo(e,o):po),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Na,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ta(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Na.enqueueReplaceState(t,t.state,null)}function Pa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ka;var a=t.contextType;"object"==typeof a&&null!==a?o.context=ua(a):(a=yo(t)?mo:fo.current,o.context=vo(e,a)),null!==(a=e.updateQueue)&&(ga(e,a,n,o,r),o.state=e.memoizedState),"function"==typeof(a=t.getDerivedStateFromProps)&&(Ea(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Na.enqueueReplaceState(o,o.state,null),null!==(a=e.updateQueue)&&(ga(e,a,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Oa=Array.isArray;function Aa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===ka&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Ia(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function _a(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=_u(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Mu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Aa(e,t,n),r.return=e,r):((r=Ru(n.type,n.key,n.props,null,e.mode,r)).ref=Aa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Du(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function p(e,t,n,r,a){return null===t||7!==t.tag?((t=ju(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Mu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case D:return(n=Ru(t.type,t.key,t.props,null,e.mode,n)).ref=Aa(e,null,t),n.return=e,n;case F:return(t=Du(t,e.mode,n)).return=e,t}if(Oa(t)||Y(t))return(t=ju(t,e.mode,n,null)).return=e,t;Ia(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case D:return n.key===o?n.type===U?p(e,t,n.props.children,r,o):s(e,t,n,r):null;case F:return n.key===o?c(e,t,n,r):null}if(Oa(n)||Y(n))return null!==o?null:p(e,t,n,r,null);Ia(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case D:return e=e.get(null===r.key?n:r.key)||null,r.type===U?p(t,e,r.props.children,o,r.key):s(t,e,r,o);case F:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Oa(r)||Y(r))return p(t,e=e.get(n)||null,r,o,null);Ia(t,r)}return null}function m(o,i,l,u){for(var s=null,c=null,p=i,m=i=0,v=null;null!==p&&m<l.length;m++){p.index>m?(v=p,p=null):v=p.sibling;var y=d(o,p,l[m],u);if(null===y){null===p&&(p=v);break}e&&p&&null===y.alternate&&t(o,p),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y,p=v}if(m===l.length)return n(o,p),s;if(null===p){for(;m<l.length;m++)null!==(p=f(o,l[m],u))&&(i=a(p,i,m),null===c?s=p:c.sibling=p,c=p);return s}for(p=r(o,p);m<l.length;m++)null!==(v=h(p,o,m,l[m],u))&&(e&&null!==v.alternate&&p.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&p.forEach((function(e){return t(o,e)})),s}function v(o,l,u,s){var c=Y(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var p=c=null,m=l,v=l=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=d(o,m,g.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,v),null===p?c=b:p.sibling=b,p=b,m=y}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=f(o,g.value,s))&&(l=a(g,l,v),null===p?c=g:p.sibling=g,p=g);return c}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),l=a(g,l,v),null===p?c=g:p.sibling=g,p=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,u){var s="object"==typeof a&&null!==a&&a.type===U&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case D:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?a.type===U:s.elementType===a.type){n(e,s.sibling),(r=o(s,a.type===U?a.props.children:a.props)).ref=Aa(e,s,a),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}a.type===U?((r=ju(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Ru(a.type,a.key,a.props,null,e.mode,u)).ref=Aa(e,r,a),u.return=e,e=u)}return l(e);case F:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Du(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Mu(a,e.mode,u)).return=e,e=r),l(e);if(Oa(a))return m(e,r,a,u);if(Y(a))return v(e,r,a,u);if(c&&Ia(e,a),void 0===a&&!s)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Ra=_a(!0),ja=_a(!1),Ma={},Da={current:Ma},Fa={current:Ma},Ua={current:Ma};function za(e){if(e===Ma)throw Error(i(174));return e}function La(e,t){co(Ua,t),co(Fa,e),co(Da,Ma);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Be(null,"");break;default:t=Be(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}so(Da),co(Da,t)}function Ba(e){so(Da),so(Fa),so(Ua)}function Wa(e){za(Ua.current);var t=za(Da.current),n=Be(t,e.type);t!==n&&(co(Fa,e),co(Da,n))}function qa(e){Fa.current===e&&(so(Da),so(Fa))}var Ha={current:0};function Va(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ka(e,t){return{responder:e,props:t}}var Ga=R.ReactCurrentDispatcher,$a=R.ReactCurrentBatchConfig,Qa=0,Ya=null,Xa=null,Za=null,Ja=null,ei=null,ti=null,ni=0,ri=null,oi=0,ai=!1,ii=null,li=0;function ui(){throw Error(i(321))}function si(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Yr(e[n],t[n]))return!1;return!0}function ci(e,t,n,r,o,a){if(Qa=a,Ya=t,Za=null!==e?e.memoizedState:null,Ga.current=null===Za?Oi:Ai,t=n(r,o),ai){do{ai=!1,li+=1,Za=null!==e?e.memoizedState:null,ti=Ja,ri=ei=Xa=null,Ga.current=Ai,t=n(r,o)}while(ai);ii=null,li=0}if(Ga.current=Pi,(e=Ya).memoizedState=Ja,e.expirationTime=ni,e.updateQueue=ri,e.effectTag|=oi,e=null!==Xa&&null!==Xa.next,Qa=0,ti=ei=Ja=Za=Xa=Ya=null,ni=0,ri=null,oi=0,e)throw Error(i(300));return t}function pi(){Ga.current=Pi,Qa=0,ti=ei=Ja=Za=Xa=Ya=null,ni=0,ri=null,oi=0,ai=!1,ii=null,li=0}function fi(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===ei?Ja=ei=e:ei=ei.next=e,ei}function di(){if(null!==ti)ti=(ei=ti).next,Za=null!==(Xa=Za)?Xa.next:null;else{if(null===Za)throw Error(i(310));var e={memoizedState:(Xa=Za).memoizedState,baseState:Xa.baseState,queue:Xa.queue,baseUpdate:Xa.baseUpdate,next:null};ei=null===ei?Ja=e:ei.next=e,Za=Xa.next}return ei}function hi(e,t){return"function"==typeof t?t(e):t}function mi(e){var t=di(),n=t.queue;if(null===n)throw Error(i(311));if(n.lastRenderedReducer=e,0<li){var r=n.dispatch;if(null!==ii){var o=ii.get(n);if(void 0!==o){ii.delete(n);var a=t.memoizedState;do{a=e(a,o.action),o=o.next}while(null!==o);return Yr(a,t.memoizedState)||(Bi=!0),t.memoizedState=a,t.baseUpdate===n.last&&(t.baseState=a),n.lastRenderedState=a,[a,r]}}return[t.memoizedState,r]}r=n.last;var l=t.baseUpdate;if(a=t.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var u=o=null,s=r,c=!1;do{var p=s.expirationTime;p<Qa?(c||(c=!0,u=l,o=a),p>ni&&fu(ni=p)):(pu(p,s.suspenseConfig),a=s.eagerReducer===e?s.eagerState:e(a,s.action)),l=s,s=s.next}while(null!==s&&s!==r);c||(u=l,o=a),Yr(a,t.memoizedState)||(Bi=!0),t.memoizedState=a,t.baseUpdate=u,t.baseState=o,n.lastRenderedState=a}return[t.memoizedState,n.dispatch]}function vi(e){var t=fi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:hi,lastRenderedState:e}).dispatch=Ti.bind(null,Ya,e),[t.memoizedState,e]}function yi(e){return mi(hi)}function gi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===ri?(ri={lastEffect:null}).lastEffect=e.next=e:null===(t=ri.lastEffect)?ri.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,ri.lastEffect=e),e}function bi(e,t,n,r){var o=fi();oi|=e,o.memoizedState=gi(t,n,void 0,void 0===r?null:r)}function wi(e,t,n,r){var o=di();r=void 0===r?null:r;var a=void 0;if(null!==Xa){var i=Xa.memoizedState;if(a=i.destroy,null!==r&&si(r,i.deps))return void gi(0,n,a,r)}oi|=e,o.memoizedState=gi(t,n,a,r)}function xi(e,t){return bi(516,192,e,t)}function ki(e,t){return wi(516,192,e,t)}function Ei(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ni(){}function Si(e,t){return fi().memoizedState=[e,void 0===t?null:t],e}function Ci(e,t){var n=di();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&si(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ti(e,t,n){if(!(25>li))throw Error(i(301));var r=e.alternate;if(e===Ya||null!==r&&r===Ya)if(ai=!0,e={expirationTime:Qa,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===ii&&(ii=new Map),void 0===(n=ii.get(t)))ii.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var o=Zl(),a=xa.suspense;a={expirationTime:o=Jl(o,e,a),suspenseConfig:a,action:n,eagerReducer:null,eagerState:null,next:null};var l=t.last;if(null===l)a.next=a;else{var u=l.next;null!==u&&(a.next=u),l.next=a}if(t.last=a,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var s=t.lastRenderedState,c=r(s,n);if(a.eagerReducer=r,a.eagerState=c,Yr(c,s))return}catch(e){}eu(e,o)}}var Pi={readContext:ua,useCallback:ui,useContext:ui,useEffect:ui,useImperativeHandle:ui,useLayoutEffect:ui,useMemo:ui,useReducer:ui,useRef:ui,useState:ui,useDebugValue:ui,useResponder:ui,useDeferredValue:ui,useTransition:ui},Oi={readContext:ua,useCallback:Si,useContext:ua,useEffect:xi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,bi(4,36,Ei.bind(null,t,e),n)},useLayoutEffect:function(e,t){return bi(4,36,e,t)},useMemo:function(e,t){var n=fi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=fi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ti.bind(null,Ya,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},fi().memoizedState=e},useState:vi,useDebugValue:Ni,useResponder:Ka,useDeferredValue:function(e,t){var n=vi(e),r=n[0],o=n[1];return xi((function(){a.unstable_next((function(){var n=$a.suspense;$a.suspense=void 0===t?null:t;try{o(e)}finally{$a.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=vi(!1),n=t[0],r=t[1];return[Si((function(t){r(!0),a.unstable_next((function(){var n=$a.suspense;$a.suspense=void 0===e?null:e;try{r(!1),t()}finally{$a.suspense=n}}))}),[e,n]),n]}},Ai={readContext:ua,useCallback:Ci,useContext:ua,useEffect:ki,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,wi(4,36,Ei.bind(null,t,e),n)},useLayoutEffect:function(e,t){return wi(4,36,e,t)},useMemo:function(e,t){var n=di();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&si(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:mi,useRef:function(){return di().memoizedState},useState:yi,useDebugValue:Ni,useResponder:Ka,useDeferredValue:function(e,t){var n=yi(),r=n[0],o=n[1];return ki((function(){a.unstable_next((function(){var n=$a.suspense;$a.suspense=void 0===t?null:t;try{o(e)}finally{$a.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=yi(),n=t[0],r=t[1];return[Ci((function(t){r(!0),a.unstable_next((function(){var n=$a.suspense;$a.suspense=void 0===e?null:e;try{r(!1),t()}finally{$a.suspense=n}}))}),[e,n]),n]}},Ii=null,_i=null,Ri=!1;function ji(e,t){var n=Au(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Mi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Di(e){if(Ri){var t=_i;if(t){var n=t;if(!Mi(e,t)){if(!(t=nr(n.nextSibling))||!Mi(e,t))return e.effectTag=-1025&e.effectTag|2,Ri=!1,void(Ii=e);ji(Ii,n)}Ii=e,_i=nr(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ri=!1,Ii=e}}function Fi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ii=e}function Ui(e){if(e!==Ii)return!1;if(!Ri)return Fi(e),Ri=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Jn(t,e.memoizedProps))for(t=_i;t;)ji(e,t),t=nr(t.nextSibling);if(Fi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){_i=nr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}_i=null}}else _i=Ii?nr(e.stateNode.nextSibling):null;return!0}function zi(){_i=Ii=null,Ri=!1}var Li=R.ReactCurrentOwner,Bi=!1;function Wi(e,t,n,r){t.child=null===e?ja(t,null,n,r):Ra(t,e.child,n,r)}function qi(e,t,n,r,o){n=n.render;var a=t.ref;return la(t,o),r=ci(e,t,n,r,a,o),null===e||Bi?(t.effectTag|=1,Wi(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),al(e,t,o))}function Hi(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Iu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ru(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Vi(e,t,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:Zr)(o,r)&&e.ref===t.ref)?al(e,t,a):(t.effectTag|=1,(e=_u(i,r)).ref=t.ref,e.return=t,t.child=e)}function Vi(e,t,n,r,o,a){return null!==e&&Zr(e.memoizedProps,r)&&e.ref===t.ref&&(Bi=!1,o<a)?al(e,t,a):Gi(e,t,n,r,a)}function Ki(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Gi(e,t,n,r,o){var a=yo(n)?mo:fo.current;return a=vo(t,a),la(t,o),n=ci(e,t,n,r,a,o),null===e||Bi?(t.effectTag|=1,Wi(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),al(e,t,o))}function $i(e,t,n,r,o){if(yo(n)){var a=!0;ko(t)}else a=!1;if(la(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Ca(t,n,r),Pa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;"object"==typeof s&&null!==s?s=ua(s):s=vo(t,s=yo(n)?mo:fo.current);var c=n.getDerivedStateFromProps,p="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;p||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&Ta(t,i,r,s),sa=!1;var f=t.memoizedState;u=i.state=f;var d=t.updateQueue;null!==d&&(ga(t,d,r,i,o),u=t.memoizedState),l!==r||f!==u||ho.current||sa?("function"==typeof c&&(Ea(t,n,c,r),u=t.memoizedState),(l=sa||Sa(t,n,l,r,f,u,s))?(p||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,l=t.memoizedProps,i.props=t.type===t.elementType?l:Zo(t.type,l),u=i.context,"object"==typeof(s=n.contextType)&&null!==s?s=ua(s):s=vo(t,s=yo(n)?mo:fo.current),(p="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&Ta(t,i,r,s),sa=!1,u=t.memoizedState,f=i.state=u,null!==(d=t.updateQueue)&&(ga(t,d,r,i,o),f=t.memoizedState),l!==r||u!==f||ho.current||sa?("function"==typeof c&&(Ea(t,n,c,r),f=t.memoizedState),(c=sa||Sa(t,n,l,r,u,f,s))?(p||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,f,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,f,s)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=f),i.props=r,i.state=f,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Qi(e,t,n,r,a,o)}function Qi(e,t,n,r,o,a){Ki(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&Eo(t,n,!1),al(e,t,a);r=t.stateNode,Li.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=Ra(t,e.child,null,a),t.child=Ra(t,null,l,a)):Wi(e,t,l,a),t.memoizedState=r.state,o&&Eo(t,n,!0),t.child}function Yi(e){var t=e.stateNode;t.pendingContext?wo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&wo(0,t.context,!1),La(e,t.containerInfo)}var Xi,Zi,Ji,el={dehydrated:null,retryTime:0};function tl(e,t,n){var r,o=t.mode,a=t.pendingProps,i=Ha.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),co(Ha,1&i),null===e){if(void 0!==a.fallback&&Di(t),l){if(l=a.fallback,(a=ju(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=ju(l,o,n,null)).return=t,a.sibling=n,t.memoizedState=el,t.child=a,n}return o=a.children,t.memoizedState=null,t.child=ja(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(a=a.fallback,(n=_u(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=_u(o,a,o.expirationTime)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=el,t.child=n,o}return n=Ra(t,e.child,a.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=a.fallback,(a=ju(null,o,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=ju(l,o,n,null)).return=t,a.sibling=n,n.effectTag|=2,a.childExpirationTime=0,t.memoizedState=el,t.child=a,n}return t.memoizedState=null,t.child=Ra(t,e,a.children,n)}function nl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ia(e.return,t)}function rl(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=o,i.lastEffect=a)}function ol(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Wi(e,t,r.children,n),0!=(2&(r=Ha.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&nl(e,n);else if(19===e.tag)nl(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Ha,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Va(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),rl(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Va(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}rl(t,!0,n,null,a,t.lastEffect);break;case"together":rl(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function al(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&fu(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=_u(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=_u(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function il(e){e.effectTag|=4}function ll(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ul(e){switch(e.tag){case 1:yo(e.type)&&go();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ba(),bo(),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return qa(e),null;case 13:return so(Ha),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return so(Ha),null;case 4:return Ba(),null;case 10:return aa(e),null;default:return null}}function sl(e,t){return{value:e,source:t,stack:Z(t)}}Xi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Zi=function(e,t,n,r,a){var i=e.memoizedProps;if(i!==r){var l,u,s=t.stateNode;switch(za(Da.current),e=null,n){case"input":i=Ce(s,i),r=Ce(s,r),e=[];break;case"option":i=_e(s,i),r=_e(s,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=je(s,i),r=je(s,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(s.onclick=Hn)}for(l in Bn(n,r),n=null,i)if(!r.hasOwnProperty(l)&&i.hasOwnProperty(l)&&null!=i[l])if("style"===l)for(u in s=i[l])s.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(d.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var c=r[l];if(s=null!=i?i[l]:void 0,r.hasOwnProperty(l)&&c!==s&&(null!=c||null!=s))if("style"===l)if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(n||(n={}),n[u]=c[u])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(l,""+c)):"children"===l?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(d.hasOwnProperty(l)?(null!=c&&qn(a,l),e||s===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&il(t)}},Ji=function(e,t,n,r){n!==r&&il(t)};var cl="function"==typeof WeakSet?WeakSet:Set;function pl(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=Z(n)),null!==n&&X(n.type),t=t.value,null!==e&&1===e.tag&&X(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function fl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Nu(e,t)}else t.current=null}function dl(e,t){switch(t.tag){case 0:case 11:case 15:hl(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Zo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(i(163))}}function hl(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}0!=(r.tag&t)&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function ml(e,t,n){switch("function"==typeof Pu&&Pu(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Vo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){Nu(o,e)}}e=e.next}while(e!==r)}))}break;case 1:fl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Nu(e,t)}}(t,n);break;case 5:fl(t);break;case 4:bl(e,t,n)}}function vl(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&vl(t)}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function gl(e){e:{for(var t=e.return;null!==t;){if(yl(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(He(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){var a=5===o.tag||6===o.tag;if(a){var l=a?o.stateNode:o.stateNode.instance;if(n)if(r){var u=l;l=n,8===(a=t).nodeType?a.parentNode.insertBefore(u,l):a.insertBefore(u,l)}else t.insertBefore(l,n);else r?(8===(u=t).nodeType?(a=u.parentNode).insertBefore(l,u):(a=u).appendChild(l),null!=(u=u._reactRootContainer)||null!==a.onclick||(a.onclick=Hn)):t.appendChild(l)}else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function bl(e,t,n){for(var r,o,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(i(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var u=e,s=a,c=n,p=s;;)if(ml(u,p,c),null!==p.child&&4!==p.tag)p.child.return=p,p=p.child;else{if(p===s)break;for(;null===p.sibling;){if(null===p.return||p.return===s)break e;p=p.return}p.sibling.return=p.return,p=p.sibling}o?(u=r,s=a.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,o=!0,a.child.return=a,a=a.child;continue}}else if(ml(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function wl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:hl(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[ir]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Pe(n,r),Wn(e,o),t=Wn(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?zn(n,u):"dangerouslySetInnerHTML"===l?qe(n,u):"children"===l?He(n,u):ke(n,l,u,t)}switch(e){case"input":Oe(n,r);break;case"textarea":De(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Re(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Re(n,!!r.multiple,r.defaultValue,!0):Re(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(i(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,Ct(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Ll=Wo()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,a.style.display=Un("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}xl(t);break;case 19:xl(t);break;case 17:case 20:case 21:break;default:throw Error(i(163))}}function xl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new cl),t.forEach((function(t){var r=Cu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var kl="function"==typeof WeakMap?WeakMap:Map;function El(e,t,n){(n=fa(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,ql=r),pl(e,t)},n}function Nl(e,t,n){(n=fa(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return pl(e,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Hl?Hl=new Set([this]):Hl.add(this),pl(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Sl,Cl=Math.ceil,Tl=R.ReactCurrentDispatcher,Pl=R.ReactCurrentOwner,Ol=0,Al=null,Il=null,_l=0,Rl=0,jl=null,Ml=1073741823,Dl=1073741823,Fl=null,Ul=0,zl=!1,Ll=0,Bl=null,Wl=!1,ql=null,Hl=null,Vl=!1,Kl=null,Gl=90,$l=null,Ql=0,Yl=null,Xl=0;function Zl(){return 0!=(48&Ol)?1073741821-(Wo()/10|0):0!==Xl?Xl:Xl=1073741821-(Wo()/10|0)}function Jl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=qo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Ol))return _l;if(null!==n)e=Xo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Xo(e,150,100);break;case 97:case 96:e=Xo(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==Al&&e===_l&&--e,e}function eu(e,t){if(50<Ql)throw Ql=0,Yl=null,Error(i(185));if(null!==(e=tu(e,t))){var n=qo();1073741823===t?0!=(8&Ol)&&0==(48&Ol)?au(e):(ru(e),0===Ol&&$o()):ru(e),0==(4&Ol)||98!==n&&99!==n||(null===$l?$l=new Map([[e,t]]):(void 0===(n=$l.get(e))||n>t)&&$l.set(e,t))}}function tu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Al===o&&(fu(t),4===Rl&&zu(o,_l)),Lu(o,t)),o}function nu(e){var t=e.lastExpiredTime;return 0!==t?t:Uu(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function ru(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Go(au.bind(null,e));else{var t=nu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Zl();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Do&&Co(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Go(au.bind(null,e)):Ko(r,ou.bind(null,e),{timeout:10*(1073741821-t)-Wo()}),e.callbackNode=t}}}function ou(e,t){if(Xl=0,t)return Bu(e,t=Zl()),ru(e),null;var n=nu(e);if(0!==n){if(t=e.callbackNode,0!=(48&Ol))throw Error(i(327));if(xu(),e===Al&&n===_l||uu(e,n),null!==Il){var r=Ol;Ol|=16;for(var o=cu();;)try{hu();break}catch(t){su(e,t)}if(ra(),Ol=r,Tl.current=o,1===Rl)throw t=jl,uu(e,n),zu(e,n),ru(e),t;if(null===Il)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Rl,Al=null,r){case 0:case 1:throw Error(i(345));case 2:Bu(e,2<n?2:n);break;case 3:if(zu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=yu(o)),1073741823===Ml&&10<(o=Ll+500-Wo())){if(zl){var a=e.lastPingedTime;if(0===a||a>=n){e.lastPingedTime=n,uu(e,n);break}}if(0!==(a=nu(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=er(gu.bind(null,e),o);break}gu(e);break;case 4:if(zu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=yu(o)),zl&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,uu(e,n);break}if(0!==(o=nu(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Dl?r=10*(1073741821-Dl)-Wo():1073741823===Ml?r=0:(r=10*(1073741821-Ml)-5e3,0>(r=(o=Wo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Cl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=er(gu.bind(null,e),r);break}gu(e);break;case 5:if(1073741823!==Ml&&null!==Fl){a=Ml;var l=Fl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(a=Wo()-(10*(1073741821-a)-(0|l.timeoutMs||5e3)))<=o?0:o+r-a),10<r){zu(e,n),e.timeoutHandle=er(gu.bind(null,e),r);break}}gu(e);break;default:throw Error(i(329))}if(ru(e),e.callbackNode===t)return ou.bind(null,e)}}return null}function au(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)gu(e);else{if(0!=(48&Ol))throw Error(i(327));if(xu(),e===Al&&t===_l||uu(e,t),null!==Il){var n=Ol;Ol|=16;for(var r=cu();;)try{du();break}catch(t){su(e,t)}if(ra(),Ol=n,Tl.current=r,1===Rl)throw n=jl,uu(e,t),zu(e,t),ru(e),n;if(null!==Il)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Al=null,gu(e),ru(e)}}return null}function iu(e,t){var n=Ol;Ol|=1;try{return e(t)}finally{0===(Ol=n)&&$o()}}function lu(e,t){var n=Ol;Ol&=-2,Ol|=8;try{return e(t)}finally{0===(Ol=n)&&$o()}}function uu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,tr(n)),null!==Il)for(n=Il.return;null!==n;){var r=n;switch(r.tag){case 1:var o=r.type.childContextTypes;null!=o&&go();break;case 3:Ba(),bo();break;case 5:qa(r);break;case 4:Ba();break;case 13:case 19:so(Ha);break;case 10:aa(r)}n=n.return}Al=e,Il=_u(e.current,null),_l=t,Rl=0,jl=null,Dl=Ml=1073741823,Fl=null,Ul=0,zl=!1}function su(e,t){for(;;){try{if(ra(),pi(),null===Il||null===Il.return)return Rl=1,jl=t,null;e:{var n=e,r=Il.return,o=Il,a=t;if(t=_l,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==a&&"object"==typeof a&&"function"==typeof a.then){var i=a,l=0!=(1&Ha.current),u=r;do{var s;if(s=13===u.tag){var c=u.memoizedState;if(null!==c)s=null!==c.dehydrated;else{var p=u.memoizedProps;s=void 0!==p.fallback&&(!0!==p.unstable_avoidThisFallback||!l)}}if(s){var f=u.updateQueue;if(null===f){var d=new Set;d.add(i),u.updateQueue=d}else f.add(i);if(0==(2&u.mode)){if(u.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var h=fa(1073741823,null);h.tag=2,ha(o,h)}o.expirationTime=1073741823;break e}a=void 0,o=t;var m=n.pingCache;if(null===m?(m=n.pingCache=new kl,a=new Set,m.set(i,a)):void 0===(a=m.get(i))&&(a=new Set,m.set(i,a)),!a.has(o)){a.add(o);var v=Su.bind(null,n,i,o);i.then(v,v)}u.effectTag|=4096,u.expirationTime=t;break e}u=u.return}while(null!==u);a=Error((X(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+Z(o))}5!==Rl&&(Rl=2),a=sl(a,o),u=r;do{switch(u.tag){case 3:i=a,u.effectTag|=4096,u.expirationTime=t,ma(u,El(u,i,t));break e;case 1:i=a;var y=u.type,g=u.stateNode;if(0==(64&u.effectTag)&&("function"==typeof y.getDerivedStateFromError||null!==g&&"function"==typeof g.componentDidCatch&&(null===Hl||!Hl.has(g)))){u.effectTag|=4096,u.expirationTime=t,ma(u,Nl(u,i,t));break e}}u=u.return}while(null!==u)}Il=vu(Il)}catch(e){t=e;continue}break}}function cu(){var e=Tl.current;return Tl.current=Pi,null===e?Pi:e}function pu(e,t){e<Ml&&2<e&&(Ml=e),null!==t&&e<Dl&&2<e&&(Dl=e,Fl=t)}function fu(e){e>Ul&&(Ul=e)}function du(){for(;null!==Il;)Il=mu(Il)}function hu(){for(;null!==Il&&!To();)Il=mu(Il)}function mu(e){var t=Sl(e.alternate,e,_l);return e.memoizedProps=e.pendingProps,null===t&&(t=vu(e)),Pl.current=null,t}function vu(e){Il=e;do{var t=Il.alternate;if(e=Il.return,0==(2048&Il.effectTag)){e:{var n=t,r=_l,a=(t=Il).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:yo(t.type)&&go();break;case 3:Ba(),bo(),(a=t.stateNode).pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),(null===n||null===n.child)&&Ui(t)&&il(t);break;case 5:qa(t),r=za(Ua.current);var l=t.type;if(null!==n&&null!=t.stateNode)Zi(n,t,l,a,r),n.ref!==t.ref&&(t.effectTag|=128);else if(a){var u=za(Da.current);if(Ui(t)){var s=(a=t).stateNode;n=a.type;var c=a.memoizedProps,p=r;switch(s[ar]=a,s[ir]=c,l=void 0,r=s,n){case"iframe":case"object":case"embed":Sn("load",r);break;case"video":case"audio":for(s=0;s<et.length;s++)Sn(et[s],r);break;case"source":Sn("error",r);break;case"img":case"image":case"link":Sn("error",r),Sn("load",r);break;case"form":Sn("reset",r),Sn("submit",r);break;case"details":Sn("toggle",r);break;case"input":Te(r,c),Sn("invalid",r),qn(p,"onChange");break;case"select":r._wrapperState={wasMultiple:!!c.multiple},Sn("invalid",r),qn(p,"onChange");break;case"textarea":Me(r,c),Sn("invalid",r),qn(p,"onChange")}for(l in Bn(n,c),s=null,c)c.hasOwnProperty(l)&&(u=c[l],"children"===l?"string"==typeof u?r.textContent!==u&&(s=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(s=["children",""+u]):d.hasOwnProperty(l)&&null!=u&&qn(p,l));switch(n){case"input":Ne(r),Ae(r,c,!0);break;case"textarea":Ne(r),Fe(r);break;case"select":case"option":break;default:"function"==typeof c.onClick&&(r.onclick=Hn)}l=s,a.updateQueue=l,(a=null!==l)&&il(t)}else{n=t,p=l,c=a,s=9===r.nodeType?r:r.ownerDocument,u===Ue&&(u=Le(p)),u===Ue?"script"===p?((c=s.createElement("div")).innerHTML="<script><\/script>",s=c.removeChild(c.firstChild)):"string"==typeof c.is?s=s.createElement(p,{is:c.is}):(s=s.createElement(p),"select"===p&&(p=s,c.multiple?p.multiple=!0:c.size&&(p.size=c.size))):s=s.createElementNS(u,p),(c=s)[ar]=n,c[ir]=a,Xi(c,t),t.stateNode=c;var f=r,h=Wn(p=l,n=a);switch(p){case"iframe":case"object":case"embed":Sn("load",c),r=n;break;case"video":case"audio":for(r=0;r<et.length;r++)Sn(et[r],c);r=n;break;case"source":Sn("error",c),r=n;break;case"img":case"image":case"link":Sn("error",c),Sn("load",c),r=n;break;case"form":Sn("reset",c),Sn("submit",c),r=n;break;case"details":Sn("toggle",c),r=n;break;case"input":Te(c,n),r=Ce(c,n),Sn("invalid",c),qn(f,"onChange");break;case"option":r=_e(c,n);break;case"select":c._wrapperState={wasMultiple:!!n.multiple},r=o({},n,{value:void 0}),Sn("invalid",c),qn(f,"onChange");break;case"textarea":Me(c,n),r=je(c,n),Sn("invalid",c),qn(f,"onChange");break;default:r=n}Bn(p,r),s=void 0,u=p;var m=c,v=r;for(s in v)if(v.hasOwnProperty(s)){var y=v[s];"style"===s?zn(m,y):"dangerouslySetInnerHTML"===s?null!=(y=y?y.__html:void 0)&&qe(m,y):"children"===s?"string"==typeof y?("textarea"!==u||""!==y)&&He(m,y):"number"==typeof y&&He(m,""+y):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(d.hasOwnProperty(s)?null!=y&&qn(f,s):null!=y&&ke(m,s,y,h))}switch(p){case"input":Ne(c),Ae(c,n,!1);break;case"textarea":Ne(c),Fe(c);break;case"option":null!=n.value&&c.setAttribute("value",""+xe(n.value));break;case"select":(r=c).multiple=!!n.multiple,null!=(c=n.value)?Re(r,!!n.multiple,c,!1):null!=n.defaultValue&&Re(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(c.onclick=Hn)}(a=Zn(l,a))&&il(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(i(166));break;case 6:if(n&&null!=t.stateNode)Ji(0,t,n.memoizedProps,a);else{if("string"!=typeof a&&null===t.stateNode)throw Error(i(166));r=za(Ua.current),za(Da.current),Ui(t)?(l=(a=t).stateNode,r=a.memoizedProps,l[ar]=a,(a=l.nodeValue!==r)&&il(t)):(l=t,(a=(9===r.nodeType?r:r.ownerDocument).createTextNode(a))[ar]=l,t.stateNode=a)}break;case 11:break;case 13:if(so(Ha),a=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}a=null!==a,l=!1,null===n?void 0!==t.memoizedProps.fallback&&Ui(t):(l=null!==(r=n.memoizedState),a||null===r||null!==(r=n.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=r,r.nextEffect=c):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),a&&!l&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ha.current)?0===Rl&&(Rl=3):(0!==Rl&&3!==Rl||(Rl=4),0!==Ul&&null!==Al&&(zu(Al,_l),Lu(Al,Ul)))),(a||l)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Ba();break;case 10:aa(t);break;case 9:case 14:break;case 17:yo(t.type)&&go();break;case 19:if(so(Ha),null===(a=t.memoizedState))break;if(l=0!=(64&t.effectTag),null===(c=a.rendering)){if(l)ll(a,!1);else if(0!==Rl||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(c=Va(n))){for(t.effectTag|=64,ll(a,!1),null!==(l=c.updateQueue)&&(t.updateQueue=l,t.effectTag|=4),null===a.lastEffect&&(t.firstEffect=null),t.lastEffect=a.lastEffect,a=r,l=t.child;null!==l;)n=a,(r=l).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(c=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=c.childExpirationTime,r.expirationTime=c.expirationTime,r.child=c.child,r.memoizedProps=c.memoizedProps,r.memoizedState=c.memoizedState,r.updateQueue=c.updateQueue,n=c.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),l=l.sibling;co(Ha,1&Ha.current|2),t=t.child;break e}n=n.sibling}}else{if(!l)if(null!==(n=Va(c))){if(t.effectTag|=64,l=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),ll(a,!0),null===a.tail&&"hidden"===a.tailMode&&!c.alternate){null!==(t=t.lastEffect=a.lastEffect)&&(t.nextEffect=null);break}}else Wo()>a.tailExpiration&&1<r&&(t.effectTag|=64,l=!0,ll(a,!1),t.expirationTime=t.childExpirationTime=r-1);a.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=a.last)?r.sibling=c:t.child=c,a.last=c)}if(null!==a.tail){0===a.tailExpiration&&(a.tailExpiration=Wo()+500),r=a.tail,a.rendering=r,a.tail=r.sibling,a.lastEffect=t.lastEffect,r.sibling=null,a=Ha.current,co(Ha,a=l?1&a|2:1&a),t=r;break e}break;case 20:case 21:break;default:throw Error(i(156,t.tag))}t=null}if(a=Il,1===_l||1!==a.childExpirationTime){for(l=0,r=a.child;null!==r;)(n=r.expirationTime)>l&&(l=n),(c=r.childExpirationTime)>l&&(l=c),r=r.sibling;a.childExpirationTime=l}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Il.firstEffect),null!==Il.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Il.firstEffect),e.lastEffect=Il.lastEffect),1<Il.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Il:e.firstEffect=Il,e.lastEffect=Il))}else{if(null!==(t=ul(Il)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Il.sibling))return t;Il=e}while(null!==Il);return 0===Rl&&(Rl=5),null}function yu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function gu(e){var t=qo();return Vo(99,bu.bind(null,e,t)),null}function bu(e,t){do{xu()}while(null!==Kl);if(0!=(48&Ol))throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=yu(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Al&&(Il=Al=null,_l=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var a=Ol;Ol|=32,Pl.current=null,Yn=Nn;var l=$n();if(Qn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var s=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(s&&0!==s.rangeCount){u=s.anchorNode;var c=s.anchorOffset,p=s.focusNode;s=s.focusOffset;try{u.nodeType,p.nodeType}catch(e){u=null;break e}var f=0,d=-1,h=-1,m=0,v=0,y=l,g=null;t:for(;;){for(var b;y!==u||0!==c&&3!==y.nodeType||(d=f+c),y!==p||0!==s&&3!==y.nodeType||(h=f+s),3===y.nodeType&&(f+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===l)break t;if(g===u&&++m===c&&(d=f),g===p&&++v===s&&(h=f),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}u=-1===d||-1===h?null:{start:d,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;Xn={focusedElem:l,selectionRange:u},Nn=!1,Bl=o;do{try{wu()}catch(e){if(null===Bl)throw Error(i(330));Nu(Bl,e),Bl=Bl.nextEffect}}while(null!==Bl);Bl=o;do{try{for(l=e,u=t;null!==Bl;){var w=Bl.effectTag;if(16&w&&He(Bl.stateNode,""),128&w){var x=Bl.alternate;if(null!==x){var k=x.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&w){case 2:gl(Bl),Bl.effectTag&=-3;break;case 6:gl(Bl),Bl.effectTag&=-3,wl(Bl.alternate,Bl);break;case 1024:Bl.effectTag&=-1025;break;case 1028:Bl.effectTag&=-1025,wl(Bl.alternate,Bl);break;case 4:wl(Bl.alternate,Bl);break;case 8:bl(l,c=Bl,u),vl(c)}Bl=Bl.nextEffect}}catch(e){if(null===Bl)throw Error(i(330));Nu(Bl,e),Bl=Bl.nextEffect}}while(null!==Bl);if(k=Xn,x=$n(),w=k.focusedElem,u=k.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==u&&Qn(w)&&(x=u.start,void 0===(k=u.end)&&(k=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(k,w.value.length)):(k=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(k=k.getSelection(),c=w.textContent.length,l=Math.min(u.start,c),u=void 0===u.end?l:Math.min(u.end,c),!k.extend&&l>u&&(c=u,u=l,l=c),c=Gn(w,l),p=Gn(w,u),c&&p&&(1!==k.rangeCount||k.anchorNode!==c.node||k.anchorOffset!==c.offset||k.focusNode!==p.node||k.focusOffset!==p.offset)&&((x=x.createRange()).setStart(c.node,c.offset),k.removeAllRanges(),l>u?(k.addRange(x),k.extend(p.node,p.offset)):(x.setEnd(p.node,p.offset),k.addRange(x))))),x=[];for(k=w;k=k.parentNode;)1===k.nodeType&&x.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(k=x[w]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Xn=null,Nn=!!Yn,Yn=null,e.current=n,Bl=o;do{try{for(w=r;null!==Bl;){var E=Bl.effectTag;if(36&E){var N=Bl.alternate;switch(k=w,(x=Bl).tag){case 0:case 11:case 15:hl(16,32,x);break;case 1:var S=x.stateNode;if(4&x.effectTag)if(null===N)S.componentDidMount();else{var C=x.elementType===x.type?N.memoizedProps:Zo(x.type,N.memoizedProps);S.componentDidUpdate(C,N.memoizedState,S.__reactInternalSnapshotBeforeUpdate)}var T=x.updateQueue;null!==T&&ba(0,T,S);break;case 3:var P=x.updateQueue;if(null!==P){if(l=null,null!==x.child)switch(x.child.tag){case 5:l=x.child.stateNode;break;case 1:l=x.child.stateNode}ba(0,P,l)}break;case 5:var O=x.stateNode;null===N&&4&x.effectTag&&Zn(x.type,x.memoizedProps)&&O.focus();break;case 6:case 4:case 12:break;case 13:if(null===x.memoizedState){var A=x.alternate;if(null!==A){var I=A.memoizedState;if(null!==I){var _=I.dehydrated;null!==_&&Ct(_)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(i(163))}}if(128&E){x=void 0;var R=Bl.ref;if(null!==R){var j=Bl.stateNode;switch(Bl.tag){case 5:x=j;break;default:x=j}"function"==typeof R?R(x):R.current=x}}Bl=Bl.nextEffect}}catch(e){if(null===Bl)throw Error(i(330));Nu(Bl,e),Bl=Bl.nextEffect}}while(null!==Bl);Bl=null,Fo(),Ol=a}else e.current=n;if(Vl)Vl=!1,Kl=e,Gl=t;else for(Bl=o;null!==Bl;)t=Bl.nextEffect,Bl.nextEffect=null,Bl=t;if(0===(t=e.firstPendingTime)&&(Hl=null),1073741823===t?e===Yl?Ql++:(Ql=0,Yl=e):Ql=0,"function"==typeof Tu&&Tu(n.stateNode,r),ru(e),Wl)throw Wl=!1,e=ql,ql=null,e;return 0!=(8&Ol)?null:($o(),null)}function wu(){for(;null!==Bl;){var e=Bl.effectTag;0!=(256&e)&&dl(Bl.alternate,Bl),0==(512&e)||Vl||(Vl=!0,Ko(97,(function(){return xu(),null}))),Bl=Bl.nextEffect}}function xu(){if(90!==Gl){var e=97<Gl?97:Gl;return Gl=90,Vo(e,ku)}}function ku(){if(null===Kl)return!1;var e=Kl;if(Kl=null,0!=(48&Ol))throw Error(i(331));var t=Ol;for(Ol|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:hl(128,0,n),hl(0,64,n)}}catch(t){if(null===e)throw Error(i(330));Nu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Ol=t,$o(),!0}function Eu(e,t,n){ha(e,t=El(e,t=sl(n,t),1073741823)),null!==(e=tu(e,1073741823))&&ru(e)}function Nu(e,t){if(3===e.tag)Eu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Eu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r))){ha(n,e=Nl(n,e=sl(t,e),1073741823)),null!==(n=tu(n,1073741823))&&ru(n);break}}n=n.return}}function Su(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Al===e&&_l===n?4===Rl||3===Rl&&1073741823===Ml&&Wo()-Ll<500?uu(e,_l):zl=!0:Uu(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),ru(e)))}function Cu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Jl(t=Zl(),e,null)),null!==(e=tu(e,t))&&ru(e)}Sl=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||ho.current)Bi=!0;else{if(r<n){switch(Bi=!1,t.tag){case 3:Yi(t),zi();break;case 5:if(Wa(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:yo(t.type)&&ko(t);break;case 4:La(t,t.stateNode.containerInfo);break;case 10:oa(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?tl(e,t,n):(co(Ha,1&Ha.current),null!==(t=al(e,t,n))?t.sibling:null);co(Ha,1&Ha.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return ol(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),co(Ha,Ha.current),!r)return null}return al(e,t,n)}Bi=!1}}else Bi=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=vo(t,fo.current),la(t,n),o=ci(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,pi(),yo(r)){var a=!0;ko(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&Ea(t,r,l,e),o.updater=Na,t.stateNode=o,o._reactInternalFiber=t,Pa(t,r,e,n),t=Qi(null,t,r,!0,a,n)}else t.tag=0,Wi(null,t,o,n),t=t.child;return t;case 16:if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,a=t.tag=function(e){if("function"==typeof e)return Iu(e)?1:0;if(null!=e){if((e=e.$$typeof)===H)return 11;if(e===G)return 14}return 2}(o),e=Zo(o,e),a){case 0:t=Gi(null,t,o,e,n);break;case 1:t=$i(null,t,o,e,n);break;case 11:t=qi(null,t,o,e,n);break;case 14:t=Hi(null,t,o,Zo(o.type,e),r,n);break;default:throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Gi(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 1:return r=t.type,o=t.pendingProps,$i(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 3:if(Yi(t),null===(r=t.updateQueue))throw Error(i(282));if(o=null!==(o=t.memoizedState)?o.element:null,ga(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o)zi(),t=al(e,t,n);else{if((o=t.stateNode.hydrate)&&(_i=nr(t.stateNode.containerInfo.firstChild),Ii=t,o=Ri=!0),o)for(n=ja(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Wi(e,t,r,n),zi();t=t.child}return t;case 5:return Wa(t),null===e&&Di(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Jn(r,o)?l=null:null!==a&&Jn(r,a)&&(t.effectTag|=16),Ki(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Wi(e,t,l,n),t=t.child),t;case 6:return null===e&&Di(t),null;case 13:return tl(e,t,n);case 4:return La(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ra(t,null,r,n):Wi(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,qi(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 7:return Wi(e,t,t.pendingProps,n),t.child;case 8:case 12:return Wi(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,l=t.memoizedProps,oa(t,a=o.value),null!==l){var u=l.value;if(0===(a=Yr(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!ho.current){t=al(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===u.tag&&((c=fa(n,null)).tag=2,ha(u,c)),u.expirationTime<n&&(u.expirationTime=n),null!==(c=u.alternate)&&c.expirationTime<n&&(c.expirationTime=n),ia(u.return,n),s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}}Wi(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,la(t,n),r=r(o=ua(o,a.unstable_observedBits)),t.effectTag|=1,Wi(e,t,r,n),t.child;case 14:return a=Zo(o=t.type,t.pendingProps),Hi(e,t,o,a=Zo(o.type,a),r,n);case 15:return Vi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Zo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,yo(r)?(e=!0,ko(t)):e=!1,la(t,n),Ca(t,r,o),Pa(t,r,o,n),Qi(null,t,r,!0,e,n);case 19:return ol(e,t,n)}throw Error(i(156,t.tag))};var Tu=null,Pu=null;function Ou(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Au(e,t,n,r){return new Ou(e,t,n,r)}function Iu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function _u(e,t){var n=e.alternate;return null===n?((n=Au(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ru(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Iu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case U:return ju(n.children,o,a,t);case q:l=8,o|=7;break;case z:l=8,o|=1;break;case L:return(e=Au(12,n,t,8|o)).elementType=L,e.type=L,e.expirationTime=a,e;case V:return(e=Au(13,n,t,o)).type=V,e.elementType=V,e.expirationTime=a,e;case K:return(e=Au(19,n,t,o)).elementType=K,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case B:l=10;break e;case W:l=9;break e;case H:l=11;break e;case G:l=14;break e;case $:l=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Au(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=a,t}function ju(e,t,n,r){return(e=Au(7,e,r,t)).expirationTime=n,e}function Mu(e,t,n){return(e=Au(6,e,null,t)).expirationTime=n,e}function Du(e,t,n){return(t=Au(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fu(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Uu(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function zu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Lu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Bu(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Wu(e,t,n,r){var o=t.current,a=Zl(),l=xa.suspense;a=Jl(a,o,l);e:if(n){t:{if(tt(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(yo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(yo(s)){n=xo(n,s,u);break e}}n=u}else n=po;return null===t.context?t.context=n:t.pendingContext=n,(t=fa(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ha(o,t),eu(o,a),a}function qu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Hu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Vu(e,t){Hu(e,t),(e=e.alternate)&&Hu(e,t)}function Ku(e,t,n){var r=new Fu(e,t,n=null!=n&&!0===n.hydrate),o=Au(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,e[lr]=r.current,n&&0!==t&&function(e){var t=jn(e);vt.forEach((function(n){Mn(n,e,t)})),yt.forEach((function(n){Mn(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Gu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function $u(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=qu(i);l.call(e)}}Wu(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ku(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=qu(i);u.call(e)}}lu((function(){Wu(t,i,e,o)}))}return qu(i)}function Qu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:F,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Yu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Gu(t))throw Error(i(200));return Qu(e,t,null,n)}Ku.prototype.render=function(e,t){Wu(e,this._internalRoot,null,void 0===t?null:t)},Ku.prototype.unmount=function(e){var t=this._internalRoot,n=void 0===e?null:e,r=t.containerInfo;Wu(null,t,null,(function(){r[lr]=null,null!==n&&n()}))},at=function(e){if(13===e.tag){var t=Xo(Zl(),150,100);eu(e,t),Vu(e,t)}},it=function(e){if(13===e.tag){Zl();var t=Yo++;eu(e,t),Vu(e,t)}},lt=function(e){if(13===e.tag){var t=Zl();eu(e,t=Jl(t,e,null)),Vu(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Oe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=pr(r);if(!o)throw Error(i(90));Se(r),Oe(r,o)}}}break;case"textarea":De(e,n);break;case"select":null!=(t=n.value)&&Re(e,!!n.multiple,t,!1)}},ie=iu,le=function(e,t,n,r){var o=Ol;Ol|=4;try{return Vo(98,e.bind(null,t,n,r))}finally{0===(Ol=o)&&$o()}},ue=function(){0==(49&Ol)&&(function(){if(null!==$l){var e=$l;$l=null,e.forEach((function(e,t){Bu(t,e),ru(t)})),$o()}}(),xu())},se=function(e,t){var n=Ol;Ol|=2;try{return e(t)}finally{0===(Ol=n)&&$o()}};var Xu,Zu,Ju={createPortal:Yu,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=ot(t))?null:e.stateNode},hydrate:function(e,t,n){if(!Gu(t))throw Error(i(200));return $u(null,e,t,!0,n)},render:function(e,t,n){if(!Gu(t))throw Error(i(200));return $u(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!Gu(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return $u(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!Gu(e))throw Error(i(40));return!!e._reactRootContainer&&(lu((function(){$u(null,null,e,!1,(function(){e._reactRootContainer=null,e[lr]=null}))})),!0)},unstable_createPortal:function(){return Yu.apply(void 0,arguments)},unstable_batchedUpdates:iu,flushSync:function(e,t){if(0!=(48&Ol))throw Error(i(187));var n=Ol;Ol|=1;try{return Vo(99,e.bind(null,t))}finally{Ol=n,$o()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[sr,cr,pr,I.injectEventPluginsByName,f,Rt,function(e){T(e,_t)},oe,ae,An,A,xu,{current:!1}]}};Zu=(Xu={findFiberByHostInstance:ur,bundleType:0,version:"16.12.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Tu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Pu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Xu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:R.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=ot(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Zu?Zu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var es={default:Ju},ts=es&&Ju||es;e.exports=ts.default||ts},function(e,t,n){"use strict";e.exports=n(267)},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,a,i,l;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,s=null,c=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(c,0),e}},p=Date.now();t.unstable_now=function(){return Date.now()-p},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(c,0))},o=function(e,t){s=setTimeout(e,t)},a=function(){clearTimeout(s)},i=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,d=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var y=d.now();t.unstable_now=function(){return d.now()-y}}var g=!1,b=null,w=-1,x=5,k=0;i=function(){return t.unstable_now()>=k},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var E=new MessageChannel,N=E.port2;E.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();k=e+x;try{b(!0,e)?N.postMessage(null):(g=!1,b=null)}catch(e){throw N.postMessage(null),e}}else g=!1},r=function(e){b=e,g||(g=!0,N.postMessage(null))},o=function(e,n){w=h((function(){e(t.unstable_now())}),n)},a=function(){m(w),w=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),o=e[r];if(!(void 0!==o&&0<P(o,t)))break e;e[r]=t,e[n]=o,n=r}}function C(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>P(i,n))void 0!==u&&0>P(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>P(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function P(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],A=[],I=1,_=null,R=3,j=!1,M=!1,D=!1;function F(e){for(var t=C(A);null!==t;){if(null===t.callback)T(A);else{if(!(t.startTime<=e))break;T(A),t.sortIndex=t.expirationTime,S(O,t)}t=C(A)}}function U(e){if(D=!1,F(e),!M)if(null!==C(O))M=!0,r(z);else{var t=C(A);null!==t&&o(U,t.startTime-e)}}function z(e,n){M=!1,D&&(D=!1,a()),j=!0;var r=R;try{for(F(n),_=C(O);null!==_&&(!(_.expirationTime>n)||e&&!i());){var l=_.callback;if(null!==l){_.callback=null,R=_.priorityLevel;var u=l(_.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?_.callback=u:_===C(O)&&T(O),F(n)}else T(O);_=C(O)}if(null!==_)var s=!0;else{var c=C(A);null!==c&&o(U,c.startTime-n),s=!1}return s}finally{_=null,R=r,j=!1}}function L(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=l;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,i){var l=t.unstable_now();if("object"==typeof i&&null!==i){var u=i.delay;u="number"==typeof u&&0<u?l+u:l,i="number"==typeof i.timeout?i.timeout:L(e)}else i=L(e),u=l;return e={id:I++,callback:n,priorityLevel:e,startTime:u,expirationTime:i=u+i,sortIndex:-1},u>l?(e.sortIndex=u,S(A,e),null===C(O)&&e===C(A)&&(D?a():D=!0,o(U,u-l))):(e.sortIndex=i,S(O,e),M||j||(M=!0,r(z))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_shouldYield=function(){var e=t.unstable_now();F(e);var n=C(O);return n!==_&&null!==_&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<_.expirationTime||i()},t.unstable_requestPaint=B,t.unstable_continueExecution=function(){M||j||(M=!0,r(z))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return C(O)},t.unstable_Profiling=null},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(0)),i=n(462),l=o(n(444));t.default=()=>{const[e,t]=a.useState([]);return a.useEffect(()=>{l.default.get("http://172.18.0.2:4999/api/values").then(e=>{console.log(e),t(e.data)})},[]),a.default.createElement("div",null,a.default.createElement(i.Header,{as:"h2"},a.default.createElement(i.Icon,{name:"plug"}),a.default.createElement(i.Header.Content,null," Reactivities ")),a.default.createElement(i.List,null,e.map(e=>a.default.createElement(i.List.Item,{key:e.id},e.name))),a.default.createElement("ul",null,e.map(e=>a.default.createElement("li",{key:e.id},e.name))))}},function(e,t,n){"use strict";var r=n(270);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,p=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case p:case f:case i:case u:case l:case h:return e;default:switch(e=e&&e.$$typeof){case c:case d:case y:case v:case s:return e;default:return t}}case a:return t}}}function k(e){return x(e)===f}t.typeOf=x,t.AsyncMode=p,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=s,t.Element=o,t.ForwardRef=d,t.Fragment=i,t.Lazy=y,t.Memo=v,t.Portal=a,t.Profiler=u,t.StrictMode=l,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===l||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===s||e.$$typeof===c||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w)},t.isAsyncMode=function(e){return k(e)||x(e)===p},t.isConcurrentMode=k,t.isContextConsumer=function(e){return x(e)===c},t.isContextProvider=function(e){return x(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return x(e)===d},t.isFragment=function(e){return x(e)===i},t.isLazy=function(e){return x(e)===y},t.isMemo=function(e){return x(e)===v},t.isPortal=function(e){return x(e)===a},t.isProfiler=function(e){return x(e)===u},t.isStrictMode=function(e){return x(e)===l},t.isSuspense=function(e){return x(e)===h}},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e,t){return null!=e&&n.call(e,t)}},function(e,t,n){var r=n(49),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,l=r?r.toStringTag:void 0;e.exports=function(e){var t=a.call(e,l),n=e[l];try{e[l]=void 0;var r=!0}catch(e){}var o=i.call(e);return r&&(t?e[l]=n:delete e[l]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r=n(140);e.exports=function(e){var t=r(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}},function(e,t,n){var r=n(278),o=n(81),a=n(115);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(a||o),string:new r}}},function(e,t,n){var r=n(279),o=n(284),a=n(285),i=n(286),l=n(287);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=a,u.prototype.has=i,u.prototype.set=l,e.exports=u},function(e,t,n){var r=n(80);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t,n){var r=n(40),o=n(281),a=n(31),i=n(154),l=/^\[object .+?Constructor\]$/,u=Function.prototype,s=Object.prototype,c=u.toString,p=s.hasOwnProperty,f=RegExp("^"+c.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!a(e)||o(e))&&(r(e)?f:l).test(i(e))}},function(e,t,n){var r,o=n(282),a=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!a&&a in e}},function(e,t,n){var r=n(28)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(80),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return o.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(80),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(80);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(82),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(82);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(82);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(82);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(83);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(83);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(83);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(83);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(33),o=n(25);e.exports=function(e){return o(e)&&"[object Arguments]"==r(e)}},function(e,t,n){var r=n(84),o=n(65),a=n(300),i=n(301),l=n(51);e.exports=function(e,t,n){t=o(t,e);var u=null==(e=i(e,t))?e:e[l(a(t))];return null==u?void 0:r(u,e,n)}},function(e,t){e.exports=function(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}},function(e,t,n){var r=n(85),o=n(118);e.exports=function(e,t){return t.length<2?e:r(e,o(t,0,-1))}},function(e,t,n){var r=n(156),o=n(157),a=n(53),i=o?function(e,t){return o(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:a;e.exports=i},function(e,t,n){var r=n(159),o=n(161);e.exports=function(e,t){return r(e,t,(function(t,n){return o(e,n)}))}},function(e,t){e.exports=function(e,t){return null!=e&&t in Object(e)}},function(e,t,n){var r=n(86);e.exports=function(e){return(null==e?0:e.length)?r(e,1):[]}},function(e,t,n){var r=n(49),o=n(68),a=n(17),i=r?r.isConcatSpreadable:void 0;e.exports=function(e){return a(e)||o(e)||!!(i&&e&&e[i])}},function(e,t){e.exports=function(e){return e!=e}},function(e,t){e.exports=function(e,t,n){for(var r=n-1,o=e.length;++r<o;)if(e[r]===t)return r;return-1}},function(e,t,n){var r=n(43);e.exports=function(e,t){return r(t,(function(t){return e[t]}))}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(33),o=n(117),a=n(25),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,e.exports=function(e){return a(e)&&o(e.length)&&!!i[r(e)]}},function(e,t,n){var r=n(166)(Object.keys,Object);e.exports=r},function(e,t){e.exports=function(e){return function(t,n,r){for(var o=-1,a=Object(t),i=r(t),l=i.length;l--;){var u=i[e?l:++o];if(!1===n(a[u],u,a))break}return t}}},function(e,t,n){var r=n(34);e.exports=function(e,t){return function(n,o){if(null==n)return n;if(!r(n))return e(n,o);for(var a=n.length,i=t?a:-1,l=Object(n);(t?i--:++i<a)&&!1!==o(l[i],i,l););return n}}},function(e,t,n){var r=n(316),o=n(329),a=n(180);e.exports=function(e){var t=o(e);return 1==t.length&&t[0][2]?a(t[0][0],t[0][1]):function(n){return n===e||r(n,e,t)}}},function(e,t,n){var r=n(92),o=n(126);e.exports=function(e,t,n,a){var i=n.length,l=i,u=!a;if(null==e)return!l;for(e=Object(e);i--;){var s=n[i];if(u&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++i<l;){var c=(s=n[i])[0],p=e[c],f=s[1];if(u&&s[2]){if(void 0===p&&!(c in e))return!1}else{var d=new r;if(a)var h=a(p,f,c,e,t,d);if(!(void 0===h?o(f,p,3,a,d):h))return!1}}return!0}},function(e,t,n){var r=n(81);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(81),o=n(115),a=n(114);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var i=n.__data__;if(!o||i.length<199)return i.push([e,t]),this.size=++n.size,this;n=this.__data__=new a(i)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(92),o=n(169),a=n(325),i=n(326),l=n(45),u=n(17),s=n(71),c=n(88),p="[object Object]",f=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,d,h,m){var v=u(e),y=u(t),g=v?"[object Array]":l(e),b=y?"[object Array]":l(t),w=(g="[object Arguments]"==g?p:g)==p,x=(b="[object Arguments]"==b?p:b)==p,k=g==b;if(k&&s(e)){if(!s(t))return!1;v=!0,w=!1}if(k&&!w)return m||(m=new r),v||c(e)?o(e,t,n,d,h,m):a(e,t,g,n,d,h,m);if(!(1&n)){var E=w&&f.call(e,"__wrapped__"),N=x&&f.call(t,"__wrapped__");if(E||N){var S=E?e.value():e,C=N?t.value():t;return m||(m=new r),h(S,C,n,d,m)}}return!!k&&(m||(m=new r),i(e,t,n,d,h,m))}},function(e,t){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(49),o=n(171),a=n(67),i=n(169),l=n(172),u=n(95),s=r?r.prototype:void 0,c=s?s.valueOf:void 0;e.exports=function(e,t,n,r,s,p,f){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!p(new o(e),new o(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var d=l;case"[object Set]":var h=1&r;if(d||(d=u),e.size!=t.size&&!h)return!1;var m=f.get(e);if(m)return m==t;r|=2,f.set(e,t);var v=i(d(e),d(t),r,s,p,f);return f.delete(e),v;case"[object Symbol]":if(c)return c.call(e)==c.call(t)}return!1}},function(e,t,n){var r=n(173),o=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,a,i,l){var u=1&n,s=r(e),c=s.length;if(c!=r(t).length&&!u)return!1;for(var p=c;p--;){var f=s[p];if(!(u?f in t:o.call(t,f)))return!1}var d=l.get(e);if(d&&l.get(t))return d==t;var h=!0;l.set(e,t),l.set(t,e);for(var m=u;++p<c;){var v=e[f=s[p]],y=t[f];if(a)var g=u?a(y,v,f,t,e,l):a(v,y,f,e,t,l);if(!(void 0===g?v===y||i(v,y,n,a,l):g)){h=!1;break}m||(m="constructor"==f)}if(h&&!m){var b=e.constructor,w=t.constructor;b!=w&&"constructor"in e&&"constructor"in t&&!("function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w)&&(h=!1)}return l.delete(e),l.delete(t),h}},function(e,t,n){var r=n(50)(n(28),"DataView");e.exports=r},function(e,t,n){var r=n(50)(n(28),"Promise");e.exports=r},function(e,t,n){var r=n(179),o=n(22);e.exports=function(e){for(var t=o(e),n=t.length;n--;){var a=t[n],i=e[a];t[n]=[a,i,r(i)]}return t}},function(e,t,n){var r=n(126),o=n(18),a=n(161),i=n(113),l=n(179),u=n(180),s=n(51);e.exports=function(e,t){return i(e)&&l(t)?u(s(e),t):function(n){var i=o(n,e);return void 0===i&&i===t?a(n,e):r(t,i,3)}}},function(e,t,n){var r=n(181),o=n(332),a=n(113),i=n(51);e.exports=function(e){return a(e)?r(i(e)):o(e)}},function(e,t,n){var r=n(85);e.exports=function(e){return function(t){return r(t,e)}}},function(e,t){e.exports=function(e,t,n,r,o){return o(e,(function(e,o,a){n=r?(r=!1,e):t(n,e,o,a)})),n}},function(e,t){var n=Math.max,r=Math.min;e.exports=function(e,t,o){return e>=r(t,o)&&e<n(t,o)}},function(e,t){e.exports=function(e){return e&&e.length?e[0]:void 0}},function(e,t,n){var r=n(54);e.exports=function(e,t){var n;return r(e,(function(e,r,o){return!(n=t(e,r,o))})),!!n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(338);n(5);var o=n(0);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&function(e,t){(Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}(e,t)}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}var d=function(){function e(t){i(this,e),s(this,"handlers",void 0),this.handlers=t.slice(0)}return u(e,[{key:"addHandlers",value:function(t){for(var n=this.handlers.slice(0),r=t.length,o=0;o<r;o+=1)n.push(t[o]);return new e(n)}},{key:"dispatchEvent",value:function(e,t){var n=this.handlers.length-1;if(t){for(var r=n;r>=0;r-=1)this.handlers[r].called||(this.handlers[r].called=!0,this.handlers[r](e));for(var o=n;o>=0;o-=1)this.handlers[o].called=!1}else(0,this.handlers[n])(e)}},{key:"hasHandlers",value:function(){return this.handlers.length>0}},{key:"removeHandlers",value:function(t){for(var n=[],r=this.handlers.length,o=0;o<r;o+=1){var a=this.handlers[o];-1===t.indexOf(a)&&n.push(a)}return new e(n)}}]),e}();function h(e){var t=new Map;return e.forEach((function(e,n){t.set(n,e)})),t}function m(e){return Array.isArray(e)?e:[e]}function v(e){return"document"===e?document:"window"===e?window:function(e){return null!==e&&"object"===a(e)&&e.hasOwnProperty("current")}(e)?e.current||document:e||document}var y=function(){function e(t,n){i(this,e),s(this,"handlerSets",void 0),s(this,"poolName",void 0),this.handlerSets=n,this.poolName=t}return u(e,[{key:"addHandlers",value:function(t,n){var r=h(this.handlerSets);if(r.has(t)){var o=r.get(t);r.set(t,o.addHandlers(n))}else r.set(t,new d(n));return new e(this.poolName,r)}},{key:"dispatchEvent",value:function(e,t){var n=this.handlerSets.get(e),r="default"===this.poolName;n&&n.dispatchEvent(t,r)}},{key:"hasHandlers",value:function(e){if(!e)return this.handlerSets.size>0;var t=this.handlerSets.get(e);return!!t&&t.hasHandlers()}},{key:"removeHandlers",value:function(t,n){var r=h(this.handlerSets);if(!r.has(t))return new e(this.poolName,r);var o=r.get(t).removeHandlers(n);return o.hasHandlers()?r.set(t,o):r.delete(t),new e(this.poolName,r)}}]),e}();s(y,"createByType",(function(e,t,n){var r=new Map;return r.set(t,new d(n)),new y(e,r)}));var g=function(){function e(t){var n=this;i(this,e),s(this,"handlers",new Map),s(this,"pools",new Map),s(this,"target",void 0),s(this,"createEmitter",(function(e){return function(t){n.pools.forEach((function(n){n.dispatchEvent(e,t)}))}})),this.target=t}return u(e,[{key:"addHandlers",value:function(e,t,n){if(this.pools.has(e)){var r=this.pools.get(e);this.pools.set(e,r.addHandlers(t,n))}else this.pools.set(e,y.createByType(e,t,n));this.handlers.has(t)||this.addTargetHandler(t)}},{key:"hasHandlers",value:function(){return this.handlers.size>0}},{key:"removeHandlers",value:function(e,t,n){if(this.pools.has(e)){var r=this.pools.get(e).removeHandlers(t,n);r.hasHandlers()?this.pools.set(e,r):this.pools.delete(e);var o=!1;this.pools.forEach((function(e){return o=o||e.hasHandlers(t)})),o||this.removeTargetHandler(t)}}},{key:"addTargetHandler",value:function(e){var t=this.createEmitter(e);this.handlers.set(e,t),this.target.addEventListener(e,t,!0)}},{key:"removeTargetHandler",value:function(e){this.handlers.has(e)&&(this.target.removeEventListener(e,this.handlers.get(e),!0),this.handlers.delete(e))}}]),e}(),b=new(function(){function e(){var t=this;i(this,e),s(this,"targets",new Map),s(this,"getTarget",(function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=v(e);if(t.targets.has(r))return t.targets.get(r);if(!n)return null;var o=new g(r);return t.targets.set(r,o),o})),s(this,"removeTarget",(function(e){t.targets.delete(v(e))}))}return u(e,[{key:"sub",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(r.canUseDOM){var o=n.target,a=void 0===o?document:o,i=n.pool,l=void 0===i?"default":i;this.getTarget(a).addHandlers(l,e,m(t))}}},{key:"unsub",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(r.canUseDOM){var o=n.target,a=void 0===o?document:o,i=n.pool,l=void 0===i?"default":i,u=this.getTarget(a,!1);u&&(u.removeHandlers(l,e,m(t)),u.hasHandlers()||this.removeTarget(a))}}}]),e}()),w=function(e){function t(){return i(this,t),f(this,p(t).apply(this,arguments))}return c(t,o.PureComponent),u(t,[{key:"componentDidMount",value:function(){this.subscribe(this.props)}},{key:"componentDidUpdate",value:function(e){this.unsubscribe(e),this.subscribe(this.props)}},{key:"componentWillUnmount",value:function(){this.unsubscribe(this.props)}},{key:"subscribe",value:function(e){var t=e.name,n=e.on,r=e.pool,o=e.target;b.sub(t,n,{pool:r,target:o})}},{key:"unsubscribe",value:function(e){var t=e.name,n=e.on,r=e.pool,o=e.target;b.unsub(t,n,{pool:r,target:o})}},{key:"render",value:function(){return null}}]),t}();s(w,"defaultProps",{pool:"default",target:"document"}),w.propTypes={},t.instance=b,t.default=w},function(e,t,n){var r;
/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/!function(){"use strict";var o=!("undefined"==typeof window||!window.document||!window.document.createElement),a={canUseDOM:o,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:o&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:o&&!!window.screen};void 0===(r=function(){return a}.call(t,n,t,e))||(e.exports=r)}()},function(e,t,n){var r=n(35),o=n(34),a=n(22);e.exports=function(e){return function(t,n,i){var l=Object(t);if(!o(t)){var u=r(n,3);t=a(t),n=function(e){return u(l[e],e,l)}}var s=e(t,n,i);return s>-1?l[u?t[s]:s]:void 0}}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t,n){var r=n(177),o=n(104),a=n(95),i=r&&1/a(new r([,-0]))[1]==1/0?function(e){return new r(e)}:o;e.exports=i},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(e,t,n){var r=n(348),o=n(39),a=Array.prototype.push;function i(e,t){return 2==t?function(t,n){return e(t,n)}:function(t){return e(t)}}function l(e){for(var t=e?e.length:0,n=Array(t);t--;)n[t]=e[t];return n}function u(e,t){return function(){var n=arguments.length;if(n){for(var r=Array(n);n--;)r[n]=arguments[n];var o=r[0]=t.apply(void 0,r);return e.apply(void 0,r),o}}}e.exports=function e(t,n,s,c){var p="function"==typeof n,f=n===Object(n);if(f&&(c=s,s=n,n=void 0),null==s)throw new TypeError;c||(c={});var d=!("cap"in c)||c.cap,h=!("curry"in c)||c.curry,m=!("fixed"in c)||c.fixed,v=!("immutable"in c)||c.immutable,y=!("rearg"in c)||c.rearg,g=p?s:o,b="curry"in c&&c.curry,w="fixed"in c&&c.fixed,x="rearg"in c&&c.rearg,k=p?s.runInContext():void 0,E=p?s:{ary:t.ary,assign:t.assign,clone:t.clone,curry:t.curry,forEach:t.forEach,isArray:t.isArray,isError:t.isError,isFunction:t.isFunction,isWeakMap:t.isWeakMap,iteratee:t.iteratee,keys:t.keys,rearg:t.rearg,toInteger:t.toInteger,toPath:t.toPath},N=E.ary,S=E.assign,C=E.clone,T=E.curry,P=E.forEach,O=E.isArray,A=E.isError,I=E.isFunction,_=E.isWeakMap,R=E.keys,j=E.rearg,M=E.toInteger,D=E.toPath,F=R(r.aryMethod),U={castArray:function(e){return function(){var t=arguments[0];return O(t)?e(l(t)):e.apply(void 0,arguments)}},iteratee:function(e){return function(){var t=arguments[0],n=arguments[1],r=e(t,n),o=r.length;return d&&"number"==typeof n?(n=n>2?n-2:1,o&&o<=n?r:i(r,n)):r}},mixin:function(e){return function(t){var n=this;if(!I(n))return e(n,Object(t));var r=[];return P(R(t),(function(e){I(t[e])&&r.push([e,n.prototype[e]])})),e(n,Object(t)),P(r,(function(e){var t=e[1];I(t)?n.prototype[e[0]]=t:delete n.prototype[e[0]]})),n}},nthArg:function(e){return function(t){var n=t<0?1:M(t)+1;return T(e(t),n)}},rearg:function(e){return function(t,n){var r=n?n.length:0;return T(e(t,n),r)}},runInContext:function(n){return function(r){return e(t,n(r),c)}}};function z(e,t){if(d){var n=r.iterateeRearg[e];if(n)return function(e,t){return H(e,(function(e){var n=t.length;return function(e,t){return 2==t?function(t,n){return e.apply(void 0,arguments)}:function(t){return e.apply(void 0,arguments)}}(j(i(e,n),t),n)}))}(t,n);var o=!p&&r.iterateeAry[e];if(o)return function(e,t){return H(e,(function(e){return"function"==typeof e?i(e,t):e}))}(t,o)}return t}function L(e,t,n){if(m&&(w||!r.skipFixed[e])){var o=r.methodSpread[e],i=o&&o.start;return void 0===i?N(t,n):function(e,t){return function(){for(var n=arguments.length,r=n-1,o=Array(n);n--;)o[n]=arguments[n];var i=o[t],l=o.slice(0,t);return i&&a.apply(l,i),t!=r&&a.apply(l,o.slice(t+1)),e.apply(this,l)}}(t,i)}return t}function B(e,t,n){return y&&n>1&&(x||!r.skipRearg[e])?j(t,r.methodRearg[e]||r.aryRearg[n]):t}function W(e,t){for(var n=-1,r=(t=D(t)).length,o=r-1,a=C(Object(e)),i=a;null!=i&&++n<r;){var l=t[n],u=i[l];null==u||I(u)||A(u)||_(u)||(i[l]=C(n==o?u:Object(u))),i=i[l]}return a}function q(t,n){var o=r.aliasToReal[t]||t,a=r.remap[o]||o,i=c;return function(t){var r=p?k:E,l=p?k[a]:n,u=S(S({},i),t);return e(r,o,l,u)}}function H(e,t){return function(){var n=arguments.length;if(!n)return e();for(var r=Array(n);n--;)r[n]=arguments[n];var o=y?0:n-1;return r[o]=t(r[o]),e.apply(void 0,r)}}function V(e,t,n){var o,a=r.aliasToReal[e]||e,i=t,s=U[a];return s?i=s(t):v&&(r.mutate.array[a]?i=u(t,l):r.mutate.object[a]?i=u(t,function(e){return function(t){return e({},t)}}(t)):r.mutate.set[a]&&(i=u(t,W))),P(F,(function(e){return P(r.aryMethod[e],(function(t){if(a==t){var n=r.methodSpread[a],l=n&&n.afterRearg;return o=l?L(a,B(a,i,e),e):B(a,L(a,i,e),e),o=function(e,t,n){return b||h&&n>1?T(t,n):t}(0,o=z(a,o),e),!1}})),!o})),o||(o=i),o==t&&(o=b?T(o,1):function(){return t.apply(this,arguments)}),o.convert=q(a,t),o.placeholder=t.placeholder=n,o}if(!f)return V(n,s,g);var K=s,G=[];return P(F,(function(e){P(r.aryMethod[e],(function(e){var t=K[r.remap[e]||e];t&&G.push([e,V(e,t,K)])}))})),P(R(K),(function(e){var t=K[e];if("function"==typeof t){for(var n=G.length;n--;)if(G[n][0]==e)return;t.convert=q(e,t),G.push([e,t])}})),P(G,(function(e){K[e[0]]=e[1]})),K.convert=function(e){return K.runInContext.convert(e)(void 0)},K.placeholder=K,P(R(K),(function(e){P(r.realToAlias[e]||[],(function(t){K[t]=K[e]}))})),K}},function(e,t){t.aliasToReal={each:"forEach",eachRight:"forEachRight",entries:"toPairs",entriesIn:"toPairsIn",extend:"assignIn",extendAll:"assignInAll",extendAllWith:"assignInAllWith",extendWith:"assignInWith",first:"head",conforms:"conformsTo",matches:"isMatch",property:"get",__:"placeholder",F:"stubFalse",T:"stubTrue",all:"every",allPass:"overEvery",always:"constant",any:"some",anyPass:"overSome",apply:"spread",assoc:"set",assocPath:"set",complement:"negate",compose:"flowRight",contains:"includes",dissoc:"unset",dissocPath:"unset",dropLast:"dropRight",dropLastWhile:"dropRightWhile",equals:"isEqual",identical:"eq",indexBy:"keyBy",init:"initial",invertObj:"invert",juxt:"over",omitAll:"omit",nAry:"ary",path:"get",pathEq:"matchesProperty",pathOr:"getOr",paths:"at",pickAll:"pick",pipe:"flow",pluck:"map",prop:"get",propEq:"matchesProperty",propOr:"getOr",props:"at",symmetricDifference:"xor",symmetricDifferenceBy:"xorBy",symmetricDifferenceWith:"xorWith",takeLast:"takeRight",takeLastWhile:"takeRightWhile",unapply:"rest",unnest:"flatten",useWith:"overArgs",where:"conformsTo",whereEq:"isMatch",zipObj:"zipObject"},t.aryMethod={1:["assignAll","assignInAll","attempt","castArray","ceil","create","curry","curryRight","defaultsAll","defaultsDeepAll","floor","flow","flowRight","fromPairs","invert","iteratee","memoize","method","mergeAll","methodOf","mixin","nthArg","over","overEvery","overSome","rest","reverse","round","runInContext","spread","template","trim","trimEnd","trimStart","uniqueId","words","zipAll"],2:["add","after","ary","assign","assignAllWith","assignIn","assignInAllWith","at","before","bind","bindAll","bindKey","chunk","cloneDeepWith","cloneWith","concat","conformsTo","countBy","curryN","curryRightN","debounce","defaults","defaultsDeep","defaultTo","delay","difference","divide","drop","dropRight","dropRightWhile","dropWhile","endsWith","eq","every","filter","find","findIndex","findKey","findLast","findLastIndex","findLastKey","flatMap","flatMapDeep","flattenDepth","forEach","forEachRight","forIn","forInRight","forOwn","forOwnRight","get","groupBy","gt","gte","has","hasIn","includes","indexOf","intersection","invertBy","invoke","invokeMap","isEqual","isMatch","join","keyBy","lastIndexOf","lt","lte","map","mapKeys","mapValues","matchesProperty","maxBy","meanBy","merge","mergeAllWith","minBy","multiply","nth","omit","omitBy","overArgs","pad","padEnd","padStart","parseInt","partial","partialRight","partition","pick","pickBy","propertyOf","pull","pullAll","pullAt","random","range","rangeRight","rearg","reject","remove","repeat","restFrom","result","sampleSize","some","sortBy","sortedIndex","sortedIndexOf","sortedLastIndex","sortedLastIndexOf","sortedUniqBy","split","spreadFrom","startsWith","subtract","sumBy","take","takeRight","takeRightWhile","takeWhile","tap","throttle","thru","times","trimChars","trimCharsEnd","trimCharsStart","truncate","union","uniqBy","uniqWith","unset","unzipWith","without","wrap","xor","zip","zipObject","zipObjectDeep"],3:["assignInWith","assignWith","clamp","differenceBy","differenceWith","findFrom","findIndexFrom","findLastFrom","findLastIndexFrom","getOr","includesFrom","indexOfFrom","inRange","intersectionBy","intersectionWith","invokeArgs","invokeArgsMap","isEqualWith","isMatchWith","flatMapDepth","lastIndexOfFrom","mergeWith","orderBy","padChars","padCharsEnd","padCharsStart","pullAllBy","pullAllWith","rangeStep","rangeStepRight","reduce","reduceRight","replace","set","slice","sortedIndexBy","sortedLastIndexBy","transform","unionBy","unionWith","update","xorBy","xorWith","zipWith"],4:["fill","setWith","updateWith"]},t.aryRearg={2:[1,0],3:[2,0,1],4:[3,2,0,1]},t.iterateeAry={dropRightWhile:1,dropWhile:1,every:1,filter:1,find:1,findFrom:1,findIndex:1,findIndexFrom:1,findKey:1,findLast:1,findLastFrom:1,findLastIndex:1,findLastIndexFrom:1,findLastKey:1,flatMap:1,flatMapDeep:1,flatMapDepth:1,forEach:1,forEachRight:1,forIn:1,forInRight:1,forOwn:1,forOwnRight:1,map:1,mapKeys:1,mapValues:1,partition:1,reduce:2,reduceRight:2,reject:1,remove:1,some:1,takeRightWhile:1,takeWhile:1,times:1,transform:2},t.iterateeRearg={mapKeys:[1],reduceRight:[1,0]},t.methodRearg={assignInAllWith:[1,0],assignInWith:[1,2,0],assignAllWith:[1,0],assignWith:[1,2,0],differenceBy:[1,2,0],differenceWith:[1,2,0],getOr:[2,1,0],intersectionBy:[1,2,0],intersectionWith:[1,2,0],isEqualWith:[1,2,0],isMatchWith:[2,1,0],mergeAllWith:[1,0],mergeWith:[1,2,0],padChars:[2,1,0],padCharsEnd:[2,1,0],padCharsStart:[2,1,0],pullAllBy:[2,1,0],pullAllWith:[2,1,0],rangeStep:[1,2,0],rangeStepRight:[1,2,0],setWith:[3,1,2,0],sortedIndexBy:[2,1,0],sortedLastIndexBy:[2,1,0],unionBy:[1,2,0],unionWith:[1,2,0],updateWith:[3,1,2,0],xorBy:[1,2,0],xorWith:[1,2,0],zipWith:[1,2,0]},t.methodSpread={assignAll:{start:0},assignAllWith:{start:0},assignInAll:{start:0},assignInAllWith:{start:0},defaultsAll:{start:0},defaultsDeepAll:{start:0},invokeArgs:{start:2},invokeArgsMap:{start:2},mergeAll:{start:0},mergeAllWith:{start:0},partial:{start:1},partialRight:{start:1},without:{start:1},zipAll:{start:0}},t.mutate={array:{fill:!0,pull:!0,pullAll:!0,pullAllBy:!0,pullAllWith:!0,pullAt:!0,remove:!0,reverse:!0},object:{assign:!0,assignAll:!0,assignAllWith:!0,assignIn:!0,assignInAll:!0,assignInAllWith:!0,assignInWith:!0,assignWith:!0,defaults:!0,defaultsAll:!0,defaultsDeep:!0,defaultsDeepAll:!0,merge:!0,mergeAll:!0,mergeAllWith:!0,mergeWith:!0},set:{set:!0,setWith:!0,unset:!0,update:!0,updateWith:!0}},t.realToAlias=function(){var e=Object.prototype.hasOwnProperty,n=t.aliasToReal,r={};for(var o in n){var a=n[o];e.call(r,a)?r[a].push(o):r[a]=[o]}return r}(),t.remap={assignAll:"assign",assignAllWith:"assignWith",assignInAll:"assignIn",assignInAllWith:"assignInWith",curryN:"curry",curryRightN:"curryRight",defaultsAll:"defaults",defaultsDeepAll:"defaultsDeep",findFrom:"find",findIndexFrom:"findIndex",findLastFrom:"findLast",findLastIndexFrom:"findLastIndex",getOr:"get",includesFrom:"includes",indexOfFrom:"indexOf",invokeArgs:"invoke",invokeArgsMap:"invokeMap",lastIndexOfFrom:"lastIndexOf",mergeAll:"merge",mergeAllWith:"mergeWith",padChars:"pad",padCharsEnd:"padEnd",padCharsStart:"padStart",propertyOf:"get",rangeStep:"range",rangeStepRight:"rangeRight",restFrom:"rest",spreadFrom:"spread",trimChars:"trim",trimCharsEnd:"trimEnd",trimCharsStart:"trimStart",zipAll:"zip"},t.skipFixed={castArray:!0,flow:!0,flowRight:!0,iteratee:!0,mixin:!0,rearg:!0,runInContext:!0},t.skipRearg={add:!0,assign:!0,assignIn:!0,bind:!0,bindKey:!0,concat:!0,difference:!0,divide:!0,eq:!0,gt:!0,gte:!0,isEqual:!0,lt:!0,lte:!0,matchesProperty:!0,merge:!0,multiply:!0,overArgs:!0,partial:!0,partialRight:!0,propertyOf:!0,random:!0,range:!0,rangeRight:!0,subtract:!0,zip:!0,zipObject:!0,zipObjectDeep:!0}},function(e,t,n){e.exports={ary:n(350),assign:n(195),clone:n(363),curry:n(378),forEach:n(97),isArray:n(17),isError:n(379),isFunction:n(40),isWeakMap:n(380),iteratee:n(381),keys:n(90),rearg:n(382),toInteger:n(44),toPath:n(383)}},function(e,t,n){var r=n(98);e.exports=function(e,t,n){return t=n?void 0:t,t=e&&null==t?e.length:t,r(e,128,void 0,void 0,void 0,void 0,t)}},function(e,t,n){var r=n(99),o=n(28);e.exports=function(e,t,n){var a=1&t,i=r(e);return function t(){var r=this&&this!==o&&this instanceof t?i:e;return r.apply(a?n:this,arguments)}}},function(e,t,n){var r=n(84),o=n(99),a=n(187),i=n(190),l=n(134),u=n(101),s=n(28);e.exports=function(e,t,n){var c=o(e);return function o(){for(var p=arguments.length,f=Array(p),d=p,h=l(o);d--;)f[d]=arguments[d];var m=p<3&&f[0]!==h&&f[p-1]!==h?[]:u(f,h);if((p-=m.length)<n)return i(e,t,a,o.placeholder,void 0,f,m,void 0,void 0,n-p);var v=this&&this!==s&&this instanceof o?c:e;return r(v,this,f)}}},function(e,t){e.exports=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}},function(e,t){e.exports={}},function(e,t,n){var r=n(130),o=n(133),a=n(131),i=n(17),l=n(25),u=n(356),s=Object.prototype.hasOwnProperty;function c(e){if(l(e)&&!i(e)&&!(e instanceof r)){if(e instanceof o)return e;if(s.call(e,"__wrapped__"))return u(e)}return new o(e)}c.prototype=a.prototype,c.prototype.constructor=c,e.exports=c},function(e,t,n){var r=n(130),o=n(133),a=n(59);e.exports=function(e){if(e instanceof r)return e.clone();var t=new o(e.__wrapped__,e.__chain__);return t.__actions__=a(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}},function(e,t){var n=/\{\n\/\* \[wrapped with (.+)\] \*/,r=/,? & /;e.exports=function(e){var t=e.match(n);return t?t[1].split(r):[]}},function(e,t){var n=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;e.exports=function(e,t){var r=t.length;if(!r)return e;var o=r-1;return t[o]=(r>1?"& ":"")+t[o],t=t.join(r>2?", ":" "),e.replace(n,"{\n/* [wrapped with "+t+"] */\n")}},function(e,t,n){var r=n(97),o=n(96),a=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]];e.exports=function(e,t){return r(a,(function(n){var r="_."+n[0];t&n[1]&&!o(e,r)&&e.push(r)})),e.sort()}},function(e,t,n){var r=n(59),o=n(69),a=Math.min;e.exports=function(e,t){for(var n=e.length,i=a(t.length,n),l=r(e);i--;){var u=t[i];e[i]=o(u,n)?l[u]:void 0}return e}},function(e,t,n){var r=n(84),o=n(99),a=n(28);e.exports=function(e,t,n,i){var l=1&t,u=o(e);return function t(){for(var o=-1,s=arguments.length,c=-1,p=i.length,f=Array(p+s),d=this&&this!==a&&this instanceof t?u:e;++c<p;)f[c]=i[c];for(;s--;)f[c++]=arguments[++o];return r(d,l?n:this,f)}}},function(e,t,n){var r=n(188),o=n(189),a=n(101),i=Math.min;e.exports=function(e,t){var n=e[1],l=t[1],u=n|l,s=u<131,c=128==l&&8==n||128==l&&256==n&&e[7].length<=t[8]||384==l&&t[7].length<=t[8]&&8==n;if(!s&&!c)return e;1&l&&(e[2]=t[2],u|=1&n?0:4);var p=t[3];if(p){var f=e[3];e[3]=f?r(f,p,t[4]):p,e[4]=f?a(e[3],"__lodash_placeholder__"):t[4]}return(p=t[5])&&(f=e[5],e[5]=f?o(f,p,t[6]):p,e[6]=f?a(e[5],"__lodash_placeholder__"):t[6]),(p=t[7])&&(e[7]=p),128&l&&(e[8]=null==e[8]?t[8]:i(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=u,e}},function(e,t,n){var r=n(196);e.exports=function(e){return r(e,4)}},function(e,t,n){var r=n(74),o=n(102);e.exports=function(e,t){return e&&r(t,o(t),e)}},function(e,t,n){var r=n(31),o=n(91),a=n(366),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return a(e);var t=o(e),n=[];for(var l in e)("constructor"!=l||!t&&i.call(e,l))&&n.push(l);return n}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){var r=n(74),o=n(127);e.exports=function(e,t){return r(e,o(e),t)}},function(e,t,n){var r=n(74),o=n(198);e.exports=function(e,t){return r(e,o(e),t)}},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=e.length,r=new e.constructor(t);return t&&"string"==typeof e[0]&&n.call(e,"index")&&(r.index=e.index,r.input=e.input),r}},function(e,t,n){var r=n(135),o=n(371),a=n(372),i=n(373),l=n(200);e.exports=function(e,t,n){var u=e.constructor;switch(t){case"[object ArrayBuffer]":return r(e);case"[object Boolean]":case"[object Date]":return new u(+e);case"[object DataView]":return o(e,n);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return l(e,n);case"[object Map]":return new u;case"[object Number]":case"[object String]":return new u(e);case"[object RegExp]":return a(e);case"[object Set]":return new u;case"[object Symbol]":return i(e)}}},function(e,t,n){var r=n(135);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}},function(e,t){var n=/\w*$/;e.exports=function(e){var t=new e.constructor(e.source,n.exec(e));return t.lastIndex=e.lastIndex,t}},function(e,t,n){var r=n(49),o=r?r.prototype:void 0,a=o?o.valueOf:void 0;e.exports=function(e){return a?Object(a.call(e)):{}}},function(e,t,n){var r=n(375),o=n(58),a=n(89),i=a&&a.isMap,l=i?o(i):r;e.exports=l},function(e,t,n){var r=n(45),o=n(25);e.exports=function(e){return o(e)&&"[object Map]"==r(e)}},function(e,t,n){var r=n(377),o=n(58),a=n(89),i=a&&a.isSet,l=i?o(i):r;e.exports=l},function(e,t,n){var r=n(45),o=n(25);e.exports=function(e){return o(e)&&"[object Set]"==r(e)}},function(e,t,n){var r=n(98);function o(e,t,n){var a=r(e,8,void 0,void 0,void 0,void 0,void 0,t=n?void 0:t);return a.placeholder=o.placeholder,a}o.placeholder={},e.exports=o},function(e,t,n){var r=n(33),o=n(25),a=n(60);e.exports=function(e){if(!o(e))return!1;var t=r(e);return"[object Error]"==t||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!a(e)}},function(e,t,n){var r=n(45),o=n(25);e.exports=function(e){return o(e)&&"[object WeakMap]"==r(e)}},function(e,t,n){var r=n(196),o=n(35);e.exports=function(e){return o("function"==typeof e?e:r(e,1))}},function(e,t,n){var r=n(98),o=n(121),a=o((function(e,t){return r(e,256,void 0,void 0,void 0,t)}));e.exports=a},function(e,t,n){var r=n(43),o=n(59),a=n(17),i=n(66),l=n(153),u=n(51),s=n(38);e.exports=function(e){return a(e)?r(e,u):i(e)?[e]:o(l(s(e)))}},function(e,t,n){var r=n(54);e.exports=function(e,t){var n=[];return r(e,(function(e,r,o){t(e,r,o)&&n.push(e)})),n}},function(e,t,n){var r=n(116),o=n(202),a=n(103),i=n(72),l=n(386),u=n(137),s=n(38);e.exports=function(e,t,n){return n&&"number"!=typeof n&&i(e,t,n)&&(t=n=void 0),(n=void 0===n?4294967295:n>>>0)?(e=s(e))&&("string"==typeof t||null!=t&&!l(t))&&!(t=r(t))&&a(e)?o(u(e),0,n):e.split(t,n):[]}},function(e,t,n){var r=n(387),o=n(58),a=n(89),i=a&&a.isRegExp,l=i?o(i):r;e.exports=l},function(e,t,n){var r=n(33),o=n(25);e.exports=function(e){return o(e)&&"[object RegExp]"==r(e)}},function(e,t){e.exports=function(e){return e.split("")}},function(e,t){var n="[\\ud800-\\udfff]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",o="\\ud83c[\\udffb-\\udfff]",a="[^\\ud800-\\udfff]",i="(?:\\ud83c[\\udde6-\\uddff]){2}",l="[\\ud800-\\udbff][\\udc00-\\udfff]",u="(?:"+r+"|"+o+")"+"?",s="[\\ufe0e\\ufe0f]?"+u+("(?:\\u200d(?:"+[a,i,l].join("|")+")[\\ufe0e\\ufe0f]?"+u+")*"),c="(?:"+[a+r+"?",r,i,l,n].join("|")+")",p=RegExp(o+"(?="+o+")|"+c+s,"g");e.exports=function(e){return e.match(p)||[]}},function(e,t,n){var r=n(86),o=n(14);e.exports=function(e,t){return r(o(e,t),1)}},function(e,t,n){var r=n(54),o=n(34);e.exports=function(e,t){var n=-1,a=o(e)?Array(e.length):[];return r(e,(function(e,r,o){a[++n]=t(e,r,o)})),a}},function(e,t,n){var r=n(49),o=n(59),a=n(45),i=n(34),l=n(75),u=n(393),s=n(172),c=n(95),p=n(137),f=n(55),d=r?r.iterator:void 0;e.exports=function(e){if(!e)return[];if(i(e))return l(e)?p(e):o(e);if(d&&e[d])return u(e[d]());var t=a(e);return("[object Map]"==t?s:"[object Set]"==t?c:f)(e)}},function(e,t){e.exports=function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}},function(e,t,n){var r=n(395)();e.exports=r},function(e,t,n){var r=n(133),o=n(121),a=n(132),i=n(192),l=n(17),u=n(191);e.exports=function(e){return o((function(t){var n=t.length,o=n,s=r.prototype.thru;for(e&&t.reverse();o--;){var c=t[o];if("function"!=typeof c)throw new TypeError("Expected a function");if(s&&!p&&"wrapper"==i(c))var p=new r([],!0)}for(o=p?o:n;++o<n;){c=t[o];var f=i(c),d="wrapper"==f?a(c):void 0;p=d&&u(d[0])&&424==d[1]&&!d[4].length&&1==d[9]?p[i(d[0])].apply(p,d[3]):1==c.length&&u(c)?p[f]():p.thru(c)}return function(){var e=arguments,r=e[0];if(p&&1==e.length&&l(r))return p.plant(r).value();for(var o=0,a=n?t[o].apply(this,e):r;++o<n;)a=t[o].call(this,a);return a}}))}},function(e,t,n){var r=n(203),o=n(116),a=n(44),i=n(38);e.exports=function(e,t,n){return e=i(e),n=null==n?0:r(a(n),0,e.length),t=o(t),e.slice(n,n+t.length)==t}},function(e,t,n){var r=n(43),o=n(398),a=n(52),i=n(399),l=a((function(e){var t=r(e,i);return t.length&&t[0]===e[0]?o(t):[]}));e.exports=l},function(e,t,n){var r=n(93),o=n(96),a=n(128),i=n(43),l=n(58),u=n(94),s=Math.min;e.exports=function(e,t,n){for(var c=n?a:o,p=e[0].length,f=e.length,d=f,h=Array(f),m=1/0,v=[];d--;){var y=e[d];d&&t&&(y=i(y,l(t))),m=s(y.length,m),h[d]=!n&&(t||p>=120&&y.length>=120)?new r(d&&y):void 0}y=e[0];var g=-1,b=h[0];e:for(;++g<p&&v.length<m;){var w=y[g],x=t?t(w):w;if(w=n||0!==w?w:0,!(b?u(b,x):c(v,x,n))){for(d=f;--d;){var k=h[d];if(!(k?u(k,x):c(e[d],x,n)))continue e}b&&b.push(x),v.push(w)}}return v}},function(e,t,n){var r=n(73);e.exports=function(e){return r(e)?e:[]}},function(e,t,n){var r=n(401),o=n(72),a=n(123);e.exports=function(e){return function(t,n,i){return i&&"number"!=typeof i&&o(t,n,i)&&(n=i=void 0),t=a(t),void 0===n?(n=t,t=0):n=a(n),i=void 0===i?t<n?1:-1:a(i),r(t,n,i,e)}}},function(e,t){var n=Math.ceil,r=Math.max;e.exports=function(e,t,o,a){for(var i=-1,l=r(n((t-e)/(o||1)),0),u=Array(l);l--;)u[a?l:++i]=e,e+=o;return u}},function(e,t,n){var r=n(167),o=n(107),a=n(405),i=RegExp("['’]","g");e.exports=function(e){return function(t){return r(a(o(t).replace(i,"")),e,"")}}},function(e,t,n){var r=n(404)({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"});e.exports=r},function(e,t){e.exports=function(e){return function(t){return null==e?void 0:e[t]}}},function(e,t,n){var r=n(406),o=n(407),a=n(38),i=n(408);e.exports=function(e,t,n){return e=a(e),void 0===(t=n?void 0:t)?o(e)?i(e):r(e):e.match(t)||[]}},function(e,t){var n=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;e.exports=function(e){return e.match(n)||[]}},function(e,t){var n=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;e.exports=function(e){return n.test(e)}},function(e,t){var n="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",r="["+n+"]",o="\\d+",a="[\\u2700-\\u27bf]",i="[a-z\\xdf-\\xf6\\xf8-\\xff]",l="[^\\ud800-\\udfff"+n+o+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",u="(?:\\ud83c[\\udde6-\\uddff]){2}",s="[\\ud800-\\udbff][\\udc00-\\udfff]",c="[A-Z\\xc0-\\xd6\\xd8-\\xde]",p="(?:"+i+"|"+l+")",f="(?:"+c+"|"+l+")",d="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",h="[\\ufe0e\\ufe0f]?"+d+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",u,s].join("|")+")[\\ufe0e\\ufe0f]?"+d+")*"),m="(?:"+[a,u,s].join("|")+")"+h,v=RegExp([c+"?"+i+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[r,c,"$"].join("|")+")",f+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[r,c+p,"$"].join("|")+")",c+"?"+p+"+(?:['’](?:d|ll|m|re|s|t|ve))?",c+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",o,m].join("|"),"g");e.exports=function(e){return e.match(v)||[]}},function(e,t,n){var r=n(410)("toUpperCase");e.exports=r},function(e,t,n){var r=n(202),o=n(103),a=n(137),i=n(38);e.exports=function(e){return function(t){t=i(t);var n=o(t)?a(t):void 0,l=n?n[0]:t.charAt(0),u=n?r(n,1).join(""):t.slice(1);return l[e]()+u}}},function(e,t,n){var r=n(8);e.exports=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=r(e)););return e}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}},function(e,t,n){var r=n(54);e.exports=function(e,t){var n=!0;return r(e,(function(e,r,o){return n=!!t(e,r,o)})),n}},function(e,t,n){var r=n(415),o=n(103),a=n(416);e.exports=function(e){return o(e)?a(e):r(e)}},function(e,t,n){var r=n(181)("length");e.exports=r},function(e,t){var n="[\\ud800-\\udfff]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",o="\\ud83c[\\udffb-\\udfff]",a="[^\\ud800-\\udfff]",i="(?:\\ud83c[\\udde6-\\uddff]){2}",l="[\\ud800-\\udbff][\\udc00-\\udfff]",u="(?:"+r+"|"+o+")"+"?",s="[\\ufe0e\\ufe0f]?"+u+("(?:\\u200d(?:"+[a,i,l].join("|")+")[\\ufe0e\\ufe0f]?"+u+")*"),c="(?:"+[a+r+"?",r,i,l,n].join("|")+")",p=RegExp(o+"(?="+o+")|"+c+s,"g");e.exports=function(e){for(var t=p.lastIndex=0;p.test(e);)++t;return t}},function(e,t,n){var r=n(418),o=n(419),a=n(35),i=n(17);e.exports=function(e,t){return function(n,l){var u=i(n)?r:o,s=t?t():{};return u(n,e,a(l,2),s)}}},function(e,t){e.exports=function(e,t,n,r){for(var o=-1,a=null==e?0:e.length;++o<a;){var i=e[o];t(r,i,n(i),e)}return r}},function(e,t,n){var r=n(54);e.exports=function(e,t,n,o){return r(e,(function(e,r,a){t(o,e,n(e),a)})),o}},function(e,t,n){var r=n(43),o=n(35),a=n(159),i=n(199);e.exports=function(e,t){if(null==e)return{};var n=r(i(e),(function(e){return[e]}));return t=o(t),a(e,n,(function(e,n){return t(e,n[0])}))}},function(e,t,n){var r=n(92),o=n(204),a=n(168),i=n(422),l=n(31),u=n(102),s=n(205);e.exports=function e(t,n,c,p,f){t!==n&&a(n,(function(a,u){if(f||(f=new r),l(a))i(t,n,u,c,e,p,f);else{var d=p?p(s(t,u),a,u+"",t,n,f):void 0;void 0===d&&(d=a),o(t,u,d)}}),u)}},function(e,t,n){var r=n(204),o=n(197),a=n(200),i=n(59),l=n(201),u=n(68),s=n(17),c=n(73),p=n(71),f=n(40),d=n(31),h=n(60),m=n(88),v=n(205),y=n(423);e.exports=function(e,t,n,g,b,w,x){var k=v(e,n),E=v(t,n),N=x.get(E);if(N)r(e,n,N);else{var S=w?w(k,E,n+"",e,t,x):void 0,C=void 0===S;if(C){var T=s(E),P=!T&&p(E),O=!T&&!P&&m(E);S=E,T||P||O?s(k)?S=k:c(k)?S=i(k):P?(C=!1,S=o(E,!0)):O?(C=!1,S=a(E,!0)):S=[]:h(E)||u(E)?(S=k,u(k)?S=y(k):d(k)&&!f(k)||(S=l(E))):C=!1}C&&(x.set(E,S),b(S,E,g,w,x),x.delete(E)),r(e,n,S)}}},function(e,t,n){var r=n(74),o=n(102);e.exports=function(e){return r(e,o(e))}},function(e,t,n){var r=n(52),o=n(72);e.exports=function(e){return r((function(t,n){var r=-1,a=n.length,i=a>1?n[a-1]:void 0,l=a>2?n[2]:void 0;for(i=e.length>3&&"function"==typeof i?(a--,i):void 0,l&&o(n[0],n[1],l)&&(i=a<3?void 0:i,a=1),t=Object(t);++r<a;){var u=n[r];u&&e(t,u,r,i)}return t}))}},function(e,t,n){var r=n(426);e.exports=function(e,t){return function(n,o){return r(n,e,t(o),{})}}},function(e,t,n){var r=n(125);e.exports=function(e,t,n,o){return r(e,(function(e,r,a){t(o,n(e),r,a)})),o}},function(e,t,n){"use strict";var r;if(!Object.keys){var o=Object.prototype.hasOwnProperty,a=Object.prototype.toString,i=n(207),l=Object.prototype.propertyIsEnumerable,u=!l.call({toString:null},"toString"),s=l.call((function(){}),"prototype"),c=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],p=function(e){var t=e.constructor;return t&&t.prototype===e},f={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},d=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!f["$"+e]&&o.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{p(window[e])}catch(e){return!0}}catch(e){return!0}return!1}();r=function(e){var t=null!==e&&"object"==typeof e,n="[object Function]"===a.call(e),r=i(e),l=t&&"[object String]"===a.call(e),f=[];if(!t&&!n&&!r)throw new TypeError("Object.keys called on a non-object");var h=s&&n;if(l&&e.length>0&&!o.call(e,0))for(var m=0;m<e.length;++m)f.push(String(m));if(r&&e.length>0)for(var v=0;v<e.length;++v)f.push(String(v));else for(var y in e)h&&"prototype"===y||!o.call(e,y)||f.push(String(y));if(u)for(var g=function(e){if("undefined"==typeof window||!d)return p(e);try{return p(e)}catch(e){return!1}}(e),b=0;b<c.length;++b)g&&"constructor"===c[b]||!o.call(e,c[b])||f.push(c[b]);return f}}e.exports=r},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,o=Object.prototype.toString,a=function(e){return!(r&&e&&"object"==typeof e&&Symbol.toStringTag in e)&&"[object Arguments]"===o.call(e)},i=function(e){return!!a(e)||null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Array]"!==o.call(e)&&"[object Function]"===o.call(e.callee)},l=function(){return a(arguments)}();a.isLegacyArguments=i,e.exports=l?a:i},function(e,t,n){"use strict";var r=function(e){return e!=e};e.exports=function(e,t){return 0===e&&0===t?1/e==1/t:e===t||!(!r(e)||!r(t))}},function(e,t,n){"use strict";var r=n(431),o=RegExp.prototype.exec,a=Object.getOwnPropertyDescriptor,i=Object.prototype.toString,l="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;e.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!l)return"[object RegExp]"===i.call(e);var t=a(e,"lastIndex");return!(!t||!r(t,"value"))&&function(e){try{var t=e.lastIndex;return e.lastIndex=0,o.call(e),!0}catch(e){return!1}finally{e.lastIndex=t}}(e)}},function(e,t,n){"use strict";var r=n(138);e.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},function(e,t,n){"use strict";var r="Function.prototype.bind called on incompatible ",o=Array.prototype.slice,a=Object.prototype.toString;e.exports=function(e){var t=this;if("function"!=typeof t||"[object Function]"!==a.call(t))throw new TypeError(r+t);for(var n,i=o.call(arguments,1),l=function(){if(this instanceof n){var r=t.apply(this,i.concat(o.call(arguments)));return Object(r)===r?r:this}return t.apply(e,i.concat(o.call(arguments)))},u=Math.max(0,t.length-i.length),s=[],c=0;c<u;c++)s.push("$"+c);if(n=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this,arguments); }")(l),t.prototype){var p=function(){};p.prototype=t.prototype,n.prototype=new p,p.prototype=null}return n}},function(e,t,n){"use strict";var r=n(139),o=n(434),a=n(208),i=n(209),l=n(438),u=o(a);r(u,{getPolyfill:i,implementation:a,shim:l}),e.exports=u},function(e,t,n){"use strict";var r=n(138),o=n(435)("%Function%"),a=o.apply,i=o.call;e.exports=function(){return r.apply(i,arguments)},e.exports.apply=function(){return r.apply(a,arguments)}},function(e,t,n){"use strict";var r=TypeError,o=Object.getOwnPropertyDescriptor;if(o)try{o({},"")}catch(e){o=null}var a=function(){throw new r},i=o?function(){try{return arguments.callee,a}catch(e){try{return o(arguments,"callee").get}catch(e){return a}}}():a,l=n(436)(),u=Object.getPrototypeOf||function(e){return e.__proto__},s=void 0,c="undefined"==typeof Uint8Array?void 0:u(Uint8Array),p={"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayBufferPrototype%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer.prototype,"%ArrayIteratorPrototype%":l?u([][Symbol.iterator]()):void 0,"%ArrayPrototype%":Array.prototype,"%ArrayProto_entries%":Array.prototype.entries,"%ArrayProto_forEach%":Array.prototype.forEach,"%ArrayProto_keys%":Array.prototype.keys,"%ArrayProto_values%":Array.prototype.values,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":void 0,"%AsyncFunctionPrototype%":void 0,"%AsyncGenerator%":void 0,"%AsyncGeneratorFunction%":void 0,"%AsyncGeneratorPrototype%":void 0,"%AsyncIteratorPrototype%":s&&l&&Symbol.asyncIterator?s[Symbol.asyncIterator]():void 0,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%Boolean%":Boolean,"%BooleanPrototype%":Boolean.prototype,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%DataViewPrototype%":"undefined"==typeof DataView?void 0:DataView.prototype,"%Date%":Date,"%DatePrototype%":Date.prototype,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%ErrorPrototype%":Error.prototype,"%eval%":eval,"%EvalError%":EvalError,"%EvalErrorPrototype%":EvalError.prototype,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float32ArrayPrototype%":"undefined"==typeof Float32Array?void 0:Float32Array.prototype,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%Float64ArrayPrototype%":"undefined"==typeof Float64Array?void 0:Float64Array.prototype,"%Function%":Function,"%FunctionPrototype%":Function.prototype,"%Generator%":void 0,"%GeneratorFunction%":void 0,"%GeneratorPrototype%":void 0,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int8ArrayPrototype%":"undefined"==typeof Int8Array?void 0:Int8Array.prototype,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int16ArrayPrototype%":"undefined"==typeof Int16Array?void 0:Int8Array.prototype,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%Int32ArrayPrototype%":"undefined"==typeof Int32Array?void 0:Int32Array.prototype,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":l?u(u([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%JSONParse%":"object"==typeof JSON?JSON.parse:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&l?u((new Map)[Symbol.iterator]()):void 0,"%MapPrototype%":"undefined"==typeof Map?void 0:Map.prototype,"%Math%":Math,"%Number%":Number,"%NumberPrototype%":Number.prototype,"%Object%":Object,"%ObjectPrototype%":Object.prototype,"%ObjProto_toString%":Object.prototype.toString,"%ObjProto_valueOf%":Object.prototype.valueOf,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%PromisePrototype%":"undefined"==typeof Promise?void 0:Promise.prototype,"%PromiseProto_then%":"undefined"==typeof Promise?void 0:Promise.prototype.then,"%Promise_all%":"undefined"==typeof Promise?void 0:Promise.all,"%Promise_reject%":"undefined"==typeof Promise?void 0:Promise.reject,"%Promise_resolve%":"undefined"==typeof Promise?void 0:Promise.resolve,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%RangeErrorPrototype%":RangeError.prototype,"%ReferenceError%":ReferenceError,"%ReferenceErrorPrototype%":ReferenceError.prototype,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%RegExpPrototype%":RegExp.prototype,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&l?u((new Set)[Symbol.iterator]()):void 0,"%SetPrototype%":"undefined"==typeof Set?void 0:Set.prototype,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%SharedArrayBufferPrototype%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer.prototype,"%String%":String,"%StringIteratorPrototype%":l?u(""[Symbol.iterator]()):void 0,"%StringPrototype%":String.prototype,"%Symbol%":l?Symbol:void 0,"%SymbolPrototype%":l?Symbol.prototype:void 0,"%SyntaxError%":SyntaxError,"%SyntaxErrorPrototype%":SyntaxError.prototype,"%ThrowTypeError%":i,"%TypedArray%":c,"%TypedArrayPrototype%":c?c.prototype:void 0,"%TypeError%":r,"%TypeErrorPrototype%":r.prototype,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ArrayPrototype%":"undefined"==typeof Uint8Array?void 0:Uint8Array.prototype,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint8ClampedArrayPrototype%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray.prototype,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint16ArrayPrototype%":"undefined"==typeof Uint16Array?void 0:Uint16Array.prototype,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%Uint32ArrayPrototype%":"undefined"==typeof Uint32Array?void 0:Uint32Array.prototype,"%URIError%":URIError,"%URIErrorPrototype%":URIError.prototype,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakMapPrototype%":"undefined"==typeof WeakMap?void 0:WeakMap.prototype,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"%WeakSetPrototype%":"undefined"==typeof WeakSet?void 0:WeakSet.prototype},f=n(138).call(Function.call,String.prototype.replace),d=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,h=/\\(\\)?/g,m=function(e){var t=[];return f(e,d,(function(e,n,r,o){t[t.length]=r?f(o,h,"$1"):n||e})),t},v=function(e,t){if(!(e in p))throw new SyntaxError("intrinsic "+e+" does not exist!");if(void 0===p[e]&&!t)throw new r("intrinsic "+e+" exists, but is not available. Please file an issue!");return p[e]};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new TypeError("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new TypeError('"allowMissing" argument must be a boolean');for(var n=m(e),a=v("%"+(n.length>0?n[0]:"")+"%",t),i=1;i<n.length;i+=1)if(null!=a)if(o&&i+1>=n.length){var l=o(a,n[i]);if(!(t||n[i]in a))throw new r("base intrinsic for "+e+" exists, but the property is not available.");a=l?l.get||l.value:a[n[i]]}else a=a[n[i]];return a}},function(e,t,n){"use strict";(function(t){var r=t.Symbol,o=n(437);e.exports=function(){return"function"==typeof r&&("function"==typeof Symbol&&("symbol"==typeof r("foo")&&("symbol"==typeof Symbol("bar")&&o())))}}).call(this,n(79))},function(e,t,n){"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var r=Object.getOwnPropertySymbols(e);if(1!==r.length||r[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,t);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},function(e,t,n){"use strict";var r=n(139).supportsDescriptors,o=n(209),a=Object.getOwnPropertyDescriptor,i=Object.defineProperty,l=TypeError,u=Object.getPrototypeOf,s=/a/;e.exports=function(){if(!r||!u)throw new l("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");var e=o(),t=u(s),n=a(t,"flags");return n&&n.get===e||i(t,"flags",{configurable:!0,enumerable:!1,get:e}),e}},function(e,t,n){"use strict";var r=Date.prototype.getDay,o=Object.prototype.toString,a="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;e.exports=function(e){return"object"==typeof e&&null!==e&&(a?function(e){try{return r.call(e),!0}catch(e){return!1}}(e):"[object Date]"===o.call(e))}},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0),o=(i(r),i(n(5))),a=i(n(441));i(n(442));function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}t.default=function(e,t){var n,i,p="__create-react-context-"+(0,a.default)()+"__",f=function(e){function n(){var t,r;l(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return t=r=u(this,e.call.apply(e,[this].concat(a))),r.emitter=c(r.props.value),u(r,t)}return s(n,e),n.prototype.getChildContext=function(){var e;return(e={})[p]=this.emitter,e},n.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n=this.props.value,r=e.value,o=void 0;((a=n)===(i=r)?0!==a||1/a==1/i:a!=a&&i!=i)?o=0:(o="function"==typeof t?t(n,r):1073741823,0!==(o|=0)&&this.emitter.set(e.value,o))}var a,i},n.prototype.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[p]=o.default.object.isRequired,n);var d=function(t){function n(){var e,r;l(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return e=r=u(this,t.call.apply(t,[this].concat(a))),r.state={value:r.getValue()},r.onUpdate=function(e,t){0!=((0|r.observedBits)&t)&&r.setState({value:r.getValue()})},u(r,e)}return s(n,t),n.prototype.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},n.prototype.componentDidMount=function(){this.context[p]&&this.context[p].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},n.prototype.componentWillUnmount=function(){this.context[p]&&this.context[p].off(this.onUpdate)},n.prototype.getValue=function(){return this.context[p]?this.context[p].get():e},n.prototype.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((i={})[p]=o.default.object,i),{Provider:f,Consumer:d}},e.exports=t.default},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(79))},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){var r=n(28),o=n(44),a=n(87),i=n(38),l=r.isFinite,u=Math.min;e.exports=function(e){var t=Math[e];return function(e,n){if(e=a(e),(n=null==n?0:u(o(n),292))&&l(e)){var r=(i(e)+"e").split("e"),s=t(r[0]+"e"+(+r[1]+n));return+((r=(i(s)+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}},function(e,t,n){e.exports=n(445)},function(e,t,n){"use strict";var r=n(30),o=n(211),a=n(446),i=n(217);function l(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var u=l(n(214));u.Axios=a,u.create=function(e){return l(i(u.defaults,e))},u.Cancel=n(218),u.CancelToken=n(460),u.isCancel=n(213),u.all=function(e){return Promise.all(e)},u.spread=n(461),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(30),o=n(212),a=n(447),i=n(448),l=n(217);function u(e){this.defaults=e,this.interceptors={request:new a,response:new a}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(30);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(30),o=n(449),a=n(213),i=n(214);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(30);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,s=[],c=!1,p=-1;function f(){c&&u&&(c=!1,u.length?s=u.concat(s):p=-1,s.length&&d())}function d(){if(!c){var e=l(f);c=!0;for(var t=s.length;t;){for(u=s,s=[];++p<t;)u&&u[p].run();p=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||c||l(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(30);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(216);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(455),o=n(456);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(30),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},function(e,t,n){"use strict";var r=n(30);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(30);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(a)&&l.push("domain="+a),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(218);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"someByType",(function(){return te})),n.d(r,"findByType",(function(){return ne})),n.d(r,"isNil",(function(){return re}));var o={};n.r(o),n.d(o,"COLORS",(function(){return he})),n.d(o,"FLOATS",(function(){return me})),n.d(o,"SIZES",(function(){return ve})),n.d(o,"TEXT_ALIGNMENTS",(function(){return ye})),n.d(o,"VERTICAL_ALIGNMENTS",(function(){return ge})),n.d(o,"VISIBILITY",(function(){return be})),n.d(o,"WIDTHS",(function(){return we})),n.d(o,"DIRECTIONAL_TRANSITIONS",(function(){return xe})),n.d(o,"STATIC_TRANSITIONS",(function(){return ke})),n.d(o,"TRANSITIONS",(function(){return Ee})),n.d(o,"ACCESSIBILITY",(function(){return Ne})),n.d(o,"ARROWS",(function(){return Se})),n.d(o,"AUDIO_VIDEO",(function(){return Ce})),n.d(o,"BUSINESS",(function(){return Te})),n.d(o,"CHESS",(function(){return Pe})),n.d(o,"CODE",(function(){return Oe})),n.d(o,"COMMUNICATION",(function(){return Ae})),n.d(o,"COMPUTERS",(function(){return Ie})),n.d(o,"CURRENCY",(function(){return _e})),n.d(o,"DATE_TIME",(function(){return Re})),n.d(o,"DESIGN",(function(){return je})),n.d(o,"EDITORS",(function(){return Me})),n.d(o,"FILES",(function(){return De})),n.d(o,"GENDERS",(function(){return Fe})),n.d(o,"HANDS_GESTURES",(function(){return Ue})),n.d(o,"HEALTH",(function(){return ze})),n.d(o,"IMAGES",(function(){return Le})),n.d(o,"INTERFACES",(function(){return Be})),n.d(o,"LOGISTICS",(function(){return We})),n.d(o,"MAPS",(function(){return qe})),n.d(o,"MEDICAL",(function(){return He})),n.d(o,"OBJECTS",(function(){return Ve})),n.d(o,"PAYMENTS_SHOPPING",(function(){return Ke})),n.d(o,"SHAPES",(function(){return Ge})),n.d(o,"SPINNERS",(function(){return $e})),n.d(o,"SPORTS",(function(){return Qe})),n.d(o,"STATUS",(function(){return Ye})),n.d(o,"USERS_PEOPLE",(function(){return Xe})),n.d(o,"VEHICLES",(function(){return Ze})),n.d(o,"WRITING",(function(){return Je})),n.d(o,"BRANDS",(function(){return et})),n.d(o,"ICONS",(function(){return tt})),n.d(o,"ICON_ALIASES",(function(){return nt})),n.d(o,"ICONS_AND_ALIASES",(function(){return rt})),n.d(o,"COMPONENT_CONTEXT_SPECIFIC_ICONS",(function(){return ot})),n.d(o,"ALL_ICONS_IN_ALL_CONTEXTS",(function(){return at}));n(5);var a=n(0),i=n.n(a),l=n(219);function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),e}function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?f(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var g=n(61),b=function(e,t){"function"!=typeof e?null!==e&&"object"===p(e)&&(e.current=t):e(t)},w=function(e){function t(){var e,n;u(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return y(f(n=d(this,(e=h(t)).call.apply(e,[this].concat(o)))),"prevNode",null),n}return v(t,e),c(t,[{key:"componentDidMount",value:function(){this.prevNode=g.findDOMNode(this),b(this.props.innerRef,this.prevNode)}},{key:"componentDidUpdate",value:function(e){var t=g.findDOMNode(this);this.prevNode!==t&&(this.prevNode=t,b(this.props.innerRef,t)),e.innerRef!==this.props.innerRef&&b(this.props.innerRef,t)}},{key:"componentWillUnmount",value:function(){b(this.props.innerRef,null)}},{key:"render",value:function(){return this.props.children}}]),t}(a.Component);y(w,"displayName","RefFindNode"),y(w,"propTypes",{});var x=function(e){function t(){var e,n;u(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return y(f(n=d(this,(e=h(t)).call.apply(e,[this].concat(o)))),"handleRefOverride",(function(e){var t=n.props,r=t.children,o=t.innerRef;b(r.ref,e),b(o,e)})),n}return v(t,e),c(t,[{key:"render",value:function(){var e=this.props.children;return a.cloneElement(e,{ref:this.handleRefOverride})}}]),t}(a.Component);y(x,"displayName","RefForward"),y(x,"propTypes",{});var k=function(e){var t=e.children,n=e.innerRef,r=a.Children.only(t),o=l.isForwardRef(r)?x:w;return a.createElement(o,{innerRef:n},r)};k.displayName="Ref";var E=k,N=n(2),S=n.n(N),C=n(7),T=n.n(C),P=n(9),O=n.n(P),A=n(10),I=n.n(A),_=n(8),R=n.n(_),j=n(3),M=n.n(j),D=n(11),F=n.n(D),U=n(1),z=n.n(U),L=n(36),B=n.n(L),W=n(6),q=n.n(W),H=function(e,t){var n=e.handledProps,r=void 0===n?[]:n;return Object.keys(t).reduce((function(e,n){return"childKey"===n?e:(-1===r.indexOf(n)&&(e[n]=t[n]),e)}),{})},V=n(20),K=n.n(V),G=n(13),$=n.n(G),Q=n(4),Y=n.n(Q),X=n(106),Z=n.n(X),J=n(48),ee=n.n(J),te=function(e,t){return ee()(a.Children.toArray(e),{type:t})},ne=function(e,t){return Z()(a.Children.toArray(e),{type:t})},re=function(e){return null==e||Array.isArray(e)&&0===e.length},oe=n(57),ae=n.n(oe),ie=n(55),le=n.n(ie),ue=n(22),se=n.n(ue),ce=n(41),pe=n.n(ce),fe={1:"one",2:"two",3:"three",4:"four",5:"five",6:"six",7:"seven",8:"eight",9:"nine",10:"ten",11:"eleven",12:"twelve",13:"thirteen",14:"fourteen",15:"fifteen",16:"sixteen"};function de(e){var t=pe()(e);return"string"===t||"number"===t?fe[e]||e:""}var he=["red","orange","yellow","olive","green","teal","blue","violet","purple","pink","brown","grey","black"],me=["left","right"],ve=["mini","tiny","small","medium","large","big","huge","massive"],ye=["left","center","right","justified"],ge=["bottom","middle","top"],be=["mobile","tablet","computer","large screen","widescreen"],we=[].concat(K()(se()(fe)),K()(se()(fe).map(Number)),K()(le()(fe))),xe=["browse","browse right","drop","fade","fade up","fade down","fade left","fade right","fly up","fly down","fly left","fly right","horizontal flip","vertical flip","scale","slide up","slide down","slide left","slide right","swing up","swing down","swing left","swing right","zoom"],ke=["jiggle","flash","shake","pulse","tada","bounce","glow"],Ee=[].concat(xe,ke),Ne=["american sign language interpreting","assistive listening systems","audio description","blind","braille","closed captioning","closed captioning outline","deaf","low vision","phone volume","question circle","question circle outline","sign language","tty","universal access","wheelchair"],Se=["angle double down","angle double left","angle double right","angle double up","angle down","angle left","angle right","angle up","arrow alternate circle down","arrow alternate circle down outline","arrow alternate circle left","arrow alternate circle left outline","arrow alternate circle right","arrow alternate circle right outline","arrow alternate circle up","arrow alternate circle up outline","arrow circle down","arrow circle left","arrow circle right","arrow circle up","arrow down","arrow left","arrow right","arrow up","arrows alternate","arrows alternate horizontal","arrows alternate vertical","caret down","caret left","caret right","caret square down","caret square down outline","caret square left","caret square left outline","caret square right","caret square right outline","caret square up","caret square up outline","caret up","cart arrow down","chart line","chevron circle down","chevron circle left","chevron circle right","chevron circle up","chevron down","chevron left","chevron right","chevron up","cloud download","cloud upload","download","exchange","expand arrows alternate","external alternate","external square alternate","hand point down","hand point down outline","hand point left","hand point left outline","hand point right","hand point right outline","hand point up","hand point up outline","hand pointer","hand pointer outline","history","level down alternate","level up alternate","location arrow","long arrow alternate down","long arrow alternate left","long arrow alternate right","long arrow alternate up","mouse pointer","play","random","recycle","redo","redo alternate","reply","reply all","retweet","share","share square","share square outline","sign-in","sign-out","sign-in alternate","sign-out alternate","sort","sort alphabet down","sort alphabet up","sort amount down","sort amount up","sort down","sort numeric down","sort numeric up","sort up","sync","sync alternate","text height","text width","undo","undo alternate","upload","zoom-in","zoom-out"],Ce=["audio description","backward","circle","circle outline","closed captioning","closed captioning outline","compress","eject","expand","expand arrows alternate","fast backward","fast forward","file audio","file audio outline","file video","file video outline","film","forward","headphones","microphone","microphone slash","music","pause","pause circle","pause circle outline","phone volume","play","play circle","play circle outline","podcast","random","redo","redo alternate","rss","rss square","step backward","step forward","stop","stop circle","stop circle outline","sync","sync alternate","undo","undo alternate","video","volume down","volume off","volume up"],Te=["address book","address book outline","address card","address card outline","archive","balance scale","birthday cake","book","briefcase","building","building outline","bullhorn","bullseye","calculator","calendar","calendar outline","calendar alternate","calendar alternate outline","certificate","chart area","chart bar","chart bar outline","chart line","chart pie","clipboard","clipboard outline","coffee","columns","compass","compass outline","copy","copy outline","copyright","copyright outline","cut","edit","edit outline","envelope","envelope outline","envelope open","envelope open outline","envelope square","eraser","fax","file","file outline","file alternate","file alternate outline","folder","folder outline","folder open","folder open outline","globe","industry","paperclip","paste","pen square","pencil alternate","percent","phone","phone square","phone volume","registered","registered outline","save","save outline","sitemap","sticky note","sticky note outline","suitcase","table","tag","tags","tasks","thumbtack","trademark"],Pe=["chess","chess bishop","chess board","chess king","chess knight","chess pawn","chess queen","chess rook","square full"],Oe=["archive","barcode","bath","bug","code","code branch","coffee","file","file outline","file alternate","file alternate outline","file code","file code outline","filter","fire extinguisher","folder","folder outline","folder open","folder open outline","keyboard","keyboard outline","microchip","qrcode","shield alternate","sitemap","terminal","user secret","window close","window close outline","window maximize","window maximize outline","window minimize","window minimize outline","window restore","window restore outline"],Ae=["address book","address book outline","address card","address card outline","american sign language interpreting","assistive listening systems","at","bell","bell outline","bell slash","bell slash outline","bullhorn","comment","comment outline","comment alternate","comment alternate outline","comments","comments outline","envelope","envelope outline","envelope open","envelope open outline","envelope square","fax","inbox","language","microphone","microphone slash","mobile","mobile alternate","paper plane","paper plane outline","phone","phone square","phone volume","rss","rss square","tty","wifi"],Ie=["desktop","download","hdd","hdd outline","headphones","keyboard","keyboard outline","laptop","microchip","mobile","mobile alternate","plug","power off","print","save","save outline","server","tablet","tablet alternate","tv","upload"],_e=["dollar sign","euro sign","lira sign","money bill alternate","money bill alternate outline","pound sign","ruble sign","rupee sign","shekel sign","won sign","yen sign"],Re=["bell","bell outline","bell slash","bell slash outline","calendar","calendar outline","calendar alternate","calendar alternate outline","calendar check","calendar check outline","calendar minus","calendar minus outline","calendar plus","calendar plus outline","calendar times","calendar times outline","clock","clock outline","hourglass","hourglass outline","hourglass end","hourglass half","hourglass start","stopwatch"],je=["adjust","clone","clone outline","copy","copy outline","crop","crosshairs","cut","edit","edit outline","eraser","eye","eye dropper","eye slash","eye slash outline","object group","object group outline","object ungroup","object ungroup outline","paint brush","paste","pencil alternate","save","save outline","tint"],Me=["align center","align justify","align left","align right","bold","clipboard","clipboard outline","clone","clone outline","columns","copy","copy outline","cut","edit","edit outline","eraser","file","file outline","file alternate","file alternate outline","font","heading","i cursor","indent","italic","linkify","list","list alternate","list alternate outline","list ol","list ul","outdent","paper plane","paper plane outline","paperclip","paragraph","paste","pencil alternate","print","quote left","quote right","redo","redo alternate","reply","reply all","share","strikethrough","subscript","superscript","sync","sync alternate","table","tasks","text height","text width","th","th large","th list","trash","trash alternate","trash alternate outline","underline","undo","undo alternate","unlink"],De=["archive","clone","clone outline","copy","copy outline","cut","file","file outline","file alternate","file alternate outline","file archive","file archive outline","file audio","file audio outline","file code","file code outline","file excel","file excel outline","file image","file image outline","file pdf","file pdf outline","file powerpoint","file powerpoint outline","file video","file video outline","file word","file word outline","folder","folder outline","folder open","folder open outline","paste","save","save outline","sticky note","sticky note outline"],Fe=["genderless","mars","mars double","mars stroke","mars stroke horizontal","mars stroke vertical","mercury","neuter","transgender","transgender alternate","venus","venus double","venus mars"],Ue=["hand lizard","hand lizard outline","hand paper","hand paper outline","hand peace","hand peace outline","hand point down","hand point down outline","hand point left","hand point left outline","hand point right","hand point right outline","hand point up","hand point up outline","hand pointer","hand pointer outline","hand rock","hand rock outline","hand scissors","hand scissors outline","hand spock","hand spock outline","handshake","handshake outline","thumbs down","thumbs down outline","thumbs up","thumbs up outline"],ze=["ambulance","h square","heart","heart outline","heartbeat","hospital","hospital outline","medkit","plus square","plus square outline","stethoscope","user md","wheelchair"],Le=["adjust","bolt","camera","camera retro","clone","clone outline","compress","expand","eye","eye dropper","eye slash","eye slash outline","file image","file image outline","film","id badge","id badge outline","id card","id card outline","image","image outline","images","images outline","sliders horizontal","tint"],Be=["ban","barcode","bars","beer","bell","bell outline","bell slash","bell slash outline","bug","bullhorn","bullseye","calculator","calendar","calendar outline","calendar alternate","calendar alternate outline","calendar check","calendar check outline","calendar minus","calendar minus outline","calendar plus","calendar plus outline","calendar times","calendar times outline","certificate","check","check circle","check circle outline","check square","check square outline","circle","circle outline","clipboard","clipboard outline","clone","clone outline","cloud","cloud download","cloud upload","coffee","cog","cogs","copy","copy outline","cut","database","dot circle","dot circle outline","download","edit","edit outline","ellipsis horizontal","ellipsis vertical","envelope","envelope outline","envelope open","envelope open outline","eraser","exclamation","exclamation circle","exclamation triangle","external alternate","external square alternate","eye","eye slash","eye slash outline","file","file outline","file alternate","file alternate outline","filter","flag","flag outline","flag checkered","folder","folder outline","folder open","folder open outline","frown","frown outline","hashtag","heart","heart outline","history","home","i cursor","info","info circle","language","magic","meh","meh outline","microphone","microphone slash","minus","minus circle","minus square","minus square outline","paste","pencil alternate","plus","plus circle","plus square","plus square outline","qrcode","question","question circle","question circle outline","quote left","quote right","redo","redo alternate","reply","reply all","rss","rss square","save","save outline","search","search minus","search plus","share","share alternate","share alternate square","share square","share square outline","shield alternate","sign-in","sign-out","signal","sitemap","sliders horizontal","smile","smile outline","sort","sort alphabet down","sort alphabet up","sort amount down","sort amount up","sort down","sort numeric down","sort numeric up","sort up","star","star outline","star half","star half outline","sync","sync alternate","thumbs down","thumbs down outline","thumbs up","thumbs up outline","times","times circle","times circle outline","toggle off","toggle on","trash","trash alternate","trash alternate outline","trophy","undo","undo alternate","upload","user","user outline","user circle","user circle outline","wifi"],We=["box","boxes","clipboard check","clipboard list","dolly","dolly flatbed","pallet","shipping fast","truck","warehouse"],qe=["ambulance","anchor","balance scale","bath","bed","beer","bell","bell outline","bell slash","bell slash outline","bicycle","binoculars","birthday cake","blind","bomb","book","bookmark","bookmark outline","briefcase","building","building outline","car","coffee","crosshairs","dollar sign","eye","eye slash","eye slash outline","fighter jet","fire","fire extinguisher","flag","flag outline","flag checkered","flask","gamepad","gavel","gift","glass martini","globe","graduation cap","h square","heart","heart outline","heartbeat","home","hospital","hospital outline","image","image outline","images","images outline","industry","info","info circle","key","leaf","lemon","lemon outline","life ring","life ring outline","lightbulb","lightbulb outline","location arrow","low vision","magnet","male","map","map outline","map marker","map marker alternate","map pin","map signs","medkit","money bill alternate","money bill alternate outline","motorcycle","music","newspaper","newspaper outline","paw","phone","phone square","phone volume","plane","plug","plus","plus square","plus square outline","print","recycle","road","rocket","search","search minus","search plus","ship","shopping bag","shopping basket","shopping cart","shower","street view","subway","suitcase","tag","tags","taxi","thumbtack","ticket alternate","tint","train","tree","trophy","truck","tty","umbrella","university","utensil spoon","utensils","wheelchair","wifi","wrench"],He=["ambulance","band aid","dna","first aid","heart","heart outline","heartbeat","hospital","hospital outline","hospital symbol","pills","plus","stethoscope","syringe","thermometer","user md","weight"],Ve=["ambulance","anchor","archive","balance scale","bath","bed","beer","bell","bell outline","bicycle","binoculars","birthday cake","bomb","book","bookmark","bookmark outline","briefcase","bug","building","building outline","bullhorn","bullseye","bus","calculator","calendar","calendar outline","calendar alternate","calendar alternate outline","camera","camera retro","car","clipboard","clipboard outline","cloud","coffee","cog","cogs","compass","compass outline","copy","copy outline","cube","cubes","cut","envelope","envelope outline","envelope open","envelope open outline","eraser","eye","eye dropper","fax","fighter jet","file","file outline","file alternate","file alternate outline","film","fire","fire extinguisher","flag","flag outline","flag checkered","flask","futbol","futbol outline","gamepad","gavel","gem","gem outline","gift","glass martini","globe","graduation cap","hdd","hdd outline","headphones","heart","heart outline","home","hospital","hospital outline","hourglass","hourglass outline","image","image outline","images","images outline","industry","key","keyboard","keyboard outline","laptop","leaf","lemon","lemon outline","life ring","life ring outline","lightbulb","lightbulb outline","lock","lock open","magic","magnet","map","map outline","map marker","map marker alternate","map pin","map signs","medkit","microchip","microphone","mobile","mobile alternate","money bill alternate","money bill alternate outline","moon","moon outline","motorcycle","newspaper","newspaper outline","paint brush","paper plane","paper plane outline","paperclip","paste","paw","pencil alternate","phone","plane","plug","print","puzzle piece","road","rocket","save","save outline","search","shield alternate","shopping bag","shopping basket","shopping cart","shower","snowflake","snowflake outline","space shuttle","star","star outline","sticky note","sticky note outline","stopwatch","subway","suitcase","sun","sun outline","tablet","tablet alternate","tachometer alternate","tag","tags","taxi","thumbtack","ticket alternate","train","trash","trash alternate","trash alternate outline","tree","trophy","truck","tv","umbrella","university","unlock","unlock alternate","utensil spoon","utensils","wheelchair","wrench"],Ke=["bell","bell outline","bookmark","bookmark outline","bullhorn","camera","camera retro","cart arrow down","cart plus","certificate","credit card","credit card outline","gem","gem outline","gift","handshake","handshake outline","heart","heart outline","key","shopping bag","shopping basket","shopping cart","star","star outline","tag","tags","thumbs down","thumbs down outline","thumbs up","thumbs up outline","trophy"],Ge=["bookmark","bookmark outline","calendar","calendar outline","certificate","circle","circle outline","cloud","comment","comment outline","file","file outline","folder","folder outline","heart","heart outline","map marker","play","square","square outline","star","star outline"],$e=["asterisk","certificate","circle notch","cog","compass","compass outline","crosshairs","life ring","life ring outline","snowflake","snowflake outline","spinner","sun","sun outline","sync"],Qe=["baseball ball","basketball ball","bowling ball","football ball","futbol","futbol outline","golf ball","hockey puck","quidditch","table tennis","volleyball ball"],Ye=["ban","battery empty","battery full","battery half","battery quarter","battery three quarters","bell","bell outline","bell slash","bell slash outline","calendar","calendar outline","calendar alternate","calendar alternate outline","calendar check","calendar check outline","calendar minus","calendar minus outline","calendar plus","calendar plus outline","calendar times","calendar times outline","cart arrow down","cart plus","exclamation","exclamation circle","exclamation triangle","eye","eye slash","eye slash outline","file","file outline","file alternate","file alternate outline","folder","folder outline","folder open","folder open outline","info","info circle","lock","lock open","minus","minus circle","minus square","minus square outline","plus","plus circle","plus square","plus square outline","question","question circle","question circle outline","shield alternate","shopping cart","sign in alternate","sign out alternate","thermometer empty","thermometer full","thermometer half","thermometer quarter","thermometer three quarters","thumbs down","thumbs down outline","thumbs up","thumbs up outline","toggle off","toggle on","unlock","unlock alternate"],Xe=["address book","address book outline","address card","address card outline","bed","blind","child","female","frown","frown outline","id badge","id badge outline","id card","id card outline","male","meh","meh outline","power off","smile","smile outline","street view","user","user outline","user circle","user circle outline","user md","user plus","user secret","user times","users","wheelchair"],Ze=["ambulance","bicycle","bus","car","fighter jet","motorcycle","paper plane","paper plane outline","plane","rocket","ship","shopping cart","space shuttle","subway","taxi","train","truck","wheelchair"],Je=["archive","book","bookmark","bookmark outline","edit","edit outline","envelope","envelope outline","envelope open","envelope open outline","eraser","file","file outline","file alternate","file alternate outline","folder","folder outline","folder open","folder open outline","keyboard","keyboard outline","newspaper","newspaper outline","paper plane","paper plane outline","paperclip","paragraph","pen square","pencil alternate","quote left","quote right","sticky note","sticky note outline","thumbtack"],et=["500px","accessible","accusoft","adn","adversal","affiliatetheme","algolia","amazon","amazon pay","amilia","android","angellist","angrycreative","angular","app store","app store ios","apper","apple","apple pay","asymmetrik","audible","autoprefixer","avianex","aviato","aws","bandcamp","behance","behance square","bimobject","bitbucket","bitcoin","bity","black tie","blackberry","blogger","blogger b","bluetooth","bluetooth b","btc","buromobelexperte","buysellads","cc amazon pay","cc amex","cc apple pay","cc diners club","cc discover","cc jcb","cc mastercard","cc paypal","cc stripe","cc visa","centercode","chrome","cloudscale","cloudsmith","cloudversify","codepen","codiepie","connectdevelop","contao","cpanel","creative commons","css3","css3 alternate","cuttlefish","d and d","dashcube","delicious","deploydog","deskpro","deviantart","digg","digital ocean","discord","discourse","dochub","docker","draft2digital","dribbble","dribbble square","dropbox","drupal","dyalog","earlybirds","edge","elementor","ember","empire","envira","erlang","ethereum","etsy","expeditedssl","facebook","facebook f","facebook messenger","facebook square","firefox","first order","firstdraft","flickr","flipboard","fly","font awesome","font awesome alternate","font awesome flag","fonticons","fonticons fi","fort awesome","fort awesome alternate","forumbee","foursquare","free code camp","freebsd","get pocket","gg","gg circle","git","git square","github","github alternate","github square","gitkraken","gitlab","gitter","glide","glide g","gofore","goodreads","goodreads g","google","google drive","google play","google plus","google plus g","google plus square","google wallet","gratipay","grav","gripfire","grunt","gulp","hacker news","hacker news square","hips","hire a helper","hooli","hotjar","houzz","html5","hubspot","imdb","instagram","internet explorer","ioxhost","itunes","itunes note","jenkins","joget","joomla","js","js square","jsfiddle","keycdn","kickstarter","kickstarter k","korvue","laravel","lastfm","lastfm square","leanpub","less","linechat","linkedin","linkedin alternate","linode","linux","lyft","magento","maxcdn","medapps","medium","medium m","medrt","meetup","microsoft","mix","mixcloud","mizuni","modx","monero","napster","nintendo switch","node","node js","npm","ns8","nutritionix","odnoklassniki","odnoklassniki square","opencart","openid","opera","optin monster","osi","page4","pagelines","palfed","patreon","paypal","periscope","phabricator","phoenix framework","php","pied piper","pied piper alternate","pied piper pp","pinterest","pinterest p","pinterest square","playstation","product hunt","pushed","python","qq","quinscape","quora","ravelry","react","rebel","redriver","reddit","reddit alien","reddit square","rendact","renren","replyd","resolving","rocketchat","rockrms","safari","sass","schlix","scribd","searchengin","sellcast","sellsy","servicestack","shirtsinbulk","simplybuilt","sistrix","skyatlas","skype","slack","slack hash","slideshare","snapchat","snapchat ghost","snapchat square","soundcloud","speakap","spotify","stack exchange","stack overflow","staylinked","steam","steam square","steam symbol","sticker mule","strava","stripe","stripe s","studiovinari","stumbleupon","stumbleupon circle","superpowers","supple","telegram","telegram plane","tencent weibo","themeisle","trello","tripadvisor","tumblr","tumblr square","twitch","twitter","twitter square","typo3","uber","uikit","uniregistry","untappd","usb","ussunnah","vaadin","viacoin","viadeo","viadeo square","viber","vimeo","vimeo square","vimeo v","vine","vk","vnv","vuejs","wechat","weibo","weixin","whatsapp","whatsapp square","whmcs","wikipedia w","windows","wordpress","wordpress simple","wpbeginner","wpexplorer","wpforms","xbox","xing","xing square","y combinator","yahoo","yandex","yandex international","yelp","yoast","youtube","youtube square"],tt=ae()([].concat(Ne,Se,Ce,Te,Pe,Oe,Ae,Ie,_e,Re,je,Me,De,Fe,Ue,ze,Le,Be,We,qe,He,Ve,Ke,Ge,$e,Qe,Ye,Xe,Ze,Je,et)),nt=["chess rock","ordered list","unordered list","user doctor","shield","puzzle","add circle","add square","add to calendar","add to cart","add user","add","alarm mute","alarm","ald","als","announcement","area chart","area graph","arrow down cart","asexual","asl interpreting","asl","assistive listening devices","attach","attention","balance","bar","bathtub","battery four","battery high","battery low","battery one","battery three","battery two","battery zero","birthday","block layout","bluetooth alternative","broken chain","browser","call square","call","cancel","cart","cc","chain","chat","checked calendar","checkmark","circle notched","close","cny","cocktail","commenting","computer","configure","content","deafness","delete calendar","delete","detective","discussions","doctor","dollar","dont","drivers license","dropdown","emergency","envira gallery","erase","eur","euro","eyedropper","factory","favorite","feed","female homosexual","file text","file text outline","find","first aid","fork","game","gay","gbp","google plus circle","google plus official","grab","graduation","grid layout","group","h","hand victory","handicap","hard of hearing","header","help circle","help","heterosexual","hide","hotel","hourglass four","hourglass full","hourglass one","hourglass three","hourglass two","idea","ils","in cart","inr","intergender","intersex","jpy","krw","lab","law","legal","lesbian","lightning","like","line graph","linkedin square","linkify","lira","list layout","magnify","mail forward","mail outline","mail square","mail","male homosexual","man","marker","mars alternate","mars horizontal","mars vertical","microsoft edge","military","ms edge","mute","new pied piper","non binary transgender","numbered list","options","other gender horizontal","other gender vertical","other gender","payment","paypal card","pencil square","photo","picture","pie chart","pie graph","pied piper hat","pin","plus cart","point","pointing down","pointing left","pointing right","pointing up","pound","power cord","power","privacy","r circle","rain","record","refresh","remove circle","remove from calendar","remove user","remove","repeat","rmb","rouble","rub","ruble","rupee","s15","selected radio","send","setting","settings","shekel","sheqel","shipping","shop","shuffle","shutdown","sidebar","signing","signup","sliders","soccer","sort alphabet ascending","sort alphabet descending","sort ascending","sort content ascending","sort content descending","sort descending","sort numeric ascending","sort numeric descending","sound","spy","stripe card","student","talk","target","teletype","television","text cursor","text telephone","theme","thermometer","thumb tack","time","tm","toggle down","toggle left","toggle right","toggle up","translate","travel","treatment","triangle down","triangle left","triangle right","triangle up","try","unhide","unlinkify","unmute","usd","user cancel","user close","user delete","user x","vcard","video camera","video play","volume control phone","wait","warning circle","warning sign","warning","wi-fi","winner","wizard","woman","won","wordpress beginner","wordpress forms","world","write square","x","yen","zip","zoom in","zoom out","zoom","bitbucket square","checkmark box","circle thin","cloud download","cloud upload","compose","conversation","credit card alternative","currency","dashboard","diamond","disk","exchange","external share","external square","external","facebook official","food","hourglass zero","level down","level up","log out","meanpath","money","move","pencil","protect","radio","remove bookmark","resize horizontal","resize vertical","sign in","sign out","spoon","star half empty","star half full","ticket","times rectangle","write","youtube play"],rt=ae()([].concat(K()(tt),nt)),ot=["left dropdown"],at=ae()([].concat(K()(rt),ot)),it=function(e,t){return e&&t},lt=function(e,t){return e&&!0!==e&&"".concat(e," ").concat(t)},ut=function(e,t){return e&&(!0===e?t:"".concat(e," ").concat(t))},st=function(e,t){return e&&!0!==e?e.replace("large screen","large-screen").replace(/ vertically/g,"-vertically").split(" ").map((function(e){return"".concat(e.replace("-"," ")," ").concat(t)})).join(" "):null},ct=function(e){return"justified"===e?"justified":lt(e,"aligned")},pt=function(e){return lt(e,"aligned")},ft=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(n&&"equal"===e)return"equal width";var r=pe()(e);return"string"!==r&&"number"!==r||!t?de(e):"".concat(de(e)," ").concat(t)};var dt=function(e,t,n){var r=e.defaultProps,o=void 0===r?{}:r;if(t.as&&t.as!==o.as)return t.as;if(n){var a=n();if(a)return a}return t.href?"a":o.as||"div"},ht=n(12),mt=n.n(ht),vt=n(17),yt=n.n(vt),gt=n(60),bt=n.n(gt),wt=n(40),xt=n.n(wt),kt=n(221),Et=n.n(kt),Nt=n(75),St=n.n(Nt),Ct=n(222),Tt=n.n(Ct);function Pt(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if("function"!=typeof e&&"string"!=typeof e)throw new Error("createShorthand() Component must be a string or function.");if($()(n)||Tt()(n))return null;var o=St()(n),l=Et()(n),u=xt()(n),s=Object(a.isValidElement)(n),c=bt()(n),p=o||l||yt()(n);if(!(u||s||c||p))return null;var f=r.defaultProps,d=void 0===f?{}:f,h=s&&n.props||c&&n||p&&t(n),m=r.overrideProps,v=void 0===m?{}:m;v=xt()(v)?v(mt()({},d,h)):v;var y=mt()({},d,h,v);if(d.className||v.className||h.className){var g=Y()(d.className,v.className,h.className);y.className=ae()(g.split(" ")).join(" ")}if((d.style||v.style||h.style)&&(y.style=mt()({},d.style,h.style,v.style)),$()(y.key)){var b=y.childKey,w=r.autoGenerateKey,x=void 0===w||w;$()(b)?x&&(o||l)&&(y.key=n):(y.key="function"==typeof b?b(y):b,delete y.childKey)}return s?Object(a.cloneElement)(n,y):p||c?i.a.createElement(e,y):u?n(e,y,y.children):void 0}function Ot(e,t){if("function"!=typeof e&&"string"!=typeof e)throw new Error("createShorthandFactory() Component must be a string or function.");return function(n,r){return Pt(e,t,n,r)}}Pt.handledProps=[];var At=Ot("div",(function(e){return{children:e}})),It=Ot("iframe",(function(e){return{src:e}})),_t=Ot("img",(function(e){return{src:e}})),Rt=Ot("input",(function(e){return{type:e}})),jt=Ot("label",(function(e){return{children:e}})),Mt=Ot("p",(function(e){return{children:e}})),Dt=n(16),Ft=n.n(Dt);function Ut(e){var t=e.children,n=e.className,o=e.content,a=e.size,l=Y()(a,"icons",n),u=H(Ut,e),s=dt(Ut,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(t)?o:t)}Ut.handledProps=["as","children","className","content","size"],Ut.propTypes={},Ut.defaultProps={as:"i"};var zt=Ut,Lt=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleClick",(function(e){n.props.disabled?e.preventDefault():q()(n.props,"onClick",e,n.props)})),n}return F()(t,e),O()(t,[{key:"getIconAriaOptions",value:function(){var e={},t=this.props,n=t["aria-label"],r=t["aria-hidden"];return $()(n)?e["aria-hidden"]="true":e["aria-label"]=n,$()(r)||(e["aria-hidden"]=r),e}},{key:"render",value:function(){var e=this.props,n=e.bordered,r=e.circular,o=e.className,a=e.color,l=e.corner,u=e.disabled,s=e.fitted,c=e.flipped,p=e.inverted,f=e.link,d=e.loading,h=e.name,m=e.rotated,v=e.size,y=Y()(a,h,v,it(n,"bordered"),it(r,"circular"),it(u,"disabled"),it(s,"fitted"),it(p,"inverted"),it(f,"link"),it(d,"loading"),ut(l,"corner"),lt(c,"flipped"),lt(m,"rotated"),"icon",o),g=H(t,this.props),b=dt(t,this.props),w=this.getIconAriaOptions();return i.a.createElement(b,S()({},g,w,{className:y,onClick:this.handleClick}))}}]),t}(a.PureComponent);z()(Lt,"defaultProps",{as:"i"}),z()(Lt,"Group",zt),z()(Lt,"handledProps",["aria-hidden","aria-label","as","bordered","circular","className","color","corner","disabled","fitted","flipped","inverted","link","loading","name","rotated","size"]),Lt.propTypes={},Lt.create=Ot(Lt,(function(e){return{name:e}}));var Bt=Lt,Wt=n(29),qt=n.n(Wt),Ht=n(23),Vt=n.n(Ht),Kt=n(19),Gt=n.n(Kt),$t=n(24),Qt=n.n($t),Yt=["selected","defaultValue","defaultChecked","accept","autoCapitalize","autoComplete","autoCorrect","autoFocus","checked","disabled","form","id","lang","list","max","maxLength","min","minLength","multiple","name","pattern","placeholder","readOnly","required","step","title","type","value"],Xt=[].concat(Yt,["onKeyDown","onKeyPress","onKeyUp","onFocus","onBlur","onChange","onInput","onClick","onContextMenu","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onSelect","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart"]),Zt=["alt","height","src","srcSet","width"],Jt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.htmlProps,r=void 0===n?Xt:n,o=t.includeAria,a=void 0===o||o,i={},l={};return Qt()(e,(function(e,t){var n=a&&(/^aria-.*$/.test(t)||"role"===t);(Gt()(r,t)||n?i:l)[t]=e})),[i,l]},en="object"===("undefined"==typeof document?"undefined":pe()(document))&&null!==document,tn="object"===("undefined"==typeof window?"undefined":pe()(window))&&null!==window&&window.self===window,nn=function e(){return $()(e.override)?en&&tn:e.override},rn=n(21),on=n.n(rn),an=n(15),ln=n.n(an),un=n(76),sn=n.n(un),cn=n(220),pn=n.n(cn),fn=function(e,t){if(ee()([t,e],$.a))return!1;if(t.target&&(q()(t.target,"setAttribute","data-suir-click-target",!0),document.querySelector("[data-suir-click-target=true]")))return q()(t.target,"removeAttribute","data-suir-click-target"),e.contains(t.target);var n=t.clientX,r=t.clientY;if(ee()([n,r],$.a))return!1;var o=e.getClientRects();if(!(e.offsetWidth&&e.offsetHeight&&o&&o.length))return!1;var a=pn()(o),i=a.top,l=a.bottom,u=a.left,s=a.right;return!ee()([i,l,u,s],$.a)&&(sn()(r,i,l+.001)&&sn()(n,u,s+.001))},dn=(n(396),n(56)),hn=n.n(dn),mn=n(37),vn=n.n(mn),yn=(n(397),n(142)),gn=n.n(yn),bn=function(e){return"default".concat(e[0].toUpperCase()+e.slice(1))},wn=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=t[e];if(void 0!==o)return o;if(r){var a=t[bn(e)];if(void 0!==a)return a;if(n){var i=n[e];if(void 0!==i)return i}}return"checked"!==e&&("value"===e?t.multiple?[]:"":void 0)},xn=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"trySetState",(function(e,t){var r=Object.keys(e).reduce((function(t,r){return void 0!==n.props[r]?t:(t[r]=e[r],t)}),{});Object.keys(r).length>0&&n.setState(r,t)}));var i=n.constructor.autoControlledProps,l=q()(M()(n),"getInitialAutoControlledState",n.props)||{},u=i.reduce((function(e,t){return e[t]=wn(t,n.props,l,!0),e}),{});return n.state=mt()({},l,u),n}return F()(t,e),O()(t,[{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=this.constructor.autoControlledProps.reduce((function(t,n){return!qt()(e[n])&&(t[n]=e[n]),t}),{});Object.keys(t).length>0&&this.setState(t)}}]),t}(a.Component),kn=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleRef",(function(e){b(n.props.innerRef,e)})),n}return F()(t,e),O()(t,[{key:"componentDidMount",value:function(){q()(this.props,"onMount",null,this.props)}},{key:"componentWillUnmount",value:function(){q()(this.props,"onUnmount",null,this.props)}},{key:"render",value:function(){if(!nn())return null;var e=this.props,t=e.children,n=e.mountNode,r=void 0===n?document.body:n;return Object(g.createPortal)(i.a.createElement(E,{innerRef:this.handleRef},t),r)}}]),t}(a.Component);z()(kn,"handledProps",["children","innerRef","mountNode","onMount","onUnmount"]),kn.propTypes={};var En=kn,Nn=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"contentRef",Object(a.createRef)()),z()(M()(n),"triggerRef",Object(a.createRef)()),z()(M()(n),"latestDocumentMouseDownEvent",null),z()(M()(n),"handleDocumentMouseDown",(function(e){n.latestDocumentMouseDownEvent=e})),z()(M()(n),"handleDocumentClick",(function(e){var t=n.props.closeOnDocumentClick,r=n.latestDocumentMouseDownEvent;n.latestDocumentMouseDownEvent=null,!n.contentRef.current||fn(n.triggerRef.current,e)||r&&fn(n.contentRef.current,r)||fn(n.contentRef.current,e)||t&&n.close(e)})),z()(M()(n),"handleEscape",(function(e){n.props.closeOnEscape&&ln.a.getCode(e)===ln.a.Escape&&n.close(e)})),z()(M()(n),"handlePortalMouseLeave",(function(e){var t=n.props,r=t.closeOnPortalMouseLeave,o=t.mouseLeaveDelay;r&&e.target===n.contentRef.current&&(n.mouseLeaveTimer=n.closeWithTimeout(e,o))})),z()(M()(n),"handlePortalMouseEnter",(function(){n.props.closeOnPortalMouseLeave&&clearTimeout(n.mouseLeaveTimer)})),z()(M()(n),"handleTriggerBlur",(function(e){for(var t=n.props,r=t.trigger,o=t.closeOnTriggerBlur,a=arguments.length,i=new Array(a>1?a-1:0),l=1;l<a;l++)i[l-1]=arguments[l];q.a.apply(void 0,[r,"props.onBlur",e].concat(i));var u=e.relatedTarget||document.activeElement,s=q()(n.contentRef.current,"contains",u);o&&!s&&n.close(e)})),z()(M()(n),"handleTriggerClick",(function(e){for(var t=n.props,r=t.trigger,o=t.closeOnTriggerClick,a=t.openOnTriggerClick,i=n.state.open,l=arguments.length,u=new Array(l>1?l-1:0),s=1;s<l;s++)u[s-1]=arguments[s];q.a.apply(void 0,[r,"props.onClick",e].concat(u)),i&&o?n.close(e):!i&&a&&n.open(e)})),z()(M()(n),"handleTriggerFocus",(function(e){for(var t=n.props,r=t.trigger,o=t.openOnTriggerFocus,a=arguments.length,i=new Array(a>1?a-1:0),l=1;l<a;l++)i[l-1]=arguments[l];q.a.apply(void 0,[r,"props.onFocus",e].concat(i)),o&&n.open(e)})),z()(M()(n),"handleTriggerMouseLeave",(function(e){clearTimeout(n.mouseEnterTimer);for(var t=n.props,r=t.trigger,o=t.closeOnTriggerMouseLeave,a=t.mouseLeaveDelay,i=arguments.length,l=new Array(i>1?i-1:0),u=1;u<i;u++)l[u-1]=arguments[u];q.a.apply(void 0,[r,"props.onMouseLeave",e].concat(l)),o&&(n.mouseLeaveTimer=n.closeWithTimeout(e,a))})),z()(M()(n),"handleTriggerMouseEnter",(function(e){clearTimeout(n.mouseLeaveTimer);for(var t=n.props,r=t.trigger,o=t.mouseEnterDelay,a=t.openOnTriggerMouseEnter,i=arguments.length,l=new Array(i>1?i-1:0),u=1;u<i;u++)l[u-1]=arguments[u];q.a.apply(void 0,[r,"props.onMouseEnter",e].concat(l)),a&&(n.mouseEnterTimer=n.openWithTimeout(e,o))})),z()(M()(n),"open",(function(e){var t=n.props.onOpen;t&&t(e,n.props),n.trySetState({open:!0})})),z()(M()(n),"openWithTimeout",(function(e,t){var r=mt()({},e);return setTimeout((function(){return n.open(r)}),t||0)})),z()(M()(n),"close",(function(e){var t=n.props.onClose;t&&t(e,n.props),n.trySetState({open:!1})})),z()(M()(n),"closeWithTimeout",(function(e,t){var r=mt()({},e);return setTimeout((function(){return n.close(r)}),t||0)})),z()(M()(n),"handleMount",(function(){q()(n.props,"onMount",null,n.props)})),z()(M()(n),"handleUnmount",(function(){q()(n.props,"onUnmount",null,n.props)})),z()(M()(n),"handleTriggerRef",(function(e){n.triggerRef.current=e,b(n.props.triggerRef,e)})),n}return F()(t,e),O()(t,[{key:"componentWillUnmount",value:function(){clearTimeout(this.mouseEnterTimer),clearTimeout(this.mouseLeaveTimer)}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.eventPool,r=e.mountNode,o=e.trigger,l=this.state.open;return i.a.createElement(a.Fragment,null,l&&i.a.createElement(a.Fragment,null,i.a.createElement(En,{innerRef:this.contentRef,mountNode:r,onMount:this.handleMount,onUnmount:this.handleUnmount},t),i.a.createElement(on.a,{name:"mouseleave",on:this.handlePortalMouseLeave,pool:n,target:this.contentRef}),i.a.createElement(on.a,{name:"mouseenter",on:this.handlePortalMouseEnter,pool:n,target:this.contentRef}),i.a.createElement(on.a,{name:"mousedown",on:this.handleDocumentMouseDown,pool:n}),i.a.createElement(on.a,{name:"click",on:this.handleDocumentClick,pool:n}),i.a.createElement(on.a,{name:"keydown",on:this.handleEscape,pool:n})),o&&i.a.createElement(E,{innerRef:this.handleTriggerRef},Object(a.cloneElement)(o,{onBlur:this.handleTriggerBlur,onClick:this.handleTriggerClick,onFocus:this.handleTriggerFocus,onMouseLeave:this.handleTriggerMouseLeave,onMouseEnter:this.handleTriggerMouseEnter})))}}]),t}(xn);z()(Nn,"defaultProps",{closeOnDocumentClick:!0,closeOnEscape:!0,eventPool:"default",openOnTriggerClick:!0}),z()(Nn,"autoControlledProps",["open"]),z()(Nn,"Inner",En),z()(Nn,"handledProps",["children","closeOnDocumentClick","closeOnEscape","closeOnPortalMouseLeave","closeOnTriggerBlur","closeOnTriggerClick","closeOnTriggerMouseLeave","defaultOpen","eventPool","mountNode","mouseEnterDelay","mouseLeaveDelay","onClose","onMount","onOpen","onUnmount","open","openOnTriggerClick","openOnTriggerFocus","openOnTriggerMouseEnter","trigger","triggerRef"]),Nn.propTypes={};var Sn=Nn;function Cn(e){var t=e.blurring,n=e.className,o=e.children,a=e.content,l=e.dimmed,u=Y()(it(t,"blurring"),it(l,"dimmed"),"dimmable",n),s=H(Cn,e),c=dt(Cn,e);return i.a.createElement(c,S()({},s,{className:u}),r.isNil(o)?a:o)}Cn.handledProps=["as","blurring","children","className","content","dimmed"],Cn.propTypes={};var Tn=Cn,Pn=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"containerRef",Object(a.createRef)()),z()(M()(n),"contentRef",Object(a.createRef)()),z()(M()(n),"handleClick",(function(e){var t=n.contentRef.current;q()(n.props,"onClick",e,n.props),t&&t!==e.target&&fn(t,e)||q()(n.props,"onClickOutside",e,n.props)})),n}return F()(t,e),O()(t,[{key:"componentDidMount",value:function(){var e=this.props.active;this.toggleStyles(e)}},{key:"componentDidUpdate",value:function(e){var t=this.props.active;e.active!==t&&this.toggleStyles(t)}},{key:"toggleStyles",value:function(e){var t=this.containerRef.current;t&&t.style&&(e?t.style.setProperty("display","flex","important"):t.style.removeProperty("display"))}},{key:"render",value:function(){var e=this.props,n=e.active,o=e.children,a=e.className,l=e.content,u=e.disabled,s=e.inverted,c=e.page,p=e.simple,f=e.verticalAlign,d=Y()("ui",it(n,"active transition visible"),it(u,"disabled"),it(s,"inverted"),it(c,"page"),it(p,"simple"),pt(f),"dimmer",a),h=H(t,this.props),m=dt(t,this.props),v=r.isNil(o)?l:o;return i.a.createElement(E,{innerRef:this.containerRef},i.a.createElement(m,S()({},h,{className:d,onClick:this.handleClick}),v&&i.a.createElement("div",{className:"content",ref:this.contentRef},v)))}}]),t}(a.Component);z()(Pn,"handledProps",["active","as","children","className","content","disabled","inverted","onClick","onClickOutside","page","simple","verticalAlign"]),Pn.propTypes={};var On=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handlePortalMount",(function(){nn()&&(document.body.classList.add("dimmed"),document.body.classList.add("dimmable"))})),z()(M()(n),"handlePortalUnmount",(function(){nn()&&(document.body.classList.remove("dimmed"),document.body.classList.remove("dimmable"))})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.active,r=e.page,o=H(t,this.props);return r?i.a.createElement(Sn,{closeOnEscape:!1,closeOnDocumentClick:!1,onMount:this.handlePortalMount,onUnmount:this.handlePortalUnmount,open:n,openOnTriggerClick:!1},i.a.createElement(Pn,S()({},o,{active:n,page:r}))):i.a.createElement(Pn,S()({},o,{active:n,page:r}))}}]),t}(a.Component);function An(e){var t=e.children,n=e.className,o=e.content,a=e.size,l=Y()("ui",a,n,"images"),u=H(An,e),s=dt(An,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(t)?o:t)}z()(On,"Dimmable",Tn),z()(On,"Inner",Pn),z()(On,"handledProps",["active","page"]),On.propTypes={},On.create=Ot(On,(function(e){return{content:e}})),An.handledProps=["as","children","className","content","size"],An.propTypes={};var In=An;function _n(e){var t=e.avatar,n=e.bordered,o=e.centered,a=e.children,l=e.circular,u=e.className,s=e.content,c=e.dimmer,p=e.disabled,f=e.floated,d=e.fluid,h=e.hidden,m=e.href,v=e.inline,y=e.label,g=e.rounded,b=e.size,w=e.spaced,x=e.verticalAlign,k=e.wrapped,E=e.ui,N=Y()(it(E,"ui"),b,it(t,"avatar"),it(n,"bordered"),it(l,"circular"),it(o,"centered"),it(p,"disabled"),it(d,"fluid"),it(h,"hidden"),it(v,"inline"),it(g,"rounded"),ut(w,"spaced"),lt(f,"floated"),pt(x),"image",u),C=H(_n,e),T=Jt(C,{htmlProps:Zt}),P=Vt()(T,2),O=P[0],A=P[1],I=dt(_n,e,(function(){if(!($()(c)&&$()(y)&&$()(k)&&r.isNil(a)))return"div"}));return r.isNil(a)?r.isNil(s)?"img"===I?i.a.createElement(I,S()({},A,O,{className:N})):i.a.createElement(I,S()({},A,{className:N,href:m}),On.create(c,{autoGenerateKey:!1}),Un.create(y,{autoGenerateKey:!1}),i.a.createElement("img",O)):i.a.createElement(I,S()({},C,{className:N}),s):i.a.createElement(I,S()({},C,{className:N}),a)}_n.handledProps=["as","avatar","bordered","centered","children","circular","className","content","dimmer","disabled","floated","fluid","hidden","href","inline","label","rounded","size","spaced","ui","verticalAlign","wrapped"],_n.Group=In,_n.propTypes={},_n.defaultProps={as:"img",ui:!0},_n.create=Ot(_n,(function(e){return{src:e}}));var Rn=_n;function jn(e){var t=e.children,n=e.className,o=e.content,a=Y()("detail",n),l=H(jn,e),u=dt(jn,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}jn.handledProps=["as","children","className","content"],jn.propTypes={},jn.create=Ot(jn,(function(e){return{content:e}}));var Mn=jn;function Dn(e){var t=e.children,n=e.circular,o=e.className,a=e.color,l=e.content,u=e.size,s=e.tag,c=Y()("ui",a,u,it(n,"circular"),it(s,"tag"),"labels",o),p=H(Dn,e),f=dt(Dn,e);return i.a.createElement(f,S()({},p,{className:c}),r.isNil(t)?l:t)}Dn.handledProps=["as","children","circular","className","color","content","size","tag"],Dn.propTypes={};var Fn=Dn,Un=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleClick",(function(e){var t=n.props.onClick;t&&t(e,n.props)})),z()(M()(n),"handleIconOverrides",(function(e){return{onClick:function(t){q()(e,"onClick",t),q()(n.props,"onRemove",t,n.props)}}})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.active,o=e.attached,a=e.basic,l=e.children,u=e.circular,s=e.className,c=e.color,p=e.content,f=e.corner,d=e.detail,h=e.empty,m=e.floating,v=e.horizontal,y=e.icon,g=e.image,b=e.onRemove,w=e.pointing,x=e.prompt,k=e.removeIcon,E=e.ribbon,N=e.size,C=e.tag,T=(!0===w?"pointing":("left"===w||"right"===w)&&"".concat(w," pointing"))||("above"===w||"below"===w)&&"pointing ".concat(w),P=Y()("ui",c,T,N,it(n,"active"),it(a,"basic"),it(u,"circular"),it(h,"empty"),it(m,"floating"),it(v,"horizontal"),it(!0===g,"image"),it(x,"prompt"),it(C,"tag"),ut(f,"corner"),ut(E,"ribbon"),lt(o,"attached"),"label",s),O=H(t,this.props),A=dt(t,this.props);if(!r.isNil(l))return i.a.createElement(A,S()({},O,{className:P,onClick:this.handleClick}),l);var I=qt()(k)?"delete":k;return i.a.createElement(A,S()({className:P,onClick:this.handleClick},O),Bt.create(y,{autoGenerateKey:!1}),"boolean"!=typeof g&&Rn.create(g,{autoGenerateKey:!1}),p,Mn.create(d,{autoGenerateKey:!1}),b&&Bt.create(I,{autoGenerateKey:!1,overrideProps:this.handleIconOverrides}))}}]),t}(a.Component);function zn(e){var t=e.children,n=e.className,o=e.content,a=e.hidden,l=e.visible,u=Y()(it(l,"visible"),it(a,"hidden"),"content",n),s=H(zn,e),c=dt(zn,e);return i.a.createElement(c,S()({},s,{className:u}),r.isNil(t)?o:t)}z()(Un,"Detail",Mn),z()(Un,"Group",Fn),z()(Un,"handledProps",["active","as","attached","basic","children","circular","className","color","content","corner","detail","empty","floating","horizontal","icon","image","onClick","onRemove","pointing","prompt","removeIcon","ribbon","size","tag"]),Un.propTypes={},Un.create=Ot(Un,(function(e){return{content:e}})),zn.handledProps=["as","children","className","content","hidden","visible"],zn.propTypes={};var Ln=zn,Bn=n(14),Wn=n.n(Bn);function qn(e){var t=e.attached,n=e.basic,o=e.buttons,a=e.children,l=e.className,u=e.color,s=e.compact,c=e.content,p=e.floated,f=e.fluid,d=e.icon,h=e.inverted,m=e.labeled,v=e.negative,y=e.positive,g=e.primary,b=e.secondary,w=e.size,x=e.toggle,k=e.vertical,E=e.widths,N=Y()("ui",u,w,it(n,"basic"),it(s,"compact"),it(f,"fluid"),it(d,"icon"),it(h,"inverted"),it(m,"labeled"),it(v,"negative"),it(y,"positive"),it(g,"primary"),it(b,"secondary"),it(x,"toggle"),it(k,"vertical"),ut(t,"attached"),lt(p,"floated"),ft(E),"buttons",l),C=H(qn,e),T=dt(qn,e);return $()(o)?i.a.createElement(T,S()({},C,{className:N}),r.isNil(a)?c:a):i.a.createElement(T,S()({},C,{className:N}),Wn()(o,(function(e){return $n.create(e)})))}qn.handledProps=["as","attached","basic","buttons","children","className","color","compact","content","floated","fluid","icon","inverted","labeled","negative","positive","primary","secondary","size","toggle","vertical","widths"],qn.propTypes={};var Hn=qn;function Vn(e){var t=e.className,n=e.text,r=Y()("or",t),o=H(Vn,e),a=dt(Vn,e);return i.a.createElement(a,S()({},o,{className:r,"data-text":n}))}Vn.handledProps=["as","className","text"],Vn.propTypes={};var Kn=Vn,Gn=function(e){function t(){var e,n;T()(this,t);for(var o=arguments.length,i=new Array(o),l=0;l<o;l++)i[l]=arguments[l];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(i))),z()(M()(n),"ref",Object(a.createRef)()),z()(M()(n),"computeElementType",(function(){var e=n.props,t=e.attached,r=e.label;if(!$()(t)||!$()(r))return"div"})),z()(M()(n),"computeTabIndex",(function(e){var t=n.props,r=t.disabled,o=t.tabIndex;return $()(o)?r?-1:"div"===e?0:void 0:o})),z()(M()(n),"focus",(function(){return q()(n.ref.current,"focus")})),z()(M()(n),"handleClick",(function(e){n.props.disabled?e.preventDefault():q()(n.props,"onClick",e,n.props)})),z()(M()(n),"hasIconClass",(function(){var e=n.props,t=e.labelPosition,o=e.children,a=e.content,i=e.icon;return!0===i||i&&(t||r.isNil(o)&&$()(a))})),n}return F()(t,e),O()(t,[{key:"computeButtonAriaRole",value:function(e){var t=this.props.role;return $()(t)?"button"!==e?"button":void 0:t}},{key:"render",value:function(){var e=this.props,n=e.active,o=e.animated,a=e.attached,l=e.basic,u=e.children,s=e.circular,c=e.className,p=e.color,f=e.compact,d=e.content,h=e.disabled,m=e.floated,v=e.fluid,y=e.icon,g=e.inverted,b=e.label,w=e.labelPosition,x=e.loading,k=e.negative,N=e.positive,C=e.primary,T=e.secondary,P=e.size,O=e.toggle,A=Y()(p,P,it(n,"active"),it(l,"basic"),it(s,"circular"),it(f,"compact"),it(v,"fluid"),it(this.hasIconClass(),"icon"),it(g,"inverted"),it(x,"loading"),it(k,"negative"),it(N,"positive"),it(C,"primary"),it(T,"secondary"),it(O,"toggle"),ut(o,"animated"),ut(a,"attached")),I=Y()(ut(w||!!b,"labeled")),_=Y()(it(h,"disabled"),lt(m,"floated")),R=H(t,this.props),j=dt(t,this.props,this.computeElementType),M=this.computeTabIndex(j);if(!$()(b)){var D=Y()("ui",A,"button",c),F=Y()("ui",I,"button",c,_),U=Un.create(b,{defaultProps:{basic:!0,pointing:"left"===w?"right":"left"},autoGenerateKey:!1});return i.a.createElement(j,S()({},R,{className:F,onClick:this.handleClick}),"left"===w&&U,i.a.createElement(E,{innerRef:this.ref},i.a.createElement("button",{className:D,"aria-pressed":O?!!n:void 0,disabled:h,tabIndex:M},Bt.create(y,{autoGenerateKey:!1})," ",d)),("right"===w||!w)&&U)}var z=Y()("ui",A,_,I,"button",c),L=!r.isNil(u),B=this.computeButtonAriaRole(j);return i.a.createElement(E,{innerRef:this.ref},i.a.createElement(j,S()({},R,{className:z,"aria-pressed":O?!!n:void 0,disabled:h&&"button"===j||void 0,onClick:this.handleClick,role:B,tabIndex:M}),L&&u,!L&&Bt.create(y,{autoGenerateKey:!1}),!L&&d))}}]),t}(a.Component);z()(Gn,"defaultProps",{as:"button"}),z()(Gn,"Content",Ln),z()(Gn,"Group",Hn),z()(Gn,"Or",Kn),z()(Gn,"handledProps",["active","animated","as","attached","basic","children","circular","className","color","compact","content","disabled","floated","fluid","icon","inverted","label","labelPosition","loading","negative","onClick","positive","primary","role","secondary","size","tabIndex","toggle"]),Gn.propTypes={},Gn.create=Ot(Gn,(function(e){return{content:e}}));var $n=Gn,Qn=n(62),Yn=n.n(Qn),Xn=n(47),Zn=n.n(Xn),Jn=n(32),er=n.n(Jn),tr=rn.instance,nr=function(e){return null!==e&&"object"===p(e)&&e.hasOwnProperty("current")},rr={current:null},or=new WeakMap,ar=function(e){if(null===e)return rr;if(or.has(e))return or.get(e);var t={current:e};return or.set(e,t),t},ir=function(e){var t=e.node;if(nn())return nr(t)?t:$()(t)?ar(document.body):ar(t)},lr=n(223),ur=n.n(lr),sr=n(224),cr=n.n(sr),pr=n(225),fr=n.n(pr),dr=n(226),hr=n.n(dr),mr=n(227),vr=n.n(mr),yr=n(228),gr=n.n(yr),br=n(229),wr=n.n(br),xr=n(230),kr=n.n(xr)()(wr.a,gr()("props.className"),vr()(hr()(/\s+/)),fr()(cr.a),ur.a),Er=n(63),Nr=n.n(Er),Sr=function(e,t){return[Nr()(t,e),Nr()(e,t)]},Cr=new Map,Tr=function(e,t){var n=kr(t),r=Sr(Cr.get(e),n),o=Vt()(r,2),a=o[0],i=o[1];e.current&&(Qt()(a,(function(t){return e.current.classList.add(t)})),Qt()(i,(function(t){return e.current.classList.remove(t)}))),Cr.set(e,n)},Pr=new function e(){var t=this;T()(this,e),z()(this,"add",(function(e,n){t.nodes.has(e)?t.nodes.get(e).add(n):t.nodes.set(e,new Set([n]))})),z()(this,"del",(function(e,n){if(t.nodes.has(e)){var r=t.nodes.get(e);1!==r.size?r.delete(n):t.nodes.delete(e)}})),z()(this,"emit",(function(e,n){n(e,t.nodes.get(e))})),this.nodes=new Map},Or=function(e){function t(){return T()(this,t),I()(this,R()(t).apply(this,arguments))}return F()(t,e),O()(t,[{key:"shouldComponentUpdate",value:function(e){return e.className!==this.props.className}},{key:"componentDidMount",value:function(){var e=ir(this.props);Pr.add(e,this),Pr.emit(e,Tr)}},{key:"componentDidUpdate",value:function(){Pr.emit(ir(this.props),Tr)}},{key:"componentWillUnmount",value:function(){var e=ir(this.props);Pr.del(e,this),Pr.emit(e,Tr)}},{key:"render",value:function(){return null}}]),t}(a.Component);function Ar(e){var t=e.children,n=e.className,o=e.content,a=Y()(n,"header"),l=H(Ar,e),u=dt(Ar,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}z()(Or,"handledProps",["className","node"]),Or.propTypes={},Ar.handledProps=["as","children","className","content"],Ar.propTypes={},Ar.create=Ot(Ar,(function(e){return{content:e}}));var Ir=Ar;function _r(e){var t=e.children,n=e.className,o=e.content,a=e.image,l=e.scrolling,u=Y()(n,it(a,"image"),it(l,"scrolling"),"content"),s=H(_r,e),c=dt(_r,e);return i.a.createElement(c,S()({},s,{className:u}),r.isNil(t)?o:t)}_r.handledProps=["as","children","className","content","image","scrolling"],_r.propTypes={},_r.create=Ot(_r,(function(e){return{content:e}}));var Rr=_r,jr=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleButtonOverrides",(function(e){return{onClick:function(t,r){q()(e,"onClick",t,r),q()(n.props,"onActionClick",t,r)}}})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this,n=this.props,o=n.actions,a=n.children,l=n.className,u=n.content,s=Y()("actions",l),c=H(t,this.props),p=dt(t,this.props);return r.isNil(a)?r.isNil(u)?i.a.createElement(p,S()({},c,{className:s}),Wn()(o,(function(t){return $n.create(t,{overrideProps:e.handleButtonOverrides})}))):i.a.createElement(p,S()({},c,{className:s}),u):i.a.createElement(p,S()({},c,{className:s}),a)}}]),t}(a.Component);function Mr(e){var t=e.children,n=e.className,o=e.content,a=Y()("description",n),l=H(Mr,e),u=dt(Mr,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}z()(jr,"handledProps",["actions","as","children","className","content","onActionClick"]),jr.propTypes={},jr.create=Ot(jr,(function(e){return{actions:e}})),Mr.handledProps=["as","children","className","content"],Mr.propTypes={};var Dr=Mr,Fr=function(e){var t=e.height+0,n=e.height+0,r=window.innerHeight;return r/2+-n/2+t+50<r},Ur=function(e,t,n){var r=t&&e?-n.height/2:0;return{marginLeft:-n.width/2,marginTop:r}},zr=function(){return!window.ActiveXObject&&"ActiveXObject"in window},Lr=function(e){function t(){var e,n;T()(this,t);for(var o=arguments.length,l=new Array(o),u=0;u<o;u++)l[u]=arguments[u];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(l))),z()(M()(n),"legacy",nn()&&zr()),z()(M()(n),"ref",Object(a.createRef)()),z()(M()(n),"dimmerRef",Object(a.createRef)()),z()(M()(n),"latestDocumentMouseDownEvent",null),z()(M()(n),"getMountNode",(function(){return nn()?n.props.mountNode||document.body:null})),z()(M()(n),"handleActionsOverrides",(function(e){return{onActionClick:function(t,r){q()(e,"onActionClick",t,r),q()(n.props,"onActionClick",t,n.props),n.handleClose(t)}}})),z()(M()(n),"handleClose",(function(e){q()(n.props,"onClose",e,n.props),n.trySetState({open:!1})})),z()(M()(n),"handleDocumentMouseDown",(function(e){n.latestDocumentMouseDownEvent=e})),z()(M()(n),"handleDocumentClick",(function(e){var t=n.props.closeOnDimmerClick,r=n.latestDocumentMouseDownEvent;n.latestDocumentMouseDownEvent=null,!t||fn(n.ref.current,r)||fn(n.ref.current,e)||(q()(n.props,"onClose",e,n.props),n.trySetState({open:!1}))})),z()(M()(n),"handleIconOverrides",(function(e){return{onClick:function(t){q()(e,"onClick",t),n.handleClose(t)}}})),z()(M()(n),"handleOpen",(function(e){q()(n.props,"onOpen",e,n.props),n.trySetState({open:!0})})),z()(M()(n),"handlePortalMount",(function(e){var t=n.props.eventPool;n.setState({scrolling:!1}),n.setPositionAndClassNames(),tr.sub("mousedown",n.handleDocumentMouseDown,{pool:t,target:n.dimmerRef.current}),tr.sub("click",n.handleDocumentClick,{pool:t,target:n.dimmerRef.current}),q()(n.props,"onMount",e,n.props)})),z()(M()(n),"handlePortalUnmount",(function(e){var t=n.props.eventPool;cancelAnimationFrame(n.animationRequestId),tr.unsub("mousedown",n.handleDocumentMouseDown,{pool:t,target:n.dimmerRef.current}),tr.unsub("click",n.handleDocumentClick,{pool:t,target:n.dimmerRef.current}),q()(n.props,"onUnmount",e,n.props)})),z()(M()(n),"setDimmerNodeStyle",(function(){var e=n.dimmerRef.current;e&&e.style&&"flex"!==e.style.display&&e.style.setProperty("display","flex","important")})),z()(M()(n),"setPositionAndClassNames",(function(){var e,t=n.props,r=t.centered,o=t.dimmer,a={};if(n.ref.current){var i=n.ref.current.getBoundingClientRect(),l=Fr(i);e=!l;var u=n.legacy?Ur(l,r,i):{};er()(n.state.legacyStyles,u)||(a.legacyStyles=u),n.state.scrolling!==e&&(a.scrolling=e)}var s=Y()(it(o,"dimmable dimmed"),it("blurring"===o," blurring"),it(e," scrolling"));n.state.mountClasses!==s&&(a.mountClasses=s),vn()(a)||n.setState(a),n.animationRequestId=requestAnimationFrame(n.setPositionAndClassNames),n.setDimmerNodeStyle()})),z()(M()(n),"renderContent",(function(e){var o=n.props,l=o.actions,u=o.basic,s=o.children,c=o.className,p=o.closeIcon,f=o.content,d=o.header,h=o.mountNode,m=o.size,v=o.style,y=n.state,g=y.legacyStyles,b=y.mountClasses,w=y.scrolling,x=Y()("ui",m,it(u,"basic"),it(n.legacy,"legacy"),it(w,"scrolling"),"modal transition visible active",c),k=dt(t,n.props),N=!0===p?"close":p,C=Bt.create(N,{overrideProps:n.handleIconOverrides});return i.a.createElement(E,{innerRef:n.ref},i.a.createElement(k,S()({},e,{className:x,style:mt()({},g,v)}),i.a.createElement(Or,{className:b,node:h}),C,r.isNil(s)?i.a.createElement(a.Fragment,null,Ir.create(d,{autoGenerateKey:!1}),Rr.create(f,{autoGenerateKey:!1}),jr.create(l,{overrideProps:n.handleActionsOverrides})):s))})),n}return F()(t,e),O()(t,[{key:"componentWillUnmount",value:function(){this.handlePortalUnmount()}},{key:"render",value:function(){var e=this.state.open,n=this.props,r=n.centered,o=n.closeOnDocumentClick,l=n.dimmer,u=n.eventPool,s=n.trigger,c=this.getMountNode();if(!nn())return Object(a.isValidElement)(s)?s:null;var p=H(t,this.props),f=Sn.handledProps,d=Zn()(p,(function(e,t,n){return Gt()(f,n)||(e[n]=t),e}),{}),h=Yn()(p,f),m=Y()("ui","inverted"===l&&"inverted",!r&&"top aligned","page modals dimmer transition visible active");return i.a.createElement(Sn,S()({closeOnDocumentClick:o},h,{trigger:s,eventPool:u,mountNode:c,open:e,onClose:this.handleClose,onMount:this.handlePortalMount,onOpen:this.handleOpen,onUnmount:this.handlePortalUnmount}),i.a.createElement("div",{className:m,ref:this.dimmerRef},this.renderContent(d)))}}]),t}(xn);z()(Lr,"defaultProps",{centered:!0,dimmer:!0,closeOnDimmerClick:!0,closeOnDocumentClick:!1,eventPool:"Modal"}),z()(Lr,"autoControlledProps",["open"]),z()(Lr,"Header",Ir),z()(Lr,"Content",Rr),z()(Lr,"Description",Dr),z()(Lr,"Actions",jr),z()(Lr,"handledProps",["actions","as","basic","centered","children","className","closeIcon","closeOnDimmerClick","closeOnDocumentClick","content","defaultOpen","dimmer","eventPool","header","mountNode","onActionClick","onClose","onMount","onOpen","onUnmount","open","size","style","trigger"]),Lr.propTypes={};var Br=Lr,Wr=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleCancel",(function(e){q()(n.props,"onCancel",e,n.props)})),z()(M()(n),"handleCancelOverrides",(function(e){return{onClick:function(t,r){q()(e,"onClick",t,r),n.handleCancel(t)}}})),z()(M()(n),"handleConfirmOverrides",(function(e){return{onClick:function(t,r){q()(e,"onClick",t,r),q()(n.props,"onConfirm",t,n.props)}}})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.cancelButton,r=e.confirmButton,o=e.content,a=e.header,l=e.open,u=e.size,s=H(t,this.props),c={};return B()(this.props,"open")&&(c.open=l),i.a.createElement(Br,S()({},s,c,{size:u,onClose:this.handleCancel}),Br.Header.create(a,{autoGenerateKey:!1}),Br.Content.create(o,{autoGenerateKey:!1}),i.a.createElement(Br.Actions,null,$n.create(n,{autoGenerateKey:!1,overrideProps:this.handleCancelOverrides}),$n.create(r,{autoGenerateKey:!1,defaultProps:{primary:!0},overrideProps:this.handleConfirmOverrides})))}}]),t}(a.Component);z()(Wr,"defaultProps",{cancelButton:"Cancel",confirmButton:"OK",content:"Are you sure?",size:"small"}),z()(Wr,"handledProps",["cancelButton","confirmButton","content","header","onCancel","onConfirm","open","size"]),Wr.propTypes={};var qr=Wr,Hr=function(e){return{active:!1,type:"ellipsisItem",value:e}},Vr=function(e){return{active:!1,type:"prevItem",value:Math.max(1,e-1)}},Kr=function(e,t){return{active:!1,type:"nextItem",value:Math.min(e+1,t)}},Gr=function(e){return{active:!1,type:"lastItem",value:e}},$r=n(231),Qr=n.n($r),Yr=function(e,t,n){var r=t-1;return(r!==e+1?Hr:n)(r)},Xr=function(e,t,n){var r=e+1;return(r!==t-1?Hr:n)(r)},Zr=function(e,t,n){return Wn()(Qr()(e,t+1),n)},Jr=function(e){var t,n,r,o={activePage:+(t=e).activePage,boundaryRange:+t.boundaryRange,hideEllipsis:!!t.hideEllipsis,siblingRange:+t.siblingRange,totalPages:+t.totalPages},a=o.activePage,i=o.totalPages,l=function(e){return function(t){return{active:e===t,type:"pageItem",value:t}}}(a),u=(r=(n=o).boundaryRange,1+(n.hideEllipsis?0:2)+2*n.siblingRange+2*r>=n.totalPages?Zr(1,i,l):function(e,t){var n=e.activePage,r=e.boundaryRange,o=e.hideEllipsis,a=e.siblingRange,i=e.totalPages,l=o?0:1,u=r,s=Zr(1,u,t),c=i+1-r,p=Zr(c,i,t),f=Math.min(Math.max(n-a,u+l+1),c-l-2*a-1),d=f+2*a,h=Zr(f,d,t);return[].concat(K()(s),[!o&&Yr(u,f,t)],K()(h),[!o&&Xr(d,c,t)],K()(p)).filter(Boolean)}(o,l));return[{active:!1,type:"firstItem",value:1},Vr(a)].concat(K()(u),[Kr(a,i),Gr(i)])};function eo(e){var t=e.children,n=e.className,o=e.content,a=Y()("header",n),l=H(eo,e),u=dt(eo,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}eo.handledProps=["as","children","className","content"],eo.propTypes={};var to=eo,no=n(232),ro=n.n(no),oo=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleClick",(function(e){n.props.disabled||q()(n.props,"onClick",e,n.props)})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.active,o=e.children,a=e.className,l=e.color,u=e.content,s=e.disabled,c=e.fitted,p=e.header,f=e.icon,d=e.link,h=e.name,m=e.onClick,v=e.position,y=Y()(l,v,it(n,"active"),it(s,"disabled"),it(!0===f||f&&!(h||u),"icon"),it(p,"header"),it(d,"link"),ut(c,"fitted"),"item",a),g=dt(t,this.props,(function(){if(m)return"a"})),b=H(t,this.props);return r.isNil(o)?i.a.createElement(g,S()({},b,{className:y,onClick:this.handleClick}),Bt.create(f,{autoGenerateKey:!1}),r.isNil(u)?ro()(h):u):i.a.createElement(g,S()({},b,{className:y,onClick:this.handleClick}),o)}}]),t}(a.Component);function ao(e){var t=e.children,n=e.className,o=e.content,a=e.position,l=Y()(a,"menu",n),u=H(ao,e),s=dt(ao,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(t)?o:t)}z()(oo,"handledProps",["active","as","children","className","color","content","disabled","fitted","header","icon","index","link","name","onClick","position"]),oo.propTypes={},oo.create=Ot(oo,(function(e){return{content:e,name:e}})),ao.handledProps=["as","children","className","content","position"],ao.propTypes={};var io=ao,lo=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleItemOverrides",(function(e){return{onClick:function(t,r){var o=r.index;n.trySetState({activeIndex:o}),q()(e,"onClick",t,r),q()(n.props,"onItemClick",t,r)}}})),n}return F()(t,e),O()(t,[{key:"renderItems",value:function(){var e=this,t=this.props.items,n=this.state.activeIndex;return Wn()(t,(function(t,r){return oo.create(t,{defaultProps:{active:parseInt(n,10)===r,index:r},overrideProps:e.handleItemOverrides})}))}},{key:"render",value:function(){var e=this.props,n=e.attached,o=e.borderless,a=e.children,l=e.className,u=e.color,s=e.compact,c=e.fixed,p=e.floated,f=e.fluid,d=e.icon,h=e.inverted,m=e.pagination,v=e.pointing,y=e.secondary,g=e.size,b=e.stackable,w=e.tabular,x=e.text,k=e.vertical,E=e.widths,N=Y()("ui",u,g,it(o,"borderless"),it(s,"compact"),it(f,"fluid"),it(h,"inverted"),it(m,"pagination"),it(v,"pointing"),it(y,"secondary"),it(b,"stackable"),it(x,"text"),it(k,"vertical"),ut(n,"attached"),ut(p,"floated"),ut(d,"icon"),ut(w,"tabular"),lt(c,"fixed"),ft(E,"item"),l,"menu"),C=H(t,this.props),T=dt(t,this.props);return i.a.createElement(T,S()({},C,{className:N}),r.isNil(a)?this.renderItems():a)}}]),t}(xn);z()(lo,"autoControlledProps",["activeIndex"]),z()(lo,"Header",to),z()(lo,"Item",oo),z()(lo,"Menu",io),z()(lo,"handledProps",["activeIndex","as","attached","borderless","children","className","color","compact","defaultActiveIndex","fixed","floated","fluid","icon","inverted","items","onItemClick","pagination","pointing","secondary","size","stackable","tabular","text","vertical","widths"]),lo.propTypes={},lo.create=Ot(lo,(function(e){return{items:e}}));var uo=lo,so=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleClick",(function(e){q()(n.props,"onClick",e,n.props)})),z()(M()(n),"handleKeyDown",(function(e){q()(n.props,"onKeyDown",e,n.props),ln.a.getCode(e)===ln.a.Enter&&q()(n.props,"onClick",e,n.props)})),z()(M()(n),"handleOverrides",(function(){return{onClick:n.handleClick,onKeyDown:n.handleKeyDown}})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,t=e.active,n=e.type,r=this.props.disabled||"ellipsisItem"===n;return oo.create(this.props,{defaultProps:{active:t,"aria-current":t,"aria-disabled":r,disabled:r,onClick:this.handleClick,onKeyDown:this.handleKeyDown,tabIndex:r?-1:0},overrideProps:this.handleOverrides})}}]),t}(a.Component);z()(so,"handledProps",["active","disabled","onClick","onKeyDown","type"]),so.propTypes={},so.create=Ot(so,(function(e){return{content:e}}));var co=so,po=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleItemClick",(function(e,t){var r=t.value;+n.state.activePage!=+r&&(n.trySetState({activePage:r}),q()(n.props,"onPageChange",e,mt()({},n.props,{activePage:r})))})),z()(M()(n),"handleItemOverrides",(function(e,t,r){return function(o){return{active:e,type:t,key:"".concat(t,"-").concat(r),onClick:function(e,t){q()(o,"onClick",e,t),"ellipsisItem"!==t.type&&n.handleItemClick(e,t)}}}})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this,n=this.props,r=n["aria-label"],o=n.boundaryRange,a=n.disabled,l=n.ellipsisItem,u=n.siblingRange,s=n.totalPages,c=this.state.activePage,p=Jr({activePage:c,boundaryRange:o,hideEllipsis:$()(l),siblingRange:u,totalPages:s}),f=H(t,this.props);return i.a.createElement(uo,S()({},f,{"aria-label":r,pagination:!0,role:"navigation"}),Wn()(p,(function(t){var n=t.active,r=t.type,o=t.value;return co.create(e.props[r],{defaultProps:{content:o,disabled:a,value:o},overrideProps:e.handleItemOverrides(n,r,o)})})))}}]),t}(xn);z()(po,"autoControlledProps",["activePage"]),z()(po,"defaultProps",{"aria-label":"Pagination Navigation",boundaryRange:1,ellipsisItem:"...",firstItem:{"aria-label":"First item",content:"«"},lastItem:{"aria-label":"Last item",content:"»"},nextItem:{"aria-label":"Next item",content:"⟩"},pageItem:{},prevItem:{"aria-label":"Previous item",content:"⟨"},siblingRange:1}),z()(po,"Item",co),z()(po,"handledProps",["activePage","aria-label","boundaryRange","defaultActivePage","disabled","ellipsisItem","firstItem","lastItem","nextItem","onPageChange","pageItem","prevItem","siblingRange","totalPages"]),po.propTypes={};var fo=n(233),ho=n.n(fo),mo=n(18),vo=n.n(mo),yo=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"inputRef",Object(a.createRef)()),z()(M()(n),"labelRef",Object(a.createRef)()),z()(M()(n),"canToggle",(function(){var e=n.props,t=e.disabled,r=e.radio,o=e.readOnly,a=n.state.checked;return!(t||o||r&&a)})),z()(M()(n),"computeTabIndex",(function(){var e=n.props,t=e.disabled,r=e.tabIndex;return $()(r)?t?-1:0:r})),z()(M()(n),"handleClick",(function(e){var t=n.props.id,r=n.state,o=r.checked,a=r.indeterminate,i=q()(n.inputRef.current,"contains",e.target),l=q()(n.labelRef.current,"contains",e.target),u=!l&&!i,s=!$()(t);l&&s||q()(n.props,"onClick",e,mt()({},n.props,{checked:!o,indeterminate:!!a})),n.isClickFromMouse&&(n.isClickFromMouse=!1,l&&!s&&n.handleChange(e),u&&n.handleChange(e),l&&s&&e.stopPropagation())})),z()(M()(n),"handleChange",(function(e){var t=n.state.checked;n.canToggle()&&(q()(n.props,"onChange",e,mt()({},n.props,{checked:!t,indeterminate:!1})),n.trySetState({checked:!t,indeterminate:!1}))})),z()(M()(n),"handleMouseDown",(function(e){var t=n.state,r=t.checked,o=t.indeterminate;q()(n.props,"onMouseDown",e,mt()({},n.props,{checked:!!r,indeterminate:!!o})),e.defaultPrevented||q()(n.inputRef.current,"focus"),e.preventDefault()})),z()(M()(n),"handleMouseUp",(function(e){var t=n.state,r=t.checked,o=t.indeterminate;n.isClickFromMouse=!0,q()(n.props,"onMouseUp",e,mt()({},n.props,{checked:!!r,indeterminate:!!o}))})),z()(M()(n),"setIndeterminate",(function(){var e=n.state.indeterminate;ho()(n.inputRef,"current.indeterminate",!!e)})),n}return F()(t,e),O()(t,[{key:"componentDidMount",value:function(){this.setIndeterminate()}},{key:"componentDidUpdate",value:function(){this.setIndeterminate()}},{key:"render",value:function(){var e=this.props,n=e.className,r=e.disabled,o=e.label,a=e.id,l=e.name,u=e.radio,s=e.readOnly,c=e.slider,p=e.toggle,f=e.type,d=e.value,h=this.state,m=h.checked,v=h.indeterminate,y=Y()("ui",it(m,"checked"),it(r,"disabled"),it(v,"indeterminate"),it($()(o),"fitted"),it(u,"radio"),it(s,"read-only"),it(c,"slider"),it(p,"toggle"),"checkbox",n),g=H(t,this.props),b=dt(t,this.props),w=Jt(g,{htmlProps:Yt}),x=Vt()(w,2),k=x[0],N=x[1],C=jt(o,{defaultProps:{htmlFor:a},autoGenerateKey:!1})||i.a.createElement("label",{htmlFor:a});return i.a.createElement(b,S()({},N,{className:y,onClick:this.handleClick,onChange:this.handleChange,onMouseDown:this.handleMouseDown,onMouseUp:this.handleMouseUp}),i.a.createElement(E,{innerRef:this.inputRef},i.a.createElement("input",S()({},k,{checked:m,className:"hidden",disabled:r,id:a,name:l,readOnly:!0,tabIndex:this.computeTabIndex(),type:f,value:d}))),i.a.createElement(E,{innerRef:this.labelRef},C))}}]),t}(xn);function go(e){var t=e.slider,n=e.toggle,r=e.type,o=H(go,e),a=!(t||n)||void 0;return i.a.createElement(yo,S()({},o,{type:r,radio:a,slider:t,toggle:n}))}z()(yo,"defaultProps",{type:"checkbox"}),z()(yo,"autoControlledProps",["checked","indeterminate"]),z()(yo,"handledProps",["as","checked","className","defaultChecked","defaultIndeterminate","disabled","fitted","id","indeterminate","label","name","onChange","onClick","onMouseDown","onMouseUp","radio","readOnly","slider","tabIndex","toggle","type","value"]),yo.propTypes={},go.handledProps=["slider","toggle","type"],go.propTypes={},go.defaultProps={type:"radio"};var bo=go,wo=function(e,t){var n=t.maxWidth;return function(e,t){return!!$()(t)||e>=t}(e,t.minWidth)&&function(e,t){return!!$()(t)||e<=t}(e,n)},xo=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"state",{visible:!0}),z()(M()(n),"handleResize",(function(e){n.ticking||(n.ticking=!0,n.frameId=requestAnimationFrame((function(){return n.handleUpdate(e)})))})),z()(M()(n),"handleUpdate",(function(e){n.ticking=!1;var t=n.state.visible,r=q()(n.props,"getWidth"),o=wo(r,n.props);t!==o&&n.setState({visible:o}),q()(n.props,"onUpdate",e,mt()({},n.props,{width:r}))})),n}return F()(t,e),O()(t,[{key:"componentDidMount",value:function(){var e=this.props.fireOnMount;tr.sub("resize",this.handleResize,{target:"window"}),e&&this.handleUpdate()}},{key:"componentWillUnmount",value:function(){tr.unsub("resize",this.handleResize,{target:"window"}),cancelAnimationFrame(this.frameId)}},{key:"render",value:function(){var e=this.props.children,n=this.state.visible,r=dt(t,this.props),o=H(t,this.props);return n?i.a.createElement(r,o,e):null}}],[{key:"getDerivedStateFromProps",value:function(e){var t=q()(e,"getWidth");return{visible:wo(t,e)}}}]),t}(a.Component);z()(xo,"defaultProps",{getWidth:function(){return nn()?window.innerWidth:0}}),z()(xo,"onlyMobile",{minWidth:320,maxWidth:767}),z()(xo,"onlyTablet",{minWidth:768,maxWidth:991}),z()(xo,"onlyComputer",{minWidth:992}),z()(xo,"onlyLargeScreen",{minWidth:1200,maxWidth:1919}),z()(xo,"onlyWidescreen",{minWidth:1920}),z()(xo,"handledProps",["as","children","fireOnMount","getWidth","maxWidth","minWidth","onUpdate"]),xo.propTypes={};var ko=n(108),Eo=n.n(ko),No=n(234),So=n.n(No),Co=n(235),To=n.n(Co),Po=n(141),Oo=n.n(Po),Ao=n(236),Io=n.n(Ao),_o=n(107),Ro=n.n(_o),jo=n(237),Mo=n.n(jo),Do=n(238),Fo=n.n(Do),Uo=n(144),zo=n.n(Uo),Lo=n(104),Bo=n.n(Lo),Wo=n(239),qo=n.n(Wo);function Ho(e){var t=e.className,n=Y()("divider",t),r=H(Ho,e),o=dt(Ho,e);return i.a.createElement(o,S()({},r,{className:n}))}Ho.handledProps=["as","className"],Ho.propTypes={};var Vo=Ho,Ko=function(e){function t(){return T()(this,t),I()(this,R()(t).apply(this,arguments))}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.className,r=e.name,o=Y()(r,"flag",n),a=H(t,this.props),l=dt(t,this.props);return i.a.createElement(l,S()({},a,{className:o}))}}]),t}(a.PureComponent);z()(Ko,"defaultProps",{as:"i"}),z()(Ko,"handledProps",["as","className","name"]),Ko.propTypes={},Ko.create=Ot(Ko,(function(e){return{name:e}}));var Go=Ko,$o=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleClick",(function(e){q()(n.props,"onClick",e,n.props)})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.active,o=e.children,a=e.className,l=e.content,u=e.disabled,s=e.description,c=e.flag,p=e.icon,f=e.image,d=e.label,h=e.selected,m=e.text,v=Y()(it(n,"active"),it(u,"disabled"),it(h,"selected"),"item",a),y=$()(p)?r.someByType(o,"DropdownMenu")&&"dropdown":p,g=H(t,this.props),b=dt(t,this.props),w={role:"option","aria-disabled":u,"aria-checked":n,"aria-selected":h};if(!r.isNil(o))return i.a.createElement(b,S()({},g,w,{className:v,onClick:this.handleClick}),o);var x=Go.create(c,{autoGenerateKey:!1}),k=Bt.create(y,{autoGenerateKey:!1}),E=Rn.create(f,{autoGenerateKey:!1}),N=Un.create(d,{autoGenerateKey:!1}),C=Pt("span",(function(e){return{children:e}}),s,{defaultProps:{className:"description"},autoGenerateKey:!1}),T=Pt("span",(function(e){return{children:e}}),r.isNil(l)?m:l,{defaultProps:{className:"text"},autoGenerateKey:!1});return i.a.createElement(b,S()({},g,w,{className:v,onClick:this.handleClick}),E,k,x,N,C,T)}}]),t}(a.Component);z()($o,"handledProps",["active","as","children","className","content","description","disabled","flag","icon","image","label","onClick","selected","text","value"]),$o.propTypes={},$o.create=Ot($o,(function(e){return e}));var Qo=$o;function Yo(e){var t=e.children,n=e.className,o=e.content,a=e.icon,l=Y()("header",n),u=H(Yo,e),s=dt(Yo,e);return r.isNil(t)?i.a.createElement(s,S()({},u,{className:l}),Bt.create(a,{autoGenerateKey:!1}),o):i.a.createElement(s,S()({},u,{className:l}),t)}Yo.handledProps=["as","children","className","content","icon"],Yo.propTypes={},Yo.create=Ot(Yo,(function(e){return{content:e}}));var Xo=Yo;function Zo(e){var t=e.children,n=e.className,o=e.content,a=e.direction,l=e.open,u=e.scrolling,s=Y()(a,it(l,"visible"),it(u,"scrolling"),"menu transition",n),c=H(Zo,e),p=dt(Zo,e);return i.a.createElement(p,S()({},c,{className:s}),r.isNil(t)?o:t)}Zo.handledProps=["as","children","className","content","direction","open","scrolling"],Zo.propTypes={};var Jo=Zo,ea=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleChange",(function(e){var t=vo()(e,"target.value");q()(n.props,"onChange",e,mt()({},n.props,{value:t}))})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.autoComplete,r=e.className,o=e.tabIndex,a=e.type,l=e.value,u=Y()("search",r),s=H(t,this.props);return i.a.createElement("input",S()({},s,{"aria-autocomplete":"list",autoComplete:n,className:u,onChange:this.handleChange,tabIndex:o,type:a,value:l}))}}]),t}(a.Component);z()(ea,"defaultProps",{autoComplete:"off",type:"text"}),z()(ea,"handledProps",["as","autoComplete","className","tabIndex","type","value"]),ea.propTypes={},ea.create=Ot(ea,(function(e){return{type:e}}));var ta=ea,na=function(e,t){return $()(e)?t:e},ra=function(e){function t(){var e,n;T()(this,t);for(var o=arguments.length,l=new Array(o),u=0;u<o;u++)l[u]=arguments[u];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(l))),z()(M()(n),"searchRef",Object(a.createRef)()),z()(M()(n),"sizerRef",Object(a.createRef)()),z()(M()(n),"ref",Object(a.createRef)()),z()(M()(n),"handleChange",(function(e,t){q()(n.props,"onChange",e,mt()({},n.props,{value:t}))})),z()(M()(n),"closeOnChange",(function(e){var t=n.props,r=t.closeOnChange,o=t.multiple;(qt()(r)?!o:r)&&n.close(e,Bo.a)})),z()(M()(n),"closeOnEscape",(function(e){n.props.closeOnEscape&&ln.a.getCode(e)===ln.a.Escape&&(e.preventDefault(),n.close(e))})),z()(M()(n),"moveSelectionOnKeyDown",(function(e){var t,r=n.props,o=r.multiple,a=r.selectOnNavigation,i=(t={},z()(t,ln.a.ArrowDown,1),z()(t,ln.a.ArrowUp,-1),t)[ln.a.getCode(e)];void 0!==i&&(e.preventDefault(),n.moveSelectionBy(i),!o&&a&&n.makeSelectedItemActive(e))})),z()(M()(n),"openOnSpace",(function(e){ln.a.getCode(e)===ln.a.Spacebar&&(e.preventDefault(),n.open(e))})),z()(M()(n),"openOnArrow",(function(e){var t=ln.a.getCode(e);Gt()([ln.a.ArrowDown,ln.a.ArrowUp],t)&&(n.state.open||(e.preventDefault(),n.open(e)))})),z()(M()(n),"makeSelectedItemActive",(function(e){var t=n.state,r=t.open,o=t.value,a=n.props.multiple,i=n.getSelectedItem(),l=vo()(i,"value");if(!$()(l)&&r){var u=a?zo()(n.state.value,[l]):l;(a?!!Nr()(u,o).length:u!==o)&&(n.setValue(u),n.setSelectedIndex(u),n.handleChange(e,u),i["data-additional"]&&q()(n.props,"onAddItem",e,mt()({},n.props,{value:l})))}})),z()(M()(n),"selectItemOnEnter",(function(e){var t=n.props.search;if(ln.a.getCode(e)===ln.a.Enter||!t&&ln.a.getCode(e)===ln.a.Spacebar){e.preventDefault();var r=Fo()(n.getMenuOptions());t&&0===r||(n.makeSelectedItemActive(e),n.closeOnChange(e),n.clearSearchQuery(),t&&q()(n.searchRef.current,"focus"))}})),z()(M()(n),"removeItemOnBackspace",(function(e){var t=n.props,r=t.multiple,o=t.search,a=n.state,i=a.searchQuery,l=a.value;if(ln.a.getCode(e)===ln.a.Backspace&&!i&&o&&r&&!vn()(l)){e.preventDefault();var u=Mo()(l);n.setValue(u),n.setSelectedIndex(u),n.handleChange(e,u)}})),z()(M()(n),"closeOnDocumentClick",(function(e){n.props.closeOnBlur&&(n.ref.current&&fn(n.ref.current,e)||n.close())})),z()(M()(n),"handleMouseDown",(function(e){n.isMouseDown=!0,q()(n.props,"onMouseDown",e,n.props),document.addEventListener("mouseup",n.handleDocumentMouseUp)})),z()(M()(n),"handleDocumentMouseUp",(function(){n.isMouseDown=!1,document.removeEventListener("mouseup",n.handleDocumentMouseUp)})),z()(M()(n),"handleClick",(function(e){var t=n.props,r=t.minCharacters,o=t.search,a=n.state,i=a.open,l=a.searchQuery;if(q()(n.props,"onClick",e,n.props),e.stopPropagation(),!o)return n.toggle(e);i?q()(n.searchRef.current,"focus"):l.length>=r||1===r?n.open(e):q()(n.searchRef.current,"focus")})),z()(M()(n),"handleIconClick",(function(e){var t=n.props.clearable,r=n.hasValue();q()(n.props,"onClick",e,n.props),e.stopPropagation(),t&&r?n.clearValue(e):n.toggle(e)})),z()(M()(n),"handleItemClick",(function(e,t){var r=n.props,o=r.multiple,a=r.search,i=n.state.value,l=t.value;if(e.stopPropagation(),(o||t.disabled)&&e.nativeEvent.stopImmediatePropagation(),!t.disabled){var u=t["data-additional"],s=o?zo()(n.state.value,[l]):l;(o?!!Nr()(s,i).length:s!==i)&&(n.setValue(s),n.setSelectedIndex(l),n.handleChange(e,s)),n.clearSearchQuery(l),a?q()(n.searchRef.current,"focus"):q()(n.ref.current,"focus"),n.closeOnChange(e),u&&q()(n.props,"onAddItem",e,mt()({},n.props,{value:l}))}})),z()(M()(n),"handleFocus",(function(e){n.state.focus||(q()(n.props,"onFocus",e,n.props),n.setState({focus:!0}))})),z()(M()(n),"handleBlur",(function(e){var t=vo()(e,"currentTarget");if(!t||!t.contains(document.activeElement)){var r=n.props,o=r.closeOnBlur,a=r.multiple,i=r.selectOnBlur;n.isMouseDown||(q()(n.props,"onBlur",e,n.props),i&&!a&&(n.makeSelectedItemActive(e),o&&n.close()),n.setState({focus:!1}),n.clearSearchQuery())}})),z()(M()(n),"handleSearchChange",(function(e,t){var r=t.value;e.stopPropagation();var o=n.props.minCharacters,a=n.state.open,i=r;q()(n.props,"onSearchChange",e,mt()({},n.props,{searchQuery:i})),n.trySetState({searchQuery:i,selectedIndex:0}),!a&&i.length>=o?n.open():a&&1!==o&&i.length<o&&n.close()})),z()(M()(n),"getKeyAndValues",(function(e){return e?e.map((function(e){return Yn()(e,["key","value"])})):e})),z()(M()(n),"getMenuOptions",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.state.value,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.props.options,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n.state.searchQuery,o=n.props,a=o.additionLabel,l=o.additionPosition,u=o.allowAdditions,s=o.deburr,c=o.multiple,p=o.search,f=t;if(c&&(f=hn()(f,(function(t){return!Gt()(e,t.value)}))),p&&r)if(xt()(p))f=p(f,r);else{var d=s?Ro()(r):r,h=new RegExp(Io()(d),"i");f=hn()(f,(function(e){return h.test(s?Ro()(e.text):e.text)}))}if(u&&p&&r&&!ee()(f,{text:r})){var m=i.a.isValidElement(a)?i.a.cloneElement(a,{key:"addition-label"}):a||"",v={key:"addition",text:[m,i.a.createElement("b",{key:"addition-query"},r)],value:r,className:"addition","data-additional":!0};"top"===l?f.unshift(v):f.push(v)}return f})),z()(M()(n),"getSelectedItem",(function(){var e=n.state.selectedIndex,t=n.getMenuOptions();return vo()(t,"[".concat(e,"]"))})),z()(M()(n),"getEnabledIndices",(function(e){var t=e||n.getMenuOptions();return Zn()(t,(function(e,t,n){return t.disabled||e.push(n),e}),[])})),z()(M()(n),"getItemByValue",(function(e){var t=n.props.options;return Z()(t,{value:e})})),z()(M()(n),"getMenuItemIndexByValue",(function(e,t){var r=t||n.getMenuOptions();return Oo()(r,["value",e])})),z()(M()(n),"getDropdownAriaOptions",(function(){var e=n.props,t=e.loading,r=e.disabled,o=e.search,a=e.multiple,i={role:o?"combobox":"listbox","aria-busy":t,"aria-disabled":r,"aria-expanded":!!n.state.open};return"listbox"===i.role&&(i["aria-multiselectable"]=a),i})),z()(M()(n),"clearSearchQuery",(function(e){var t=n.state.searchQuery;void 0!==t&&""!==t&&(n.trySetState({searchQuery:""}),n.setSelectedIndex(e,void 0,""))})),z()(M()(n),"setValue",(function(e){n.trySetState({value:e})})),z()(M()(n),"setSelectedIndex",(function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.state.value,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.props.options,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n.state.searchQuery,a=n.props.multiple,i=n.state.selectedIndex,l=n.getMenuOptions(t,r,o),u=n.getEnabledIndices(l);if(!i||i<0){var s=u[0];e=a?s:n.getMenuItemIndexByValue(t,l)||u[0]}else if(a)i>=l.length-1&&(e=u[u.length-1]);else{var c=n.getMenuItemIndexByValue(t,l);e=Gt()(u,c)?c:void 0}(!e||e<0)&&(e=u[0]),n.setState({selectedIndex:e})})),z()(M()(n),"handleLabelClick",(function(e,t){e.stopPropagation(),n.setState({selectedLabel:t.value}),q()(n.props,"onLabelClick",e,t)})),z()(M()(n),"handleLabelRemove",(function(e,t){e.stopPropagation();var r=n.state.value,o=Ft()(r,t.value);n.setValue(o),n.setSelectedIndex(o),n.handleChange(e,o)})),z()(M()(n),"moveSelectionBy",(function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.state.selectedIndex,r=n.getMenuOptions();if(void 0!==r&&!To()(r,"disabled")){var o=r.length-1,a=n.props.wrapSelection,i=t+e;!a&&(i>o||i<0)?i=t:i>o?i=0:i<0&&(i=o),r[i].disabled?n.moveSelectionBy(e,i):(n.setState({selectedIndex:i}),n.scrollSelectedItemIntoView())}})),z()(M()(n),"handleIconOverrides",(function(e){var t=n.props.clearable;return{className:Y()(t&&n.hasValue()&&"clear",e.className),onClick:function(t){q()(e,"onClick",t,e),n.handleIconClick(t)}}})),z()(M()(n),"clearValue",(function(e){var t=n.props.multiple?[]:"";n.setValue(t),n.setSelectedIndex(t),n.handleChange(e,t)})),z()(M()(n),"computeSearchInputTabIndex",(function(){var e=n.props,t=e.disabled,r=e.tabIndex;return $()(r)?t?-1:0:r})),z()(M()(n),"computeSearchInputWidth",(function(){var e=n.state.searchQuery;if(n.sizerRef.current&&e){n.sizerRef.current.style.display="inline",n.sizerRef.current.textContent=e;var t=Math.ceil(n.sizerRef.current.getBoundingClientRect().width);return n.sizerRef.current.style.removeProperty("display"),t}})),z()(M()(n),"computeTabIndex",(function(){var e=n.props,t=e.disabled,r=e.search,o=e.tabIndex;if(!r)return t?-1:$()(o)?0:o})),z()(M()(n),"handleSearchInputOverrides",(function(e){return{onChange:function(t,r){q()(e,"onChange",t,r),n.handleSearchChange(t,r)}}})),z()(M()(n),"hasValue",(function(){var e=n.props.multiple,t=n.state.value;return e?!vn()(t):!$()(t)&&""!==t})),z()(M()(n),"scrollSelectedItemIntoView",(function(){if(n.ref.current){var e=n.ref.current.querySelector(".menu.visible");if(e){var t=e.querySelector(".item.selected");if(t){var r=t.offsetTop<e.scrollTop,o=t.offsetTop+t.clientHeight>e.scrollTop+e.clientHeight;r?e.scrollTop=t.offsetTop:o&&(e.scrollTop=t.offsetTop+t.clientHeight-e.clientHeight)}}}})),z()(M()(n),"setOpenDirection",(function(){if(n.ref.current){var e=n.ref.current.querySelector(".menu.visible");if(e){var t=n.ref.current.getBoundingClientRect(),r=e.clientHeight,o=document.documentElement.clientHeight-t.top-t.height-r,a=t.top-r,i=o<0&&a>o;!i!=!n.state.upward&&n.trySetState({upward:i})}}})),z()(M()(n),"open",(function(e){var t=n.props,r=t.disabled,o=(t.open,t.search);r||(o&&q()(n.searchRef.current,"focus"),q()(n.props,"onOpen",e,n.props),n.trySetState({open:!0}),n.scrollSelectedItemIntoView())})),z()(M()(n),"close",(function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.handleClose,r=n.state.open;r&&(q()(n.props,"onClose",e,n.props),n.trySetState({open:!1},t))})),z()(M()(n),"handleClose",(function(){var e=document.activeElement===n.searchRef.current;!e&&n.ref.current&&n.ref.current.blur();var t=document.activeElement===n.ref.current,r=e||t;n.setState({focus:r})})),z()(M()(n),"toggle",(function(e){return n.state.open?n.close(e):n.open(e)})),z()(M()(n),"renderText",(function(){var e=n.props,t=e.multiple,r=e.placeholder,o=e.search,a=e.text,l=n.state,u=l.searchQuery,s=l.value,c=l.open,p=n.hasValue(),f=Y()(r&&!p&&"default","text",o&&u&&"filtered"),d=r;return a?d=a:c&&!t?d=vo()(n.getSelectedItem(),"text"):p&&(d=vo()(n.getItemByValue(s),"text")),i.a.createElement("div",{className:f,role:"alert","aria-live":"polite","aria-atomic":!0},d)})),z()(M()(n),"renderSearchInput",(function(){var e=n.props,t=e.search,r=e.searchInput,o=n.state.searchQuery;return t&&i.a.createElement(E,{innerRef:n.searchRef},ta.create(r,{defaultProps:{style:{width:n.computeSearchInputWidth()},tabIndex:n.computeSearchInputTabIndex(),value:o},overrideProps:n.handleSearchInputOverrides}))})),z()(M()(n),"renderSearchSizer",(function(){var e=n.props,t=e.search,r=e.multiple;return t&&r&&i.a.createElement("span",{className:"sizer",ref:n.sizerRef})})),z()(M()(n),"renderLabels",(function(){var e=n.props,t=e.multiple,r=e.renderLabel,o=n.state,a=o.selectedLabel,i=o.value;if(t&&!vn()(i)){var l=Wn()(i,n.getItemByValue);return Wn()(So()(l),(function(e,t){var o={active:e.value===a,as:"a",key:na(e.key,e.value),onClick:n.handleLabelClick,onRemove:n.handleLabelRemove,value:e.value};return Un.create(r(e,t,o),{defaultProps:o})}))}})),z()(M()(n),"renderOptions",(function(){var e=n.props,t=e.lazyLoad,r=e.multiple,o=e.search,a=e.noResultsMessage,l=n.state,u=l.open,s=l.selectedIndex,c=l.value;if(t&&!u)return null;var p=n.getMenuOptions();if(null!==a&&o&&vn()(p))return i.a.createElement("div",{className:"message"},a);var f=r?function(e){return Gt()(c,e)}:function(e){return e===c};return Wn()(p,(function(e,t){return Qo.create(mt()({active:f(e.value),onClick:n.handleItemClick,selected:s===t},e,{key:na(e.key,e.value),style:mt()({},e.style,{pointerEvents:"all"})}))}))})),z()(M()(n),"renderMenu",(function(){var e=n.props,t=e.children,o=e.direction,l=e.header,u=n.state.open,s=n.getDropdownMenuAriaOptions();if(!r.isNil(t)){var c=a.Children.only(t),p=Y()(o,it(u,"visible"),c.props.className);return Object(a.cloneElement)(c,mt()({className:p},s))}return i.a.createElement(Jo,S()({},s,{direction:o,open:u}),Xo.create(l,{autoGenerateKey:!1}),n.renderOptions())})),n}return F()(t,e),O()(t,[{key:"getInitialAutoControlledState",value:function(){return{focus:!1,searchQuery:""}}},{key:"UNSAFE_componentWillMount",value:function(){var e=this.state,t=e.open,n=e.value;this.setValue(n),this.setSelectedIndex(n),t&&this.open()}},{key:"UNSAFE_componentWillReceiveProps",value:function(e){Eo()(R()(t.prototype),"UNSAFE_componentWillReceiveProps",this).call(this,e),er()(e.value,this.props.value)||(this.setValue(e.value),this.setSelectedIndex(e.value)),qo()(this.getKeyAndValues(e.options),this.getKeyAndValues(this.props.options))||this.setSelectedIndex(void 0,e.options)}},{key:"shouldComponentUpdate",value:function(e,t){return!er()(e,this.props)||!er()(t,this.state)}},{key:"componentDidUpdate",value:function(e,t){var n=this.props,r=n.closeOnBlur,o=n.minCharacters,a=n.openOnFocus,i=n.search;if(!t.focus&&this.state.focus){if(!this.isMouseDown){var l=!i||i&&1===o&&!this.state.open;a&&l&&this.open()}}else t.focus&&!this.state.focus&&!this.isMouseDown&&r&&this.close();!t.open&&this.state.open?(this.setOpenDirection(),this.scrollSelectedItemIntoView()):t.open&&this.state.open}},{key:"getDropdownMenuAriaOptions",value:function(){var e=this.props,t=e.search,n=e.multiple,r={};return t&&(r["aria-multiselectable"]=n,r.role="listbox"),r}},{key:"render",value:function(){var e=this.props,n=e.basic,r=e.button,o=e.className,a=e.compact,l=e.disabled,u=e.error,s=e.fluid,c=e.floating,p=e.icon,f=e.inline,d=e.item,h=e.labeled,m=e.loading,v=e.multiple,y=e.pointing,g=e.search,b=e.selection,w=e.scrolling,x=e.simple,k=e.trigger,N=this.state,C=N.focus,T=N.open,P=N.upward,O=Y()("ui",it(T,"active visible"),it(l,"disabled"),it(u,"error"),it(m,"loading"),it(n,"basic"),it(r,"button"),it(a,"compact"),it(s,"fluid"),it(c,"floating"),it(f,"inline"),it(h,"labeled"),it(d,"item"),it(v,"multiple"),it(g,"search"),it(b,"selection"),it(x,"simple"),it(w,"scrolling"),it(P,"upward"),ut(y,"pointing"),"dropdown",o),A=H(t,this.props),I=dt(t,this.props),_=this.getDropdownAriaOptions(I,this.props);return i.a.createElement(E,{innerRef:this.ref},i.a.createElement(I,S()({},A,_,{className:O,onBlur:this.handleBlur,onClick:this.handleClick,onMouseDown:this.handleMouseDown,onFocus:this.handleFocus,onChange:this.handleChange,tabIndex:this.computeTabIndex()}),this.renderLabels(),this.renderSearchInput(),this.renderSearchSizer(),k||this.renderText(),Bt.create(p,{overrideProps:this.handleIconOverrides,autoGenerateKey:!1}),this.renderMenu(),T&&i.a.createElement(on.a,{name:"keydown",on:this.closeOnEscape}),T&&i.a.createElement(on.a,{name:"keydown",on:this.moveSelectionOnKeyDown}),T&&i.a.createElement(on.a,{name:"click",on:this.closeOnDocumentClick}),T&&i.a.createElement(on.a,{name:"keydown",on:this.selectItemOnEnter}),C&&i.a.createElement(on.a,{name:"keydown",on:this.removeItemOnBackspace}),C&&!T&&i.a.createElement(on.a,{name:"keydown",on:this.openOnArrow}),C&&!T&&i.a.createElement(on.a,{name:"keydown",on:this.openOnSpace})))}}]),t}(xn);function oa(e){return i.a.createElement(ra,S()({},e,{selection:!0}))}z()(ra,"defaultProps",{additionLabel:"Add ",additionPosition:"top",closeOnBlur:!0,closeOnEscape:!0,deburr:!1,icon:"dropdown",minCharacters:1,noResultsMessage:"No results found.",openOnFocus:!0,renderLabel:function(e){return e.text},searchInput:"text",selectOnBlur:!0,selectOnNavigation:!0,wrapSelection:!0}),z()(ra,"autoControlledProps",["open","searchQuery","selectedLabel","value","upward"]),z()(ra,"Divider",Vo),z()(ra,"Header",Xo),z()(ra,"Item",Qo),z()(ra,"Menu",Jo),z()(ra,"SearchInput",ta),z()(ra,"handledProps",["additionLabel","additionPosition","allowAdditions","as","basic","button","children","className","clearable","closeOnBlur","closeOnChange","closeOnEscape","compact","deburr","defaultOpen","defaultSearchQuery","defaultSelectedLabel","defaultUpward","defaultValue","direction","disabled","error","floating","fluid","header","icon","inline","item","labeled","lazyLoad","loading","minCharacters","multiple","noResultsMessage","onAddItem","onBlur","onChange","onClick","onClose","onFocus","onLabelClick","onMouseDown","onOpen","onSearchChange","open","openOnFocus","options","placeholder","pointing","renderLabel","scrolling","search","searchInput","searchQuery","selectOnBlur","selectOnNavigation","selectedLabel","selection","simple","tabIndex","text","trigger","upward","value","wrapSelection"]),ra.propTypes={},oa.handledProps=["options"],oa.propTypes={},oa.Divider=ra.Divider,oa.Header=ra.Header,oa.Item=ra.Item,oa.Menu=ra.Menu;var aa=oa,ia=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"ref",Object(a.createRef)()),z()(M()(n),"focus",(function(){return n.ref.current.focus()})),z()(M()(n),"handleChange",(function(e){var t=vo()(e,"target.value");q()(n.props,"onChange",e,mt()({},n.props,{value:t}))})),z()(M()(n),"handleInput",(function(e){var t=vo()(e,"target.value");q()(n.props,"onInput",e,mt()({},n.props,{value:t}))})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.rows,r=e.value,o=H(t,this.props),a=dt(t,this.props);return i.a.createElement(E,{innerRef:this.ref},i.a.createElement(a,S()({},o,{onChange:this.handleChange,onInput:this.handleInput,rows:n,value:r})))}}]),t}(a.Component);z()(ia,"defaultProps",{as:"textarea",rows:3}),z()(ia,"handledProps",["as","onChange","onInput","rows","value"]),ia.propTypes={};var la=ia,ua=function(e,t){return"number"==typeof e||"string"==typeof e?e:e[t]},sa=n(240),ca=n.n(sa),pa=n(241),fa=n.n(pa),da=function(e){return fa()(hn()(a.Children.toArray(e),a.isValidElement),"key")},ha=function(e,t){var n={},r=[];return Qt()(se()(e),(function(e){B()(t,e)?r.length&&(n[e]=r,r=[]):r.push(e)})),[n,r]},ma=function(e,t,n){return B()(n,e)?n[e]:t[e]},va=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleOnHide",(function(e,t){var r=t.reactKey;n.setState((function(e){var t=mt()({},e.children);return delete t[r],{children:t}}))})),z()(M()(n),"wrapChild",(function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.props,o=r.animation,a=r.directional,l=r.duration,u=e.key,s=t.visible,c=void 0===s||s,p=t.transitionOnMount,f=void 0!==p&&p;return i.a.createElement(ga,{animation:o,directional:a,duration:l,key:u,onHide:n.handleOnHide,reactKey:u,transitionOnMount:f,visible:c},e)}));var l=n.props.children;return n.state={children:ca()(da(l),(function(e){return n.wrapChild(e)}))},n}return F()(t,e),O()(t,[{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=this,n=this.state.children,r=da(e.children),o=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n={},r=ha(e,t),o=Vt()(r,2),a=o[0],i=o[1];return Qt()(se()(t),(function(r){B()(a,r)&&Qt()(a[r],(function(r){n[r]=ma(r,e,t)})),n[r]=ma(r,e,t)})),Qt()(i,(function(r){n[r]=ma(r,e,t)})),n}(n,r);Qt()(o,(function(e,i){var l=B()(n,i),u=B()(r,i),s=n[i],c=!vo()(s,"props.visible");if(!u||l&&!c)if(u||!l||c){var p=s.props,f=p.visible,d=p.transitionOnMount;o[i]=t.wrapChild(e,{transitionOnMount:d,visible:f})}else o[i]=Object(a.cloneElement)(s,{visible:!1});else o[i]=t.wrapChild(e,{transitionOnMount:!0})})),this.setState({children:o})}},{key:"render",value:function(){var e=this.state.children,n=dt(t,this.props),r=H(t,this.props);return i.a.createElement(n,r,le()(e))}}]),t}(i.a.Component);z()(va,"defaultProps",{as:a.Fragment,animation:"fade",duration:500}),z()(va,"handledProps",["animation","as","children","directional","duration"]),va.propTypes={};var ya={ENTERING:"show",EXITING:"hide"},ga=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];n=I()(this,(e=R()(t)).call.apply(e,[this].concat(a))),z()(M()(n),"handleStart",(function(){var e=n.props.duration,t=n.nextStatus;n.nextStatus=null,n.setState({status:t,animating:!0},(function(){var r=ua(e,ya[t]);q()(n.props,"onStart",null,mt()({},n.props,{status:t})),n.timeoutId=setTimeout(n.handleComplete,r)}))})),z()(M()(n),"handleComplete",(function(){var e=n.state.status;if(q()(n.props,"onComplete",null,mt()({},n.props,{status:e})),n.nextStatus)n.handleStart();else{var r=n.computeCompletedStatus(),o=e===t.ENTERING?"onShow":"onHide";n.setState({status:r,animating:!1},(function(){q()(n.props,o,null,mt()({},n.props,{status:r}))}))}})),z()(M()(n),"updateStatus",(function(){var e=n.state.animating;n.nextStatus&&(n.nextStatus=n.computeNextStatus(),e||n.handleStart())})),z()(M()(n),"computeClasses",(function(){var e=n.props,r=e.animation,a=e.directional,i=e.children,l=n.state,u=l.animating,s=l.status,c=vo()(i,"props.className");return($()(a)?Gt()(o.DIRECTIONAL_TRANSITIONS,r):a)?Y()(r,c,it(u,"animating"),it(s===t.ENTERING,"in"),it(s===t.EXITING,"out"),it(s===t.EXITED,"hidden"),it(s!==t.EXITED,"visible"),"transition"):Y()(r,c,it(u,"animating transition"))})),z()(M()(n),"computeCompletedStatus",(function(){var e=n.props.unmountOnHide;return n.state.status===t.ENTERING?t.ENTERED:e?t.UNMOUNTED:t.EXITED})),z()(M()(n),"computeInitialStatuses",(function(){var e=n.props,r=e.visible,o=e.mountOnShow,a=e.transitionOnMount,i=e.unmountOnHide;return r?a?{initial:t.EXITED,next:t.ENTERING}:{initial:t.ENTERED}:o||i?{initial:t.UNMOUNTED}:{initial:t.EXITED}})),z()(M()(n),"computeNextStatus",(function(){var e=n.state,r=e.animating,o=e.status;return r?o===t.ENTERING?t.EXITING:t.ENTERING:o===t.ENTERED?t.EXITING:t.ENTERING})),z()(M()(n),"computeStatuses",(function(e){var r=n.state.status;return e.visible?{current:r===t.UNMOUNTED&&t.EXITED,next:r!==t.ENTERING&&r!==t.ENTERED&&t.ENTERING}:{next:(r===t.ENTERING||r===t.ENTERED)&&t.EXITING}})),z()(M()(n),"computeStyle",(function(){var e=n.props,t=e.children,r=e.duration,o=n.state.status,a=vo()(t,"props.style"),i=ya[o],l=i&&"".concat(ua(r,i),"ms");return mt()({},a,{animationDuration:l})}));var l=n.computeInitialStatuses(),u=l.initial,s=l.next;return n.nextStatus=s,n.state={status:u},n}return F()(t,e),O()(t,[{key:"componentDidMount",value:function(){this.updateStatus()}},{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=this.computeStatuses(e),n=t.current,r=t.next;this.nextStatus=r,n&&this.setState({status:n})}},{key:"componentDidUpdate",value:function(){this.updateStatus()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeoutId)}},{key:"render",value:function(){var e=this.props.children;return this.state.status===t.UNMOUNTED?null:Object(a.cloneElement)(e,{className:this.computeClasses(),style:this.computeStyle()})}}]),t}(a.Component);z()(ga,"defaultProps",{animation:"fade",duration:500,visible:!0,mountOnShow:!0,transitionOnMount:!1,unmountOnHide:!1}),z()(ga,"ENTERED","ENTERED"),z()(ga,"ENTERING","ENTERING"),z()(ga,"EXITED","EXITED"),z()(ga,"EXITING","EXITING"),z()(ga,"UNMOUNTED","UNMOUNTED"),z()(ga,"Group",va),z()(ga,"handledProps",["animation","children","directional","duration","mountOnShow","onComplete","onHide","onShow","onStart","reactKey","transitionOnMount","unmountOnHide","visible"]),ga.propTypes={};var ba=function(e){function t(e){var n;return T()(this,t),n=I()(this,R()(t).call(this,e)),z()(M()(n),"handlePortalClose",(function(){n.setState({portalOpen:!1})})),z()(M()(n),"handlePortalOpen",(function(){n.setState({portalOpen:!0})})),z()(M()(n),"handleTransitionHide",(function(e,t){var r=n.state.portalOpen;n.setState({transitionVisible:!1}),q()(n.props,"onClose",null,mt()({},t,{portalOpen:!1,transitionVisible:!1})),q()(n.props,"onHide",null,mt()({},t,{portalOpen:r,transitionVisible:!1}))})),z()(M()(n),"handleTransitionStart",(function(e,t){var r=n.state.portalOpen,o=t.status===ga.ENTERING;q()(n.props,"onStart",null,mt()({},t,{portalOpen:r,transitionVisible:o})),o&&(n.setState({transitionVisible:o}),q()(n.props,"onOpen",null,mt()({},t,{transitionVisible:o,portalOpen:!0})))})),n.state={portalOpen:e.open},n}return F()(t,e),O()(t,[{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=e.open;this.setState({portalOpen:t})}},{key:"render",value:function(){var e=this.props,n=e.children,r=e.transition,o=this.state,a=o.portalOpen,l=o.transitionVisible,u=a||l,s=H(t,this.props);return i.a.createElement(Sn,S()({},s,{open:u,onOpen:this.handlePortalOpen,onClose:this.handlePortalClose}),i.a.createElement(ga,S()({},r,{transitionOnMount:!0,onStart:this.handleTransitionStart,onHide:this.handleTransitionHide,visible:a}),n))}}]),t}(a.Component);z()(ba,"defaultProps",{transition:{animation:"scale",duration:400}}),z()(ba,"handledProps",["children","onClose","onHide","onOpen","onStart","open","transition"]),ba.propTypes={};var wa=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"calculations",{bottomPassed:!1,bottomVisible:!1,fits:!1,passing:!1,offScreen:!1,onScreen:!1,topPassed:!1,topVisible:!1}),z()(M()(n),"firedCallbacks",[]),z()(M()(n),"ref",Object(a.createRef)()),z()(M()(n),"fire",(function(e,t){var r=e.callback,o=e.name,a=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=n.props,l=i.continuous,u=i.once,s=n.calculations[t]!==a,c=l||n.calculations[t]!==n.oldCalculations[t];s&&c&&n.execute(r,o),u||(n.firedCallbacks=Ft()(n.firedCallbacks,o))})),z()(M()(n),"handleUpdate",(function(){n.ticking||(n.ticking=!0,n.frameId=requestAnimationFrame(n.update))})),z()(M()(n),"update",(function(){if(n.mounted){n.ticking=!1,n.oldCalculations=n.calculations,n.calculations=n.computeCalculations(),n.pageYOffset=n.getPageYOffset();var e=n.props,t=e.onBottomPassed,r=e.onBottomPassedReverse,o=e.onBottomVisible,a=e.onBottomVisibleReverse,i=e.onPassing,l=e.onPassingReverse,u=e.onTopPassed,s=e.onTopPassedReverse,c=e.onTopVisible,p=e.onTopVisibleReverse,f=e.onOffScreen,d=e.onOnScreen,h=e.updateOn,m={bottomPassed:{callback:t,name:"onBottomPassed"},bottomVisible:{callback:o,name:"onBottomVisible"},passing:{callback:i,name:"onPassing"},offScreen:{callback:f,name:"onOffScreen"},onScreen:{callback:d,name:"onOnScreen"},topPassed:{callback:u,name:"onTopPassed"},topVisible:{callback:c,name:"onTopVisible"}},v={bottomPassed:{callback:r,name:"onBottomPassedReverse"},bottomVisible:{callback:a,name:"onBottomVisibleReverse"},passing:{callback:l,name:"onPassingReverse"},topPassed:{callback:s,name:"onTopPassedReverse"},topVisible:{callback:p,name:"onTopVisibleReverse"}};q()(n.props,"onUpdate",null,mt()({},n.props,{calculations:n.calculations})),n.fireOnPassed(),Qt()(v,(function(e,t){return n.fire(e,t,!0)})),Qt()(m,(function(e,t){return n.fire(e,t)})),"repaint"===h&&n.handleUpdate()}})),n}return F()(t,e),O()(t,[{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=e.continuous,n=e.once,r=e.context,o=e.updateOn;(t!==this.props.continuous||n!==this.props.once||o!==this.props.updateOn)&&(this.firedCallbacks=[]),r===this.props.context&&o===this.props.updateOn||(this.unattachHandlers(this.props.context),this.attachHandlers(r,o))}},{key:"componentDidMount",value:function(){if(this.mounted=!0,nn()){var e=this.props,t=e.context,n=e.fireOnMount,r=e.updateOn;this.pageYOffset=this.getPageYOffset(),this.attachHandlers(t,r),n&&this.update()}}},{key:"componentWillUnmount",value:function(){var e=this.props.context;this.unattachHandlers(e),this.mounted=!1}},{key:"attachHandlers",value:function(e,t){"events"!==t?this.handleUpdate():e&&(tr.sub("resize",this.handleUpdate,{target:e}),tr.sub("scroll",this.handleUpdate,{target:e}))}},{key:"unattachHandlers",value:function(e){e&&(tr.unsub("resize",this.handleUpdate,{target:e}),tr.unsub("scroll",this.handleUpdate,{target:e})),this.frameId&&cancelAnimationFrame(this.frameId)}},{key:"execute",value:function(e,t){var n=this.props.continuous;e&&(!n&&Gt()(this.firedCallbacks,t)||(e(null,mt()({},this.props,{calculations:this.calculations})),this.firedCallbacks.push(t)))}},{key:"fireOnPassed",value:function(){var e=this,t=this.calculations,n=t.percentagePassed,r=t.pixelsPassed,o=this.props.onPassed;Qt()(o,(function(t,o){var a=Number(o);if(a&&r>=a)e.execute(t,o);else{var i="".concat(o).match(/^(\d+)%$/);if(i){var l=Number(i[1])/100;n>=l&&e.execute(t,o)}}}))}},{key:"computeCalculations",value:function(){var e,t=this.props.offset,n=this.ref.current.getBoundingClientRect(),r=n.bottom,o=n.height,a=n.top,i=n.width,l="number"==typeof(e=t)||"string"==typeof e?[e,e]:e,u=Vt()(l,2),s=u[0],c=u[1],p=this.getPageYOffset()>this.pageYOffset?"down":"up",f=a<s,d=r<c,h=d?0:Math.max(-1*a,0),m=h/o,v=r>=c&&r<=window.innerHeight,y=a>=s&&a<=window.innerHeight,g=(y||f)&&!d;return{bottomPassed:d,bottomVisible:v,direction:p,fits:y&&v,height:o,passing:f&&!d,percentagePassed:m,pixelsPassed:h,offScreen:!g,onScreen:g,topPassed:f,topVisible:y,width:i}}},{key:"getPageYOffset",value:function(){var e=this.props.context;return e?e===window?window.pageYOffset:e.scrollTop:0}},{key:"render",value:function(){var e=this.props.children,n=dt(t,this.props),r=H(t,this.props);return i.a.createElement(E,{innerRef:this.ref},i.a.createElement(n,r,e))}}]),t}(a.Component);function xa(e){var t=e.children,n=e.className,o=e.content,a=e.icon,l=Y()("divider",n),u=H(xa,e),s=dt(xa,e);return $()(a)?$()(o)?i.a.createElement(s,S()({},u,{className:l}),r.isNil(t)?"/":t):i.a.createElement(s,S()({},u,{className:l}),o):Bt.create(a,{defaultProps:mt()({},u,{className:l}),autoGenerateKey:!1})}z()(wa,"defaultProps",{context:nn()?window:null,continuous:!1,offset:[0,0],once:!0,updateOn:"events"}),z()(wa,"handledProps",["as","children","context","continuous","fireOnMount","offset","onBottomPassed","onBottomPassedReverse","onBottomVisible","onBottomVisibleReverse","onOffScreen","onOnScreen","onPassed","onPassing","onPassingReverse","onTopPassed","onTopPassedReverse","onTopVisible","onTopVisibleReverse","onUpdate","once","updateOn"]),wa.propTypes={},xa.handledProps=["as","children","className","content","icon"],xa.propTypes={},xa.create=Ot(xa,(function(e){return{icon:e}}));var ka=xa,Ea=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"computeElementType",(function(){var e=n.props,t=e.link,r=e.onClick;if(t||r)return"a"})),z()(M()(n),"handleClick",(function(e){return q()(n.props,"onClick",e,n.props)})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.active,o=e.children,a=e.className,l=e.content,u=e.href,s=Y()(it(n,"active"),"section",a),c=H(t,this.props),p=dt(t,this.props,this.computeElementType);return i.a.createElement(p,S()({},c,{className:s,href:u,onClick:this.handleClick}),r.isNil(o)?l:o)}}]),t}(a.Component);function Na(e){var t=e.children,n=e.className,o=e.divider,a=e.icon,l=e.sections,u=e.size,s=Y()("ui",u,"breadcrumb",n),c=H(Na,e),p=dt(Na,e);if(!r.isNil(t))return i.a.createElement(p,S()({},c,{className:s}),t);var f=[];return gn()(l,(function(e,t){var n=Ea.create(e);if(f.push(n),t!==l.length-1){var r="".concat(n.key,"_divider")||!1;f.push(ka.create({content:o,icon:a,key:r}))}})),i.a.createElement(p,S()({},c,{className:s}),f)}z()(Ea,"handledProps",["active","as","children","className","content","href","link","onClick"]),Ea.propTypes={},Ea.create=Ot(Ea,(function(e){return{content:e,link:!0}})),Na.handledProps=["as","children","className","divider","icon","sections","size"],Na.propTypes={},Na.Divider=ka,Na.Section=Ea;var Sa=Na;function Ca(e){var t=e.children,n=e.className,o=e.content,l=e.control,u=e.disabled,s=e.error,c=e.inline,p=e.label,f=e.required,d=e.type,h=e.width,m=e.id,v=Y()(it(u,"disabled"),it(s,"error"),it(c,"inline"),it(f,"required"),ft(h,"wide"),"field",n),y=H(Ca,e),g=dt(Ca,e),b=vo()(s,"pointing","above"),w=Un.create(s,{autoGenerateKey:!1,defaultProps:{prompt:!0,pointing:b,id:m?"".concat(m,"-error-message"):void 0,role:"alert","aria-atomic":!0}}),x=("below"===b||"right"===b)&&w,k=("above"===b||"left"===b)&&w;if($()(l))return $()(p)?i.a.createElement(g,S()({},y,{className:v}),r.isNil(t)?o:t):i.a.createElement(g,S()({},y,{className:v}),x,jt(p,{autoGenerateKey:!1}),k);var E={"aria-describedby":m&&s?"".concat(m,"-error-message"):null,"aria-invalid":void 0!==s||void 0},N=mt()({},y,{content:o,children:t,disabled:u,required:f,type:d,id:m});return"input"!==l||"checkbox"!==d&&"radio"!==d?l===yo||l===bo?i.a.createElement(g,{className:v},x,Object(a.createElement)(l,mt()({},E,N,{label:p})),k):i.a.createElement(g,{className:v},jt(p,{defaultProps:{htmlFor:m},autoGenerateKey:!1}),x,Object(a.createElement)(l,mt()({},E,N)),k):i.a.createElement(g,{className:v},i.a.createElement("label",null,x,Object(a.createElement)(l,mt()({},E,N))," ",p,k))}Ca.handledProps=["as","children","className","content","control","disabled","error","id","inline","label","required","type","width"],Ca.propTypes={};var Ta=Ca;function Pa(e){var t=e.control,n=H(Pa,e),r=dt(Pa,e);return i.a.createElement(r,S()({},n,{control:t}))}Pa.handledProps=["as","control"],Pa.propTypes={},Pa.defaultProps={as:Ta,control:$n};var Oa=Pa;function Aa(e){var t=e.control,n=H(Aa,e),r=dt(Aa,e);return i.a.createElement(r,S()({},n,{control:t}))}Aa.handledProps=["as","control"],Aa.propTypes={},Aa.defaultProps={as:Ta,control:yo};var Ia=Aa;function _a(e){var t=e.control,n=H(_a,e),r=dt(_a,e);return i.a.createElement(r,S()({},n,{control:t}))}_a.handledProps=["as","control"],_a.propTypes={},_a.defaultProps={as:Ta,control:ra};var Ra=_a;function ja(e){var t=e.children,n=e.className,r=e.grouped,o=e.inline,a=e.unstackable,l=e.widths,u=Y()(it(r,"grouped"),it(o,"inline"),it(a,"unstackable"),ft(l,null,!0),"fields",n),s=H(ja,e),c=dt(ja,e);return i.a.createElement(c,S()({},s,{className:u}),t)}ja.handledProps=["as","children","className","grouped","inline","unstackable","widths"],ja.propTypes={};var Ma=ja,Da=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"inputRef",Object(a.createRef)()),z()(M()(n),"computeIcon",(function(){var e=n.props,t=e.loading,r=e.icon;return $()(r)?t?"spinner":void 0:r})),z()(M()(n),"computeTabIndex",(function(){var e=n.props,t=e.disabled,r=e.tabIndex;return $()(r)?t?-1:void 0:r})),z()(M()(n),"focus",(function(){return n.inputRef.current.focus()})),z()(M()(n),"select",(function(){return n.inputRef.current.select()})),z()(M()(n),"handleChange",(function(e){var t=vo()(e,"target.value");q()(n.props,"onChange",e,mt()({},n.props,{value:t}))})),z()(M()(n),"handleChildOverrides",(function(e,t){return mt()({},t,e.props,{ref:function(t){b(e.ref,t),n.inputRef.current=t}})})),z()(M()(n),"partitionProps",(function(){var e=n.props,r=e.disabled,o=e.type,a=n.computeTabIndex(),i=H(t,n.props),l=Jt(i),u=Vt()(l,2),s=u[0],c=u[1];return[mt()({},s,{disabled:r,type:o,tabIndex:a,onChange:n.handleChange,ref:n.inputRef}),c]})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this,n=this.props,o=n.action,l=n.actionPosition,u=n.children,s=n.className,c=n.disabled,p=n.error,f=n.fluid,d=n.focus,h=n.icon,m=n.iconPosition,v=n.input,y=n.inverted,g=n.label,b=n.labelPosition,w=n.loading,x=n.size,k=n.transparent,E=n.type,N=Y()("ui",x,it(c,"disabled"),it(p,"error"),it(f,"fluid"),it(d,"focus"),it(y,"inverted"),it(w,"loading"),it(k,"transparent"),lt(l,"action")||it(o,"action"),lt(m,"icon")||it(h||w,"icon"),lt(b,"labeled")||it(g,"labeled"),"input",s),C=dt(t,this.props),T=this.partitionProps(),P=Vt()(T,2),O=P[0],A=P[1];if(!r.isNil(u)){var I=Wn()(a.Children.toArray(u),(function(t){return"input"!==t.type?t:Object(a.cloneElement)(t,e.handleChildOverrides(t,O))}));return i.a.createElement(C,S()({},A,{className:N}),I)}var _=$n.create(o,{autoGenerateKey:!1}),R=Un.create(g,{defaultProps:{className:Y()("label",Gt()(b,"corner")&&b)},autoGenerateKey:!1});return i.a.createElement(C,S()({},A,{className:N}),"left"===l&&_,"right"!==b&&R,Rt(v||E,{defaultProps:O,autoGenerateKey:!1}),Bt.create(this.computeIcon(),{autoGenerateKey:!1}),"left"!==l&&_,"right"===b&&R)}}]),t}(a.Component);z()(Da,"defaultProps",{type:"text"}),z()(Da,"handledProps",["action","actionPosition","as","children","className","disabled","error","fluid","focus","icon","iconPosition","input","inverted","label","labelPosition","loading","onChange","size","tabIndex","transparent","type"]),Da.propTypes={},Da.create=Ot(Da,(function(e){return{type:e}}));var Fa=Da;function Ua(e){var t=e.control,n=H(Ua,e),r=dt(Ua,e);return i.a.createElement(r,S()({},n,{control:t}))}Ua.handledProps=["as","control"],Ua.propTypes={},Ua.defaultProps={as:Ta,control:Fa};var za=Ua;function La(e){var t=e.control,n=H(La,e),r=dt(La,e);return i.a.createElement(r,S()({},n,{control:t}))}La.handledProps=["as","control"],La.propTypes={},La.defaultProps={as:Ta,control:bo};var Ba=La;function Wa(e){var t=e.control,n=e.options,r=H(Wa,e),o=dt(Wa,e);return i.a.createElement(o,S()({},r,{control:t,options:n}))}Wa.handledProps=["as","control","options"],Wa.propTypes={},Wa.defaultProps={as:Ta,control:aa};var qa=Wa;function Ha(e){var t=e.control,n=H(Ha,e),r=dt(Ha,e);return i.a.createElement(r,S()({},n,{control:t}))}Ha.handledProps=["as","control"],Ha.propTypes={},Ha.defaultProps={as:Ta,control:la};var Va=Ha,Ka=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleSubmit",(function(e){var t=n.props.action;"string"!=typeof t&&q()(e,"preventDefault");for(var r=arguments.length,o=new Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];q.a.apply(void 0,[n.props,"onSubmit",e,n.props].concat(o))})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.action,r=e.children,o=e.className,a=e.error,l=e.inverted,u=e.loading,s=e.reply,c=e.size,p=e.success,f=e.unstackable,d=e.warning,h=e.widths,m=Y()("ui",c,it(a,"error"),it(l,"inverted"),it(u,"loading"),it(s,"reply"),it(p,"success"),it(f,"unstackable"),it(d,"warning"),ft(h,null,!0),"form",o),v=H(t,this.props),y=dt(t,this.props);return i.a.createElement(y,S()({},v,{action:n,className:m,onSubmit:this.handleSubmit}),r)}}]),t}(a.Component);z()(Ka,"defaultProps",{as:"form"}),z()(Ka,"Field",Ta),z()(Ka,"Button",Oa),z()(Ka,"Checkbox",Ia),z()(Ka,"Dropdown",Ra),z()(Ka,"Group",Ma),z()(Ka,"Input",za),z()(Ka,"Radio",Ba),z()(Ka,"Select",qa),z()(Ka,"TextArea",Va),z()(Ka,"handledProps",["action","as","children","className","error","inverted","loading","onSubmit","reply","size","success","unstackable","warning","widths"]),Ka.propTypes={};var Ga=Ka;function $a(e){var t=e.children,n=e.className,r=e.computer,o=e.color,a=e.floated,l=e.largeScreen,u=e.mobile,s=e.only,c=e.stretched,p=e.tablet,f=e.textAlign,d=e.verticalAlign,h=e.widescreen,m=e.width,v=Y()(o,it(c,"stretched"),st(s,"only"),ct(f),lt(a,"floated"),pt(d),ft(r,"wide computer"),ft(l,"wide large screen"),ft(u,"wide mobile"),ft(p,"wide tablet"),ft(h,"wide widescreen"),ft(m,"wide"),"column",n),y=H($a,e),g=dt($a,e);return i.a.createElement(g,S()({},y,{className:v}),t)}$a.handledProps=["as","children","className","color","computer","floated","largeScreen","mobile","only","stretched","tablet","textAlign","verticalAlign","widescreen","width"],$a.propTypes={},$a.create=Ot($a,(function(e){return{children:e}}));var Qa=$a;function Ya(e){var t=e.centered,n=e.children,r=e.className,o=e.color,a=e.columns,l=e.divided,u=e.only,s=e.reversed,c=e.stretched,p=e.textAlign,f=e.verticalAlign,d=Y()(o,it(t,"centered"),it(l,"divided"),it(c,"stretched"),st(u,"only"),st(s,"reversed"),ct(p),pt(f),ft(a,"column",!0),"row",r),h=H(Ya,e),m=dt(Ya,e);return i.a.createElement(m,S()({},h,{className:d}),n)}Ya.handledProps=["as","centered","children","className","color","columns","divided","only","reversed","stretched","textAlign","verticalAlign"],Ya.propTypes={};var Xa=Ya;function Za(e){var t=e.celled,n=e.centered,r=e.children,o=e.className,a=e.columns,l=e.container,u=e.divided,s=e.doubling,c=e.inverted,p=e.padded,f=e.relaxed,d=e.reversed,h=e.stackable,m=e.stretched,v=e.textAlign,y=e.verticalAlign,g=Y()("ui",it(n,"centered"),it(l,"container"),it(s,"doubling"),it(c,"inverted"),it(h,"stackable"),it(m,"stretched"),ut(t,"celled"),ut(u,"divided"),ut(p,"padded"),ut(f,"relaxed"),st(d,"reversed"),ct(v),pt(y),ft(a,"column",!0),"grid",o),b=H(Za,e),w=dt(Za,e);return i.a.createElement(w,S()({},b,{className:g}),r)}Za.handledProps=["as","celled","centered","children","className","columns","container","divided","doubling","inverted","padded","relaxed","reversed","stackable","stretched","textAlign","verticalAlign"],Za.Column=Qa,Za.Row=Xa,Za.propTypes={};var Ja=Za;function ei(e){var t=e.children,n=e.className,o=e.content,a=Y()("content",n),l=H(ei,e),u=dt(ei,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}ei.handledProps=["as","children","className","content"],ei.propTypes={};var ti=ei;function ni(e){var t=e.children,n=e.className,o=e.content,a=Y()("header",n),l=H(ni,e),u=dt(ni,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}ni.handledProps=["as","children","className","content"],ni.propTypes={},ni.create=Ot(ni,(function(e){return{content:e}}));var ri=ni;function oi(e){var t=e.children,n=e.className,o=e.content,a=Y()("content",n),l=H(oi,e),u=dt(oi,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}oi.handledProps=["as","children","className","content"],oi.propTypes={},oi.defaultProps={as:"li"},oi.create=Ot(oi,(function(e){return{content:e}}));var ai=oi;function ii(e){var t=e.children,n=e.className,o=e.items,a=Y()("list",n),l=H(ii,e),u=dt(ii,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?Wn()(o,ai.create):t)}ii.handledProps=["as","children","className","items"],ii.propTypes={},ii.defaultProps={as:"ul"},ii.create=Ot(ii,(function(e){return{items:e}}));var li=ii,ui=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleDismiss",(function(e){var t=n.props.onDismiss;t&&t(e,n.props)})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.attached,o=e.children,a=e.className,l=e.color,u=e.compact,s=e.content,c=e.error,p=e.floating,f=e.header,d=e.hidden,h=e.icon,m=e.info,v=e.list,y=e.negative,g=e.onDismiss,b=e.positive,w=e.size,x=e.success,k=e.visible,E=e.warning,N=Y()("ui",l,w,it(u,"compact"),it(c,"error"),it(p,"floating"),it(d,"hidden"),it(h,"icon"),it(m,"info"),it(y,"negative"),it(b,"positive"),it(x,"success"),it(k,"visible"),it(E,"warning"),ut(n,"attached"),"message",a),C=g&&i.a.createElement(Bt,{name:"close",onClick:this.handleDismiss}),T=H(t,this.props),P=dt(t,this.props);return r.isNil(o)?i.a.createElement(P,S()({},T,{className:N}),C,Bt.create(h,{autoGenerateKey:!1}),(!$()(f)||!$()(s)||!$()(v))&&i.a.createElement(ti,null,ri.create(f,{autoGenerateKey:!1}),li.create(v,{autoGenerateKey:!1}),Mt(s,{autoGenerateKey:!1}))):i.a.createElement(P,S()({},T,{className:N}),C,o)}}]),t}(a.Component);function si(e){var t=e.children,n=e.className,r=Y()(n),o=H(si,e),a=dt(si,e);return i.a.createElement(a,S()({},o,{className:r}),t)}z()(ui,"Content",ti),z()(ui,"Header",ri),z()(ui,"List",li),z()(ui,"Item",ai),z()(ui,"handledProps",["as","attached","children","className","color","compact","content","error","floating","header","hidden","icon","info","list","negative","onDismiss","positive","size","success","visible","warning"]),ui.propTypes={},si.handledProps=["as","children","className"],si.defaultProps={as:"tbody"},si.propTypes={};var ci=si;function pi(e){var t=e.active,n=e.children,o=e.className,a=e.collapsing,l=e.content,u=e.disabled,s=e.error,c=e.icon,p=e.negative,f=e.positive,d=e.selectable,h=e.singleLine,m=e.textAlign,v=e.verticalAlign,y=e.warning,g=e.width,b=Y()(it(t,"active"),it(a,"collapsing"),it(u,"disabled"),it(s,"error"),it(p,"negative"),it(f,"positive"),it(d,"selectable"),it(h,"single line"),it(y,"warning"),ct(m),pt(v),ft(g,"wide"),o),w=H(pi,e),x=dt(pi,e);return r.isNil(n)?i.a.createElement(x,S()({},w,{className:b}),Bt.create(c),l):i.a.createElement(x,S()({},w,{className:b}),n)}pi.handledProps=["active","as","children","className","collapsing","content","disabled","error","icon","negative","positive","selectable","singleLine","textAlign","verticalAlign","warning","width"],pi.defaultProps={as:"td"},pi.propTypes={},pi.create=Ot(pi,(function(e){return{content:e}}));var fi=pi;function di(e){var t=e.children,n=e.className,o=e.content,a=e.fullWidth,l=Y()(it(a,"full-width"),n),u=H(di,e),s=dt(di,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(t)?o:t)}di.handledProps=["as","children","className","content","fullWidth"],di.defaultProps={as:"thead"},di.propTypes={};var hi=di;function mi(e){var t=e.as,n=H(mi,e);return i.a.createElement(hi,S()({},n,{as:t}))}mi.handledProps=["as"],mi.propTypes={},mi.defaultProps={as:"tfoot"};var vi=mi;function yi(e){var t=e.as,n=e.className,r=e.sorted,o=Y()(lt(r,"sorted"),n),a=H(yi,e);return i.a.createElement(fi,S()({},a,{as:t,className:o}))}yi.handledProps=["as","className","sorted"],yi.propTypes={},yi.defaultProps={as:"th"};var gi=yi;function bi(e){var t=e.active,n=e.cellAs,o=e.cells,a=e.children,l=e.className,u=e.disabled,s=e.error,c=e.negative,p=e.positive,f=e.textAlign,d=e.verticalAlign,h=e.warning,m=Y()(it(t,"active"),it(u,"disabled"),it(s,"error"),it(c,"negative"),it(p,"positive"),it(h,"warning"),ct(f),pt(d),l),v=H(bi,e),y=dt(bi,e);return r.isNil(a)?i.a.createElement(y,S()({},v,{className:m}),Wn()(o,(function(e){return fi.create(e,{defaultProps:{as:n}})}))):i.a.createElement(y,S()({},v,{className:m}),a)}bi.handledProps=["active","as","cellAs","cells","children","className","disabled","error","negative","positive","textAlign","verticalAlign","warning"],bi.defaultProps={as:"tr",cellAs:"td"},bi.propTypes={},bi.create=Ot(bi,(function(e){return{cells:e}}));var wi=bi;function xi(e){var t=e.attached,n=e.basic,o=e.celled,a=e.children,l=e.className,u=e.collapsing,s=e.color,c=e.columns,p=e.compact,f=e.definition,d=e.fixed,h=e.footerRow,m=e.headerRow,v=e.headerRows,y=e.inverted,g=e.padded,b=e.renderBodyRow,w=e.selectable,x=e.singleLine,k=e.size,E=e.sortable,N=e.stackable,C=e.striped,T=e.structured,P=e.tableData,O=e.textAlign,A=e.unstackable,I=e.verticalAlign,_=Y()("ui",s,k,it(o,"celled"),it(u,"collapsing"),it(f,"definition"),it(d,"fixed"),it(y,"inverted"),it(w,"selectable"),it(x,"single line"),it(E,"sortable"),it(N,"stackable"),it(C,"striped"),it(T,"structured"),it(A,"unstackable"),ut(t,"attached"),ut(n,"basic"),ut(p,"compact"),ut(g,"padded"),ct(O),pt(I),ft(c,"column"),"table",l),R=H(xi,e),j=dt(xi,e);if(!r.isNil(a))return i.a.createElement(j,S()({},R,{className:_}),a);var M={defaultProps:{cellAs:"th"}},D=(m||v)&&i.a.createElement(hi,null,wi.create(m,M),Wn()(v,(function(e){return wi.create(e,M)})));return i.a.createElement(j,S()({},R,{className:_}),D,i.a.createElement(ci,null,b&&Wn()(P,(function(e,t){return wi.create(b(e,t))}))),h&&i.a.createElement(vi,null,wi.create(h)))}xi.handledProps=["as","attached","basic","celled","children","className","collapsing","color","columns","compact","definition","fixed","footerRow","headerRow","headerRows","inverted","padded","renderBodyRow","selectable","singleLine","size","sortable","stackable","striped","structured","tableData","textAlign","unstackable","verticalAlign"],xi.defaultProps={as:"table"},xi.propTypes={},xi.Body=ci,xi.Cell=fi,xi.Footer=vi,xi.Header=hi,xi.HeaderCell=gi,xi.Row=wi;var ki=xi;function Ei(e){var t=e.children,n=e.className,o=e.content,a=e.fluid,l=e.text,u=e.textAlign,s=Y()("ui",it(l,"text"),it(a,"fluid"),ct(u),"container",n),c=H(Ei,e),p=dt(Ei,e);return i.a.createElement(p,S()({},c,{className:s}),r.isNil(t)?o:t)}Ei.handledProps=["as","children","className","content","fluid","text","textAlign"],Ei.propTypes={};var Ni=Ei;function Si(e){var t=e.children,n=e.className,o=e.clearing,a=e.content,l=e.fitted,u=e.hidden,s=e.horizontal,c=e.inverted,p=e.section,f=e.vertical,d=Y()("ui",it(o,"clearing"),it(l,"fitted"),it(u,"hidden"),it(s,"horizontal"),it(c,"inverted"),it(p,"section"),it(f,"vertical"),"divider",n),h=H(Si,e),m=dt(Si,e);return i.a.createElement(m,S()({},h,{className:d}),r.isNil(t)?a:t)}Si.handledProps=["as","children","className","clearing","content","fitted","hidden","horizontal","inverted","section","vertical"],Si.propTypes={};var Ci=Si;function Ti(e){var t=e.children,n=e.className,o=e.content,a=Y()("sub header",n),l=H(Ti,e),u=dt(Ti,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}Ti.handledProps=["as","children","className","content"],Ti.propTypes={},Ti.create=Ot(Ti,(function(e){return{content:e}}));var Pi=Ti;function Oi(e){var t=e.children,n=e.className,o=e.content,a=Y()("content",n),l=H(Oi,e),u=dt(Oi,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}Oi.handledProps=["as","children","className","content"],Oi.propTypes={};var Ai=Oi;function Ii(e){var t=e.attached,n=e.block,o=e.children,a=e.className,l=e.color,u=e.content,s=e.disabled,c=e.dividing,p=e.floated,f=e.icon,d=e.image,h=e.inverted,m=e.size,v=e.sub,y=e.subheader,g=e.textAlign,b=Y()("ui",l,m,it(n,"block"),it(s,"disabled"),it(c,"dividing"),lt(p,"floated"),it(!0===f,"icon"),it(!0===d,"image"),it(h,"inverted"),it(v,"sub"),ut(t,"attached"),ct(g),"header",a),w=H(Ii,e),x=dt(Ii,e);if(!r.isNil(o))return i.a.createElement(x,S()({},w,{className:b}),o);var k=Bt.create(f,{autoGenerateKey:!1}),E=Rn.create(d,{autoGenerateKey:!1}),N=Pi.create(y,{autoGenerateKey:!1});return k||E?i.a.createElement(x,S()({},w,{className:b}),k||E,(u||N)&&i.a.createElement(Ai,null,u,N)):i.a.createElement(x,S()({},w,{className:b}),u,N)}Ii.handledProps=["as","attached","block","children","className","color","content","disabled","dividing","floated","icon","image","inverted","size","sub","subheader","textAlign"],Ii.propTypes={},Ii.Content=Ai,Ii.Subheader=Pi;var _i=Ii;function Ri(e){var t=e.children,n=e.className,o=e.content,a=Y()(n,"description"),l=H(Ri,e),u=dt(Ri,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}Ri.handledProps=["as","children","className","content"],Ri.propTypes={},Ri.create=Ot(Ri,(function(e){return{content:e}}));var ji=Ri;function Mi(e){var t=e.children,n=e.className,o=e.content,a=Y()("header",n),l=H(Mi,e),u=dt(Mi,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}Mi.handledProps=["as","children","className","content"],Mi.propTypes={},Mi.create=Ot(Mi,(function(e){return{content:e}}));var Di=Mi;function Fi(e){var t=e.children,n=e.className,o=e.content,a=e.description,l=e.floated,u=e.header,s=e.verticalAlign,c=Y()(lt(l,"floated"),pt(s),"content",n),p=H(Fi,e),f=dt(Fi,e);return r.isNil(t)?i.a.createElement(f,S()({},p,{className:c}),Di.create(u),ji.create(a),o):i.a.createElement(f,S()({},p,{className:c}),t)}Fi.handledProps=["as","children","className","content","description","floated","header","verticalAlign"],Fi.propTypes={},Fi.create=Ot(Fi,(function(e){return{content:e}}));var Ui=Fi;function zi(e){var t=e.className,n=e.verticalAlign,r=Y()(pt(n),t),o=H(zi,e);return i.a.createElement(Bt,S()({},o,{className:r}))}zi.handledProps=["className","verticalAlign"],zi.propTypes={},zi.create=Ot(zi,(function(e){return{name:e}}));var Li=zi,Bi=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleClick",(function(e){n.props.disabled||q()(n.props,"onClick",e,n.props)})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.active,o=e.children,l=e.className,u=e.content,s=e.description,c=e.disabled,p=e.header,f=e.icon,d=e.image,h=e.value,m=dt(t,this.props),v=Y()(it(n,"active"),it(c,"disabled"),it("li"!==m,"item"),l),y=H(t,this.props),g="li"===m?{value:h}:{"data-value":h};if(!r.isNil(o))return i.a.createElement(m,S()({},g,{role:"listitem",className:v,onClick:this.handleClick},y),o);var b=Li.create(f,{autoGenerateKey:!1}),w=Rn.create(d,{autoGenerateKey:!1});if(!Object(a.isValidElement)(u)&&bt()(u))return i.a.createElement(m,S()({},g,{role:"listitem",className:v,onClick:this.handleClick},y),b||w,Ui.create(u,{autoGenerateKey:!1,defaultProps:{header:p,description:s}}));var x=Di.create(p,{autoGenerateKey:!1}),k=ji.create(s,{autoGenerateKey:!1});return b||w?i.a.createElement(m,S()({},g,{role:"listitem",className:v,onClick:this.handleClick},y),b||w,(u||x||k)&&i.a.createElement(Ui,null,x,k,u)):i.a.createElement(m,S()({},g,{role:"listitem",className:v,onClick:this.handleClick},y),x,k,u)}}]),t}(a.Component);z()(Bi,"handledProps",["active","as","children","className","content","description","disabled","header","icon","image","onClick","value"]),Bi.propTypes={},Bi.create=Ot(Bi,(function(e){return{content:e}}));var Wi=Bi;function qi(e){var t=e.children,n=e.className,o=e.content,a=H(qi,e),l=dt(qi,e),u=Y()(it("ul"!==l&&"ol"!==l,"list"),n);return i.a.createElement(l,S()({},a,{className:u}),r.isNil(t)?o:t)}qi.handledProps=["as","children","className","content"],qi.propTypes={};var Hi=qi,Vi=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleItemOverrides",(function(e){return{onClick:function(t,r){q()(e,"onClick",t,r),q()(n.props,"onItemClick",t,r)}}})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this,n=this.props,o=n.animated,a=n.bulleted,l=n.celled,u=n.children,s=n.className,c=n.content,p=n.divided,f=n.floated,d=n.horizontal,h=n.inverted,m=n.items,v=n.link,y=n.ordered,g=n.relaxed,b=n.selection,w=n.size,x=n.verticalAlign,k=Y()("ui",w,it(o,"animated"),it(a,"bulleted"),it(l,"celled"),it(p,"divided"),it(d,"horizontal"),it(h,"inverted"),it(v,"link"),it(y,"ordered"),it(b,"selection"),ut(g,"relaxed"),lt(f,"floated"),pt(x),"list",s),E=H(t,this.props),N=dt(t,this.props);return r.isNil(u)?r.isNil(c)?i.a.createElement(N,S()({role:"list",className:k},E),Wn()(m,(function(t){return Wi.create(t,{overrideProps:e.handleItemOverrides})}))):i.a.createElement(N,S()({role:"list",className:k},E),c):i.a.createElement(N,S()({role:"list",className:k},E),u)}}]),t}(a.Component);z()(Vi,"Content",Ui),z()(Vi,"Description",ji),z()(Vi,"Header",Di),z()(Vi,"Icon",Li),z()(Vi,"Item",Wi),z()(Vi,"List",Hi),z()(Vi,"handledProps",["animated","as","bulleted","celled","children","className","content","divided","floated","horizontal","inverted","items","link","onItemClick","ordered","relaxed","selection","size","verticalAlign"]),Vi.propTypes={};var Ki=Vi;function Gi(e){var t=e.active,n=e.children,o=e.className,a=e.content,l=e.disabled,u=e.indeterminate,s=e.inline,c=e.inverted,p=e.size,f=Y()("ui",p,it(t,"active"),it(l,"disabled"),it(u,"indeterminate"),it(c,"inverted"),it(n||a,"text"),ut(s,"inline"),"loader",o),d=H(Gi,e),h=dt(Gi,e);return i.a.createElement(h,S()({},d,{className:f}),r.isNil(n)?a:n)}Gi.handledProps=["active","as","children","className","content","disabled","indeterminate","inline","inverted","size"],Gi.propTypes={};var $i=Gi;function Qi(e){var t=e.children,n=e.className,o=e.content,a=e.image,l=Y()(it(a,"image"),"header",n),u=H(Qi,e),s=dt(Qi,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(t)?o:t)}Qi.handledProps=["as","children","className","content","image"],Qi.propTypes={};var Yi=Qi;function Xi(e){var t=e.className,n=e.square,r=e.rectangular,o=Y()(it(n,"square"),it(r,"rectangular"),"image",t),a=H(Xi,e),l=dt(Xi,e);return i.a.createElement(l,S()({},a,{className:o}))}Xi.handledProps=["as","className","rectangular","square"],Xi.propTypes={};var Zi=Xi;function Ji(e){var t=e.className,n=e.length,r=Y()("line",n,t),o=H(Ji,e),a=dt(Ji,e);return i.a.createElement(a,S()({},o,{className:r}))}Ji.handledProps=["as","className","length"],Ji.propTypes={};var el=Ji;function tl(e){var t=e.children,n=e.className,o=e.content,a=Y()("paragraph",n),l=H(tl,e),u=dt(tl,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}tl.handledProps=["as","children","className","content"],tl.propTypes={};var nl=tl;function rl(e){var t=e.children,n=e.className,o=e.content,a=e.fluid,l=e.inverted,u=Y()("ui",it(a,"fluid"),it(l,"inverted"),"placeholder",n),s=H(rl,e),c=dt(rl,e);return i.a.createElement(c,S()({},s,{className:u}),r.isNil(t)?o:t)}rl.handledProps=["as","children","className","content","fluid","inverted"],rl.propTypes={},rl.Header=Yi,rl.Image=Zi,rl.Line=el,rl.Paragraph=nl;var ol=rl;function al(e){var t=e.attached,n=e.children,o=e.className,a=e.close,l=e.content,u=e.dividing,s=e.internal,c=e.position,p=e.size,f=Y()("ui",c,p,it(t,"attached"),it(u,"dividing"),it(s,"internal"),ut(a,"close"),"rail",o),d=H(al,e),h=dt(al,e);return i.a.createElement(h,S()({},d,{className:f}),r.isNil(n)?l:n)}al.handledProps=["as","attached","children","className","close","content","dividing","internal","position","size"],al.propTypes={};var il=al;function ll(e){var t=e.children,n=e.className,o=e.content,a=e.hidden,l=e.visible,u=Y()("ui",it(a,"hidden"),it(l,"visible"),"content",n),s=H(ll,e),c=dt(ll,e);return i.a.createElement(c,S()({},s,{className:u}),r.isNil(t)?o:t)}ll.handledProps=["as","children","className","content","hidden","visible"],ll.propTypes={};var ul=ll;function sl(e){var t=e.active,n=e.animated,o=e.children,a=e.className,l=e.content,u=e.disabled,s=e.instant,c=Y()("ui",n,it(t,"active"),it(u,"disabled"),it(s,"instant"),"reveal",a),p=H(sl,e),f=dt(sl,e);return i.a.createElement(f,S()({},p,{className:c}),r.isNil(o)?l:o)}sl.handledProps=["active","animated","as","children","className","content","disabled","instant"],sl.propTypes={},sl.Content=ul;var cl=sl;function pl(e){var t=e.children,n=e.className,o=e.compact,a=e.content,l=e.horizontal,u=e.piled,s=e.raised,c=e.size,p=e.stacked,f=Y()("ui",c,it(o,"compact"),it(l,"horizontal"),it(u,"piled"),it(s,"raised"),it(p,"stacked"),"segments",n),d=H(pl,e),h=dt(pl,e);return i.a.createElement(h,S()({},d,{className:f}),r.isNil(t)?a:t)}pl.handledProps=["as","children","className","compact","content","horizontal","piled","raised","size","stacked"],pl.propTypes={};var fl=pl;function dl(e){var t=e.children,n=e.className,o=e.content,a=Y()("inline",n),l=H(dl,e),u=dt(dl,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}dl.handledProps=["as","children","className","content"],dl.propTypes={};var hl=dl;function ml(e){var t=e.attached,n=e.basic,o=e.children,a=e.circular,l=e.className,u=e.clearing,s=e.color,c=e.compact,p=e.content,f=e.disabled,d=e.floated,h=e.inverted,m=e.loading,v=e.placeholder,y=e.padded,g=e.piled,b=e.raised,w=e.secondary,x=e.size,k=e.stacked,E=e.tertiary,N=e.textAlign,C=e.vertical,T=Y()("ui",s,x,it(n,"basic"),it(a,"circular"),it(u,"clearing"),it(c,"compact"),it(f,"disabled"),it(h,"inverted"),it(m,"loading"),it(v,"placeholder"),it(g,"piled"),it(b,"raised"),it(w,"secondary"),it(k,"stacked"),it(E,"tertiary"),it(C,"vertical"),ut(t,"attached"),ut(y,"padded"),ct(N),lt(d,"floated"),"segment",l),P=H(ml,e),O=dt(ml,e);return i.a.createElement(O,S()({},P,{className:T}),r.isNil(o)?p:o)}ml.handledProps=["as","attached","basic","children","circular","className","clearing","color","compact","content","disabled","floated","inverted","loading","padded","piled","placeholder","raised","secondary","size","stacked","tertiary","textAlign","vertical"],ml.Group=fl,ml.Inline=hl,ml.propTypes={};var vl=ml;function yl(e){var t=e.children,n=e.className,o=e.content,a=Y()("description",n),l=H(yl,e),u=dt(yl,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}yl.handledProps=["as","children","className","content"],yl.propTypes={},yl.create=Ot(yl,(function(e){return{content:e}}));var gl=yl;function bl(e){var t=e.children,n=e.className,o=e.content,a=Y()("title",n),l=H(bl,e),u=dt(bl,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}bl.handledProps=["as","children","className","content"],bl.propTypes={},bl.create=Ot(bl,(function(e){return{content:e}}));var wl=bl;function xl(e){var t=e.children,n=e.className,o=e.content,a=e.description,l=e.title,u=Y()("content",n),s=H(xl,e),c=dt(xl,e);return r.isNil(t)?r.isNil(o)?i.a.createElement(c,S()({},s,{className:u}),wl.create(l,{autoGenerateKey:!1}),gl.create(a,{autoGenerateKey:!1})):i.a.createElement(c,S()({},s,{className:u}),o):i.a.createElement(c,S()({},s,{className:u}),t)}xl.handledProps=["as","children","className","content","description","title"],xl.propTypes={},xl.create=Ot(xl,(function(e){return{content:e}}));var kl=xl;n(420);function El(e){var t=e.attached,n=e.children,o=e.className,a=e.content,l=e.fluid,u=e.items,s=e.ordered,c=e.size,p=e.stackable,f=e.unstackable,d=e.vertical,h=e.widths,m=Y()("ui",c,it(l,"fluid"),it(s,"ordered"),it(f,"unstackable"),it(d,"vertical"),ut(t,"attached"),lt(p,"stackable"),ft(h),"steps",o),v=H(El,e),y=dt(El,e);return r.isNil(n)?r.isNil(a)?i.a.createElement(y,S()({},v,{className:m}),Wn()(u,(function(e){return Cl.create(e)}))):i.a.createElement(y,S()({},v,{className:m}),a):i.a.createElement(y,S()({},v,{className:m}),n)}El.handledProps=["as","attached","children","className","content","fluid","items","ordered","size","stackable","unstackable","vertical","widths"],El.propTypes={};var Nl=El,Sl=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"computeElementType",(function(){if(n.props.onClick)return"a"})),z()(M()(n),"handleClick",(function(e){n.props.disabled||q()(n.props,"onClick",e,n.props)})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.active,o=e.children,a=e.className,l=e.completed,u=e.content,s=e.description,c=e.disabled,p=e.href,f=e.icon,d=e.link,h=e.title,m=Y()(it(n,"active"),it(l,"completed"),it(c,"disabled"),it(d,"link"),"step",a),v=H(t,this.props),y=dt(t,this.props,this.computeElementType);return r.isNil(o)?r.isNil(u)?i.a.createElement(y,S()({},v,{className:m,href:p,onClick:this.handleClick}),Bt.create(f,{autoGenerateKey:!1}),kl.create({description:s,title:h},{autoGenerateKey:!1})):i.a.createElement(y,S()({},v,{className:m,href:p,onClick:this.handleClick}),u):i.a.createElement(y,S()({},v,{className:m,href:p,onClick:this.handleClick}),o)}}]),t}(a.Component);z()(Sl,"Content",kl),z()(Sl,"Description",gl),z()(Sl,"Group",Nl),z()(Sl,"Title",wl),z()(Sl,"handledProps",["active","as","children","className","completed","content","description","disabled","href","icon","link","onClick","ordered","title"]),Sl.propTypes={},Sl.create=Ot(Sl,(function(e){return{content:e}}));var Cl=Sl,Tl=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleClick",(function(e){return q()(n.props,"onClick",e,n.props)})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.active,o=e.children,a=e.className,l=e.content,u=e.icon,s=Y()(it(n,"active"),"title",a),c=H(t,this.props),p=dt(t,this.props),f=$()(u)?"dropdown":u;return r.isNil(o)?i.a.createElement(p,S()({},c,{className:s,onClick:this.handleClick}),Bt.create(f,{autoGenerateKey:!1}),l):i.a.createElement(p,S()({},c,{className:s,onClick:this.handleClick}),o)}}]),t}(a.Component);function Pl(e){var t=e.active,n=e.children,o=e.className,a=e.content,l=Y()("content",it(t,"active"),o),u=H(Pl,e),s=dt(Pl,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(n)?a:n)}z()(Tl,"handledProps",["active","as","children","className","content","icon","index","onClick"]),Tl.propTypes={},Tl.create=Ot(Tl,(function(e){return{content:e}})),Pl.handledProps=["active","as","children","className","content"],Pl.propTypes={},Pl.create=Ot(Pl,(function(e){return{content:e}}));var Ol=Pl,Al=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleTitleOverrides",(function(e){return{onClick:function(t,r){q()(e,"onClick",t,r),q()(n.props,"onTitleClick",t,r)}}})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,t=e.active,n=e.content,r=e.index,o=e.title;return i.a.createElement(a.Fragment,null,Tl.create(o,{autoGenerateKey:!1,defaultProps:{active:t,index:r},overrideProps:this.handleTitleOverrides}),Ol.create(n,{autoGenerateKey:!1,defaultProps:{active:t}}))}}]),t}(a.Component);z()(Al,"handledProps",["active","content","index","onTitleClick","title"]),Al.propTypes={},Al.create=Ot(Al,null);var Il=Al,_l=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"computeNewIndex",(function(e){var t=n.props.exclusive,r=n.state.activeIndex;return t?e===r?-1:e:Gt()(r,e)?Ft()(r,e):[].concat(K()(r),[e])})),z()(M()(n),"handleTitleClick",(function(e,t){var r=t.index;n.trySetState({activeIndex:n.computeNewIndex(r)}),q()(n.props,"onTitleClick",e,t)})),z()(M()(n),"isIndexActive",(function(e){var t=n.props.exclusive,r=n.state.activeIndex;return t?r===e:Gt()(r,e)})),n}return F()(t,e),O()(t,[{key:"getInitialAutoControlledState",value:function(e){return{activeIndex:e.exclusive?-1:[]}}},{key:"componentDidMount",value:function(){0}},{key:"componentDidUpdate",value:function(){0}},{key:"render",value:function(){var e=this,n=this.props,o=n.className,a=n.children,l=n.panels,u=Y()("accordion",o),s=H(t,this.props),c=dt(t,this.props);return i.a.createElement(c,S()({},s,{className:u}),r.isNil(a)?Wn()(l,(function(t,n){return Il.create(t,{defaultProps:{active:e.isIndexActive(n),index:n,onTitleClick:e.handleTitleClick}})})):a)}}]),t}(xn);function Rl(e){var t=e.className,n=e.fluid,r=e.inverted,o=e.styled,a=Y()("ui",it(n,"fluid"),it(r,"inverted"),it(o,"styled"),t),l=H(Rl,e);return i.a.createElement(_l,S()({},l,{className:a}))}z()(_l,"defaultProps",{exclusive:!0}),z()(_l,"autoControlledProps",["activeIndex"]),z()(_l,"handledProps",["activeIndex","as","children","className","defaultActiveIndex","exclusive","onTitleClick","panels"]),_l.propTypes={},_l.create=Ot(_l,(function(e){return{content:e}})),Rl.handledProps=["className","fluid","inverted","styled"],Rl.propTypes={},Rl.Accordion=_l,Rl.Content=Ol,Rl.Panel=Il,Rl.Title=Tl;var jl=Rl,Ml=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleClick",(function(e){var t=n.props.onClick,r=n.state.active;t&&t(e,mt()({},n.props,{active:!0})),r||n.trySetState({active:!0})})),n}return F()(t,e),O()(t,[{key:"getSrc",value:function(){var e=this.props,t=e.autoplay,n=void 0===t||t,r=e.brandedUI,o=void 0!==r&&r,a=e.color,i=void 0===a?"#444444":a,l=e.hd,u=void 0===l||l,s=e.id,c=e.source,p=e.url;return"youtube"===c?["//www.youtube.com/embed/".concat(s),"?autohide=true","&amp;autoplay=".concat(n),"&amp;color=".concat(encodeURIComponent(i)),"&amp;hq=".concat(u),"&amp;jsapi=false","&amp;modestbranding=".concat(o),"&amp;rel=".concat(o?0:1)].join(""):"vimeo"===c?["//player.vimeo.com/video/".concat(s),"?api=false","&amp;autoplay=".concat(n),"&amp;byline=false","&amp;color=".concat(encodeURIComponent(i)),"&amp;portrait=false","&amp;title=false"].join(""):p}},{key:"render",value:function(){var e=this.props,n=e.aspectRatio,r=e.className,o=e.icon,a=e.placeholder,l=this.state.active,u=Y()("ui",n,it(l,"active"),"embed",r),s=H(t,this.props),c=dt(t,this.props),p=void 0!==o?o:"video play";return i.a.createElement(c,S()({},s,{className:u,onClick:this.handleClick}),Bt.create(p,{autoGenerateKey:!1}),a&&i.a.createElement("img",{className:"placeholder",src:a}),this.renderEmbed())}},{key:"renderEmbed",value:function(){var e=this.props,t=e.children,n=e.content,o=e.iframe,a=e.source;return this.state.active?r.isNil(t)?r.isNil(n)?i.a.createElement("div",{className:"embed"},It(r.isNil(o)?this.getSrc():o,{defaultProps:{allowFullScreen:!1,frameBorder:0,height:"100%",scrolling:"no",src:this.getSrc(),title:"Embedded content from ".concat(a,"."),width:"100%"},autoGenerateKey:!1})):i.a.createElement("div",{className:"embed"},n):i.a.createElement("div",{className:"embed"},t):null}}]),t}(xn);z()(Ml,"autoControlledProps",["active"]),z()(Ml,"handledProps",["active","as","aspectRatio","autoplay","brandedUI","children","className","color","content","defaultActive","hd","icon","id","iframe","onClick","placeholder","source","url"]),Ml.propTypes={};var Dl=n(242),Fl=n.n(Dl),Ul=n(143),zl=n.n(Ul),Ll=n(109),Bl=n.n(Ll),Wl=n(244),ql=n.n(Wl),Hl=n(145),Vl=n(146),Kl=n.n(Vl),Gl=Kl()(),$l=Kl()(),Ql=(a.Component,function(e,t){if("function"==typeof e)return function(e){if("function"==typeof e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return e.apply(void 0,n)}}(e,t);null!=e&&(e.current=t)}),Yl={position:"absolute",top:0,left:0,opacity:0,pointerEvents:"none"},Xl={},Zl=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return t=e.call.apply(e,[this].concat(r))||this,z()(M()(t),"state",{data:void 0,placement:void 0}),z()(M()(t),"popperInstance",void 0),z()(M()(t),"popperNode",null),z()(M()(t),"arrowNode",null),z()(M()(t),"setPopperNode",(function(e){e&&t.popperNode!==e&&(Ql(t.props.innerRef,e),t.popperNode=e,t.updatePopperInstance())})),z()(M()(t),"setArrowNode",(function(e){t.arrowNode=e})),z()(M()(t),"updateStateModifier",{enabled:!0,order:900,fn:function(e){var n=e.placement;return t.setState({data:e,placement:n}),e}}),z()(M()(t),"getOptions",(function(){return{placement:t.props.placement,eventsEnabled:t.props.eventsEnabled,positionFixed:t.props.positionFixed,modifiers:S()({},t.props.modifiers,{arrow:S()({},t.props.modifiers&&t.props.modifiers.arrow,{enabled:!!t.arrowNode,element:t.arrowNode}),applyStyle:{enabled:!1},updateStateModifier:t.updateStateModifier})}})),z()(M()(t),"getPopperStyle",(function(){return t.popperNode&&t.state.data?S()({position:t.state.data.offsets.popper.position},t.state.data.styles):Yl})),z()(M()(t),"getPopperPlacement",(function(){return t.state.data?t.state.placement:void 0})),z()(M()(t),"getArrowStyle",(function(){return t.arrowNode&&t.state.data?t.state.data.arrowStyles:Xl})),z()(M()(t),"getOutOfBoundariesState",(function(){return t.state.data?t.state.data.hide:void 0})),z()(M()(t),"destroyPopperInstance",(function(){t.popperInstance&&(t.popperInstance.destroy(),t.popperInstance=null)})),z()(M()(t),"updatePopperInstance",(function(){t.destroyPopperInstance();var e=M()(t).popperNode,n=t.props.referenceElement;n&&e&&(t.popperInstance=new Hl.a(n,e,t.getOptions()))})),z()(M()(t),"scheduleUpdate",(function(){t.popperInstance&&t.popperInstance.scheduleUpdate()})),t}Bl()(t,e);var n=t.prototype;return n.componentDidUpdate=function(e,t){this.props.placement===e.placement&&this.props.referenceElement===e.referenceElement&&this.props.positionFixed===e.positionFixed&&ql()(this.props.modifiers,e.modifiers,{strict:!0})?this.props.eventsEnabled!==e.eventsEnabled&&this.popperInstance&&(this.props.eventsEnabled?this.popperInstance.enableEventListeners():this.popperInstance.disableEventListeners()):this.updatePopperInstance(),t.placement!==this.state.placement&&this.scheduleUpdate()},n.componentWillUnmount=function(){Ql(this.props.innerRef,null),this.destroyPopperInstance()},n.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)({ref:this.setPopperNode,style:this.getPopperStyle(),placement:this.getPopperPlacement(),outOfBoundaries:this.getOutOfBoundariesState(),scheduleUpdate:this.scheduleUpdate,arrowProps:{ref:this.setArrowNode,style:this.getArrowStyle()}});var e},t}(a.Component);z()(Zl,"defaultProps",{placement:"bottom",eventsEnabled:!0,referenceElement:void 0,positionFixed:!1});Hl.a.placements;function Jl(e){var t=e.referenceElement,n=zl()(e,["referenceElement"]);return a.createElement(Gl.Consumer,null,(function(e){return a.createElement(Zl,S()({referenceElement:void 0!==t?t:e},n))}))}var eu=n(243),tu=n.n(eu),nu={"top center":"top","top left":"top-start","top right":"top-end","bottom center":"bottom","bottom left":"bottom-start","bottom right":"bottom-end","right center":"right","left center":"left"},ru=(se()(nu),tu()(nu)),ou=n(140),au=n.n(ou),iu=function(){function e(t){T()(this,e),this.ref=t}return O()(e,[{key:"getBoundingClientRect",value:function(){return q()(this.ref.current,"getBoundingClientRect",{})}},{key:"clientWidth",get:function(){return this.getBoundingClientRect().width}},{key:"clientHeight",get:function(){return this.getBoundingClientRect().height}},{key:"parentNode",get:function(){return this.ref.current?this.ref.current.parentNode:void 0}}]),e}(),lu=au()((function(e){return new iu(nr(e)?e:ar(e))}));function uu(e){var t=e.children,n=e.className,o=e.content,a=Y()("content",n),l=H(uu,e),u=dt(uu,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}function su(e){var t=e.children,n=e.className,o=e.content,a=Y()("header",n),l=H(su,e),u=dt(su,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}uu.handledProps=["as","children","className","content"],uu.propTypes={},uu.create=Ot(uu,(function(e){return{children:e}})),su.handledProps=["as","children","className","content"],su.propTypes={},su.create=Ot(su,(function(e){return{children:e}}));var cu=function(e){function t(){var e,n;T()(this,t);for(var o=arguments.length,l=new Array(o),u=0;u<o;u++)l[u]=arguments[u];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(l))),z()(M()(n),"state",{}),z()(M()(n),"open",!1),z()(M()(n),"triggerRef",Object(a.createRef)()),z()(M()(n),"getPortalProps",(function(){var e={},t=n.props,r=t.on,o=t.hoverable,a=yt()(r)?r:[r];return o&&(e.closeOnPortalMouseLeave=!0,e.mouseLeaveDelay=300),Gt()(a,"hover")&&(e.openOnTriggerClick=!1,e.closeOnTriggerClick=!1,e.openOnTriggerMouseEnter=!0,e.closeOnTriggerMouseLeave=!0,e.mouseLeaveDelay=70,e.mouseEnterDelay=50),Gt()(a,"click")&&(e.openOnTriggerClick=!0,e.closeOnTriggerClick=!0,e.closeOnDocumentClick=!0),Gt()(a,"focus")&&(e.openOnTriggerFocus=!0,e.closeOnTriggerBlur=!0),e})),z()(M()(n),"hideOnScroll",(function(e){n.setState({closed:!0}),tr.unsub("scroll",n.hideOnScroll,{target:window}),n.timeoutId=setTimeout((function(){n.setState({closed:!1})}),50),n.handleClose(e)})),z()(M()(n),"handleClose",(function(e){q()(n.props,"onClose",e,n.props)})),z()(M()(n),"handleOpen",(function(e){q()(n.props,"onOpen",e,n.props)})),z()(M()(n),"handlePortalMount",(function(e){q()(n.props,"onMount",e,n.props)})),z()(M()(n),"handlePortalUnmount",(function(e){n.positionUpdate=null,q()(n.props,"onUnmount",e,n.props)})),z()(M()(n),"renderContent",(function(e){var o=e.placement,a=e.ref,l=e.scheduleUpdate,u=e.style,s=n.props,c=s.basic,p=s.children,f=s.className,d=s.content,h=s.hideOnScroll,m=s.flowing,v=s.header,y=s.inverted,g=s.size,b=s.style,w=s.wide,x=n.state.contentRestProps;n.positionUpdate=l;var k=Y()("ui",ru[o],g,ut(w,"wide"),it(c,"basic"),it(m,"flowing"),it(y,"inverted"),"popup transition visible",f),N=dt(t,n.props),C=mt()({left:"auto",right:"auto"},u,b);return i.a.createElement(E,{innerRef:a},i.a.createElement(N,S()({},x,{className:k,style:C}),r.isNil(p)?i.a.createElement(i.a.Fragment,null,su.create(v,{autoGenerateKey:!1}),uu.create(d,{autoGenerateKey:!1})):p,h&&i.a.createElement(on.a,{on:n.hideOnScroll,name:"scroll",target:"window"})))})),n}return F()(t,e),O()(t,[{key:"componentDidUpdate",value:function(e){er()(this.props.popperDependencies,e.popperDependencies)||this.handleUpdate()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeoutId)}},{key:"handleUpdate",value:function(){this.positionUpdate&&this.positionUpdate()}},{key:"render",value:function(){var e=this.props,t=e.context,n=e.disabled,r=e.eventsEnabled,o=e.offset,a=e.pinned,l=e.popperModifiers,u=e.position,s=e.positionFixed,c=e.trigger,p=this.state,f=p.closed,d=p.portalRestProps;if(f||n)return c;var h=Fl()({arrow:{enabled:!1},flip:{enabled:!a},keepTogether:{enabled:!!o},offset:{offset:o}},l),m=lu($()(t)?this.triggerRef:t),v=mt()({},this.getPortalProps(),d);return i.a.createElement(Sn,S()({},v,{onClose:this.handleClose,onMount:this.handlePortalMount,onOpen:this.handleOpen,onUnmount:this.handlePortalUnmount,trigger:c,triggerRef:this.triggerRef}),i.a.createElement(Jl,{eventsEnabled:r,modifiers:h,placement:nu[u],positionFixed:s,referenceElement:m},this.renderContent))}}],[{key:"getDerivedStateFromProps",value:function(e,n){if(n.closed||n.disabled)return{};var r=H(t,e);return{contentRestProps:Zn()(r,(function(e,t,n){return Gt()(Sn.handledProps,n)||(e[n]=t),e}),{}),portalRestProps:Yn()(r,Sn.handledProps)}}}]),t}(a.Component);z()(cu,"defaultProps",{disabled:!1,eventsEnabled:!0,offset:0,on:["click","hover"],pinned:!1,position:"top left"}),z()(cu,"Content",uu),z()(cu,"Header",su),z()(cu,"handledProps",["as","basic","children","className","content","context","disabled","eventsEnabled","flowing","header","hideOnScroll","hoverable","inverted","offset","on","onClose","onMount","onOpen","onUnmount","pinned","popperDependencies","popperModifiers","position","positionFixed","size","style","trigger","wide"]),cu.propTypes={};var pu=n(245),fu=n.n(pu),du=n(246),hu=n.n(du),mu=function(e){function t(){var e,n;T()(this,t);for(var o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(a))),z()(M()(n),"calculatePercent",(function(){var e=n.props,t=e.percent,r=e.total,o=e.value;return qt()(t)?qt()(r)||qt()(o)?void 0:o/r*100:t})),z()(M()(n),"computeValueText",(function(e){var t=n.props,r=t.progress,o=t.total,a=t.value;return"value"===r?a:"ratio"===r?"".concat(a,"/").concat(o):"".concat(e,"%")})),z()(M()(n),"getPercent",(function(){var e=n.props,t=e.precision,r=e.progress,o=e.total,a=e.value,i=hu()(n.calculatePercent(),0,100);return qt()(o)||qt()(a)||"value"!==r?"value"===r?a:qt()(t)?i:fu()(i,t):a/o*100})),z()(M()(n),"isAutoSuccess",(function(){var e=n.props,t=e.autoSuccess,r=e.percent,o=e.total,a=e.value;return t&&(r>=100||a>=o)})),z()(M()(n),"renderLabel",(function(){var e=n.props,t=e.children,o=e.content,a=e.label;return r.isNil(t)?r.isNil(o)?At(a,{autoGenerateKey:!1,defaultProps:{className:"label"}}):i.a.createElement("div",{className:"label"},o):i.a.createElement("div",{className:"label"},t)})),z()(M()(n),"renderProgress",(function(e){var t=n.props,r=t.precision;if(t.progress||!qt()(r))return i.a.createElement("div",{className:"progress"},n.computeValueText(e))})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.active,r=e.attached,o=e.className,a=e.color,l=e.disabled,u=e.error,s=e.indicating,c=e.inverted,p=e.size,f=e.success,d=e.warning,h=Y()("ui",a,p,it(n||s,"active"),it(l,"disabled"),it(u,"error"),it(s,"indicating"),it(c,"inverted"),it(f||this.isAutoSuccess(),"success"),it(d,"warning"),lt(r,"attached"),"progress",o),m=H(t,this.props),v=dt(t,this.props),y=this.getPercent()||0;return i.a.createElement(v,S()({},m,{className:h,"data-percent":Math.floor(y)}),i.a.createElement("div",{className:"bar",style:{width:"".concat(y,"%")}},this.renderProgress(y)),this.renderLabel())}}]),t}(a.Component);z()(mu,"handledProps",["active","as","attached","autoSuccess","children","className","color","content","disabled","error","indicating","inverted","label","percent","precision","progress","size","success","total","value","warning"]),mu.propTypes={};var vu=mu,yu=n(247),gu=n.n(yu),bu=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleClick",(function(e){q()(n.props,"onClick",e,n.props)})),z()(M()(n),"handleKeyUp",(function(e){switch(q()(n.props,"onKeyUp",e,n.props),ln.a.getCode(e)){case ln.a.Enter:case ln.a.Spacebar:e.preventDefault(),q()(n.props,"onClick",e,n.props)}})),z()(M()(n),"handleMouseEnter",(function(e){q()(n.props,"onMouseEnter",e,n.props)})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.active,r=e.className,o=e.selected,a=Y()(it(n,"active"),it(o,"selected"),"icon",r),l=H(t,this.props),u=dt(t,this.props);return i.a.createElement(u,S()({},l,{className:a,onClick:this.handleClick,onKeyUp:this.handleKeyUp,onMouseEnter:this.handleMouseEnter,role:"radio"}))}}]),t}(a.Component);z()(bu,"defaultProps",{as:"i"}),z()(bu,"handledProps",["active","as","className","index","onClick","onKeyUp","onMouseEnter","selected"]),bu.propTypes={};var wu=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleIconClick",(function(e,t){var r=t.index,o=n.props,a=o.clearable,i=o.disabled,l=o.maxRating,u=o.onRate,s=n.state.rating;if(!i){var c=r+1;"auto"===a&&1===l?c=+!s:!0===a&&c===s&&(c=0),n.trySetState({rating:c,isSelecting:!1}),u&&u(e,mt()({},n.props,{rating:c}))}})),z()(M()(n),"handleIconMouseEnter",(function(e,t){var r=t.index;n.props.disabled||n.setState({selectedIndex:r,isSelecting:!0})})),z()(M()(n),"handleMouseLeave",(function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];q.a.apply(void 0,[n.props,"onMouseLeave"].concat(t)),n.props.disabled||n.setState({selectedIndex:-1,isSelecting:!1})})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this,n=this.props,r=n.className,o=n.disabled,a=n.icon,l=n.maxRating,u=n.size,s=this.state,c=s.rating,p=s.selectedIndex,f=s.isSelecting,d=Y()("ui",a,u,it(o,"disabled"),it(f&&!o&&p>=0,"selected"),"rating",r),h=H(t,this.props),m=dt(t,this.props);return i.a.createElement(m,S()({},h,{className:d,role:"radiogroup",onMouseLeave:this.handleMouseLeave,tabIndex:o?0:-1}),gu()(l,(function(t){return i.a.createElement(bu,{tabIndex:o?-1:0,active:c>=t+1,"aria-checked":c===t+1,"aria-posinset":t+1,"aria-setsize":l,index:t,key:t,onClick:e.handleIconClick,onMouseEnter:e.handleIconMouseEnter,selected:p>=t&&f})})))}}]),t}(xn);z()(wu,"autoControlledProps",["rating"]),z()(wu,"defaultProps",{clearable:"auto",maxRating:1}),z()(wu,"Icon",bu),z()(wu,"handledProps",["as","className","clearable","defaultRating","disabled","icon","maxRating","onRate","rating","size"]),wu.propTypes={};var xu=n(42),ku=n.n(xu),Eu=n(248),Nu=n.n(Eu);function Su(e){var t=e.categoryContent,n=e.resultsContent;return i.a.createElement(i.a.Fragment,null,i.a.createElement("div",{className:"name"},t),i.a.createElement("div",{className:"results"},n))}Su.handledProps=["categoryContent","resultsContent"],Su.propTypes={};var Cu=Su;function Tu(e){var t=e.active,n=e.children,o=e.className,a=e.content,l=e.layoutRenderer,u=e.renderer,s=Y()(it(t,"active"),"category",o),c=H(Tu,e),p=dt(Tu,e),f=u(e),d=r.isNil(n)?a:n;return i.a.createElement(p,S()({},c,{className:s}),l({categoryContent:f,resultsContent:d}))}Tu.handledProps=["active","as","children","className","content","layoutRenderer","name","renderer","results"],Tu.defaultProps={layoutRenderer:Cu,renderer:function(e){return e.name}},Tu.propTypes={};var Pu=Tu,Ou=function(e){var t=e.image,n=e.price,r=e.title,o=e.description;return[t&&i.a.createElement("div",{key:"image",className:"image"},_t(t,{autoGenerateKey:!1})),i.a.createElement("div",{key:"content",className:"content"},n&&i.a.createElement("div",{className:"price"},n),r&&i.a.createElement("div",{className:"title"},r),o&&i.a.createElement("div",{className:"description"},o))]};Ou.handledProps=[];var Au=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleClick",(function(e){var t=n.props.onClick;t&&t(e,n.props)})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.active,r=e.className,o=e.renderer,a=Y()(it(n,"active"),"result",r),l=H(t,this.props),u=dt(t,this.props);return i.a.createElement(u,S()({},l,{className:a,onClick:this.handleClick}),o(this.props))}}]),t}(a.Component);function Iu(e){var t=e.children,n=e.className,o=e.content,a=Y()("results transition",n),l=H(Iu,e),u=dt(Iu,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}z()(Au,"defaultProps",{renderer:Ou}),z()(Au,"handledProps",["active","as","className","content","description","id","image","onClick","price","renderer","title"]),Au.propTypes={},Iu.handledProps=["as","children","className","content"],Iu.propTypes={};var _u=Iu,Ru=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleResultSelect",(function(e,t){q()(n.props,"onResultSelect",e,mt()({},n.props,{result:t}))})),z()(M()(n),"handleSelectionChange",(function(e){var t=n.getSelectedResult();q()(n.props,"onSelectionChange",e,mt()({},n.props,{result:t}))})),z()(M()(n),"closeOnEscape",(function(e){ln.a.getCode(e)===ln.a.Escape&&(e.preventDefault(),n.close())})),z()(M()(n),"moveSelectionOnKeyDown",(function(e){switch(ln.a.getCode(e)){case ln.a.ArrowDown:e.preventDefault(),n.moveSelectionBy(e,1);break;case ln.a.ArrowUp:e.preventDefault(),n.moveSelectionBy(e,-1)}})),z()(M()(n),"selectItemOnEnter",(function(e){if(ln.a.getCode(e)===ln.a.Enter){var t=n.getSelectedResult();t&&(e.preventDefault(),n.setValue(t.title),n.handleResultSelect(e,t),n.close())}})),z()(M()(n),"closeOnDocumentClick",(function(e){n.close()})),z()(M()(n),"handleMouseDown",(function(e){n.isMouseDown=!0,q()(n.props,"onMouseDown",e,n.props),tr.sub("mouseup",n.handleDocumentMouseUp)})),z()(M()(n),"handleDocumentMouseUp",(function(){n.isMouseDown=!1,tr.unsub("mouseup",n.handleDocumentMouseUp)})),z()(M()(n),"handleInputClick",(function(e){e.nativeEvent.stopImmediatePropagation(),n.tryOpen()})),z()(M()(n),"handleItemClick",(function(e,t){var r=t.id,o=n.getSelectedResult(r);e.nativeEvent.stopImmediatePropagation(),n.setValue(o.title),n.handleResultSelect(e,o),n.close()})),z()(M()(n),"handleItemMouseDown",(function(e){e.preventDefault()})),z()(M()(n),"handleFocus",(function(e){q()(n.props,"onFocus",e,n.props),n.setState({focus:!0})})),z()(M()(n),"handleBlur",(function(e){q()(n.props,"onBlur",e,n.props),n.setState({focus:!1})})),z()(M()(n),"handleSearchChange",(function(e){e.stopPropagation();var t=n.props.minCharacters,r=n.state.open,o=e.target.value;q()(n.props,"onSearchChange",e,mt()({},n.props,{value:o})),o.length<t?n.close():r||n.tryOpen(o),n.setValue(o)})),z()(M()(n),"getFlattenedResults",(function(){var e=n.props,t=e.category,r=e.results;return t?Zn()(r,(function(e,t){return e.concat(t.results)}),[]):r})),z()(M()(n),"getSelectedResult",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.state.selectedIndex,t=n.getFlattenedResults();return vo()(t,e)})),z()(M()(n),"setValue",(function(e){var t=n.props.selectFirstResult;n.trySetState({value:e,selectedIndex:t?0:-1})})),z()(M()(n),"moveSelectionBy",(function(e,t){var r=n.state.selectedIndex,o=n.getFlattenedResults().length-1,a=r+t;a>o?a=0:a<0&&(a=o),n.setState({selectedIndex:a}),n.scrollSelectedItemIntoView(),n.handleSelectionChange(e)})),z()(M()(n),"scrollSelectedItemIntoView",(function(){if(nn()){var e=document.querySelector(".ui.search.active.visible .results.visible"),t=e.querySelector(".result.active");if(t){var n=t.offsetTop<e.scrollTop,r=t.offsetTop+t.clientHeight>e.scrollTop+e.clientHeight;n?e.scrollTop=t.offsetTop:r&&(e.scrollTop=t.offsetTop+t.clientHeight-e.clientHeight)}}})),z()(M()(n),"tryOpen",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n.state.value,t=n.props.minCharacters;e.length<t||n.open()})),z()(M()(n),"open",(function(){n.trySetState({open:!0})})),z()(M()(n),"close",(function(){n.trySetState({open:!1})})),z()(M()(n),"renderSearchInput",(function(e){var t=n.props,r=t.icon,o=t.input,a=n.state.value;return Fa.create(o,{autoGenerateKey:!1,defaultProps:mt()({},e,{icon:r,input:{className:"prompt",tabIndex:"0",autoComplete:"off"},onChange:n.handleSearchChange,onClick:n.handleInputClick,value:a})})})),z()(M()(n),"renderNoResults",(function(){var e=n.props,t=e.noResultsDescription,r=e.noResultsMessage;return i.a.createElement("div",{className:"message empty"},i.a.createElement("div",{className:"header"},r),t&&i.a.createElement("div",{className:"description"},t))})),z()(M()(n),"renderResult",(function(e,t,r){var o=e.childKey,a=ku()(e,["childKey"]),l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,u=n.props.resultRenderer,s=n.state.selectedIndex,c=t+l;return i.a.createElement(Au,S()({key:o||a.id||a.title,active:s===c,onClick:n.handleItemClick,onMouseDown:n.handleItemMouseDown,renderer:u},a,{id:c}))})),z()(M()(n),"renderResults",(function(){var e=n.props.results;return Wn()(e,n.renderResult)})),z()(M()(n),"renderCategories",(function(){var e=n.props,t=e.categoryLayoutRenderer,r=e.categoryRenderer,o=e.results,a=n.state.selectedIndex,l=0;return Wn()(o,(function(e){var o=e.childKey,u=ku()(e,["childKey"]),s=mt()({key:o||u.name,active:sn()(a,l,l+u.results.length),layoutRenderer:t,renderer:r},u),c=Nu()(n.renderResult,l);return l+=u.results.length,i.a.createElement(Pu,s,u.results.map(c))}))})),z()(M()(n),"renderMenuContent",(function(){var e=n.props,t=e.category,r=e.showNoResults,o=e.results;return vn()(o)?r?n.renderNoResults():null:t?n.renderCategories():n.renderResults()})),z()(M()(n),"renderResultsMenu",(function(){var e=n.state.open?"visible":"",t=n.renderMenuContent();if(t)return i.a.createElement(_u,{className:e},t)})),n}return F()(t,e),O()(t,[{key:"UNSAFE_componentWillMount",value:function(){var e=this.state,t=e.open,n=e.value;this.setValue(n),t&&this.open()}},{key:"UNSAFE_componentWillReceiveProps",value:function(e){Eo()(R()(t.prototype),"UNSAFE_componentWillReceiveProps",this).call(this,e),er()(e.value,this.props.value)||this.setValue(e.value)}},{key:"shouldComponentUpdate",value:function(e,t){return!er()(e,this.props)||!er()(t,this.state)}},{key:"componentDidUpdate",value:function(e,t){!t.focus&&this.state.focus?(this.isMouseDown||this.tryOpen(),this.state.open&&tr.sub("keydown",[this.moveSelectionOnKeyDown,this.selectItemOnEnter])):t.focus&&!this.state.focus&&(this.isMouseDown||this.close(),tr.unsub("keydown",[this.moveSelectionOnKeyDown,this.selectItemOnEnter])),!t.open&&this.state.open?(this.open(),tr.sub("click",this.closeOnDocumentClick),tr.sub("keydown",[this.closeOnEscape,this.moveSelectionOnKeyDown,this.selectItemOnEnter])):t.open&&!this.state.open&&(this.close(),tr.unsub("click",this.closeOnDocumentClick),tr.unsub("keydown",[this.closeOnEscape,this.moveSelectionOnKeyDown,this.selectItemOnEnter]))}},{key:"componentWillUnmount",value:function(){tr.unsub("click",this.closeOnDocumentClick),tr.unsub("keydown",[this.closeOnEscape,this.moveSelectionOnKeyDown,this.selectItemOnEnter])}},{key:"render",value:function(){var e=this.state,n=e.searchClasses,r=e.focus,o=e.open,a=this.props,l=a.aligned,u=a.category,s=a.className,c=a.fluid,p=a.loading,f=a.size,d=Y()("ui",o&&"active visible",f,n,it(u,"category"),it(r,"focus"),it(c,"fluid"),it(p,"loading"),lt(l,"aligned"),"search",s),h=H(t,this.props),m=dt(t,this.props),v=Jt(h,{htmlProps:Yt}),y=Vt()(v,2),g=y[0],b=y[1];return i.a.createElement(m,S()({},b,{className:d,onBlur:this.handleBlur,onFocus:this.handleFocus,onMouseDown:this.handleMouseDown}),this.renderSearchInput(g),this.renderResultsMenu())}}]),t}(xn);z()(Ru,"defaultProps",{icon:"search",input:"text",minCharacters:1,noResultsMessage:"No results found.",showNoResults:!0}),z()(Ru,"autoControlledProps",["open","value"]),z()(Ru,"Category",Pu),z()(Ru,"Result",Au),z()(Ru,"Results",_u),z()(Ru,"handledProps",["aligned","as","category","categoryLayoutRenderer","categoryRenderer","className","defaultOpen","defaultValue","fluid","icon","input","loading","minCharacters","noResultsDescription","noResultsMessage","onBlur","onFocus","onMouseDown","onResultSelect","onSearchChange","onSelectionChange","open","resultRenderer","results","selectFirstResult","showNoResults","size","value"]),Ru.propTypes={};var ju=n(210),Mu=n(249);function Du(e){var t=e.className,n=e.children,o=e.content,a=Y()("pushable",t),l=H(Du,e),u=dt(Du,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(n)?o:n)}Du.handledProps=["as","children","className","content"],Du.propTypes={};var Fu=Du;function Uu(e){var t=e.className,n=e.dimmed,o=e.children,a=e.content,l=Y()("pusher",it(n,"dimmed"),t),u=H(Uu,e),s=dt(Uu,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(o)?a:o)}Uu.handledProps=["as","children","className","content","dimmed"],Uu.propTypes={};var zu=Uu,Lu=function(e){function t(e){var n;return T()(this,t),n=I()(this,R()(t).call(this,e)),z()(M()(n),"ref",Object(a.createRef)()),z()(M()(n),"handleAnimationStart",(function(){var e=n.props.visible?"onVisible":"onHide";clearTimeout(n.animationTimer),n.animationTimer=setTimeout(n.handleAnimationEnd,t.animationDuration),n.skipNextCallback?n.skipNextCallback=!1:q()(n.props,e,null,n.props)})),z()(M()(n),"handleAnimationEnd",(function(){var e=n.props.visible?"onShow":"onHidden";n.setState({animationTick:0}),q()(n.props,e,null,n.props)})),z()(M()(n),"handleDocumentClick",(function(e){fn(n.ref.current,e)||(n.skipNextCallback=!0,q()(n.props,"onHide",e,mt()({},n.props,{visible:!1})))})),n.state={animationTick:0,visible:e.visible},n}return F()(t,e),O()(t,[{key:"componentDidUpdate",value:function(e,t){this.state.animationTick>t.animationTick&&this.handleAnimationStart()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.animationTimer)}},{key:"render",value:function(){var e=this.props,n=e.animation,o=e.className,a=e.children,l=e.content,u=e.direction,s=e.target,c=e.visible,p=e.width,f=this.state.animationTick,d=Y()("ui",n,u,p,it(f>0,"animating"),it(c,"visible"),"sidebar",o),h=H(t,this.props),m=dt(t,this.props),v=nr(s)?s:ar(s);return i.a.createElement(E,{innerRef:this.ref},i.a.createElement(m,S()({},h,{className:d}),r.isNil(a)?l:a,c&&i.a.createElement(ju.a,{listener:this.handleDocumentClick,targetRef:v,type:"click"})))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=!!e.visible==!!t.visible?0:1;return{animationTick:t.animationTick+n,visible:e.visible}}}]),t}(a.Component);z()(Lu,"defaultProps",{direction:"left",target:Mu.documentRef,visible:!1}),z()(Lu,"animationDuration",500),z()(Lu,"autoControlledProps",["visible"]),z()(Lu,"Pushable",Fu),z()(Lu,"Pusher",zu),z()(Lu,"handledProps",["animation","as","children","className","content","direction","onHidden","onHide","onShow","onVisible","target","visible","width"]),Lu.propTypes={};var Bu=Lu,Wu=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"state",{sticky:!1}),z()(M()(n),"stickyRef",Object(a.createRef)()),z()(M()(n),"triggerRef",Object(a.createRef)()),z()(M()(n),"addListeners",(function(e){var t=e.scrollContext,r=nr(t)?t.current:t;r&&(tr.sub("resize",n.handleUpdate,{target:r}),tr.sub("scroll",n.handleUpdate,{target:r}))})),z()(M()(n),"removeListeners",(function(){var e=n.props.scrollContext,t=nr(e)?e.current:e;t&&(tr.unsub("resize",n.handleUpdate,{target:t}),tr.unsub("scroll",n.handleUpdate,{target:t}))})),z()(M()(n),"update",(function(e){var t=n.state.pushing;if(n.ticking=!1,n.assignRects(),t)return n.didReachStartingPoint()?n.stickToContextTop(e):n.didTouchScreenBottom()?n.stickToScreenBottom(e):n.stickToContextBottom(e);if(n.isOversized()){if(n.contextRect.top>0)return n.stickToContextTop(e);if(n.contextRect.bottom<window.innerHeight)return n.stickToContextBottom(e)}return n.didTouchScreenTop()?n.didReachContextBottom()?n.stickToContextBottom(e):n.stickToScreenTop(e):n.stickToContextTop(e)})),z()(M()(n),"handleUpdate",(function(e){n.ticking||(n.ticking=!0,n.frameId=requestAnimationFrame((function(){return n.update(e)})))})),z()(M()(n),"assignRects",(function(){var e=n.props.context,t=nr(e)?e.current:e||document.body;n.triggerRect=n.triggerRef.current.getBoundingClientRect(),n.contextRect=t.getBoundingClientRect(),n.stickyRect=n.stickyRef.current.getBoundingClientRect()})),z()(M()(n),"didReachContextBottom",(function(){var e=n.props.offset;return n.stickyRect.height+e>=n.contextRect.bottom})),z()(M()(n),"didReachStartingPoint",(function(){return n.stickyRect.top<=n.triggerRect.top})),z()(M()(n),"didTouchScreenTop",(function(){return n.triggerRect.top<n.props.offset})),z()(M()(n),"didTouchScreenBottom",(function(){var e=n.props.bottomOffset;return n.contextRect.bottom+e>window.innerHeight})),z()(M()(n),"isOversized",(function(){return n.stickyRect.height>window.innerHeight})),z()(M()(n),"pushing",(function(e){n.props.pushing&&n.setState({pushing:e})})),z()(M()(n),"stick",(function(e,t){n.setState({bound:t,sticky:!0}),q()(n.props,"onStick",e,n.props)})),z()(M()(n),"unstick",(function(e,t){n.setState({bound:t,sticky:!1}),q()(n.props,"onUnstick",e,n.props)})),z()(M()(n),"stickToContextBottom",(function(e){q()(n.props,"onBottom",e,n.props),n.stick(e,!0),n.pushing(!0)})),z()(M()(n),"stickToContextTop",(function(e){q()(n.props,"onTop",e,n.props),n.unstick(e,!1),n.pushing(!1)})),z()(M()(n),"stickToScreenBottom",(function(e){var t=n.props.bottomOffset;n.stick(e,!1),n.setState({bottom:t,top:null})})),z()(M()(n),"stickToScreenTop",(function(e){var t=n.props.offset;n.stick(e,!1),n.setState({top:t,bottom:null})})),n}return F()(t,e),O()(t,[{key:"componentDidMount",value:function(){nn()&&(this.props.active&&(this.handleUpdate(),this.addListeners(this.props)))}},{key:"UNSAFE_componentWillReceiveProps",value:function(e){var t=this.props,n=t.active,r=t.scrollContext,o=e.active,a=e.scrollContext;if(n!==o){if(o)return this.handleUpdate(),void this.addListeners(e);this.removeListeners(),this.setState({sticky:!1})}else r!==a&&(this.removeListeners(),this.addListeners(e))}},{key:"componentWillUnmount",value:function(){nn()&&(this.props.active&&(this.removeListeners(),cancelAnimationFrame(this.frameId)))}},{key:"computeStyle",value:function(){var e=this.props.styleElement,t=this.state,n=t.bottom,r=t.bound,o=t.sticky,a=t.top;return o?mt()({bottom:r?0:n,top:r?void 0:a,width:this.triggerRect.width},e):e}},{key:"render",value:function(){var e=this.props,n=e.children,r=e.className,o=this.state,a=o.bottom,l=o.bound,u=o.sticky,s=H(t,this.props),c=dt(t,this.props),p=Y()(u&&"ui",u&&"stuck-container",u&&(l?"bound-container":"fixed-container"),r),f=Y()("ui",u&&(l?"bound bottom":"fixed"),u&&!l&&(null===a?"top":"bottom"),"sticky"),d=u&&this.stickyRect?{height:this.stickyRect.height}:{};return i.a.createElement(c,S()({},s,{className:p}),i.a.createElement("div",{ref:this.triggerRef,style:d}),i.a.createElement("div",{className:f,ref:this.stickyRef,style:this.computeStyle()},n))}}]),t}(a.Component);function qu(e){var t=e.active,n=e.children,o=e.className,a=e.content,l=e.loading,u=Y()(it(t,"active"),it(l,"loading"),"tab",o),s=H(qu,e),c=dt(qu,e),p={};return c===vl&&(p.attached="bottom"),i.a.createElement(c,S()({},p,s,{className:u}),r.isNil(n)?a:n)}z()(Wu,"defaultProps",{active:!0,bottomOffset:0,offset:0,scrollContext:nn()?window:null}),z()(Wu,"handledProps",["active","as","bottomOffset","children","className","context","offset","onBottom","onStick","onTop","onUnstick","pushing","scrollContext","styleElement"]),Wu.propTypes={},qu.handledProps=["active","as","children","className","content","loading"],qu.defaultProps={as:vl,active:!0},qu.propTypes={},qu.create=Ot(qu,(function(e){return{content:e}}));var Hu=qu,Vu=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleItemClick",(function(e,t){var r=t.index;q()(n.props,"onTabChange",e,mt()({},n.props,{activeIndex:r})),n.trySetState({activeIndex:r})})),n}return F()(t,e),O()(t,[{key:"getInitialAutoControlledState",value:function(){return{activeIndex:0}}},{key:"renderItems",value:function(){var e=this.props,t=e.panes,n=e.renderActiveOnly,r=this.state.activeIndex;return n?q()(vo()(t,"[".concat(r,"]")),"render",this.props):Wn()(t,(function(e,t){var n=e.pane;return Hu.create(n,{overrideProps:{active:t===r}})}))}},{key:"renderMenu",value:function(){var e=this.props,t=e.menu,n=e.panes,r=e.menuPosition,o=this.state.activeIndex;return!0===t.tabular&&"right"===r&&(t.tabular="right"),uo.create(t,{autoGenerateKey:!1,overrideProps:{items:Wn()(n,"menuItem"),onItemClick:this.handleItemClick,activeIndex:o}})}},{key:"renderVertical",value:function(e){var t=this.props,n=t.grid,r=t.menuPosition,o=n.paneWidth,a=n.tabWidth,l=ku()(n,["paneWidth","tabWidth"]),u=r||"right"===e.props.tabular&&"right"||"left";return i.a.createElement(Ja,l,"left"===u&&Qa.create({width:a,children:e},{autoGenerateKey:!1}),Qa.create({width:o,children:this.renderItems(),stretched:!0},{autoGenerateKey:!1}),"right"===u&&Qa.create({width:a,children:e},{autoGenerateKey:!1}))}},{key:"render",value:function(){var e=this.renderMenu(),n=H(t,this.props),r=dt(t,this.props);return e.props.vertical?i.a.createElement(r,n,this.renderVertical(e)):i.a.createElement(r,n,"bottom"!==e.props.attached&&e,this.renderItems(),"bottom"===e.props.attached&&e)}}]),t}(xn);z()(Vu,"autoControlledProps",["activeIndex"]),z()(Vu,"defaultProps",{grid:{paneWidth:12,tabWidth:4},menu:{attached:!0,tabular:!0},renderActiveOnly:!0}),z()(Vu,"Pane",Hu),z()(Vu,"handledProps",["activeIndex","as","defaultActiveIndex","grid","menu","menuPosition","onTabChange","panes","renderActiveOnly"]),Vu.propTypes={};var Ku=Vu;function Gu(e){var t=e.centered,n=e.children,o=e.className,a=e.content,l=e.test,u=e.unit,s=Y()("ui",u,it(t,"centered"),it(l,"test"),"ad",o),c=H(Gu,e),p=dt(Gu,e);return i.a.createElement(p,S()({},c,{className:s,"data-text":l}),r.isNil(n)?a:n)}Gu.handledProps=["as","centered","children","className","content","test","unit"],Gu.propTypes={};var $u=Gu;function Qu(e){var t=e.children,n=e.className,o=e.content,a=e.textAlign,l=Y()(ct(a),"description",n),u=H(Qu,e),s=dt(Qu,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(t)?o:t)}Qu.handledProps=["as","children","className","content","textAlign"],Qu.propTypes={};var Yu=Qu;function Xu(e){var t=e.children,n=e.className,o=e.content,a=e.textAlign,l=Y()(ct(a),"header",n),u=H(Xu,e),s=dt(Xu,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(t)?o:t)}Xu.handledProps=["as","children","className","content","textAlign"],Xu.propTypes={};var Zu=Xu;function Ju(e){var t=e.children,n=e.className,o=e.content,a=e.textAlign,l=Y()(ct(a),"meta",n),u=H(Ju,e),s=dt(Ju,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(t)?o:t)}Ju.handledProps=["as","children","className","content","textAlign"],Ju.propTypes={};var es=Ju;function ts(e){var t=e.children,n=e.className,o=e.content,a=e.description,l=e.extra,u=e.header,s=e.meta,c=e.textAlign,p=Y()(it(l,"extra"),ct(c),"content",n),f=H(ts,e),d=dt(ts,e);return r.isNil(t)?r.isNil(o)?i.a.createElement(d,S()({},f,{className:p}),Pt(Zu,(function(e){return{content:e}}),u,{autoGenerateKey:!1}),Pt(es,(function(e){return{content:e}}),s,{autoGenerateKey:!1}),Pt(Yu,(function(e){return{content:e}}),a,{autoGenerateKey:!1})):i.a.createElement(d,S()({},f,{className:p}),o):i.a.createElement(d,S()({},f,{className:p}),t)}ts.handledProps=["as","children","className","content","description","extra","header","meta","textAlign"],ts.propTypes={};var ns=ts;function rs(e){var t=e.centered,n=e.children,o=e.className,a=e.content,l=e.doubling,u=e.items,s=e.itemsPerRow,c=e.stackable,p=e.textAlign,f=Y()("ui",it(t,"centered"),it(l,"doubling"),it(c,"stackable"),ct(p),ft(s),"cards",o),d=H(rs,e),h=dt(rs,e);if(!r.isNil(n))return i.a.createElement(h,S()({},d,{className:f}),n);if(!r.isNil(a))return i.a.createElement(h,S()({},d,{className:f}),a);var m=Wn()(u,(function(e){var t=e.key||[e.header,e.description].join("-");return i.a.createElement(as,S()({key:t},e))}));return i.a.createElement(h,S()({},d,{className:f}),m)}rs.handledProps=["as","centered","children","className","content","doubling","items","itemsPerRow","stackable","textAlign"],rs.propTypes={};var os=rs,as=function(e){function t(){var e,n;T()(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return n=I()(this,(e=R()(t)).call.apply(e,[this].concat(o))),z()(M()(n),"handleClick",(function(e){var t=n.props.onClick;t&&t(e,n.props)})),n}return F()(t,e),O()(t,[{key:"render",value:function(){var e=this.props,n=e.centered,o=e.children,a=e.className,l=e.color,u=e.content,s=e.description,c=e.extra,p=e.fluid,f=e.header,d=e.href,h=e.image,m=e.link,v=e.meta,y=e.onClick,g=e.raised,b=Y()("ui",l,it(n,"centered"),it(p,"fluid"),it(m,"link"),it(g,"raised"),"card",a),w=H(t,this.props),x=dt(t,this.props,(function(){if(y)return"a"}));return r.isNil(o)?r.isNil(u)?i.a.createElement(x,S()({},w,{className:b,href:d,onClick:this.handleClick}),Rn.create(h,{autoGenerateKey:!1,defaultProps:{ui:!1,wrapped:!0}}),(s||f||v)&&i.a.createElement(ns,{description:s,header:f,meta:v}),c&&i.a.createElement(ns,{extra:!0},c)):i.a.createElement(x,S()({},w,{className:b,href:d,onClick:this.handleClick}),u):i.a.createElement(x,S()({},w,{className:b,href:d,onClick:this.handleClick}),o)}}]),t}(a.Component);function is(e){var t=e.active,n=e.className,o=e.children,a=e.content,l=Y()(it(t,"active"),n),u=H(is,e),s=dt(is,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(o)?a:o)}z()(as,"Content",ns),z()(as,"Description",Yu),z()(as,"Group",os),z()(as,"Header",Zu),z()(as,"Meta",es),z()(as,"handledProps",["as","centered","children","className","color","content","description","extra","fluid","header","href","image","link","meta","onClick","raised"]),as.propTypes={},is.handledProps=["active","as","children","className","content"],is.defaultProps={as:"a"},is.propTypes={};var ls=is;function us(e){var t=e.className,n=e.children,o=e.content,a=Y()("actions",t),l=H(us,e),u=dt(us,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(n)?o:n)}us.handledProps=["as","children","className","content"],us.propTypes={};var ss=us;function cs(e){var t=e.className,n=e.children,o=e.content,a=Y()("author",t),l=H(cs,e),u=dt(cs,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(n)?o:n)}cs.handledProps=["as","children","className","content"],cs.propTypes={};var ps=cs;function fs(e){var t=e.className,n=e.src,r=Y()("avatar",t),o=H(fs,e),a=Jt(o,{htmlProps:Zt}),l=Vt()(a,2),u=l[0],s=l[1],c=dt(fs,e);return i.a.createElement(c,S()({},s,{className:r}),_t(n,{autoGenerateKey:!1,defaultProps:u}))}fs.handledProps=["as","className","src"],fs.propTypes={};var ds=fs;function hs(e){var t=e.className,n=e.children,o=e.content,a=Y()(t,"content"),l=H(hs,e),u=dt(hs,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(n)?o:n)}hs.handledProps=["as","children","className","content"],hs.propTypes={};var ms=hs;function vs(e){var t=e.className,n=e.children,o=e.collapsed,a=e.content,l=e.minimal,u=e.size,s=e.threaded,c=Y()("ui",u,it(o,"collapsed"),it(l,"minimal"),it(s,"threaded"),"comments",t),p=H(vs,e),f=dt(vs,e);return i.a.createElement(f,S()({},p,{className:c}),r.isNil(n)?a:n)}vs.handledProps=["as","children","className","collapsed","content","minimal","size","threaded"],vs.propTypes={};var ys=vs;function gs(e){var t=e.className,n=e.children,o=e.content,a=Y()("metadata",t),l=H(gs,e),u=dt(gs,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(n)?o:n)}gs.handledProps=["as","children","className","content"],gs.propTypes={};var bs=gs;function ws(e){var t=e.className,n=e.children,o=e.content,a=Y()(t,"text"),l=H(ws,e),u=dt(ws,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(n)?o:n)}ws.handledProps=["as","children","className","content"],ws.propTypes={};var xs=ws;function ks(e){var t=e.className,n=e.children,o=e.collapsed,a=e.content,l=Y()(it(o,"collapsed"),"comment",t),u=H(ks,e),s=dt(ks,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(n)?a:n)}ks.handledProps=["as","children","className","collapsed","content"],ks.propTypes={},ks.Author=ps,ks.Action=ls,ks.Actions=ss,ks.Avatar=ds,ks.Content=ms,ks.Group=ys,ks.Metadata=bs,ks.Text=xs;var Es=ks;function Ns(e){var t=e.children,n=e.className,o=e.content,a=Y()("date",n),l=H(Ns,e),u=dt(Ns,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}Ns.handledProps=["as","children","className","content"],Ns.propTypes={};var Ss=Ns;function Cs(e){var t=e.children,n=e.className,o=e.content,a=e.images,l=e.text,u=Y()(it(a,"images"),it(o||l,"text"),"extra",n),s=H(Cs,e),c=dt(Cs,e);if(!r.isNil(t))return i.a.createElement(c,S()({},s,{className:u}),t);var p=Wn()(a,(function(e,t){var n=[t,e].join("-");return _t(e,{key:n})}));return i.a.createElement(c,S()({},s,{className:u}),o,p)}Cs.handledProps=["as","children","className","content","images","text"],Cs.propTypes={};var Ts=Cs;function Ps(e){var t=e.children,n=e.className,o=e.content,a=e.icon,l=Y()("like",n),u=H(Ps,e),s=dt(Ps,e);return r.isNil(t)?i.a.createElement(s,S()({},u,{className:l}),Bt.create(a,{autoGenerateKey:!1}),o):i.a.createElement(s,S()({},u,{className:l}),t)}Ps.handledProps=["as","children","className","content","icon"],Ps.defaultProps={as:"a"},Ps.propTypes={};var Os=Ps;function As(e){var t=e.children,n=e.className,o=e.content,a=e.like,l=Y()("meta",n),u=H(As,e),s=dt(As,e);return r.isNil(t)?i.a.createElement(s,S()({},u,{className:l}),Pt(Os,(function(e){return{content:e}}),a,{autoGenerateKey:!1}),o):i.a.createElement(s,S()({},u,{className:l}),t)}As.handledProps=["as","children","className","content","like"],As.propTypes={};var Is=As;function _s(e){var t=e.children,n=e.className,o=e.content,a=Y()("user",n),l=H(_s,e),u=dt(_s,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}_s.handledProps=["as","children","className","content"],_s.propTypes={},_s.defaultProps={as:"a"};var Rs=_s;function js(e){var t=e.children,n=e.className,o=e.content,a=e.date,l=e.user,u=Y()("summary",n),s=H(js,e),c=dt(js,e);return r.isNil(t)?i.a.createElement(c,S()({},s,{className:u}),Pt(Rs,(function(e){return{content:e}}),l,{autoGenerateKey:!1}),o&&" ",o,o&&" ",Pt(Ss,(function(e){return{content:e}}),a,{autoGenerateKey:!1})):i.a.createElement(c,S()({},s,{className:u}),t)}js.handledProps=["as","children","className","content","date","user"],js.propTypes={};var Ms=js;function Ds(e){var t=e.children,n=e.className,o=e.content,a=e.extraImages,l=e.extraText,u=e.date,s=e.meta,c=e.summary,p=Y()("content",n),f=H(Ds,e),d=dt(Ds,e);return r.isNil(t)?i.a.createElement(d,S()({},f,{className:p}),Pt(Ss,(function(e){return{content:e}}),u,{autoGenerateKey:!1}),Pt(Ms,(function(e){return{content:e}}),c,{autoGenerateKey:!1}),o,Pt(Ts,(function(e){return{text:!0,content:e}}),l,{autoGenerateKey:!1}),Pt(Ts,(function(e){return{images:e}}),a,{autoGenerateKey:!1}),Pt(Is,(function(e){return{content:e}}),s,{autoGenerateKey:!1})):i.a.createElement(d,S()({},f,{className:p}),t)}Ds.handledProps=["as","children","className","content","date","extraImages","extraText","meta","summary"],Ds.propTypes={};var Fs=Ds;function Us(e){var t=e.children,n=e.className,o=e.content,a=e.icon,l=e.image,u=Y()("label",n),s=H(Us,e),c=dt(Us,e);return r.isNil(t)?i.a.createElement(c,S()({},s,{className:u}),o,Bt.create(a,{autoGenerateKey:!1}),_t(l)):i.a.createElement(c,S()({},s,{className:u}),t)}Us.handledProps=["as","children","className","content","icon","image"],Us.propTypes={};var zs=Us;function Ls(e){var t=e.content,n=e.children,r=e.className,o=e.date,a=e.extraImages,l=e.extraText,u=e.image,s=e.icon,c=e.meta,p=e.summary,f=Y()("event",r),d=H(Ls,e),h=dt(Ls,e),m=t||o||a||l||c||p,v={content:t,date:o,extraImages:a,extraText:l,meta:c,summary:p};return i.a.createElement(h,S()({},d,{className:f}),Pt(zs,(function(e){return{icon:e}}),s,{autoGenerateKey:!1}),Pt(zs,(function(e){return{image:e}}),u,{autoGenerateKey:!1}),m&&i.a.createElement(Fs,v),n)}Ls.handledProps=["as","children","className","content","date","extraImages","extraText","icon","image","meta","summary"],Ls.propTypes={};var Bs=Ls;function Ws(e){var t=e.children,n=e.className,o=e.events,a=e.size,l=Y()("ui",a,"feed",n),u=H(Ws,e),s=dt(Ws,e);if(!r.isNil(t))return i.a.createElement(s,S()({},u,{className:l}),t);var c=Wn()(o,(function(e){var t=e.childKey,n=e.date,r=e.meta,o=e.summary,a=ku()(e,["childKey","date","meta","summary"]),l=t||[n,r,o].join("-");return i.a.createElement(Bs,S()({date:n,key:l,meta:r,summary:o},a))}));return i.a.createElement(s,S()({},u,{className:l}),c)}Ws.handledProps=["as","children","className","events","size"],Ws.propTypes={},Ws.Content=Fs,Ws.Date=Ss,Ws.Event=Bs,Ws.Extra=Ts,Ws.Label=zs,Ws.Like=Os,Ws.Meta=Is,Ws.Summary=Ms,Ws.User=Rs;var qs=Ws;function Hs(e){var t=e.children,n=e.className,o=e.content,a=Y()("header",n),l=H(Hs,e),u=dt(Hs,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}Hs.handledProps=["as","children","className","content"],Hs.propTypes={},Hs.create=Ot(Hs,(function(e){return{content:e}}));var Vs=Hs;function Ks(e){var t=e.children,n=e.className,o=e.content,a=Y()("description",n),l=H(Ks,e),u=dt(Ks,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}Ks.handledProps=["as","children","className","content"],Ks.propTypes={},Ks.create=Ot(Ks,(function(e){return{content:e}}));var Gs=Ks;function $s(e){var t=e.children,n=e.className,o=e.content,a=Y()("extra",n),l=H($s,e),u=dt($s,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}$s.handledProps=["as","children","className","content"],$s.propTypes={},$s.create=Ot($s,(function(e){return{content:e}}));var Qs=$s;function Ys(e){var t=e.children,n=e.className,o=e.content,a=Y()("meta",n),l=H(Ys,e),u=dt(Ys,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}Ys.handledProps=["as","children","className","content"],Ys.propTypes={},Ys.create=Ot(Ys,(function(e){return{content:e}}));var Xs=Ys;function Zs(e){var t=e.children,n=e.className,o=e.content,a=e.description,l=e.extra,u=e.header,s=e.meta,c=e.verticalAlign,p=Y()(pt(c),"content",n),f=H(Zs,e),d=dt(Zs,e);return r.isNil(t)?i.a.createElement(d,S()({},f,{className:p}),Vs.create(u,{autoGenerateKey:!1}),Xs.create(s,{autoGenerateKey:!1}),Gs.create(a,{autoGenerateKey:!1}),Qs.create(l,{autoGenerateKey:!1}),o):i.a.createElement(d,S()({},f,{className:p}),t)}Zs.handledProps=["as","children","className","content","description","extra","header","meta","verticalAlign"],Zs.propTypes={};var Js=Zs;function ec(e){var t=e.children,n=e.className,o=e.content,a=e.divided,l=e.items,u=e.link,s=e.relaxed,c=e.unstackable,p=Y()("ui",it(a,"divided"),it(u,"link"),it(c,"unstackable"),ut(s,"relaxed"),"items",n),f=H(ec,e),d=dt(ec,e);if(!r.isNil(t))return i.a.createElement(d,S()({},f,{className:p}),t);if(!r.isNil(o))return i.a.createElement(d,S()({},f,{className:p}),o);var h=Wn()(l,(function(e){var t=e.childKey,n=ku()(e,["childKey"]),r=t||[n.content,n.description,n.header,n.meta].join("-");return i.a.createElement(ac,S()({},n,{key:r}))}));return i.a.createElement(d,S()({},f,{className:p}),h)}ec.handledProps=["as","children","className","content","divided","items","link","relaxed","unstackable"],ec.propTypes={};var tc=ec;function nc(e){var t=e.size,n=H(nc,e);return i.a.createElement(Rn,S()({},n,{size:t,ui:!!t,wrapped:!0}))}nc.handledProps=["size"],nc.propTypes={},nc.create=Ot(nc,(function(e){return{src:e}}));var rc=nc;function oc(e){var t=e.children,n=e.className,o=e.content,a=e.description,l=e.extra,u=e.header,s=e.image,c=e.meta,p=Y()("item",n),f=H(oc,e),d=dt(oc,e);return r.isNil(t)?i.a.createElement(d,S()({},f,{className:p}),rc.create(s,{autoGenerateKey:!1}),i.a.createElement(Js,{content:o,description:a,extra:l,header:u,meta:c})):i.a.createElement(d,S()({},f,{className:p}),t)}oc.handledProps=["as","children","className","content","description","extra","header","image","meta"],oc.Content=Js,oc.Description=Gs,oc.Extra=Qs,oc.Group=tc,oc.Header=Vs,oc.Image=rc,oc.Meta=Xs,oc.propTypes={};var ac=oc;function ic(e){var t=e.children,n=e.className,o=e.color,a=e.content,l=e.horizontal,u=e.inverted,s=e.items,c=e.size,p=e.widths,f=Y()("ui",o,c,it(l,"horizontal"),it(u,"inverted"),ft(p),"statistics",n),d=H(ic,e),h=dt(ic,e);return r.isNil(t)?r.isNil(a)?i.a.createElement(h,S()({},d,{className:f}),Wn()(s,(function(e){return dc.create(e)}))):i.a.createElement(h,S()({},d,{className:f}),a):i.a.createElement(h,S()({},d,{className:f}),t)}ic.handledProps=["as","children","className","color","content","horizontal","inverted","items","size","widths"],ic.propTypes={};var lc=ic;function uc(e){var t=e.children,n=e.className,o=e.content,a=Y()("label",n),l=H(uc,e),u=dt(uc,e);return i.a.createElement(u,S()({},l,{className:a}),r.isNil(t)?o:t)}uc.handledProps=["as","children","className","content"],uc.propTypes={},uc.create=Ot(uc,(function(e){return{content:e}}));var sc=uc;function cc(e){var t=e.children,n=e.className,o=e.content,a=e.text,l=Y()(it(a,"text"),"value",n),u=H(cc,e),s=dt(cc,e);return i.a.createElement(s,S()({},u,{className:l}),r.isNil(t)?o:t)}cc.handledProps=["as","children","className","content","text"],cc.propTypes={},cc.create=Ot(cc,(function(e){return{content:e}}));var pc=cc;function fc(e){var t=e.children,n=e.className,o=e.color,a=e.content,l=e.floated,u=e.horizontal,s=e.inverted,c=e.label,p=e.size,f=e.text,d=e.value,h=Y()("ui",o,p,lt(l,"floated"),it(u,"horizontal"),it(s,"inverted"),"statistic",n),m=H(fc,e),v=dt(fc,e);return r.isNil(t)?r.isNil(a)?i.a.createElement(v,S()({},m,{className:h}),pc.create(d,{defaultProps:{text:f},autoGenerateKey:!1}),sc.create(c,{autoGenerateKey:!1})):i.a.createElement(v,S()({},m,{className:h}),a):i.a.createElement(v,S()({},m,{className:h}),t)}fc.handledProps=["as","children","className","color","content","floated","horizontal","inverted","label","size","text","value"],fc.propTypes={},fc.Group=lc,fc.Label=sc,fc.Value=pc,fc.create=Ot(fc,(function(e){return{content:e}}));var dc=fc;n.d(t,"Ref",(function(){return E})),n.d(t,"Confirm",(function(){return qr})),n.d(t,"MountNode",(function(){return Or})),n.d(t,"Pagination",(function(){return po})),n.d(t,"PaginationItem",(function(){return co})),n.d(t,"Portal",(function(){return Sn})),n.d(t,"PortalInner",(function(){return En})),n.d(t,"Radio",(function(){return bo})),n.d(t,"Responsive",(function(){return xo})),n.d(t,"Select",(function(){return aa})),n.d(t,"TextArea",(function(){return la})),n.d(t,"TransitionablePortal",(function(){return ba})),n.d(t,"Visibility",(function(){return wa})),n.d(t,"Breadcrumb",(function(){return Sa})),n.d(t,"BreadcrumbDivider",(function(){return ka})),n.d(t,"BreadcrumbSection",(function(){return Ea})),n.d(t,"Form",(function(){return Ga})),n.d(t,"FormButton",(function(){return Oa})),n.d(t,"FormCheckbox",(function(){return Ia})),n.d(t,"FormDropdown",(function(){return Ra})),n.d(t,"FormField",(function(){return Ta})),n.d(t,"FormGroup",(function(){return Ma})),n.d(t,"FormInput",(function(){return za})),n.d(t,"FormRadio",(function(){return Ba})),n.d(t,"FormSelect",(function(){return qa})),n.d(t,"FormTextArea",(function(){return Va})),n.d(t,"Grid",(function(){return Ja})),n.d(t,"GridColumn",(function(){return Qa})),n.d(t,"GridRow",(function(){return Xa})),n.d(t,"Menu",(function(){return uo})),n.d(t,"MenuHeader",(function(){return to})),n.d(t,"MenuItem",(function(){return oo})),n.d(t,"MenuMenu",(function(){return io})),n.d(t,"Message",(function(){return ui})),n.d(t,"MessageContent",(function(){return ti})),n.d(t,"MessageHeader",(function(){return ri})),n.d(t,"MessageItem",(function(){return ai})),n.d(t,"MessageList",(function(){return li})),n.d(t,"Table",(function(){return ki})),n.d(t,"TableBody",(function(){return ci})),n.d(t,"TableCell",(function(){return fi})),n.d(t,"TableFooter",(function(){return vi})),n.d(t,"TableHeader",(function(){return hi})),n.d(t,"TableHeaderCell",(function(){return gi})),n.d(t,"TableRow",(function(){return wi})),n.d(t,"Button",(function(){return $n})),n.d(t,"ButtonContent",(function(){return Ln})),n.d(t,"ButtonGroup",(function(){return Hn})),n.d(t,"ButtonOr",(function(){return Kn})),n.d(t,"Container",(function(){return Ni})),n.d(t,"Divider",(function(){return Ci})),n.d(t,"Flag",(function(){return Go})),n.d(t,"Header",(function(){return _i})),n.d(t,"HeaderContent",(function(){return Ai})),n.d(t,"HeaderSubheader",(function(){return Pi})),n.d(t,"Icon",(function(){return Bt})),n.d(t,"IconGroup",(function(){return zt})),n.d(t,"Image",(function(){return Rn})),n.d(t,"ImageGroup",(function(){return In})),n.d(t,"Input",(function(){return Fa})),n.d(t,"Label",(function(){return Un})),n.d(t,"LabelDetail",(function(){return Mn})),n.d(t,"LabelGroup",(function(){return Fn})),n.d(t,"List",(function(){return Ki})),n.d(t,"ListContent",(function(){return Ui})),n.d(t,"ListDescription",(function(){return ji})),n.d(t,"ListHeader",(function(){return Di})),n.d(t,"ListIcon",(function(){return Li})),n.d(t,"ListItem",(function(){return Wi})),n.d(t,"ListList",(function(){return Hi})),n.d(t,"Loader",(function(){return $i})),n.d(t,"Placeholder",(function(){return ol})),n.d(t,"PlaceholderHeader",(function(){return Yi})),n.d(t,"PlaceholderImage",(function(){return Zi})),n.d(t,"PlaceholderLine",(function(){return el})),n.d(t,"PlaceholderParagraph",(function(){return nl})),n.d(t,"Rail",(function(){return il})),n.d(t,"Reveal",(function(){return cl})),n.d(t,"RevealContent",(function(){return ul})),n.d(t,"Segment",(function(){return vl})),n.d(t,"SegmentGroup",(function(){return fl})),n.d(t,"SegmentInline",(function(){return hl})),n.d(t,"Step",(function(){return Cl})),n.d(t,"StepContent",(function(){return kl})),n.d(t,"StepDescription",(function(){return gl})),n.d(t,"StepGroup",(function(){return Nl})),n.d(t,"StepTitle",(function(){return wl})),n.d(t,"Accordion",(function(){return jl})),n.d(t,"AccordionAccordion",(function(){return _l})),n.d(t,"AccordionContent",(function(){return Ol})),n.d(t,"AccordionPanel",(function(){return Il})),n.d(t,"AccordionTitle",(function(){return Tl})),n.d(t,"Checkbox",(function(){return yo})),n.d(t,"Dimmer",(function(){return On})),n.d(t,"DimmerDimmable",(function(){return Tn})),n.d(t,"DimmerInner",(function(){return Pn})),n.d(t,"Dropdown",(function(){return ra})),n.d(t,"DropdownDivider",(function(){return Vo})),n.d(t,"DropdownHeader",(function(){return Xo})),n.d(t,"DropdownItem",(function(){return Qo})),n.d(t,"DropdownMenu",(function(){return Jo})),n.d(t,"DropdownSearchInput",(function(){return ta})),n.d(t,"Embed",(function(){return Ml})),n.d(t,"Modal",(function(){return Br})),n.d(t,"ModalActions",(function(){return jr})),n.d(t,"ModalContent",(function(){return Rr})),n.d(t,"ModalDescription",(function(){return Dr})),n.d(t,"ModalHeader",(function(){return Ir})),n.d(t,"Popup",(function(){return cu})),n.d(t,"PopupContent",(function(){return uu})),n.d(t,"PopupHeader",(function(){return su})),n.d(t,"Progress",(function(){return vu})),n.d(t,"Rating",(function(){return wu})),n.d(t,"RatingIcon",(function(){return bu})),n.d(t,"Search",(function(){return Ru})),n.d(t,"SearchCategory",(function(){return Pu})),n.d(t,"SearchResult",(function(){return Au})),n.d(t,"SearchResults",(function(){return _u})),n.d(t,"Sidebar",(function(){return Bu})),n.d(t,"SidebarPushable",(function(){return Fu})),n.d(t,"SidebarPusher",(function(){return zu})),n.d(t,"Sticky",(function(){return Wu})),n.d(t,"Tab",(function(){return Ku})),n.d(t,"TabPane",(function(){return Hu})),n.d(t,"Transition",(function(){return ga})),n.d(t,"TransitionGroup",(function(){return va})),n.d(t,"Advertisement",(function(){return $u})),n.d(t,"Card",(function(){return as})),n.d(t,"CardContent",(function(){return ns})),n.d(t,"CardDescription",(function(){return Yu})),n.d(t,"CardGroup",(function(){return os})),n.d(t,"CardHeader",(function(){return Zu})),n.d(t,"CardMeta",(function(){return es})),n.d(t,"Comment",(function(){return Es})),n.d(t,"CommentAction",(function(){return ls})),n.d(t,"CommentActions",(function(){return ss})),n.d(t,"CommentAuthor",(function(){return ps})),n.d(t,"CommentAvatar",(function(){return ds})),n.d(t,"CommentContent",(function(){return ms})),n.d(t,"CommentGroup",(function(){return ys})),n.d(t,"CommentMetadata",(function(){return bs})),n.d(t,"CommentText",(function(){return xs})),n.d(t,"Feed",(function(){return qs})),n.d(t,"FeedContent",(function(){return Fs})),n.d(t,"FeedDate",(function(){return Ss})),n.d(t,"FeedEvent",(function(){return Bs})),n.d(t,"FeedExtra",(function(){return Ts})),n.d(t,"FeedLabel",(function(){return zs})),n.d(t,"FeedLike",(function(){return Os})),n.d(t,"FeedMeta",(function(){return Is})),n.d(t,"FeedSummary",(function(){return Ms})),n.d(t,"FeedUser",(function(){return Rs})),n.d(t,"Item",(function(){return ac})),n.d(t,"ItemContent",(function(){return Js})),n.d(t,"ItemDescription",(function(){return Gs})),n.d(t,"ItemExtra",(function(){return Qs})),n.d(t,"ItemGroup",(function(){return tc})),n.d(t,"ItemHeader",(function(){return Vs})),n.d(t,"ItemImage",(function(){return rc})),n.d(t,"ItemMeta",(function(){return Xs})),n.d(t,"Statistic",(function(){return dc})),n.d(t,"StatisticGroup",(function(){return lc})),n.d(t,"StatisticLabel",(function(){return sc})),n.d(t,"StatisticValue",(function(){return pc}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNOaWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2tleWJvYXJkLWtleS9zcmMva2V5Ym9hcmRLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC93aXRob3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2dldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2luY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2VtYW50aWMtdWktcmVhY3QvZXZlbnQtc3RhY2svbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZm9yRWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNVbmRlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGFsbG93ZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJdGVyYXRlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZwL3BsYWNlaG9sZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b0ludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZnAvY29udmVydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3JlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3NvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b0tleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VFYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdW5pcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcGljay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2RpZmZlcmVuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0l0ZXJhdGVlQ2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2luUmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTGlzdENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19ub2RlVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TdGFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXRDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5SW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlFYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZVdyYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQ3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3JlcGxhY2VIb2xkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1VuaWNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac3RhcmR1c3QtdWkvcmVhY3QtY29tcG9uZW50LWV2ZW50LWxpc3RlbmVyL2Rpc3QvZXMvdXNlRXZlbnRMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWJ1cnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mbGF0UmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b0Zpbml0ZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUluY2x1ZGVzV2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTGF6eVdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUxvZGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXREYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0xvZGFzaFdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0SG9sZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lQXJyYXlCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9mcC9fZmFsc2VPcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZmluZS1wcm9wZXJ0aWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZpbmRJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3VuaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wb3BwZXIuanMvZGlzdC9lc20vcG9wcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY29udGV4dC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b1NvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Nob3J0T3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQaWNrQnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJbmRleE9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGaW5kSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVGltZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQXJyYXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fV2Vha01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VEaWZmZXJlbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmlxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0RGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tZXRhTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUh5YnJpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb21wb3NlQXJncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb21wb3NlQXJnc1JpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZVJlY3VycnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNMYXppYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRGdW5jTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXREYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFdyYXBUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDbG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRTeW1ib2xzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pbml0Q2xvbmVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdFNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDbGFtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NpZ25NZXJnZVZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NhZmVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLnByb3RvdHlwZS5mbGFncy9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLnByb3RvdHlwZS5mbGFncy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHN0YXJkdXN0LXVpL3JlYWN0LWNvbXBvbmVudC1ldmVudC1saXN0ZW5lci9kaXN0L2VzL0V2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmlyc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQm9vbGVhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZwL3VuaXEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9mcC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZwL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZwL3NwbGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZnAvZmxhdE1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZwL21hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZwL3RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9mcC9mbG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdGFydENhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jb21wYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lc2NhcGVSZWdFeHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kcm9wUmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL21hcFZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleUJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pbnZlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZXAtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9yb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NsYW1wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdGltZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9wYXJ0aWFsUmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzdGFyZHVzdC11aS9yZWFjdC1jb21wb25lbnQtZXZlbnQtbGlzdGVuZXIvZGlzdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0FwcC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21lbW9pemVDYXBwZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29yZUpzRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJbnZva2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sYXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3BhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVBpY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUhhc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0ZsYXR0ZW5hYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hTi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpY3RJbmRleE9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VWYWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VGb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0RlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0dldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbERlZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVBZGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxCeVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbE9iamVjdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXRjaERhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXNQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eURlZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSW5SYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzZW1hbnRpYy11aS1yZWFjdC9ldmVudC1zdGFjay9saWIvY2pzL2V2ZW50LXN0YWNrLnByb2R1Y3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4ZW52L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9mcC9fYmFzZUNvbnZlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9mcC9fbWFwcGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZwL191dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQ3VycnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY291bnRIb2xkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3JlYWxOYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3dyYXBwZXJMb2Rhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fd3JhcHBlckNsb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFdyYXBEZXRhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luc2VydFdyYXBEZXRhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3VwZGF0ZVdyYXBEZXRhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jlb3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlUGFydGlhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tZXJnZURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jbG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weVN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weVN5bWJvbHNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pbml0Q2xvbmVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pbml0Q2xvbmVCeVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZURhdGFWaWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lUmVnRXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY3VycnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Vycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNXZWFrTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXRlcmF0ZWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9yZWFyZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1JlZ0V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNSZWdFeHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNjaWlUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3VuaWNvZGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmxhdE1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pdGVyYXRvclRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9mbG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUZsb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdGFydHNXaXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaW50ZXJzZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJbnRlcnNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdEFycmF5TGlrZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVSYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQ29tcG91bmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWJ1cnJMZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC93b3Jkcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc2NpaVdvcmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1VuaWNvZGVXb3JkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3VuaWNvZGVXb3Jkcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3VwcGVyRmlyc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQ2FzZUZpcnN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3N1cGVyUHJvcEJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlFdmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc2NpaVNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdW5pY29kZVNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQWdncmVnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUFnZ3JlZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFnZ3JlZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9waWNrQnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNZXJnZURlZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUFzc2lnbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUludmVydGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWFyZ3VtZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1yZWdleC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLnByb3RvdHlwZS5mbGFncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvR2V0SW50cmluc2ljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvc2hhbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC5wcm90b3R5cGUuZmxhZ3Mvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtZGF0ZS1vYmplY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jb250ZXh0L2xpYi9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3VkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlUm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac3RhcmR1c3QtdWkvcmVhY3QtY29tcG9uZW50LXJlZi9kaXN0L2VzL2hhbmRsZVJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHN0YXJkdXN0LXVpL3JlYWN0LWNvbXBvbmVudC1yZWYvZGlzdC9lcy9SZWZGaW5kTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHN0YXJkdXN0LXVpL3JlYWN0LWNvbXBvbmVudC1yZWYvZGlzdC9lcy9SZWZGb3J3YXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac3RhcmR1c3QtdWkvcmVhY3QtY29tcG9uZW50LXJlZi9kaXN0L2VzL1JlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9saWIvZ2V0VW5oYW5kbGVkUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbGliL2NoaWxkcmVuVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbGliL251bWJlclRvV29yZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9saWIvU1VJLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2xpYi9jbGFzc05hbWVCdWlsZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9saWIvZ2V0RWxlbWVudFR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbGliL2ZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9lbGVtZW50cy9JY29uL0ljb25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9lbGVtZW50cy9JY29uL0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbGliL2h0bWxQcm9wc1V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2xpYi9pc0Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbGliL2RvZXNOb2RlQ29udGFpbkNsaWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2xpYi9BdXRvQ29udHJvbGxlZENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9hZGRvbnMvUG9ydGFsL1BvcnRhbElubmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2FkZG9ucy9Qb3J0YWwvUG9ydGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvRGltbWVyL0RpbW1lckRpbW1hYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvRGltbWVyL0RpbW1lcklubmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvRGltbWVyL0RpbW1lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9lbGVtZW50cy9JbWFnZS9JbWFnZUdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL0ltYWdlL0ltYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL0xhYmVsL0xhYmVsRGV0YWlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL0xhYmVsL0xhYmVsR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvTGFiZWwvTGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvQnV0dG9uL0J1dHRvbkNvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvQnV0dG9uL0J1dHRvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL0J1dHRvbi9CdXR0b25Pci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9lbGVtZW50cy9CdXR0b24vQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2xpYi9ldmVudFN0YWNrL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac3RhcmR1c3QtdWkvcmVhY3QtY29tcG9uZW50LXJlZi9kaXN0L2VzL2lzUmVmT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac3RhcmR1c3QtdWkvcmVhY3QtY29tcG9uZW50LXJlZi9kaXN0L2VzL3RvUmVmT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2FkZG9ucy9Nb3VudE5vZGUvbGliL2dldE5vZGVSZWZGcm9tUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvYWRkb25zL01vdW50Tm9kZS9saWIvY29tcHV0ZUNsYXNzTmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvYWRkb25zL01vdW50Tm9kZS9saWIvY29tcHV0ZUNsYXNzTmFtZXNEaWZmZXJlbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2FkZG9ucy9Nb3VudE5vZGUvbGliL2hhbmRsZUNsYXNzTmFtZXNDaGFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvYWRkb25zL01vdW50Tm9kZS9Nb3VudE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvYWRkb25zL01vdW50Tm9kZS9saWIvTm9kZVJlZ2lzdHJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvTW9kYWwvTW9kYWxIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9Nb2RhbC9Nb2RhbENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9Nb2RhbC9Nb2RhbEFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9Nb2RhbC9Nb2RhbERlc2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvTW9kYWwvdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9Nb2RhbC9Nb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9hZGRvbnMvQ29uZmlybS9Db25maXJtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2xpYi9jcmVhdGVQYWdpbmF0aW9uSXRlbXMvaXRlbUZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9saWIvY3JlYXRlUGFnaW5hdGlvbkl0ZW1zL3N1ZmZpeEZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9saWIvY3JlYXRlUGFnaW5hdGlvbkl0ZW1zL3JhbmdlRmFjdG9yaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2xpYi9jcmVhdGVQYWdpbmF0aW9uSXRlbXMvY3JlYXRlUGFnaW5hdGlvbkl0ZW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2xpYi9jcmVhdGVQYWdpbmF0aW9uSXRlbXMvcGFnaW5hdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL01lbnUvTWVudUhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9jb2xsZWN0aW9ucy9NZW51L01lbnVJdGVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL01lbnUvTWVudU1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvY29sbGVjdGlvbnMvTWVudS9NZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2FkZG9ucy9QYWdpbmF0aW9uL1BhZ2luYXRpb25JdGVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2FkZG9ucy9QYWdpbmF0aW9uL1BhZ2luYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9DaGVja2JveC9DaGVja2JveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9hZGRvbnMvUmFkaW8vUmFkaW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvYWRkb25zL1Jlc3BvbnNpdmUvbGliL2lzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9hZGRvbnMvUmVzcG9uc2l2ZS9SZXNwb25zaXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvRHJvcGRvd24vRHJvcGRvd25EaXZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL0ZsYWcvRmxhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9tb2R1bGVzL0Ryb3Bkb3duL0Ryb3Bkb3duSXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9tb2R1bGVzL0Ryb3Bkb3duL0Ryb3Bkb3duSGVhZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvRHJvcGRvd24vRHJvcGRvd25NZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvRHJvcGRvd24vRHJvcGRvd25TZWFyY2hJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9tb2R1bGVzL0Ryb3Bkb3duL0Ryb3Bkb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2FkZG9ucy9TZWxlY3QvU2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2FkZG9ucy9UZXh0QXJlYS9UZXh0QXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9saWIvbm9ybWFsaXplVHJhbnNpdGlvbkR1cmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2xpYi9jaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9UcmFuc2l0aW9uL1RyYW5zaXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9tb2R1bGVzL1RyYW5zaXRpb24vVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9hZGRvbnMvVHJhbnNpdGlvbmFibGVQb3J0YWwvVHJhbnNpdGlvbmFibGVQb3J0YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbGliL25vcm1hbGl6ZU9mZnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9iZWhhdmlvcnMvVmlzaWJpbGl0eS9WaXNpYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL0JyZWFkY3J1bWIvQnJlYWRjcnVtYkRpdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvY29sbGVjdGlvbnMvQnJlYWRjcnVtYi9CcmVhZGNydW1iU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9jb2xsZWN0aW9ucy9CcmVhZGNydW1iL0JyZWFkY3J1bWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvY29sbGVjdGlvbnMvRm9ybS9Gb3JtRmllbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvY29sbGVjdGlvbnMvRm9ybS9Gb3JtQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL0Zvcm0vRm9ybUNoZWNrYm94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL0Zvcm0vRm9ybURyb3Bkb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL0Zvcm0vRm9ybUdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL0lucHV0L0lucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL0Zvcm0vRm9ybUlucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL0Zvcm0vRm9ybVJhZGlvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL0Zvcm0vRm9ybVNlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9jb2xsZWN0aW9ucy9Gb3JtL0Zvcm1UZXh0QXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9jb2xsZWN0aW9ucy9Gb3JtL0Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvY29sbGVjdGlvbnMvR3JpZC9HcmlkQ29sdW1uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL0dyaWQvR3JpZFJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9jb2xsZWN0aW9ucy9HcmlkL0dyaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvY29sbGVjdGlvbnMvTWVzc2FnZS9NZXNzYWdlQ29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9jb2xsZWN0aW9ucy9NZXNzYWdlL01lc3NhZ2VIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvY29sbGVjdGlvbnMvTWVzc2FnZS9NZXNzYWdlSXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9jb2xsZWN0aW9ucy9NZXNzYWdlL01lc3NhZ2VMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL01lc3NhZ2UvTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9jb2xsZWN0aW9ucy9UYWJsZS9UYWJsZUJvZHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvY29sbGVjdGlvbnMvVGFibGUvVGFibGVDZWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL1RhYmxlL1RhYmxlSGVhZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL1RhYmxlL1RhYmxlRm9vdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2NvbGxlY3Rpb25zL1RhYmxlL1RhYmxlSGVhZGVyQ2VsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9jb2xsZWN0aW9ucy9UYWJsZS9UYWJsZVJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9jb2xsZWN0aW9ucy9UYWJsZS9UYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9lbGVtZW50cy9Db250YWluZXIvQ29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL0RpdmlkZXIvRGl2aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9lbGVtZW50cy9IZWFkZXIvSGVhZGVyU3ViaGVhZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL0hlYWRlci9IZWFkZXJDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL0hlYWRlci9IZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvTGlzdC9MaXN0RGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvTGlzdC9MaXN0SGVhZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL0xpc3QvTGlzdENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvTGlzdC9MaXN0SWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9lbGVtZW50cy9MaXN0L0xpc3RJdGVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL0xpc3QvTGlzdExpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvTGlzdC9MaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL0xvYWRlci9Mb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvUGxhY2Vob2xkZXIvUGxhY2Vob2xkZXJIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvUGxhY2Vob2xkZXIvUGxhY2Vob2xkZXJJbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9lbGVtZW50cy9QbGFjZWhvbGRlci9QbGFjZWhvbGRlckxpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvUGxhY2Vob2xkZXIvUGxhY2Vob2xkZXJQYXJhZ3JhcGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvUGxhY2Vob2xkZXIvUGxhY2Vob2xkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvUmFpbC9SYWlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL1JldmVhbC9SZXZlYWxDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL1JldmVhbC9SZXZlYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvU2VnbWVudC9TZWdtZW50R3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvZWxlbWVudHMvU2VnbWVudC9TZWdtZW50SW5saW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL1NlZ21lbnQvU2VnbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9lbGVtZW50cy9TdGVwL1N0ZXBEZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9lbGVtZW50cy9TdGVwL1N0ZXBUaXRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9lbGVtZW50cy9TdGVwL1N0ZXBDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL1N0ZXAvU3RlcEdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL2VsZW1lbnRzL1N0ZXAvU3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9tb2R1bGVzL0FjY29yZGlvbi9BY2NvcmRpb25UaXRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9tb2R1bGVzL0FjY29yZGlvbi9BY2NvcmRpb25Db250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvQWNjb3JkaW9uL0FjY29yZGlvblBhbmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvQWNjb3JkaW9uL0FjY29yZGlvbkFjY29yZGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9tb2R1bGVzL0FjY29yZGlvbi9BY2NvcmRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9FbWJlZC9FbWJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9lc20vTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9lc20vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcHBlci9saWIvZXNtL1BvcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9tb2R1bGVzL1BvcHVwL2xpYi9wb3NpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9Qb3B1cC9saWIvY3JlYXRlUmVmZXJlbmNlUHJveHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9Qb3B1cC9Qb3B1cENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9Qb3B1cC9Qb3B1cEhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9tb2R1bGVzL1BvcHVwL1BvcHVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvUHJvZ3Jlc3MvUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9SYXRpbmcvUmF0aW5nSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy9tb2R1bGVzL1JhdGluZy9SYXRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9TZWFyY2gvU2VhcmNoQ2F0ZWdvcnlMYXlvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9TZWFyY2gvU2VhcmNoQ2F0ZWdvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9TZWFyY2gvU2VhcmNoUmVzdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvU2VhcmNoL1NlYXJjaFJlc3VsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9TZWFyY2gvU2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvU2lkZWJhci9TaWRlYmFyUHVzaGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9TaWRlYmFyL1NpZGViYXJQdXNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9TaWRlYmFyL1NpZGViYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9TdGlja3kvU3RpY2t5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL21vZHVsZXMvVGFiL1RhYlBhbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvbW9kdWxlcy9UYWIvVGFiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL3ZpZXdzL0FkdmVydGlzZW1lbnQvQWR2ZXJ0aXNlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9DYXJkL0NhcmREZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9DYXJkL0NhcmRIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvQ2FyZC9DYXJkTWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9DYXJkL0NhcmRDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL3ZpZXdzL0NhcmQvQ2FyZEdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL3ZpZXdzL0NhcmQvQ2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9Db21tZW50L0NvbW1lbnRBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvQ29tbWVudC9Db21tZW50QWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9Db21tZW50L0NvbW1lbnRBdXRob3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvQ29tbWVudC9Db21tZW50QXZhdGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL3ZpZXdzL0NvbW1lbnQvQ29tbWVudENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvQ29tbWVudC9Db21tZW50R3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvQ29tbWVudC9Db21tZW50TWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvQ29tbWVudC9Db21tZW50VGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9Db21tZW50L0NvbW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvRmVlZC9GZWVkRGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9GZWVkL0ZlZWRFeHRyYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9GZWVkL0ZlZWRMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL3ZpZXdzL0ZlZWQvRmVlZE1ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvRmVlZC9GZWVkVXNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9GZWVkL0ZlZWRTdW1tYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL3ZpZXdzL0ZlZWQvRmVlZENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvRmVlZC9GZWVkTGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvRmVlZC9GZWVkRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvRmVlZC9GZWVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL3ZpZXdzL0l0ZW0vSXRlbUhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9JdGVtL0l0ZW1EZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9JdGVtL0l0ZW1FeHRyYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9JdGVtL0l0ZW1NZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL3ZpZXdzL0l0ZW0vSXRlbUNvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvSXRlbS9JdGVtR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvSXRlbS9JdGVtSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvSXRlbS9JdGVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL3ZpZXdzL1N0YXRpc3RpYy9TdGF0aXN0aWNHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VtYW50aWMtdWktcmVhY3QvZGlzdC9lcy92aWV3cy9TdGF0aXN0aWMvU3RhdGlzdGljTGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvdmlld3MvU3RhdGlzdGljL1N0YXRpc3RpY1ZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZW1hbnRpYy11aS1yZWFjdC9kaXN0L2VzL3ZpZXdzL1N0YXRpc3RpYy9TdGF0aXN0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlbWFudGljLXVpLXJlYWN0L2Rpc3QvZXMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJvYmoiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJ0aGlzIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiaGFzT3duIiwiY2xhc3NOYW1lcyIsImNsYXNzZXMiLCJhcmciLCJhcmdUeXBlIiwicHVzaCIsIkFycmF5IiwiaXNBcnJheSIsImlubmVyIiwiam9pbiIsImRlZmF1bHQiLCJiYXNlSW52b2tlIiwiaW52b2tlIiwiYmFzZVJlc3QiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3R5cGVvZiIsImFzc2VydFRoaXNJbml0aWFsaXplZCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwib3duS2V5cyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjb25jYXQiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmb3JFYWNoIiwiYXJyYXlNYXAiLCJiYXNlSXRlcmF0ZWUiLCJiYXNlTWFwIiwiY29sbGVjdGlvbiIsIml0ZXJhdGVlIiwiaXNPYmplY3QiLCJ2YWwiLCJjb2RlcyIsIjMiLCI2IiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMjgiLCIyOSIsIjMwIiwiMzEiLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0MSIsIjQyIiwiNDMiLCI0NCIsIjQ1IiwiNDYiLCI0OCIsIjQ5IiwiNTAiLCI1MSIsIjUyIiwiNTMiLCI1NCIsIjU1IiwiNTYiLCI1NyIsIjkxIiwiOTMiLCIxNDQiLCIxNDUiLCIxODEiLCIxODIiLCIxODMiLCIxODYiLCIxODciLCIxODgiLCIxODkiLCIxOTAiLCIxOTEiLCIxOTIiLCIyMTkiLCIyMjAiLCIyMjEiLCIyMjIiLCIyMjQiLCIyMjUiLCIyNDYiLCIyNDciLCIyNDgiLCIyNDkiLCIyNTAiLCIyNTEiLCJqIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwia2V5Ym9hcmRLZXkiLCJnZXRDb2RlIiwiZXZlbnRPcktleSIsImtleUNvZGUiLCJ3aGljaCIsImdldEtleSIsImV2ZW50T3JDb2RlIiwiaXNFdmVudCIsInNoaWZ0S2V5IiwiQ2FuY2VsIiwiSGVscCIsIkJhY2tzcGFjZSIsIlRhYiIsIkNsZWFyIiwiRW50ZXIiLCJTaGlmdCIsIkNvbnRyb2wiLCJBbHQiLCJQYXVzZSIsIkNhcHNMb2NrIiwiRXNjYXBlIiwiQ29udmVydCIsIk5vbkNvbnZlcnQiLCJBY2NlcHQiLCJNb2RlQ2hhbmdlIiwiUGFnZVVwIiwiUGFnZURvd24iLCJFbmQiLCJIb21lIiwiQXJyb3dMZWZ0IiwiQXJyb3dVcCIsIkFycm93UmlnaHQiLCJBcnJvd0Rvd24iLCJTZWxlY3QiLCJQcmludCIsIkV4ZWN1dGUiLCJQcmludFNjcmVlbiIsIkluc2VydCIsIkRlbGV0ZSIsIjAiLCIxIiwiMiIsIjQiLCIkIiwiNSIsIjciLCJhIiwiQSIsImIiLCJCIiwiQyIsIkQiLCJlIiwiRSIsImYiLCJGIiwiZyIsIkciLCJoIiwiSCIsIkkiLCJKIiwiayIsIksiLCJMIiwiTSIsIk4iLCJPIiwiUCIsInEiLCJRIiwiUiIsIlMiLCJUIiwidSIsIlUiLCJ2IiwiViIsInciLCJXIiwieCIsIlgiLCJ5IiwiWSIsInoiLCJaIiwiT1MiLCJDb250ZXh0TWVudSIsIkYxIiwiRjIiLCJGMyIsIkY0IiwiRjUiLCJGNiIsIkY3IiwiRjgiLCJGOSIsIkYxMCIsIkYxMSIsIkYxMiIsIkYxMyIsIkYxNCIsIkYxNSIsIkYxNiIsIkYxNyIsIkYxOCIsIkYxOSIsIkYyMCIsIkYyMSIsIkYyMiIsIkYyMyIsIkYyNCIsIk51bUxvY2siLCJTY3JvbGxMb2NrIiwiVm9sdW1lTXV0ZSIsIlZvbHVtZURvd24iLCJWb2x1bWVVcCIsIl8iLCJNZXRhIiwiQWx0R3JhcGgiLCJBdHRuIiwiQ3JTZWwiLCJFeFNlbCIsIkVyYXNlRW9mIiwiUGxheSIsIlpvb21PdXQiLCJTcGFjZWJhciIsIkRpZ2l0MCIsIkRpZ2l0MSIsIkRpZ2l0MiIsIkRpZ2l0MyIsIkRpZ2l0NCIsIkRpZ2l0NSIsIkRpZ2l0NiIsIkRpZ2l0NyIsIkRpZ2l0OCIsIkRpZ2l0OSIsIlRpbGRlIiwiR3JhdmVBY2NlbnQiLCJFeGNsYW1hdGlvblBvaW50IiwiQXRTaWduIiwiUG91bmRTaWduIiwiUGVyY2VudFNpZ24iLCJDYXJldCIsIkFtcGVyc2FuZCIsIlBsdXNTaWduIiwiTWludXNTaWduIiwiRXF1YWxzU2lnbiIsIkRpdmlzaW9uU2lnbiIsIk11bHRpcGxpY2F0aW9uU2lnbiIsIkNvbW1hIiwiRGVjaW1hbCIsIkNvbG9uIiwiU2VtaWNvbG9uIiwiUGlwZSIsIkJhY2tTbGFzaCIsIlF1ZXN0aW9uTWFyayIsIlNpbmdsZVF1b3RlIiwiRG91YmxlUXVvdGUiLCJMZWZ0Q3VybHlCcmFjZSIsIlJpZ2h0Q3VybHlCcmFjZSIsIkxlZnRQYXJlbnRoZXNpcyIsIlJpZ2h0UGFyZW50aGVzaXMiLCJMZWZ0QW5nbGVCcmFja2V0IiwiUmlnaHRBbmdsZUJyYWNrZXQiLCJMZWZ0U3F1YXJlQnJhY2tldCIsIlJpZ2h0U3F1YXJlQnJhY2tldCIsImJhc2VEaWZmZXJlbmNlIiwiaXNBcnJheUxpa2VPYmplY3QiLCJ3aXRob3V0IiwiYXJyYXkiLCJ2YWx1ZXMiLCJiYXNlR2V0IiwicGF0aCIsImRlZmF1bHRWYWx1ZSIsInJlc3VsdCIsInVuZGVmaW5lZCIsImJhc2VJbmRleE9mIiwiaXNBcnJheUxpa2UiLCJpc1N0cmluZyIsInRvSW50ZWdlciIsIm5hdGl2ZU1heCIsIk1hdGgiLCJtYXgiLCJmcm9tSW5kZXgiLCJndWFyZCIsImluZGV4T2YiLCJhcnJheVdpdGhvdXRIb2xlcyIsIml0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlU3ByZWFkIiwiYXJyIiwic3RhY2siLCJhcnJheUxpa2VLZXlzIiwiYmFzZUtleXMiLCJhcnJheVdpdGhIb2xlcyIsIml0ZXJhYmxlVG9BcnJheUxpbWl0Iiwibm9uSXRlcmFibGVSZXN0IiwiYXJyYXlFYWNoIiwiYmFzZUVhY2giLCJjYXN0RnVuY3Rpb24iLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJ0b1N0cmluZyIsImlzVW5kZWZpbmVkIiwiaXNGdW5jdGlvbiIsImZuIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzTnVtYmVyIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm1lcmdlIiwiYXNzaWduVmFsdWUiLCJkZWVwTWVyZ2UiLCJleHRlbmQiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsInJlcGxhY2UiLCJ0eXBlIiwib2JqQSIsIm9iakIiLCJjb21wYXJlIiwiY29tcGFyZUNvbnRleHQiLCJyZXQiLCJrZXlzQSIsImtleXNCIiwiYkhhc093blByb3BlcnR5IiwiaWR4IiwidmFsdWVBIiwidmFsdWVCIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsImlzTGVuZ3RoIiwiYmFzZU1hdGNoZXMiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiaWRlbnRpdHkiLCJiYXNlSGFzIiwiaGFzUGF0aCIsImdldFRhZyIsImlzQXJndW1lbnRzIiwiaXNQcm90b3R5cGUiLCJpc1R5cGVkQXJyYXkiLCJzcGxpY2UiLCJ0YWciLCJzaXplIiwiYmFzZVRvU3RyaW5nIiwiYmFzZUdldFRhZyIsIml0ZXJhdG9yIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaW5kZXgiLCJ0b0Zpbml0ZSIsInJlbWFpbmRlciIsIkRhdGFWaWV3IiwiTWFwIiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJ0b1NvdXJjZSIsImRhdGFWaWV3Q3RvclN0cmluZyIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInJlc29sdmUiLCJDdG9yIiwiY3RvclN0cmluZyIsImJhc2VDb252ZXJ0IiwidXRpbCIsImZ1bmMiLCJvcHRpb25zIiwiYXJyYXlSZWR1Y2UiLCJiYXNlUmVkdWNlIiwiYWNjdW11bGF0b3IiLCJpbml0QWNjdW0iLCJhcnJheVNvbWUiLCJiYXNlU29tZSIsImlzSXRlcmF0ZWVDYWxsIiwicHJlZGljYXRlIiwiYmFzZUlzTmF0aXZlIiwiZ2V0VmFsdWUiLCJpc1N5bWJvbCIsIm92ZXJSZXN0Iiwic2V0VG9TdHJpbmciLCJzdGFydCIsImJhc2VGb3JPd24iLCJjcmVhdGVCYXNlRWFjaCIsImJhc2VWYWx1ZXMiLCJhcnJheUZpbHRlciIsImJhc2VGaWx0ZXIiLCJiYXNlVW5pcSIsImdldFByb3RvdHlwZSIsImlzT2JqZWN0TGlrZSIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsInByb3RvIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJiYXNlUGljayIsInBpY2siLCJmbGF0UmVzdCIsInBhdGhzIiwiYmFzZUZsYXR0ZW4iLCJkaWZmZXJlbmNlIiwiaXNLZXkiLCJzdHJpbmdUb1BhdGgiLCJvdGhlciIsImJhc2VJc0FyZ3VtZW50cyIsInJlSXNVaW50IiwidGVzdCIsInN0dWJGYWxzZSIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwiQnVmZmVyIiwiZXEiLCJpc0luZGV4IiwiYmFzZUFzc2lnblZhbHVlIiwiY3VzdG9taXplciIsImlzTmV3IiwibmV3VmFsdWUiLCJiYXNlSW5SYW5nZSIsInRvTnVtYmVyIiwibnVtYmVyIiwiZW5kIiwibmF0aXZlQ3JlYXRlIiwiZ2V0TmF0aXZlIiwibGlzdENhY2hlQ2xlYXIiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJMaXN0Q2FjaGUiLCJlbnRyaWVzIiwiY2xlYXIiLCJlbnRyeSIsInNldCIsImhhcyIsImlzS2V5YWJsZSIsIm1hcCIsImRhdGEiLCJfX2RhdGFfXyIsImFyZ3MiLCJjYXN0UGF0aCIsInRvS2V5IiwiYXJyYXlQdXNoIiwiaXNGbGF0dGVuYWJsZSIsImRlcHRoIiwiaXNTdHJpY3QiLCJyZVRyaW0iLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwidmFsdWVPZiIsImlzQmluYXJ5Iiwic2xpY2UiLCJiYXNlSXNUeXBlZEFycmF5IiwiYmFzZVVuYXJ5Iiwibm9kZVV0aWwiLCJub2RlSXNUeXBlZEFycmF5IiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwidHlwZXMiLCJyZXF1aXJlIiwiYmluZGluZyIsIm5hdGl2ZUtleXMiLCJzdGFja0NsZWFyIiwic3RhY2tEZWxldGUiLCJzdGFja0dldCIsInN0YWNrSGFzIiwic3RhY2tTZXQiLCJTdGFjayIsIk1hcENhY2hlIiwic2V0Q2FjaGVBZGQiLCJzZXRDYWNoZUhhcyIsIlNldENhY2hlIiwiYWRkIiwiY2FjaGUiLCJiYXNlU2V0RGF0YSIsImNyZWF0ZUJpbmQiLCJjcmVhdGVDdXJyeSIsImNyZWF0ZUh5YnJpZCIsImNyZWF0ZVBhcnRpYWwiLCJnZXREYXRhIiwibWVyZ2VEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImJpdG1hc2siLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJhcmdQb3MiLCJhcnkiLCJhcml0eSIsImlzQmluZEtleSIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJuZXdEYXRhIiwiYmFzZUNyZWF0ZSIsInRoaXNCaW5kaW5nIiwib2JqZWN0Q3JlYXRlIiwicGxhY2Vob2xkZXIiLCJyZXNJbmRleCIsImJhc2VLZXlzSW4iLCJyZUhhc1VuaWNvZGUiLCJSZWdFeHAiLCJzdHJpbmciLCJpc0FjdGlvblN1cHBvcnRlZCIsInRhcmdldFJlZiIsIm1ldGhvZCIsImN1cnJlbnQiLCJjYXB0dXJlIiwibGlzdGVuZXIiLCJsYXRlc3RMaXN0ZW5lciIsImV2ZW50SGFuZGxlciIsImV2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJmaW5kIiwiY3JlYXRlRmluZCIsImRlYnVyckxldHRlciIsInJlTGF0aW4iLCJyZUNvbWJvTWFyayIsInN1cGVyUHJvcEJhc2UiLCJfZ2V0IiwicmVjZWl2ZXIiLCJSZWZsZWN0IiwiYmFzZSIsImRlc2MiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwibWFwQ2FjaGVDbGVhciIsIm1hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0Iiwic3ltYm9sUHJvdG8iLCJzeW1ib2xUb1N0cmluZyIsImJhc2VTZXRUb1N0cmluZyIsInNob3J0T3V0Iiwib2JqVmFsdWUiLCJmbGF0dGVuIiwib2Zmc2V0Iiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwiY2hpbGRyZW4iLCJiYXNlRm9yIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzRXF1YWwiLCJzdHViQXJyYXkiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0U3ltYm9scyIsInN5bWJvbCIsImNvbXBhcmF0b3IiLCJvdmVyQXJnIiwiYmFzZUxvZGFzaCIsIkxhenlXcmFwcGVyIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsIm1ldGFNYXAiLCJub29wIiwiTG9kYXNoV3JhcHBlciIsImNoYWluQWxsIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIlVpbnQ4QXJyYXkiLCJhcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJhc2NpaVRvQXJyYXkiLCJoYXNVbmljb2RlIiwidW5pY29kZVRvQXJyYXkiLCJpbXBsZW1lbnRhdGlvbiIsImhhc1N5bWJvbHMiLCJ0b1N0ciIsIm9yaWdEZWZpbmVQcm9wZXJ0eSIsInN1cHBvcnRzRGVzY3JpcHRvcnMiLCJhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkIiwiZGVmaW5lUHJvcGVydGllcyIsInByZWRpY2F0ZXMiLCJtZW1vaXplIiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwiYmFzZUZpbmRJbmRleCIsInNvdXJjZUtleXMiLCJ1bmlvbiIsImFycmF5cyIsImlzQnJvd3NlciIsInRpbWVvdXREdXJhdGlvbiIsImxvbmdlclRpbWVvdXRCcm93c2VycyIsInVzZXJBZ2VudCIsImRlYm91bmNlIiwiY2FsbGVkIiwidGhlbiIsInNjaGVkdWxlZCIsInNldFRpbWVvdXQiLCJmdW5jdGlvblRvQ2hlY2siLCJnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkiLCJlbGVtZW50IiwiY3NzIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFBhcmVudE5vZGUiLCJub2RlTmFtZSIsInBhcmVudE5vZGUiLCJob3N0IiwiZ2V0U2Nyb2xsUGFyZW50IiwiYm9keSIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiZ2V0UmVmZXJlbmNlTm9kZSIsInJlZmVyZW5jZSIsInJlZmVyZW5jZU5vZGUiLCJpc0lFMTEiLCJNU0lucHV0TWV0aG9kQ29udGV4dCIsImRvY3VtZW50TW9kZSIsImlzSUUxMCIsImlzSUUiLCJ2ZXJzaW9uIiwiZ2V0T2Zmc2V0UGFyZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwibm9PZmZzZXRQYXJlbnQiLCJvZmZzZXRQYXJlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJnZXRSb290Iiwibm9kZSIsImZpbmRDb21tb25PZmZzZXRQYXJlbnQiLCJlbGVtZW50MSIsImVsZW1lbnQyIiwib3JkZXIiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk5vZGUiLCJET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkciLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsImNvbnRhaW5zIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJlbGVtZW50MXJvb3QiLCJnZXRTY3JvbGwiLCJzaWRlIiwidXBwZXJTaWRlIiwiaHRtbCIsInNjcm9sbGluZ0VsZW1lbnQiLCJpbmNsdWRlU2Nyb2xsIiwicmVjdCIsInN1YnRyYWN0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsIm1vZGlmaWVyIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwiZ2V0Qm9yZGVyc1NpemUiLCJzdHlsZXMiLCJheGlzIiwic2lkZUEiLCJzaWRlQiIsInBhcnNlRmxvYXQiLCJnZXRTaXplIiwiY29tcHV0ZWRTdHlsZSIsImdldFdpbmRvd1NpemVzIiwiaGVpZ2h0Iiwid2lkdGgiLCJjbGFzc0NhbGxDaGVjayIsImNyZWF0ZUNsYXNzIiwiZ2V0Q2xpZW50UmVjdCIsIm9mZnNldHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzaXplcyIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaG9yaXpTY3JvbGxiYXIiLCJvZmZzZXRXaWR0aCIsInZlcnRTY3JvbGxiYXIiLCJvZmZzZXRIZWlnaHQiLCJnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUiLCJwYXJlbnQiLCJmaXhlZFBvc2l0aW9uIiwiaXNIVE1MIiwiY2hpbGRyZW5SZWN0IiwicGFyZW50UmVjdCIsInNjcm9sbFBhcmVudCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsImdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZSIsImV4Y2x1ZGVTY3JvbGwiLCJyZWxhdGl2ZU9mZnNldCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImlzRml4ZWQiLCJnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50IiwicGFyZW50RWxlbWVudCIsImVsIiwiZ2V0Qm91bmRhcmllcyIsInBvcHBlciIsInBhZGRpbmciLCJib3VuZGFyaWVzRWxlbWVudCIsImJvdW5kYXJpZXMiLCJib3VuZGFyaWVzTm9kZSIsIl9nZXRXaW5kb3dTaXplcyIsImlzUGFkZGluZ051bWJlciIsImdldEFyZWEiLCJfcmVmIiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJwbGFjZW1lbnQiLCJyZWZSZWN0IiwicmVjdHMiLCJzb3J0ZWRBcmVhcyIsImFyZWEiLCJzb3J0IiwiZmlsdGVyZWRBcmVhcyIsIl9yZWYyIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJzcGxpdCIsImdldFJlZmVyZW5jZU9mZnNldHMiLCJzdGF0ZSIsImNvbW1vbk9mZnNldFBhcmVudCIsImdldE91dGVyU2l6ZXMiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5SaWdodCIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwiaGFzaCIsIm1hdGNoZWQiLCJnZXRQb3BwZXJPZmZzZXRzIiwicmVmZXJlbmNlT2Zmc2V0cyIsInBvcHBlclJlY3QiLCJwb3BwZXJPZmZzZXRzIiwiaXNIb3JpeiIsIm1haW5TaWRlIiwic2Vjb25kYXJ5U2lkZSIsIm1lYXN1cmVtZW50Iiwic2Vjb25kYXJ5TWVhc3VyZW1lbnQiLCJjaGVjayIsInJ1bk1vZGlmaWVycyIsIm1vZGlmaWVycyIsImVuZHMiLCJwcm9wIiwiZmluZEluZGV4IiwiY3VyIiwibWF0Y2giLCJ3YXJuIiwiZW5hYmxlZCIsInVwZGF0ZSIsImlzRGVzdHJveWVkIiwiYXJyb3dTdHlsZXMiLCJhdHRyaWJ1dGVzIiwiZmxpcHBlZCIsInBvc2l0aW9uRml4ZWQiLCJmbGlwIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJwb3NpdGlvbiIsImlzQ3JlYXRlZCIsIm9uVXBkYXRlIiwib25DcmVhdGUiLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsInNvbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJwcmVmaXhlcyIsInVwcGVyUHJvcCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwicHJlZml4IiwidG9DaGVjayIsInN0eWxlIiwiZGVzdHJveSIsInJlbW92ZUF0dHJpYnV0ZSIsIndpbGxDaGFuZ2UiLCJkaXNhYmxlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVPbkRlc3Ryb3kiLCJyZW1vdmVDaGlsZCIsImdldFdpbmRvdyIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVCb3VuZCIsInBhc3NpdmUiLCJzY3JvbGxFbGVtZW50IiwiYXR0YWNoVG9TY3JvbGxQYXJlbnRzIiwiY2FsbGJhY2siLCJzY3JvbGxQYXJlbnRzIiwiaXNCb2R5IiwiZXZlbnRzRW5hYmxlZCIsImVuYWJsZUV2ZW50TGlzdGVuZXJzIiwic2NoZWR1bGVVcGRhdGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlzTnVtZXJpYyIsImlzTmFOIiwiaXNGaW5pdGUiLCJzZXRTdHlsZXMiLCJ1bml0IiwiaXNGaXJlZm94IiwiaXNNb2RpZmllclJlcXVpcmVkIiwicmVxdWVzdGluZ05hbWUiLCJyZXF1ZXN0ZWROYW1lIiwicmVxdWVzdGluZyIsImlzUmVxdWlyZWQiLCJfcmVxdWVzdGluZyIsInJlcXVlc3RlZCIsInBsYWNlbWVudHMiLCJ2YWxpZFBsYWNlbWVudHMiLCJjbG9ja3dpc2UiLCJjb3VudGVyIiwicmV2ZXJzZSIsIkJFSEFWSU9SUyIsInBhcnNlT2Zmc2V0IiwiYmFzZVBsYWNlbWVudCIsInVzZUhlaWdodCIsImZyYWdtZW50cyIsImZyYWciLCJkaXZpZGVyIiwic2VhcmNoIiwic3BsaXRSZWdleCIsIm9wcyIsIm9wIiwibWVyZ2VXaXRoUHJldmlvdXMiLCJyZWR1Y2UiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiRGVmYXVsdHMiLCJzaGlmdCIsInNoaWZ0dmFyaWF0aW9uIiwiX2RhdGEkb2Zmc2V0cyIsImlzVmVydGljYWwiLCJzaGlmdE9mZnNldHMiLCJwcmV2ZW50T3ZlcmZsb3ciLCJ0cmFuc2Zvcm1Qcm9wIiwicG9wcGVyU3R5bGVzIiwidHJhbnNmb3JtIiwicHJpb3JpdHkiLCJwcmltYXJ5IiwiZXNjYXBlV2l0aFJlZmVyZW5jZSIsInNlY29uZGFyeSIsIm1pbiIsImtlZXBUb2dldGhlciIsImZsb29yIiwib3BTaWRlIiwiYXJyb3ciLCJfZGF0YSRvZmZzZXRzJGFycm93IiwiYXJyb3dFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImxlbiIsInNpZGVDYXBpdGFsaXplZCIsInRvTG93ZXJDYXNlIiwiYWx0U2lkZSIsImFycm93RWxlbWVudFNpemUiLCJjZW50ZXIiLCJwb3BwZXJNYXJnaW5TaWRlIiwicG9wcGVyQm9yZGVyU2lkZSIsInNpZGVWYWx1ZSIsInJvdW5kIiwicGxhY2VtZW50T3Bwb3NpdGUiLCJmbGlwT3JkZXIiLCJiZWhhdmlvciIsInN0ZXAiLCJyZWZPZmZzZXRzIiwib3ZlcmxhcHNSZWYiLCJvdmVyZmxvd3NMZWZ0Iiwib3ZlcmZsb3dzUmlnaHQiLCJvdmVyZmxvd3NUb3AiLCJvdmVyZmxvd3NCb3R0b20iLCJvdmVyZmxvd3NCb3VuZGFyaWVzIiwiZmxpcHBlZFZhcmlhdGlvbkJ5UmVmIiwiZmxpcFZhcmlhdGlvbnMiLCJmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50IiwiZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQiLCJmbGlwcGVkVmFyaWF0aW9uIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb24iLCJzdWJ0cmFjdExlbmd0aCIsImhpZGUiLCJib3VuZCIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJzaG91bGRSb3VuZCIsIm5vUm91bmQiLCJyZWZlcmVuY2VXaWR0aCIsInBvcHBlcldpZHRoIiwiaXNWYXJpYXRpb24iLCJob3Jpem9udGFsVG9JbnRlZ2VyIiwidmVydGljYWxUb0ludGVnZXIiLCJnZXRSb3VuZGVkT2Zmc2V0cyIsImRldmljZVBpeGVsUmF0aW8iLCJwcmVmaXhlZFByb3BlcnR5IiwiaW52ZXJ0VG9wIiwiaW52ZXJ0TGVmdCIsImFwcGx5U3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJvbkxvYWQiLCJtb2RpZmllck9wdGlvbnMiLCJQb3BwZXIiLCJfdGhpcyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImpxdWVyeSIsIlV0aWxzIiwiZ2xvYmFsIiwiUG9wcGVyVXRpbHMiLCJfcmVhY3QyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9pbXBsZW1lbnRhdGlvbjIiLCJjcmVhdGVDb250ZXh0IiwicHJvcElzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidGVzdDEiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJoYXNGdW5jIiwibWVtb2l6ZUNhcHBlZCIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJjaGFyQ29kZUF0IiwicXVvdGUiLCJzdWJTdHJpbmciLCJvdGhlckFyZ3MiLCJuYXRpdmVOb3ciLCJEYXRlIiwibm93IiwiY291bnQiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJiYXNlU2V0IiwibGFzdEluZGV4IiwibmVzdGVkIiwiYmFzZUhhc0luIiwiYmFzZUlzTmFOIiwic3RyaWN0SW5kZXhPZiIsImZyb21SaWdodCIsImJhc2VUaW1lcyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImNyZWF0ZUJhc2VGb3IiLCJjYWNoZUhhcyIsImVxdWFsRnVuYyIsImlzUGFydGlhbCIsImFyckxlbmd0aCIsIm90aExlbmd0aCIsInN0YWNrZWQiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJiYXNlR2V0QWxsS2V5cyIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJzcmNWYWx1ZSIsImFycmF5SW5jbHVkZXMiLCJhcnJheUluY2x1ZGVzV2l0aCIsImluY2x1ZGVzIiwiaXNDb21tb24iLCJ2YWx1ZXNMZW5ndGgiLCJvdXRlciIsImNvbXB1dGVkIiwidmFsdWVzSW5kZXgiLCJjcmVhdGVTZXQiLCJzZXRUb0FycmF5Iiwic2VlbkluZGV4IiwiY29tcG9zZUFyZ3MiLCJjb21wb3NlQXJnc1JpZ2h0IiwiY291bnRIb2xkZXJzIiwiY3JlYXRlQ3RvciIsImNyZWF0ZVJlY3VycnkiLCJnZXRIb2xkZXIiLCJyZW9yZGVyIiwicmVwbGFjZUhvbGRlcnMiLCJpc0FyeSIsImlzQmluZCIsImlzQ3VycmllZCIsImlzRmxpcCIsIndyYXBwZXIiLCJob2xkZXJzQ291bnQiLCJuZXdIb2xkZXJzIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImhvbGRlcnNMZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJpc1VuY3VycmllZCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImlzTGF6aWFibGUiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJnZXRGdW5jTmFtZSIsImxvZGFzaCIsImZ1bmNOYW1lIiwicmVhbE5hbWVzIiwib3RoZXJGdW5jIiwiZ2V0V3JhcERldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiY29weU9iamVjdCIsImJhc2VBc3NpZ24iLCJiYXNlQXNzaWduSW4iLCJjbG9uZUJ1ZmZlciIsImNvcHlBcnJheSIsImNvcHlTeW1ib2xzIiwiY29weVN5bWJvbHNJbiIsImdldEFsbEtleXMiLCJnZXRBbGxLZXlzSW4iLCJpbml0Q2xvbmVBcnJheSIsImluaXRDbG9uZUJ5VGFnIiwiaW5pdENsb25lT2JqZWN0IiwiaXNNYXAiLCJpc1NldCIsImNsb25lYWJsZVRhZ3MiLCJiYXNlQ2xvbmUiLCJpc0RlZXAiLCJpc0ZsYXQiLCJpc0Z1bGwiLCJpc0Z1bmMiLCJzdWJWYWx1ZSIsImtleXNJbiIsImFsbG9jVW5zYWZlIiwiY29weSIsImdldFN5bWJvbHNJbiIsImNsb25lQXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwiYnl0ZU9mZnNldCIsImJhc2VTbGljZSIsImxvd2VyIiwidXBwZXIiLCJpc0FyZ3MiLCJvcmlnS2V5cyIsImtleXNTaGltIiwib3JpZ2luYWxLZXlzIiwic2hpbSIsImNhbGxlZSIsIiRPYmplY3QiLCIkVHlwZUVycm9yIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsImRvdEFsbCIsInVuaWNvZGUiLCJzdGlja3kiLCIkZ09QRCIsImZsYWdzIiwiRXZlbnRMaXN0ZW5lciIsImRpc3BsYXlOYW1lIiwicHJvcFR5cGVzIiwiZGVmYXVsdFByb3BzIiwidXRpbHMiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidG9JU09TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiaGFzaG1hcmtJbmRleCIsIl9fQ0FOQ0VMX18iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiY29tbW9uIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJyZWplY3QiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiRXJyb3IiLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsImNvbnZlcnQiLCJjcmVhdGVDb21wb3VuZGVyIiwidXBwZXJGaXJzdCIsInN0YXJ0Q2FzZSIsIndvcmQiLCJhcnJheUV2ZXJ5IiwiYmFzZUV2ZXJ5IiwicmVSZWdFeHBDaGFyIiwicmVIYXNSZWdFeHBDaGFyIiwic3RyaW5nU2l6ZSIsImtleUJ5IiwiY3JlYXRlQWdncmVnYXRvciIsImJhc2VNZXJnZSIsImNyZWF0ZUFzc2lnbmVyIiwic3JjSW5kZXgiLCJjb25zdGFudCIsImNyZWF0ZUludmVydGVyIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpbnZlcnQiLCJvYmplY3RLZXlzIiwiaXMiLCJpc1JlZ2V4IiwiZ2V0VGltZSIsImRlZXBFcXVhbCIsImFjdHVhbCIsImV4cGVjdGVkIiwib3B0cyIsInN0cmljdCIsImlzVW5kZWZpbmVkT3JOdWxsIiwiYUlzUmVnZXgiLCJiSXNSZWdleCIsImFJc0J1ZmZlciIsImJJc0J1ZmZlciIsImthIiwia2IiLCJvYmpFcXVpdiIsImNyZWF0ZVJvdW5kIiwiYmFzZUNsYW1wIiwibmF0aXZlTWluIiwiY3JlYXRlV3JhcCIsInBhcnRpYWxSaWdodCIsImRvY3VtZW50UmVmIiwicmVuZGVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJmb3IiLCJhYSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJjb250ZXh0IiwicmVmcyIsInVwZGF0ZXIiLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCIkJHR5cGVvZiIsIl9vd25lciIsInBvcCIsImtleVByZWZpeCIsIm5leHQiLCJkb25lIiwiZXNjYXBlIiwiY2EiLCJkYSIsImJhIiwiQ2hpbGRyZW4iLCJ0b0FycmF5Iiwib25seSIsImNyZWF0ZVJlZiIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2NvbnRleHQiLCJmb3J3YXJkUmVmIiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtZW1vIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImNyZWF0ZUVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiaXNWYWxpZEVsZW1lbnQiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInN1c3BlbnNlIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsImVhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJmYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwiaGEiLCJyZWdpc3RyYXRpb25OYW1lIiwiaWEiLCJqYSIsImRlcGVuZGVuY2llcyIsIm9uRXJyb3IiLCJsYSIsIm1hIiwibmEiLCJvYSIsInBhIiwicWEiLCJzYSIsInVhIiwidmEiLCJ3YSIsImN1cnJlbnRUYXJnZXQiLCJyYSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQmEiLCJDYSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJEYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJSYSIsIlNhIiwiVGEiLCJVYSIsIldhIiwiWGEiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJldHVybiIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJjYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJzYiIsInRiIiwidWIiLCJ2YiIsInFiIiwicmIiLCJwYiIsInNldEF0dHJpYnV0ZU5TIiwid2IiLCJ5YiIsIl92YWx1ZVRyYWNrZXIiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsInhiIiwiemIiLCJjaGVja2VkIiwiQWIiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkJiIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkNiIiwiRWIiLCJGYiIsIkdiIiwiYWN0aXZlRWxlbWVudCIsIkliIiwiSGIiLCJKYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiS2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkxiIiwiTWIiLCJOYiIsInRleHRDb250ZW50IiwieGxpbmtIcmVmIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwiYXBwZW5kQ2hpbGQiLCJUYiIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsIlViIiwiVmIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJXYiIsIlhiIiwiWWIiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImVjIiwiYWx0ZXJuYXRlIiwiZWZmZWN0VGFnIiwiZmMiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImdjIiwiaWMiLCJjaGlsZCIsInNpYmxpbmciLCJoYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsInNjIiwidGMiLCJ1YyIsInZjIiwiemMiLCJibG9ja2VkT24iLCJ0b3BMZXZlbFR5cGUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJBYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIkJjIiwiQ2MiLCJFYyIsIkZjIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiaHlkcmF0ZSIsImNvbnRhaW5lckluZm8iLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiTGMiLCJNYyIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIk5jIiwiT2MiLCJkaXNwYXRjaENvbmZpZyIsIlBjIiwiX3RhcmdldEluc3QiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiV2MiLCJldmVudFBvb2wiLCJYYyIsImRlc3RydWN0b3IiLCJWYyIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsIlljIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIlpjIiwiY2xpcGJvYXJkRGF0YSIsIiRjIiwidmlldyIsImRldGFpbCIsImFkIiwicmVsYXRlZFRhcmdldCIsImJkIiwiY2hhckNvZGUiLCJjZCIsIkVzYyIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiZGQiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCJlZCIsImdkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImhkIiwiaWQiLCJsb2NhdGlvbiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwicmVwZWF0IiwibG9jYWxlIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiYnV0dG9uIiwiYnV0dG9ucyIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwib2QiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwicGQiLCJkYXRhVHJhbnNmZXIiLCJxZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJyZCIsInNkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsInlkIiwiemQiLCJBZCIsIkJkIiwiQ2QiLCJEZCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImV2ZW50UHJpb3JpdHkiLCJFZCIsImdldEV2ZW50UHJpb3JpdHkiLCJGZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiR2QiLCJIZCIsIkpkIiwiS2QiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiRGMiLCJSZCIsIlNkIiwieGMiLCJ5YyIsIlRkIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiVWQiLCJWZCIsIldkIiwic2V0UHJvcGVydHkiLCJzdWJzdHJpbmciLCJYZCIsIm1lbnVpdGVtIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJZZCIsIlpkIiwiJGQiLCJhZSIsImJlIiwiY2UiLCJkZSIsIm5leHRTaWJsaW5nIiwiZmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiZ2UiLCJjb250ZW50RWRpdGFibGUiLCJsZSIsIm1lIiwibmUiLCJhdXRvRm9jdXMiLCJvZSIsIl9faHRtbCIsInBlIiwicWUiLCJjbGVhclRpbWVvdXQiLCJyZSIsInNlIiwicHJldmlvdXNTaWJsaW5nIiwidGUiLCJyYW5kb20iLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJBZSIsIkJlIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJHZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJiZWZvcmVJbnB1dCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJTZSIsIlFlIiwiY2hhciIsIlJlIiwiVGUiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJVZSIsIlZlIiwiY2hhbmdlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRldGFjaEV2ZW50IiwiZGYiLCJlZiIsImF0dGFjaEV2ZW50IiwiZmYiLCJnZiIsImhmIiwibGYiLCJqZiIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJrZiIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwibWYiLCJwYXJlbnRXaW5kb3ciLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwic2VsZWN0IiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwieWYiLCJvblNlbGVjdCIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiT2YiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlBmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiUWYiLCJ1bnN0YWJsZV9ub3ciLCJSZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiU2YiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlRmIiwiVWYiLCJWZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiV2YiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJ2ZyIsImZpcnN0Q29udGV4dCIsImV4cGlyYXRpb25UaW1lIiwid2ciLCJ4ZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ5ZyIsInpnIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0RWZmZWN0IiwibGFzdEVmZmVjdCIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJBZyIsIkJnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwibmV4dEVmZmVjdCIsIkNnIiwiRGciLCJ1cGRhdGVRdWV1ZSIsIkVnIiwiRmciLCJHZyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJTZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJQZyIsIlFnIiwiUmciLCJUZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIlVnIiwiY29udGV4dFR5cGUiLCJWZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIldnIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJYZyIsIllnIiwiX3N0cmluZ1JlZiIsIlpnIiwiJGciLCJhaCIsImJoIiwiZWxlbWVudFR5cGUiLCJjaCIsImRoIiwiZWgiLCJ0YSIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJraCIsImxoIiwibWgiLCJ0YWdOYW1lIiwibmgiLCJvaCIsInBoIiwicWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJyaCIsInJlc3BvbmRlciIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicXVldWUiLCJiYXNlVXBkYXRlIiwiT2giLCJQaCIsIlFoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImRpc3BhdGNoIiwiYWN0aW9uIiwibGFzdCIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsIlJoIiwiU2giLCJUaCIsIlVoIiwiZGVwcyIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJyZWFkQ29udGV4dCIsInVzZVJlc3BvbmRlciIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidW5zdGFibGVfbmV4dCIsImNpIiwiZGkiLCJlaSIsImZpIiwiZ2kiLCJoaSIsInBlbmRpbmdQcm9wcyIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJuaSIsIm9pIiwicGkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwidmkiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJ3aSIsInBlbmRpbmdDb250ZXh0IiwiSGkiLCJKaSIsIktpIiwieGkiLCJyZXRyeVRpbWUiLCJ5aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ6aSIsIkFpIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJ0YWlsIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIkJpIiwiQ2kiLCJMaSIsIk1pIiwiTmkiLCJvbkNsaWNrIiwib25jbGljayIsIk9pIiwiV2Vha1NldCIsIlBpIiwiU2kiLCJSaSIsIlRpIiwiVWkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlZpIiwiV2kiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIlFpIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiYWoiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiYmoiLCJkaXNwbGF5IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJjb21wb25lbnREaWRDYXRjaCIsImpqIiwiY29tcG9uZW50U3RhY2siLCJnayIsImtqIiwiY2VpbCIsImxqIiwibWoiLCJ3aiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiQmoiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsInRpbWVvdXRNcyIsIktqIiwiTGoiLCJNaiIsIk5qIiwiT2oiLCJsYXN0RXhwaXJlZFRpbWUiLCJQaiIsImZpcnN0UGVuZGluZ1RpbWUiLCJsYXN0UGluZ2VkVGltZSIsIm5leHRLbm93blBlbmRpbmdMZXZlbCIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja1ByaW9yaXR5IiwiY2FsbGJhY2tOb2RlIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiV2oiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZEV4cGlyYXRpb25UaW1lIiwibGFzdFN1c3BlbmRlZFRpbWUiLCJYaiIsInRpbWVvdXRIYW5kbGUiLCJZaiIsImJ1c3lNaW5EdXJhdGlvbk1zIiwiYnVzeURlbGF5TXMiLCJaaiIsImJrIiwiY2siLCJwaW5nQ2FjaGUiLCJkayIsImVrIiwiZmsiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsImlrIiwiZmlyc3RTdXNwZW5kZWRUaW1lIiwicmFuZ2VDb3VudCIsIkRiIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImprIiwiZWUiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImZvY3VzIiwiRGgiLCJkYyIsImZkIiwiaGsiLCJFaCIsIkZoIiwieGsiLCJEaSIsIkVpIiwiRmkiLCJ4ZCIsIkdpIiwia2siLCJsayIsIm1rIiwiaGlkZGVuIiwiVmEiLCJuayIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInBrIiwicGVuZGluZ0NoaWxkcmVuIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsInZrIiwid2MiLCJfaW50ZXJuYWxSb290Iiwid2siLCJ6ayIsImhhc0F0dHJpYnV0ZSIsInlrIiwiQWsiLCJCayIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsImFrIiwiQ2siLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIm9rIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZVByb3BzIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiRGsiLCJFayIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJwZXJmb3JtYW5jZSIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsInByaW9yaXR5TGV2ZWwiLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInNldFZhbHVlcyIsImxvZyIsIkhlYWRlciIsImFzIiwiSWNvbiIsIkNvbnRlbnQiLCJMaXN0IiwiSXRlbSIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGb3J3YXJkUmVmIiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzTWVtbyIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJfc2V0UHJvdG90eXBlT2YiLCJpc093biIsInVubWFza2VkIiwiSGFzaCIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJpc01hc2tlZCIsInJlSXNIb3N0Q3RvciIsInJlSXNOYXRpdmUiLCJ1aWQiLCJjb3JlSnNEYXRhIiwibWFza1NyY0tleSIsImV4ZWMiLCJJRV9QUk9UTyIsImFzc29jSW5kZXhPZiIsImdldE1hcERhdGEiLCJiYXNlUGlja0J5IiwiaGFzSW4iLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwidHlwZWRBcnJheVRhZ3MiLCJpdGVyYWJsZSIsImVhY2hGdW5jIiwiYmFzZUlzTWF0Y2giLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiZXF1YWxBcnJheXMiLCJlcXVhbEJ5VGFnIiwiZXF1YWxPYmplY3RzIiwib2JqZWN0VGFnIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJtYXBUb0FycmF5Iiwic3ltYm9sVmFsdWVPZiIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvYmpDdG9yIiwib3RoQ3RvciIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImJhc2VQcm9wZXJ0eSIsImJhc2VQcm9wZXJ0eURlZXAiLCJlbnYiLCJSZWFjdCIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9pbmhlcml0cyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIkV2ZW50U2V0IiwiaGFuZGxlcnMiLCJjbG9uZU1hcCIsIm5vcm1hbGl6ZUhhbmRsZXJzIiwibm9ybWFsaXplVGFyZ2V0IiwiaXNSZWZPYmplY3QiLCJFdmVudFBvb2wiLCJoYW5kbGVyU2V0cyIsInBvb2xOYW1lIiwiYWRkSGFuZGxlcnMiLCJkaXNwYXRjaEV2ZW50IiwiaGFzSGFuZGxlcnMiLCJyZW1vdmVIYW5kbGVycyIsIkV2ZW50VGFyZ2V0IiwicG9vbHMiLCJjcmVhdGVCeVR5cGUiLCJhZGRUYXJnZXRIYW5kbGVyIiwicmVtb3ZlVGFyZ2V0SGFuZGxlciIsImNyZWF0ZUVtaXR0ZXIiLCJ0YXJnZXRzIiwiY2FuVXNlRE9NIiwicG9vbCIsImdldFRhcmdldCIsInJlbW92ZVRhcmdldCIsIkV2ZW50U3RhY2skMSIsInN1YnNjcmliZSIsInVuc3Vic2NyaWJlIiwib24iLCJzdWIiLCJ1bnN1YiIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJmaW5kSW5kZXhGdW5jIiwiYXJyMiIsIml0ZXIiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaSIsIm1hcHBpbmciLCJmYWxsYmFja0hvbGRlciIsImJhc2VBcnkiLCJjbG9uZUFycmF5Iiwid3JhcEltbXV0YWJsZSIsImNsb25lciIsImlzTGliIiwiaXNPYmoiLCJjYXAiLCJjdXJyeSIsImZpeGVkIiwiaW1tdXRhYmxlIiwicmVhcmciLCJkZWZhdWx0SG9sZGVyIiwiZm9yY2VDdXJyeSIsImZvcmNlRml4ZWQiLCJmb3JjZVJlYXJnIiwicHJpc3RpbmUiLCJydW5JbkNvbnRleHQiLCJoZWxwZXJzIiwiY2xvbmUiLCJpc0Vycm9yIiwiaXNXZWFrTWFwIiwidG9QYXRoIiwiZWFjaCIsImFyeU1ldGhvZEtleXMiLCJhcnlNZXRob2QiLCJ3cmFwcGVycyIsImNhc3RBcnJheSIsIm1peGluIiwicGFpciIsIm50aEFyZyIsImluZGV4ZXMiLCJjYXN0Q2FwIiwiaXRlcmF0ZWVSZWFyZyIsImJhc2VBcml0eSIsIml0ZXJhdGVlQXJ5IiwiY2FzdEZpeGVkIiwic2tpcEZpeGVkIiwibWV0aG9kU3ByZWFkIiwiZmxhdFNwcmVhZCIsImNhc3RSZWFyZyIsInNraXBSZWFyZyIsIm1ldGhvZFJlYXJnIiwiYXJ5UmVhcmciLCJjbG9uZUJ5UGF0aCIsImNyZWF0ZUNvbnZlcnRlciIsInJlYWxOYW1lIiwiYWxpYXNUb1JlYWwiLCJtZXRob2ROYW1lIiwicmVtYXAiLCJvbGRPcHRpb25zIiwibmV3VXRpbCIsIm5ld0Z1bmMiLCJuZXdPcHRpb25zIiwid3JhcCIsIndyYXBwZWQiLCJtdXRhdGUiLCJjcmVhdGVDbG9uZXIiLCJhcnlLZXkiLCJvdGhlck5hbWUiLCJhZnRlclJlYXJnIiwiY2FzdEN1cnJ5IiwicmVhbFRvQWxpYXMiLCJhbGlhcyIsIndyYXBwZXJDbG9uZSIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlV3JhcENvbW1lbnQiLCJkZXRhaWxzIiwid3JhcEZsYWdzIiwib2xkQXJyYXkiLCJzcmNCaXRtYXNrIiwibmV3Qml0bWFzayIsImlzQ29tYm8iLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiY2xvbmVEYXRhVmlldyIsImNsb25lUmVnRXhwIiwiY2xvbmVTeW1ib2wiLCJjbG9uZVR5cGVkQXJyYXkiLCJkYXRhVmlldyIsInJlRmxhZ3MiLCJyZWdleHAiLCJiYXNlSXNNYXAiLCJub2RlSXNNYXAiLCJiYXNlSXNTZXQiLCJub2RlSXNTZXQiLCJpc1BsYWluT2JqZWN0IiwiY2FzdFNsaWNlIiwiaXNSZWdFeHAiLCJzdHJpbmdUb0FycmF5Iiwic2VwYXJhdG9yIiwibGltaXQiLCJiYXNlSXNSZWdFeHAiLCJub2RlSXNSZWdFeHAiLCJyc0FzdHJhbCIsInJzQ29tYm8iLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicmVPcHRNb2QiLCJyc1NlcSIsInJzU3ltYm9sIiwicmVVbmljb2RlIiwiaXRlcmF0b3JUb0FycmF5Iiwic3ltSXRlcmF0b3IiLCJmbG93IiwiY3JlYXRlRmxvdyIsImZ1bmNzIiwicHJlcmVxIiwidGhydSIsInBsYW50IiwiYmFzZUludGVyc2VjdGlvbiIsImNhc3RBcnJheUxpa2VPYmplY3QiLCJpbnRlcnNlY3Rpb24iLCJtYXBwZWQiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJJbmZpbml0eSIsImJhc2VSYW5nZSIsIm5hdGl2ZUNlaWwiLCJkZWJ1cnIiLCJ3b3JkcyIsInJlQXBvcyIsImJhc2VQcm9wZXJ0eU9mIiwiYXNjaWlXb3JkcyIsImhhc1VuaWNvZGVXb3JkIiwidW5pY29kZVdvcmRzIiwicGF0dGVybiIsInJlQXNjaWlXb3JkIiwicmVIYXNVbmljb2RlV29yZCIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0JyZWFrIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNVcHBlciIsInJzTWlzY0xvd2VyIiwicnNNaXNjVXBwZXIiLCJyc01vZGlmaWVyIiwicnNFbW9qaSIsInJlVW5pY29kZVdvcmQiLCJjcmVhdGVDYXNlRmlyc3QiLCJzdHJTeW1ib2xzIiwiY2hyIiwidHJhaWxpbmciLCJhc2NpaVNpemUiLCJ1bmljb2RlU2l6ZSIsImFycmF5QWdncmVnYXRvciIsImJhc2VBZ2dyZWdhdG9yIiwic2V0dGVyIiwiaW5pdGlhbGl6ZXIiLCJhc3NpZ25NZXJnZVZhbHVlIiwiYmFzZU1lcmdlRGVlcCIsInNhZmVHZXQiLCJ0b1BsYWluT2JqZWN0IiwibWVyZ2VGdW5jIiwiaXNUeXBlZCIsImFzc2lnbmVyIiwic291cmNlcyIsImJhc2VJbnZlcnRlciIsInRvSXRlcmF0ZWUiLCJpc0VudW1lcmFibGUiLCJoYXNEb250RW51bUJ1ZyIsImhhc1Byb3RvRW51bUJ1ZyIsImRvbnRFbnVtcyIsImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlIiwiY3RvciIsImV4Y2x1ZGVkS2V5cyIsIiRhcHBsaWNhdGlvbkNhY2hlIiwiJGNvbnNvbGUiLCIkZXh0ZXJuYWwiLCIkZnJhbWUiLCIkZnJhbWVFbGVtZW50IiwiJGZyYW1lcyIsIiRpbm5lckhlaWdodCIsIiRpbm5lcldpZHRoIiwiJG9ubW96ZnVsbHNjcmVlbmNoYW5nZSIsIiRvbm1vemZ1bGxzY3JlZW5lcnJvciIsIiRvdXRlckhlaWdodCIsIiRvdXRlcldpZHRoIiwiJHBhZ2VYT2Zmc2V0IiwiJHBhZ2VZT2Zmc2V0IiwiJHBhcmVudCIsIiRzY3JvbGxMZWZ0IiwiJHNjcm9sbFRvcCIsIiRzY3JvbGxYIiwiJHNjcm9sbFkiLCIkc2VsZiIsIiR3ZWJraXRJbmRleGVkREIiLCIkd2Via2l0U3RvcmFnZUluZm8iLCIkd2luZG93IiwiaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnIiwidGhlS2V5cyIsInNraXBQcm90byIsInNraXBDb25zdHJ1Y3RvciIsImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSIsImhhc1RvU3RyaW5nVGFnIiwiaXNTdGFuZGFyZEFyZ3VtZW50cyIsImlzTGVnYWN5QXJndW1lbnRzIiwic3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyIsIm51bWJlcklzTmFOIiwicmVnZXhFeGVjIiwiZ09QRCIsInRyeVJlZ2V4RXhlY0NhbGwiLCJFUlJPUl9NRVNTQUdFIiwidGhhdCIsImJpbmRlciIsImJvdW5kTGVuZ3RoIiwiYm91bmRBcmdzIiwiRW1wdHkiLCJkZWZpbmUiLCJjYWxsQmluZCIsImdldFBvbHlmaWxsIiwiZmxhZ3NCb3VuZCIsIiRGdW5jdGlvbiIsIkdldEludHJpbnNpYyIsIiRhcHBseSIsIiRjYWxsIiwidGhyb3dUeXBlRXJyb3IiLCJUaHJvd1R5cGVFcnJvciIsImNhbGxlZVRocm93cyIsImdPUER0aHJvd3MiLCJnZXRQcm90byIsImFzeW5jR2VuSXRlcmF0b3IiLCJUeXBlZEFycmF5IiwiSU5UUklOU0lDUyIsImFzeW5jSXRlcmF0b3IiLCJBdG9taWNzIiwiQm9vbGVhbiIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImV2YWwiLCJFdmFsRXJyb3IiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIk51bWJlciIsImFsbCIsIlByb3h5IiwiUmFuZ2VFcnJvciIsIlNoYXJlZEFycmF5QnVmZmVyIiwiU3ludGF4RXJyb3IiLCJVaW50OENsYW1wZWRBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJVUklFcnJvciIsIiRyZXBsYWNlIiwiZ2V0QmFzZUludHJpbnNpYyIsImFsbG93TWlzc2luZyIsIm9yaWdTeW1ib2wiLCJoYXNTeW1ib2xTaGFtIiwic3ltT2JqIiwic3ltcyIsIlR5cGVFcnIiLCJyZWdleCIsInBvbHlmaWxsIiwiZ2V0RGF5IiwidHJ5RGF0ZU9iamVjdCIsIl9yZWFjdCIsIl9wcm9wVHlwZXMyIiwiX2d1ZDIiLCJjcmVhdGVFdmVudEVtaXR0ZXIiLCJoYW5kbGVyIiwib2ZmIiwiY2hhbmdlZEJpdHMiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiX0NvbXBvbmVudCIsIl90ZW1wIiwiX2xlbiIsIl9rZXkiLCJlbWl0dGVyIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJfQ29tcG9uZW50MiIsIl90ZW1wMiIsIl90aGlzMiIsIl9sZW4yIiwiX2tleTIiLCJ3YXJuaW5nIiwibmF0aXZlSXNGaW5pdGUiLCJwcmVjaXNpb24iLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJwcm9taXNlcyIsInNwcmVhZCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJnZXRVcmkiLCJ1c2UiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsInJlYXNvbiIsImZucyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJjb2x1bW5OdW1iZXIiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsInN1YnN0ciIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwicmVxdWVzdFVSTCIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwicmVtb3ZlIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsInRva2VuIiwiX1JlYWN0JENvbXBvbmVudCIsIlJlZkZpbmROb2RlIiwiX2dldFByb3RvdHlwZU9mMiIsInByZXZOb2RlIiwiaW5uZXJSZWYiLCJwcmV2UHJvcHMiLCJjdXJyZW50Tm9kZSIsIlJlZkZvcndhcmQiLCJfdGhpcyRwcm9wcyIsImhhbmRsZVJlZk92ZXJyaWRlIiwiRWxlbWVudFR5cGUiLCJfQ29tcG9uZW50JGhhbmRsZWRQcm8iLCJoYW5kbGVkUHJvcHMiLCJhY2MiLCJudW1iZXJUb1dvcmRNYXAiLCIxMCIsIjExIiwiMTQiLCIxNSIsIm51bWJlclRvV29yZCIsIkNPTE9SUyIsIkZMT0FUUyIsIlNJWkVTIiwiVEVYVF9BTElHTk1FTlRTIiwiVkVSVElDQUxfQUxJR05NRU5UUyIsIlZJU0lCSUxJVFkiLCJXSURUSFMiLCJESVJFQ1RJT05BTF9UUkFOU0lUSU9OUyIsIlNUQVRJQ19UUkFOU0lUSU9OUyIsIlRSQU5TSVRJT05TIiwiQUNDRVNTSUJJTElUWSIsIkFSUk9XUyIsIkFVRElPX1ZJREVPIiwiQlVTSU5FU1MiLCJDSEVTUyIsIkNPREUiLCJDT01NVU5JQ0FUSU9OIiwiQ09NUFVURVJTIiwiQ1VSUkVOQ1kiLCJEQVRFX1RJTUUiLCJERVNJR04iLCJFRElUT1JTIiwiRklMRVMiLCJHRU5ERVJTIiwiSEFORFNfR0VTVFVSRVMiLCJIRUFMVEgiLCJJTUFHRVMiLCJJTlRFUkZBQ0VTIiwiTE9HSVNUSUNTIiwiTUFQUyIsIk1FRElDQUwiLCJPQkpFQ1RTIiwiUEFZTUVOVFNfU0hPUFBJTkciLCJTSEFQRVMiLCJTUElOTkVSUyIsIlNQT1JUUyIsIlNUQVRVUyIsIlVTRVJTX1BFT1BMRSIsIlZFSElDTEVTIiwiV1JJVElORyIsIkJSQU5EUyIsIklDT05TIiwiSUNPTl9BTElBU0VTIiwiSUNPTlNfQU5EX0FMSUFTRVMiLCJDT01QT05FTlRfQ09OVEVYVF9TUEVDSUZJQ19JQ09OUyIsIkFMTF9JQ09OU19JTl9BTExfQ09OVEVYVFMiLCJ1c2VLZXlPbmx5IiwidXNlVmFsdWVBbmRLZXkiLCJ1c2VLZXlPclZhbHVlQW5kS2V5IiwidXNlTXVsdGlwbGVQcm9wIiwidXNlVGV4dEFsaWduUHJvcCIsInVzZVZlcnRpY2FsQWxpZ25Qcm9wIiwid2lkdGhDbGFzcyIsImNhbkVxdWFsIiwidmFsVHlwZSIsImdldERlZmF1bHQiLCJfQ29tcG9uZW50JGRlZmF1bHRQcm8iLCJjb21wdXRlZERlZmF1bHQiLCJjcmVhdGVTaG9ydGhhbmQiLCJtYXBWYWx1ZVRvUHJvcHMiLCJ2YWxJc1N0cmluZyIsInZhbElzTnVtYmVyIiwidmFsSXNGdW5jdGlvbiIsInZhbElzUmVhY3RFbGVtZW50IiwidmFsSXNQcm9wc09iamVjdCIsInZhbElzUHJpbWl0aXZlVmFsdWUiLCJfb3B0aW9ucyRkZWZhdWx0UHJvcHMiLCJ1c2Vyc1Byb3BzIiwiX29wdGlvbnMkb3ZlcnJpZGVQcm9wIiwiY2xhc3NOYW1lIiwibWVyZ2VkQ2xhc3Nlc05hbWVzIiwiY2hpbGRLZXkiLCJfb3B0aW9ucyRhdXRvR2VuZXJhdGUiLCJhdXRvR2VuZXJhdGVLZXkiLCJjcmVhdGVTaG9ydGhhbmRGYWN0b3J5IiwiY3JlYXRlSFRNTERpdmlzaW9uIiwiY3JlYXRlSFRNTElmcmFtZSIsInNyYyIsImNyZWF0ZUhUTUxJbWFnZSIsImNyZWF0ZUhUTUxJbnB1dCIsImNyZWF0ZUhUTUxMYWJlbCIsImNyZWF0ZUhUTUxQYXJhZ3JhcGgiLCJJY29uR3JvdXAiLCJjb250ZW50IiwicmVzdCIsImlzTmlsIiwiX1B1cmVDb21wb25lbnQiLCJhcmlhT3B0aW9ucyIsImFyaWFMYWJlbCIsImFyaWFIaWRkZW4iLCJfdGhpcyRwcm9wczIiLCJib3JkZXJlZCIsImNpcmN1bGFyIiwiY29ybmVyIiwiZml0dGVkIiwiaW52ZXJ0ZWQiLCJsb2FkaW5nIiwicm90YXRlZCIsImdldEljb25BcmlhT3B0aW9ucyIsImhhbmRsZUNsaWNrIiwiaHRtbElucHV0QXR0cnMiLCJodG1sSW1hZ2VQcm9wcyIsIl9vcHRpb25zJGh0bWxQcm9wcyIsImh0bWxQcm9wcyIsIl9vcHRpb25zJGluY2x1ZGVBcmlhIiwiaW5jbHVkZUFyaWEiLCJpbnB1dFByb3BzIiwicG9zc2libGVBcmlhIiwiaGFzRG9jdW1lbnQiLCJoYXNXaW5kb3ciLCJvdmVycmlkZSIsImNsaWVudFJlY3RzIiwiZ2V0Q2xpZW50UmVjdHMiLCJfZmlyc3QyIiwiZ2V0RGVmYXVsdFByb3BOYW1lIiwiZ2V0QXV0b0NvbnRyb2xsZWRTdGF0ZVZhbHVlIiwiaW5jbHVkZURlZmF1bHRzIiwicHJvcFZhbHVlIiwiZGVmYXVsdFByb3AiLCJpbml0aWFsU3RhdGUiLCJBdXRvQ29udHJvbGxlZENvbXBvbmVudCIsIm5ld1N0YXRlIiwiYXV0b0NvbnRyb2xsZWRQcm9wcyIsIl9zdGF0ZSIsImluaXRpYWxBdXRvQ29udHJvbGxlZFN0YXRlIiwiUG9ydGFsSW5uZXIiLCJfdGhpcyRwcm9wcyRtb3VudE5vZGUiLCJtb3VudE5vZGUiLCJoYW5kbGVSZWYiLCJsYXRlc3REb2N1bWVudE1vdXNlRG93bkV2ZW50IiwiY2xvc2VPbkRvY3VtZW50Q2xpY2siLCJjdXJyZW50TW91c2VEb3duRXZlbnQiLCJjb250ZW50UmVmIiwidHJpZ2dlclJlZiIsImNsb3NlIiwiY2xvc2VPbkVzY2FwZSIsImNsb3NlT25Qb3J0YWxNb3VzZUxlYXZlIiwibW91c2VMZWF2ZURlbGF5IiwibW91c2VMZWF2ZVRpbWVyIiwiY2xvc2VXaXRoVGltZW91dCIsInRyaWdnZXIiLCJjbG9zZU9uVHJpZ2dlckJsdXIiLCJkaWRGb2N1c1BvcnRhbCIsIl90aGlzJHByb3BzMyIsImNsb3NlT25UcmlnZ2VyQ2xpY2siLCJvcGVuT25UcmlnZ2VyQ2xpY2siLCJfbGVuMyIsIl9rZXkzIiwiX3RoaXMkcHJvcHM0Iiwib3Blbk9uVHJpZ2dlckZvY3VzIiwiX2xlbjQiLCJfa2V5NCIsIm1vdXNlRW50ZXJUaW1lciIsIl90aGlzJHByb3BzNSIsImNsb3NlT25UcmlnZ2VyTW91c2VMZWF2ZSIsIl9sZW41IiwiX2tleTUiLCJfdGhpcyRwcm9wczYiLCJtb3VzZUVudGVyRGVsYXkiLCJvcGVuT25UcmlnZ2VyTW91c2VFbnRlciIsIl9sZW42IiwiX2tleTYiLCJvcGVuV2l0aFRpbWVvdXQiLCJvbk9wZW4iLCJ0cnlTZXRTdGF0ZSIsImV2ZW50Q2xvbmUiLCJvbkNsb3NlIiwiX3RoaXMkcHJvcHM3Iiwib25Nb3VudCIsImhhbmRsZU1vdW50Iiwib25Vbm1vdW50IiwiaGFuZGxlVW5tb3VudCIsImhhbmRsZVBvcnRhbE1vdXNlTGVhdmUiLCJoYW5kbGVQb3J0YWxNb3VzZUVudGVyIiwiaGFuZGxlRG9jdW1lbnRNb3VzZURvd24iLCJoYW5kbGVEb2N1bWVudENsaWNrIiwiaGFuZGxlRXNjYXBlIiwiaGFuZGxlVHJpZ2dlclJlZiIsIm9uQmx1ciIsImhhbmRsZVRyaWdnZXJCbHVyIiwiaGFuZGxlVHJpZ2dlckNsaWNrIiwib25Gb2N1cyIsImhhbmRsZVRyaWdnZXJGb2N1cyIsIm9uTW91c2VMZWF2ZSIsImhhbmRsZVRyaWdnZXJNb3VzZUxlYXZlIiwib25Nb3VzZUVudGVyIiwiaGFuZGxlVHJpZ2dlck1vdXNlRW50ZXIiLCJEaW1tZXJEaW1tYWJsZSIsImJsdXJyaW5nIiwiZGltbWVkIiwiRGltbWVySW5uZXIiLCJhY3RpdmUiLCJ0b2dnbGVTdHlsZXMiLCJjdXJyZW50QWN0aXZlIiwiY29udGFpbmVyUmVmIiwicmVtb3ZlUHJvcGVydHkiLCJwYWdlIiwic2ltcGxlIiwidmVydGljYWxBbGlnbiIsImNoaWxkcmVuQ29udGVudCIsIkRpbW1lciIsImNsYXNzTGlzdCIsImhhbmRsZVBvcnRhbE1vdW50IiwiaGFuZGxlUG9ydGFsVW5tb3VudCIsIkltYWdlR3JvdXAiLCJJbWFnZSIsImF2YXRhciIsImNlbnRlcmVkIiwiZGltbWVyIiwiZmxvYXRlZCIsImZsdWlkIiwiaW5saW5lIiwibGFiZWwiLCJyb3VuZGVkIiwic3BhY2VkIiwiX3BhcnRpdGlvbkhUTUxQcm9wcyIsIl9wYXJ0aXRpb25IVE1MUHJvcHMyIiwiaW1nVGFnUHJvcHMiLCJyb290UHJvcHMiLCJHcm91cCIsIkxhYmVsRGV0YWlsIiwiTGFiZWxHcm91cCIsIkxhYmVsIiwicHJlZGVmaW5lZFByb3BzIiwiYXR0YWNoZWQiLCJiYXNpYyIsImVtcHR5IiwiZmxvYXRpbmciLCJob3Jpem9udGFsIiwiaWNvbiIsImltYWdlIiwib25SZW1vdmUiLCJwb2ludGluZyIsInByb21wdCIsInJlbW92ZUljb24iLCJyaWJib24iLCJwb2ludGluZ0NsYXNzIiwicmVtb3ZlSWNvblNob3J0aGFuZCIsImhhbmRsZUljb25PdmVycmlkZXMiLCJCdXR0b25Db250ZW50IiwidmlzaWJsZSIsIkJ1dHRvbkdyb3VwIiwiY29tcGFjdCIsImxhYmVsZWQiLCJuZWdhdGl2ZSIsInBvc2l0aXZlIiwidG9nZ2xlIiwidmVydGljYWwiLCJ3aWR0aHMiLCJCdXR0b25PciIsIkJ1dHRvbiIsInRhYkluZGV4IiwibGFiZWxQb3NpdGlvbiIsInJvbGUiLCJhbmltYXRlZCIsImJhc2VDbGFzc2VzIiwiaGFzSWNvbkNsYXNzIiwibGFiZWxlZENsYXNzZXMiLCJ3cmFwcGVyQ2xhc3NlcyIsImNvbXB1dGVFbGVtZW50VHlwZSIsImNvbXB1dGVUYWJJbmRleCIsImJ1dHRvbkNsYXNzZXMiLCJjb250YWluZXJDbGFzc2VzIiwibGFiZWxFbGVtZW50IiwiaGFzQ2hpbGRyZW4iLCJjb21wdXRlQnV0dG9uQXJpYVJvbGUiLCJudWxsUmVmT2JqZWN0IiwicmVmT2JqZWN0cyIsInJlZk9iamVjdCIsInByZXZDbGFzc05hbWVzIiwiY3VycmVudENsYXNzTmFtZXMiLCJub2RlUmVmIiwiY29tcG9uZW50cyIsIl9jb21wdXRlQ2xhc3NOYW1lc0RpZiIsIl9jb21wdXRlQ2xhc3NOYW1lc0RpZjIiLCJmb3JBZGQiLCJmb3JSZW1vdmFsIiwibm9kZVJlZ2lzdHJ5IiwiTm9kZVJlZ2lzdHJ5IiwiY29tcG9uZW50Iiwibm9kZXMiLCJNb3VudE5vZGUiLCJkZWwiLCJNb2RhbEhlYWRlciIsIk1vZGFsQ29udGVudCIsInNjcm9sbGluZyIsIk1vZGFsQWN0aW9ucyIsImJ1dHRvblByb3BzIiwiYWN0aW9ucyIsImhhbmRsZUJ1dHRvbk92ZXJyaWRlcyIsIk1vZGFsRGVzY3JpcHRpb24iLCJjYW5GaXQiLCJtb2RhbFJlY3QiLCJzY3JvbGxIZWlnaHQiLCJjb250ZXh0SGVpZ2h0IiwiZ2V0TGVnYWN5U3R5bGVzIiwiaXNGaXR0ZWQiLCJpc0xlZ2FjeSIsIkFjdGl2ZVhPYmplY3QiLCJNb2RhbCIsIm9uQWN0aW9uQ2xpY2siLCJhY3Rpb25Qcm9wcyIsImhhbmRsZUNsb3NlIiwiY2xvc2VPbkRpbW1lckNsaWNrIiwiY3VycmVudERvY3VtZW50TW91c2VEb3duRXZlbnQiLCJzZXRQb3NpdGlvbkFuZENsYXNzTmFtZXMiLCJldmVudFN0YWNrIiwiZGltbWVyUmVmIiwiYW5pbWF0aW9uUmVxdWVzdElkIiwibGVnYWN5U3R5bGVzIiwibGVnYWN5IiwibW91bnRDbGFzc2VzIiwic2V0RGltbWVyTm9kZVN0eWxlIiwiY2xvc2VJY29uIiwiaGVhZGVyIiwiX3RoaXMkc3RhdGUiLCJjbG9zZUljb25OYW1lIiwiY2xvc2VJY29uSlNYIiwiaGFuZGxlQWN0aW9uc092ZXJyaWRlcyIsImdldE1vdW50Tm9kZSIsInVuaGFuZGxlZCIsInBvcnRhbFByb3BOYW1lcyIsInBvcnRhbFByb3BzIiwiZGltbWVyQ2xhc3NlcyIsImhhbmRsZU9wZW4iLCJyZW5kZXJDb250ZW50IiwiQ29uZmlybSIsImhhbmRsZUNhbmNlbCIsImNhbmNlbEJ1dHRvbiIsImNvbmZpcm1CdXR0b24iLCJvcGVuUHJvcCIsIkFjdGlvbnMiLCJoYW5kbGVDYW5jZWxPdmVycmlkZXMiLCJoYW5kbGVDb25maXJtT3ZlcnJpZGVzIiwiY3JlYXRlRWxsaXBzaXNJdGVtIiwicGFnZU51bWJlciIsImNyZWF0ZVByZXZJdGVtIiwiYWN0aXZlUGFnZSIsImNyZWF0ZU5leHRJdGVtIiwidG90YWxQYWdlcyIsImNyZWF0ZUxhc3RJdGVtIiwiZmlyc3RHcm91cEVuZCIsImlubmVyR3JvdXBTdGFydCIsInBhZ2VGYWN0b3J5IiwicHJlZml4UGFnZSIsImlubmVyR3JvdXBFbmQiLCJsYXN0R3JvdXBTdGFydCIsInN1ZmZpeFBhZ2UiLCJyYXdPcHRpb25zIiwiYm91bmRhcnlSYW5nZSIsImhpZGVFbGxpcHNpcyIsInNpYmxpbmdSYW5nZSIsImNyZWF0ZVBhZ2VGYWN0b3J5IiwiaW5uZXJSYW5nZSIsImVsbGlwc2lzU2l6ZSIsImZpcnN0R3JvdXAiLCJsYXN0R3JvdXAiLCJpbm5lckdyb3VwIiwiTWVudUhlYWRlciIsIk1lbnVJdGVtIiwiTWVudU1lbnUiLCJpdGVtUHJvcHMiLCJhY3RpdmVJbmRleCIsIml0ZW1zIiwiaXRlbSIsImhhbmRsZUl0ZW1PdmVycmlkZXMiLCJib3JkZXJsZXNzIiwicGFnaW5hdGlvbiIsInN0YWNrYWJsZSIsInRhYnVsYXIiLCJyZW5kZXJJdGVtcyIsIlBhZ2luYXRpb25JdGVtIiwib25LZXlEb3duIiwiaGFuZGxlS2V5RG93biIsImhhbmRsZU92ZXJyaWRlcyIsIlBhZ2luYXRpb24iLCJuZXh0QWN0aXZlUGFnZSIsImhhbmRsZUl0ZW1DbGljayIsImVsbGlwc2lzSXRlbSIsImZpcnN0SXRlbSIsImxhc3RJdGVtIiwibmV4dEl0ZW0iLCJwYWdlSXRlbSIsInByZXZJdGVtIiwiQ2hlY2tib3giLCJyYWRpbyIsInJlYWRPbmx5IiwiaW5kZXRlcm1pbmF0ZSIsImlzSW5wdXRDbGljayIsImlucHV0UmVmIiwiaXNMYWJlbENsaWNrIiwibGFiZWxSZWYiLCJpc1Jvb3RDbGljayIsImhhc0lkIiwiaXNDbGlja0Zyb21Nb3VzZSIsImhhbmRsZUNoYW5nZSIsImNhblRvZ2dsZSIsIl90aGlzJHN0YXRlMiIsIl90aGlzJHN0YXRlMyIsInNldEluZGV0ZXJtaW5hdGUiLCJzbGlkZXIiLCJfdGhpcyRzdGF0ZTQiLCJodG1sSW5wdXRQcm9wcyIsImh0bWxGb3IiLCJvbkNoYW5nZSIsIm9uTW91c2VEb3duIiwiaGFuZGxlTW91c2VEb3duIiwib25Nb3VzZVVwIiwiaGFuZGxlTW91c2VVcCIsIlJhZGlvIiwibWF4V2lkdGgiLCJtaW5XaWR0aCIsIlJlc3BvbnNpdmUiLCJ0aWNraW5nIiwiZnJhbWVJZCIsImhhbmRsZVVwZGF0ZSIsIm5leHRWaXNpYmxlIiwiZmlyZU9uTW91bnQiLCJoYW5kbGVSZXNpemUiLCJnZXRXaWR0aCIsIkRyb3Bkb3duRGl2aWRlciIsIkZsYWciLCJEcm9wZG93bkl0ZW0iLCJmbGFnIiwiaWNvbk5hbWUiLCJzb21lQnlUeXBlIiwiZmxhZ0VsZW1lbnQiLCJpY29uRWxlbWVudCIsImltYWdlRWxlbWVudCIsImRlc2NyaXB0aW9uRWxlbWVudCIsInRleHRFbGVtZW50IiwiRHJvcGRvd25IZWFkZXIiLCJEcm9wZG93bk1lbnUiLCJkaXJlY3Rpb24iLCJEcm9wZG93blNlYXJjaElucHV0IiwiYXV0b0NvbXBsZXRlIiwiRHJvcGRvd24iLCJjbG9zZU9uQ2hhbmdlIiwiX21vdmVzIiwic2VsZWN0T25OYXZpZ2F0aW9uIiwibW92ZSIsIm1vdmVTZWxlY3Rpb25CeSIsIm1ha2VTZWxlY3RlZEl0ZW1BY3RpdmUiLCJnZXRTZWxlY3RlZEl0ZW0iLCJzZWxlY3RlZFZhbHVlIiwic2V0U2VsZWN0ZWRJbmRleCIsIm9wdGlvblNpemUiLCJnZXRNZW51T3B0aW9ucyIsImNsZWFyU2VhcmNoUXVlcnkiLCJzZWFyY2hSZWYiLCJzZWFyY2hRdWVyeSIsImNsb3NlT25CbHVyIiwiaXNNb3VzZURvd24iLCJoYW5kbGVEb2N1bWVudE1vdXNlVXAiLCJtaW5DaGFyYWN0ZXJzIiwiY2xlYXJhYmxlIiwiaGFzVmFsdWUiLCJjbGVhclZhbHVlIiwiY3VycmVudFZhbHVlIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiaXNBZGRpdGlvbkl0ZW0iLCJzZWxlY3RPbkJsdXIiLCJuZXdRdWVyeSIsInNlbGVjdGVkSW5kZXgiLCJvcHRpb24iLCJhZGRpdGlvbkxhYmVsIiwiYWRkaXRpb25Qb3NpdGlvbiIsImFsbG93QWRkaXRpb25zIiwiZmlsdGVyZWRPcHRpb25zIiwib3B0Iiwic3RyaXBwZWRRdWVyeSIsImFkZGl0aW9uTGFiZWxFbGVtZW50IiwiYWRkSXRlbSIsImdpdmVuT3B0aW9ucyIsIl90aGlzJHByb3BzOCIsIm5ld1NlbGVjdGVkSW5kZXgiLCJvcHRpb25zUHJvcHMiLCJlbmFibGVkSW5kaWNpZXMiLCJnZXRFbmFibGVkSW5kaWNlcyIsImZpcnN0SW5kZXgiLCJnZXRNZW51SXRlbUluZGV4QnlWYWx1ZSIsImxhYmVsUHJvcHMiLCJzZWxlY3RlZExhYmVsIiwic3RhcnRJbmRleCIsIndyYXBTZWxlY3Rpb24iLCJuZXh0SW5kZXgiLCJzY3JvbGxTZWxlY3RlZEl0ZW1JbnRvVmlldyIsImhhbmRsZUljb25DbGljayIsIl90aGlzJHByb3BzOSIsInNpemVyUmVmIiwic2VhcmNoV2lkdGgiLCJfdGhpcyRwcm9wczEwIiwiaGFuZGxlU2VhcmNoQ2hhbmdlIiwibWVudSIsImlzT3V0T2ZVcHBlclZpZXciLCJvZmZzZXRUb3AiLCJpc091dE9mTG93ZXJWaWV3IiwiZHJvcGRvd25SZWN0IiwibWVudUhlaWdodCIsInNwYWNlQXRUaGVCb3R0b20iLCJzcGFjZUF0VGhlVG9wIiwidXB3YXJkIiwiX3RoaXMkcHJvcHMxMSIsImhhc1NlYXJjaEZvY3VzIiwiYmx1ciIsImhhc0Ryb3Bkb3duRm9jdXMiLCJoYXNGb2N1cyIsIl90aGlzJHByb3BzMTIiLCJfdGV4dCIsImdldEl0ZW1CeVZhbHVlIiwiX3RoaXMkcHJvcHMxMyIsInNlYXJjaElucHV0IiwiY29tcHV0ZVNlYXJjaElucHV0V2lkdGgiLCJjb21wdXRlU2VhcmNoSW5wdXRUYWJJbmRleCIsImhhbmRsZVNlYXJjaElucHV0T3ZlcnJpZGVzIiwiX3RoaXMkcHJvcHMxNCIsIl90aGlzJHByb3BzMTUiLCJyZW5kZXJMYWJlbCIsIl90aGlzJHN0YXRlNSIsInNlbGVjdGVkSXRlbXMiLCJoYW5kbGVMYWJlbENsaWNrIiwiaGFuZGxlTGFiZWxSZW1vdmUiLCJfdGhpcyRwcm9wczE2IiwibGF6eUxvYWQiLCJub1Jlc3VsdHNNZXNzYWdlIiwiX3RoaXMkc3RhdGU2IiwiaXNBY3RpdmUiLCJvcHRWYWx1ZSIsInBvaW50ZXJFdmVudHMiLCJfdGhpcyRwcm9wczE3IiwiZ2V0RHJvcGRvd25NZW51QXJpYU9wdGlvbnMiLCJtZW51Q2hpbGQiLCJyZW5kZXJPcHRpb25zIiwiX3RoaXMkc3RhdGU3IiwiZ2V0S2V5QW5kVmFsdWVzIiwibmV4dFN0YXRlIiwicHJldlN0YXRlIiwiX3RoaXMkcHJvcHMxOCIsIm9wZW5PbkZvY3VzIiwib3BlbmFibGUiLCJzZXRPcGVuRGlyZWN0aW9uIiwiX3RoaXMkcHJvcHMxOSIsIl90aGlzJHByb3BzMjAiLCJzZWxlY3Rpb24iLCJfdGhpcyRzdGF0ZTgiLCJnZXREcm9wZG93bkFyaWFPcHRpb25zIiwiaGFuZGxlQmx1ciIsImhhbmRsZUZvY3VzIiwicmVuZGVyTGFiZWxzIiwicmVuZGVyU2VhcmNoSW5wdXQiLCJyZW5kZXJTZWFyY2hTaXplciIsInJlbmRlclRleHQiLCJyZW5kZXJNZW51IiwibW92ZVNlbGVjdGlvbk9uS2V5RG93biIsInNlbGVjdEl0ZW1PbkVudGVyIiwicmVtb3ZlSXRlbU9uQmFja3NwYWNlIiwib3Blbk9uQXJyb3ciLCJvcGVuT25TcGFjZSIsIkRpdmlkZXIiLCJUZXh0QXJlYSIsInJvd3MiLCJvbklucHV0IiwiaGFuZGxlSW5wdXQiLCJkdXJhdGlvbiIsInByZXYiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsInByZXZLZXkiLCJUcmFuc2l0aW9uR3JvdXAiLCJub3RoaW5nIiwiY2hpbGRQcm9wcyIsInJlYWN0S2V5IiwiZGlyZWN0aW9uYWwiLCJfb3B0aW9ucyR2aXNpYmxlIiwiX29wdGlvbnMkdHJhbnNpdGlvbk9uIiwidHJhbnNpdGlvbk9uTW91bnQiLCJvbkhpZGUiLCJoYW5kbGVPbkhpZGUiLCJfY2hpbGRyZW4iLCJ3cmFwQ2hpbGQiLCJwcmV2TWFwcGluZyIsIm5leHRNYXBwaW5nIiwiY2hpbGRNYXBwaW5nIiwiX2dldFBlbmRpbmdLZXlzIiwiX2dldFBlbmRpbmdLZXlzMiIsIm5leHRLZXkiLCJwZW5kaW5nS2V5IiwiaGFzUHJldiIsImhhc05leHQiLCJwcmV2Q2hpbGQiLCJpc0xlYXZpbmciLCJfcHJldkNoaWxkJHByb3BzIiwiVFJBTlNJVElPTl9UWVBFIiwiRU5URVJJTkciLCJFWElUSU5HIiwiVHJhbnNpdGlvbiIsIm5leHRTdGF0dXMiLCJhbmltYXRpbmciLCJkdXJhdGlvblZhbHVlIiwibm9ybWFsaXplVHJhbnNpdGlvbkR1cmF0aW9uIiwidGltZW91dElkIiwiaGFuZGxlQ29tcGxldGUiLCJoYW5kbGVTdGFydCIsImNvbXB1dGVDb21wbGV0ZWRTdGF0dXMiLCJjb21wdXRlTmV4dFN0YXR1cyIsImNoaWxkQ2xhc3NlcyIsIkVYSVRFRCIsInVubW91bnRPbkhpZGUiLCJFTlRFUkVEIiwiVU5NT1VOVEVEIiwibW91bnRPblNob3ciLCJpbml0aWFsIiwiY2hpbGRTdHlsZSIsImFuaW1hdGlvbkR1cmF0aW9uIiwiX3RoaXMkY29tcHV0ZUluaXRpYWxTIiwiY29tcHV0ZUluaXRpYWxTdGF0dXNlcyIsInVwZGF0ZVN0YXR1cyIsIl90aGlzJGNvbXB1dGVTdGF0dXNlcyIsImNvbXB1dGVTdGF0dXNlcyIsImNvbXB1dGVDbGFzc2VzIiwiVHJhbnNpdGlvbmFibGVQb3J0YWwiLCJwb3J0YWxPcGVuIiwidHJhbnNpdGlvblZpc2libGUiLCJoYW5kbGVQb3J0YWxPcGVuIiwiaGFuZGxlUG9ydGFsQ2xvc2UiLCJvblN0YXJ0IiwiaGFuZGxlVHJhbnNpdGlvblN0YXJ0IiwiaGFuZGxlVHJhbnNpdGlvbkhpZGUiLCJWaXNpYmlsaXR5IiwiYm90dG9tUGFzc2VkIiwiYm90dG9tVmlzaWJsZSIsImZpdHMiLCJwYXNzaW5nIiwib2ZmU2NyZWVuIiwib25TY3JlZW4iLCJ0b3BQYXNzZWQiLCJ0b3BWaXNpYmxlIiwiY29udGludW91cyIsIm1hdGNoZXNEaXJlY3Rpb24iLCJjYWxjdWxhdGlvbnMiLCJleGVjdXRpb25Qb3NzaWJsZSIsIm9sZENhbGN1bGF0aW9ucyIsImV4ZWN1dGUiLCJmaXJlZENhbGxiYWNrcyIsIm1vdW50ZWQiLCJjb21wdXRlQ2FsY3VsYXRpb25zIiwicGFnZVlPZmZzZXQiLCJnZXRQYWdlWU9mZnNldCIsIm9uQm90dG9tUGFzc2VkIiwib25Cb3R0b21QYXNzZWRSZXZlcnNlIiwib25Cb3R0b21WaXNpYmxlIiwib25Cb3R0b21WaXNpYmxlUmV2ZXJzZSIsIm9uUGFzc2luZyIsIm9uUGFzc2luZ1JldmVyc2UiLCJvblRvcFBhc3NlZCIsIm9uVG9wUGFzc2VkUmV2ZXJzZSIsIm9uVG9wVmlzaWJsZSIsIm9uVG9wVmlzaWJsZVJldmVyc2UiLCJvbk9mZlNjcmVlbiIsIm9uT25TY3JlZW4iLCJ1cGRhdGVPbiIsImZvcndhcmQiLCJmaXJlT25QYXNzZWQiLCJmaXJlIiwidW5hdHRhY2hIYW5kbGVycyIsImF0dGFjaEhhbmRsZXJzIiwiX3RoaXMkY2FsY3VsYXRpb25zIiwicGVyY2VudGFnZVBhc3NlZCIsInBpeGVsc1Bhc3NlZCIsIm9uUGFzc2VkIiwicGFzc2VkIiwicGl4ZWxzVmFsdWUiLCJtYXRjaFBlcmNlbnRhZ2UiLCJwZXJjZW50YWdlVmFsdWUiLCJfdGhpcyRyZWYkY3VycmVudCRnZXQiLCJfbm9ybWFsaXplT2Zmc2V0IiwiX25vcm1hbGl6ZU9mZnNldDIiLCJ0b3BPZmZzZXQiLCJib3R0b21PZmZzZXQiLCJCcmVhZGNydW1iRGl2aWRlciIsIkJyZWFkY3J1bWJTZWN0aW9uIiwiQnJlYWRjcnVtYiIsInNlY3Rpb25zIiwiY2hpbGRFbGVtZW50cyIsInNlY3Rpb24iLCJicmVhZGNydW1iRWxlbWVudCIsIlNlY3Rpb24iLCJGb3JtRmllbGQiLCJjb250cm9sIiwicmVxdWlyZWQiLCJlcnJvclBvaW50aW5nIiwiZXJyb3JMYWJlbCIsImVycm9yTGFiZWxCZWZvcmUiLCJlcnJvckxhYmVsQWZ0ZXIiLCJhcmlhQXR0cnMiLCJjb250cm9sUHJvcHMiLCJGb3JtQnV0dG9uIiwiRm9ybUNoZWNrYm94IiwiRm9ybURyb3Bkb3duIiwiRm9ybUdyb3VwIiwiZ3JvdXBlZCIsInVuc3RhY2thYmxlIiwiSW5wdXQiLCJhY3Rpb25Qb3NpdGlvbiIsImljb25Qb3NpdGlvbiIsInRyYW5zcGFyZW50IiwiX3RoaXMkcGFydGl0aW9uUHJvcHMiLCJwYXJ0aXRpb25Qcm9wcyIsIl90aGlzJHBhcnRpdGlvblByb3BzMiIsImhhbmRsZUNoaWxkT3ZlcnJpZGVzIiwiYWN0aW9uRWxlbWVudCIsImNvbXB1dGVJY29uIiwiRm9ybUlucHV0IiwiRm9ybVJhZGlvIiwiRm9ybVNlbGVjdCIsIkZvcm1UZXh0QXJlYSIsIkZvcm0iLCJfYXJncyIsInJlcGx5Iiwic3VjY2VzcyIsIm9uU3VibWl0IiwiaGFuZGxlU3VibWl0IiwiR3JpZENvbHVtbiIsImNvbXB1dGVyIiwibGFyZ2VTY3JlZW4iLCJtb2JpbGUiLCJzdHJldGNoZWQiLCJ0YWJsZXQiLCJ0ZXh0QWxpZ24iLCJ3aWRlc2NyZWVuIiwiR3JpZFJvdyIsImRpdmlkZWQiLCJyZXZlcnNlZCIsIkdyaWQiLCJjZWxsZWQiLCJjb250YWluZXIiLCJkb3VibGluZyIsInBhZGRlZCIsInJlbGF4ZWQiLCJDb2x1bW4iLCJSb3ciLCJNZXNzYWdlQ29udGVudCIsIk1lc3NhZ2VIZWFkZXIiLCJNZXNzYWdlSXRlbSIsIk1lc3NhZ2VMaXN0IiwiTWVzc2FnZSIsIm9uRGlzbWlzcyIsImluZm8iLCJsaXN0IiwiZGlzbWlzc0ljb24iLCJoYW5kbGVEaXNtaXNzIiwiVGFibGVCb2R5IiwiVGFibGVDZWxsIiwiY29sbGFwc2luZyIsInNlbGVjdGFibGUiLCJzaW5nbGVMaW5lIiwiVGFibGVIZWFkZXIiLCJmdWxsV2lkdGgiLCJUYWJsZUZvb3RlciIsIlRhYmxlSGVhZGVyQ2VsbCIsInNvcnRlZCIsIlRhYmxlUm93IiwiY2VsbEFzIiwiY2VsbHMiLCJjZWxsIiwiVGFibGUiLCJkZWZpbml0aW9uIiwiZm9vdGVyUm93IiwiaGVhZGVyUm93IiwiaGVhZGVyUm93cyIsInJlbmRlckJvZHlSb3ciLCJzb3J0YWJsZSIsInN0cmlwZWQiLCJzdHJ1Y3R1cmVkIiwidGFibGVEYXRhIiwiaGVhZGVyU2hvcnRoYW5kT3B0aW9ucyIsImhlYWRlckVsZW1lbnQiLCJCb2R5IiwiQ2VsbCIsIkZvb3RlciIsIkhlYWRlckNlbGwiLCJDb250YWluZXIiLCJjbGVhcmluZyIsIkhlYWRlclN1YmhlYWRlciIsIkhlYWRlckNvbnRlbnQiLCJibG9jayIsImRpdmlkaW5nIiwic3ViaGVhZGVyIiwic3ViaGVhZGVyRWxlbWVudCIsIlN1YmhlYWRlciIsIkxpc3REZXNjcmlwdGlvbiIsIkxpc3RIZWFkZXIiLCJMaXN0Q29udGVudCIsIkxpc3RJY29uIiwiTGlzdEl0ZW0iLCJ2YWx1ZVByb3AiLCJMaXN0TGlzdCIsImJ1bGxldGVkIiwib3JkZXJlZCIsIkxvYWRlciIsIlBsYWNlaG9sZGVySGVhZGVyIiwiUGxhY2Vob2xkZXJJbWFnZSIsInNxdWFyZSIsInJlY3Rhbmd1bGFyIiwiUGxhY2Vob2xkZXJMaW5lIiwiUGxhY2Vob2xkZXJQYXJhZ3JhcGgiLCJQbGFjZWhvbGRlciIsIkxpbmUiLCJQYXJhZ3JhcGgiLCJSYWlsIiwiaW50ZXJuYWwiLCJSZXZlYWxDb250ZW50IiwiUmV2ZWFsIiwiaW5zdGFudCIsIlNlZ21lbnRHcm91cCIsInBpbGVkIiwicmFpc2VkIiwiU2VnbWVudElubGluZSIsIlNlZ21lbnQiLCJ0ZXJ0aWFyeSIsIklubGluZSIsIlN0ZXBEZXNjcmlwdGlvbiIsIlN0ZXBUaXRsZSIsIlN0ZXBDb250ZW50IiwiU3RlcEdyb3VwIiwiU3RlcCIsImNvbXBsZXRlZCIsIkFjY29yZGlvblRpdGxlIiwiaWNvblZhbHVlIiwiQWNjb3JkaW9uQ29udGVudCIsIkFjY29yZGlvblBhbmVsIiwidGl0bGVQcm9wcyIsImhhbmRsZVRpdGxlT3ZlcnJpZGVzIiwiQWNjb3JkaW9uQWNjb3JkaW9uIiwiZXhjbHVzaXZlIiwiY29tcHV0ZU5ld0luZGV4IiwicGFuZWxzIiwicGFuZWwiLCJpc0luZGV4QWN0aXZlIiwib25UaXRsZUNsaWNrIiwiaGFuZGxlVGl0bGVDbGljayIsIkFjY29yZGlvbiIsInN0eWxlZCIsIlBhbmVsIiwiVGl0bGUiLCJFbWJlZCIsIl90aGlzJHByb3BzJGF1dG9wbGF5IiwiYXV0b3BsYXkiLCJfdGhpcyRwcm9wcyRicmFuZGVkVUkiLCJicmFuZGVkVUkiLCJfdGhpcyRwcm9wcyRjb2xvciIsIl90aGlzJHByb3BzJGhkIiwiYXNwZWN0UmF0aW8iLCJpY29uU2hvcnRoYW5kIiwicmVuZGVyRW1iZWQiLCJpZnJhbWUiLCJnZXRTcmMiLCJhbGxvd0Z1bGxTY3JlZW4iLCJmcmFtZUJvcmRlciIsIk1hbmFnZXJSZWZlcmVuY2VOb2RlQ29udGV4dCIsIk1hbmFnZXJSZWZlcmVuY2VOb2RlU2V0dGVyQ29udGV4dCIsInNldFJlZiIsInNhZmVJbnZva2UiLCJpbml0aWFsU3R5bGUiLCJpbml0aWFsQXJyb3dTdHlsZSIsIklubmVyUG9wcGVyIiwicG9wcGVyTm9kZSIsInVwZGF0ZVBvcHBlckluc3RhbmNlIiwiYXJyb3dOb2RlIiwidXBkYXRlU3RhdGVNb2RpZmllciIsInBvcHBlckluc3RhbmNlIiwiZGVzdHJveVBvcHBlckluc3RhbmNlIiwicmVmZXJlbmNlRWxlbWVudCIsImdldE9wdGlvbnMiLCJfcHJvdG8iLCJzZXRQb3BwZXJOb2RlIiwiZ2V0UG9wcGVyU3R5bGUiLCJnZXRQb3BwZXJQbGFjZW1lbnQiLCJvdXRPZkJvdW5kYXJpZXMiLCJnZXRPdXRPZkJvdW5kYXJpZXNTdGF0ZSIsImFycm93UHJvcHMiLCJzZXRBcnJvd05vZGUiLCJnZXRBcnJvd1N0eWxlIiwicG9zaXRpb25zTWFwcGluZyIsInBsYWNlbWVudE1hcHBpbmciLCJSZWZlcmVuY2VQcm94eSIsIlBvcHVwQ29udGVudCIsIlBvcHVwSGVhZGVyIiwiUG9wdXAiLCJob3ZlcmFibGUiLCJub3JtYWxpemVkT24iLCJjbG9zZWQiLCJoaWRlT25TY3JvbGwiLCJwb3NpdGlvblVwZGF0ZSIsInBvcHBlclBsYWNlbWVudCIsInBvcHBlclJlZiIsInBvcHBlclN0eWxlIiwiZmxvd2luZyIsIndpZGUiLCJjb250ZW50UmVzdFByb3BzIiwicG9wcGVyRGVwZW5kZW5jaWVzIiwicGlubmVkIiwicG9wcGVyTW9kaWZpZXJzIiwicG9ydGFsUmVzdFByb3BzIiwibWVyZ2VkUG9ydGFsUHJvcHMiLCJnZXRQb3J0YWxQcm9wcyIsInVuaGFuZGxlZFByb3BzIiwiUHJvZ3Jlc3MiLCJwZXJjZW50IiwidG90YWwiLCJwcm9ncmVzcyIsImNhbGN1bGF0ZVBlcmNlbnQiLCJhdXRvU3VjY2VzcyIsImNvbXB1dGVWYWx1ZVRleHQiLCJpbmRpY2F0aW5nIiwiaXNBdXRvU3VjY2VzcyIsImdldFBlcmNlbnQiLCJyZW5kZXJQcm9ncmVzcyIsIlJhdGluZ0ljb24iLCJvbktleVVwIiwiaGFuZGxlS2V5VXAiLCJoYW5kbGVNb3VzZUVudGVyIiwiUmF0aW5nIiwibWF4UmF0aW5nIiwib25SYXRlIiwicmF0aW5nIiwibmV3UmF0aW5nIiwiaXNTZWxlY3RpbmciLCJoYW5kbGVNb3VzZUxlYXZlIiwiaGFuZGxlSWNvbk1vdXNlRW50ZXIiLCJTZWFyY2hDYXRlZ29yeUxheW91dCIsImNhdGVnb3J5Q29udGVudCIsInJlc3VsdHNDb250ZW50IiwiU2VhcmNoQ2F0ZWdvcnkiLCJsYXlvdXRSZW5kZXJlciIsInJlbmRlcmVyIiwicHJpY2UiLCJTZWFyY2hSZXN1bHQiLCJTZWFyY2hSZXN1bHRzIiwiU2VhcmNoIiwiZ2V0U2VsZWN0ZWRSZXN1bHQiLCJoYW5kbGVSZXN1bHRTZWxlY3QiLCJ0cnlPcGVuIiwiY2F0ZWdvcnkiLCJyZXN1bHRzIiwiY2F0ZWdvcnlEYXRhIiwiZ2V0RmxhdHRlbmVkUmVzdWx0cyIsInNlbGVjdEZpcnN0UmVzdWx0IiwiaGFuZGxlU2VsZWN0aW9uQ2hhbmdlIiwiaGFuZGxlSW5wdXRDbGljayIsIm5vUmVzdWx0c0Rlc2NyaXB0aW9uIiwiX2FycmF5IiwicmVzdWx0UmVuZGVyZXIiLCJvZmZzZXRJbmRleCIsImhhbmRsZUl0ZW1Nb3VzZURvd24iLCJyZW5kZXJSZXN1bHQiLCJjYXRlZ29yeUxheW91dFJlbmRlcmVyIiwiY2F0ZWdvcnlSZW5kZXJlciIsImNhdGVnb3JpZXMiLCJfcmVmMyIsImNhdGVnb3J5UHJvcHMiLCJyZW5kZXJGbiIsInNob3dOb1Jlc3VsdHMiLCJyZW5kZXJOb1Jlc3VsdHMiLCJyZW5kZXJDYXRlZ29yaWVzIiwicmVuZGVyUmVzdWx0cyIsInJlc3VsdHNDbGFzc2VzIiwibWVudUNvbnRlbnQiLCJyZW5kZXJNZW51Q29udGVudCIsInNlYXJjaENsYXNzZXMiLCJhbGlnbmVkIiwicmVuZGVyUmVzdWx0c01lbnUiLCJTaWRlYmFyUHVzaGFibGUiLCJTaWRlYmFyUHVzaGVyIiwiU2lkZWJhciIsImFuaW1hdGlvblRpbWVyIiwiaGFuZGxlQW5pbWF0aW9uRW5kIiwic2tpcE5leHRDYWxsYmFjayIsImFuaW1hdGlvblRpY2siLCJoYW5kbGVBbmltYXRpb25TdGFydCIsInRpY2tJbmNyZW1lbnQiLCJTdGlja3kiLCJzY3JvbGxDb250ZXh0Iiwic2Nyb2xsQ29udGV4dE5vZGUiLCJwdXNoaW5nIiwiYXNzaWduUmVjdHMiLCJkaWRSZWFjaFN0YXJ0aW5nUG9pbnQiLCJzdGlja1RvQ29udGV4dFRvcCIsImRpZFRvdWNoU2NyZWVuQm90dG9tIiwic3RpY2tUb1NjcmVlbkJvdHRvbSIsInN0aWNrVG9Db250ZXh0Qm90dG9tIiwiaXNPdmVyc2l6ZWQiLCJjb250ZXh0UmVjdCIsImRpZFRvdWNoU2NyZWVuVG9wIiwiZGlkUmVhY2hDb250ZXh0Qm90dG9tIiwic3RpY2tUb1NjcmVlblRvcCIsImNvbnRleHROb2RlIiwidHJpZ2dlclJlY3QiLCJzdGlja3lSZWN0Iiwic3RpY2t5UmVmIiwic3RpY2siLCJ1bnN0aWNrIiwiYWRkTGlzdGVuZXJzIiwiY3VycmVudFNjcm9sbENvbnRleHQiLCJuZXh0U2Nyb2xsQ29udGV4dCIsInJlbW92ZUxpc3RlbmVycyIsInN0eWxlRWxlbWVudCIsImVsZW1lbnRDbGFzc2VzIiwidHJpZ2dlclN0eWxlcyIsIlRhYlBhbmUiLCJjYWxjdWxhdGVkRGVmYXVsdFByb3BzIiwicGFuZXMiLCJyZW5kZXJBY3RpdmVPbmx5IiwicGFuZSIsIm1lbnVQb3NpdGlvbiIsIm9uSXRlbUNsaWNrIiwiZ3JpZCIsInBhbmVXaWR0aCIsInRhYldpZHRoIiwiZ3JpZFByb3BzIiwicmVuZGVyVmVydGljYWwiLCJBZHZlcnRpc2VtZW50IiwiQ2FyZERlc2NyaXB0aW9uIiwiQ2FyZEhlYWRlciIsIkNhcmRNZXRhIiwiQ2FyZENvbnRlbnQiLCJleHRyYSIsIkNhcmRHcm91cCIsIml0ZW1zUGVyUm93IiwiaXRlbXNKU1giLCJDYXJkIiwiQ29tbWVudEFjdGlvbiIsIkNvbW1lbnRBY3Rpb25zIiwiQ29tbWVudEF1dGhvciIsIkNvbW1lbnRBdmF0YXIiLCJpbWFnZVByb3BzIiwiQ29tbWVudENvbnRlbnQiLCJDb21tZW50R3JvdXAiLCJjb2xsYXBzZWQiLCJtaW5pbWFsIiwidGhyZWFkZWQiLCJDb21tZW50TWV0YWRhdGEiLCJDb21tZW50VGV4dCIsIkNvbW1lbnQiLCJBdXRob3IiLCJBY3Rpb24iLCJBdmF0YXIiLCJNZXRhZGF0YSIsIlRleHQiLCJGZWVkRGF0ZSIsIkZlZWRFeHRyYSIsImltYWdlcyIsImltYWdlRWxlbWVudHMiLCJGZWVkTGlrZSIsIkZlZWRNZXRhIiwibGlrZSIsIkZlZWRVc2VyIiwiRmVlZFN1bW1hcnkiLCJ1c2VyIiwiRmVlZENvbnRlbnQiLCJleHRyYUltYWdlcyIsImV4dHJhVGV4dCIsInN1bW1hcnkiLCJGZWVkTGFiZWwiLCJGZWVkRXZlbnQiLCJoYXNDb250ZW50UHJvcCIsImNvbnRlbnRQcm9wcyIsIkZlZWQiLCJldmVudHMiLCJldmVudEVsZW1lbnRzIiwiZXZlbnRQcm9wcyIsImV2ZW50RGF0YSIsImZpbmFsS2V5IiwiRXZlbnQiLCJFeHRyYSIsIkxpa2UiLCJTdW1tYXJ5IiwiVXNlciIsIkl0ZW1IZWFkZXIiLCJJdGVtRGVzY3JpcHRpb24iLCJJdGVtRXh0cmEiLCJJdGVtTWV0YSIsIkl0ZW1Db250ZW50IiwiSXRlbUdyb3VwIiwiSXRlbUltYWdlIiwiRGVzY3JpcHRpb24iLCJTdGF0aXN0aWNHcm91cCIsIlN0YXRpc3RpY0xhYmVsIiwiU3RhdGlzdGljVmFsdWUiLCJTdGF0aXN0aWMiLCJWYWx1ZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9E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QUFHLENBQUMsQ0FBQyxPQUFPLE9BQU8sR0FBRyxDQUFDLFNBQVMsU0FBUyxHQUFHLENBQUMsUUFBUSxRQUFRLEdBQUcsQ0FBQyxRQUFRLFFBQVEsR0FBRyxDQUFDLGNBQWMsY0FBYyxHQUFHLENBQUMsT0FBTyxPQUFPLEdBQUcsQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLFdBQVcsV0FBVyxHQUFHLENBQUMsV0FBVyxjQUFjLEdBQUcsQ0FBQyxVQUFVLFVBQzllLEdBQUcsQ0FBQyxZQUFZLFlBQVksR0FBRyxDQUFDLE9BQU8sT0FBTyxHQUFHLENBQUMsUUFBUSxRQUFRLEdBQUcsQ0FBQyxRQUFRLFFBQVEsR0FBRyxDQUFDLFVBQVUsVUFBVSxHQUFHLENBQUMsVUFBVSxVQUFVLEdBQUcsQ0FBQyxXQUFXLFdBQVcsR0FBRyxDQUFDLFFBQVEsUUFBUSxHQUFHLENBQUMsWUFBWSxZQUFZLEdBQUcsQ0FBQyxVQUFVLFVBQVUsR0FBRyxDQUFDLFFBQVEsUUFBUSxHQUFHLENBQUMsUUFBUSxRQUFRLEdBQUcsQ0FBQyxPQUFPLE9BQU8sR0FBRyxDQUFDLGdCQUFnQixnQkFBZ0IsR0FBRyxDQUFDLGNBQWMsY0FBYyxHQUFHLENBQUMsWUFBWSxZQUFZLEdBQUcsQ0FBQyxhQUFhLGFBQWEsR0FBRyxDQUFDLFFBQVEsUUFBUSxHQUFHLENBQUMsU0FBUyxTQUFTLEdBQUcsQ0FBQyxTQUFTLFNBQVMsR0FBRyxDQUFDLGNBQWMsY0FDbGYsR0FBRyxDQUFDLFdBQVcsV0FBVyxHQUFHLENBQUMsYUFBYSxhQUFhLEdBQUcsQ0FBQyxlQUFlLGVBQWUsR0FBRyxDQUFDLE9BQU8sT0FBTyxHQUFHLENBQUMsWUFBWSxZQUFZLEdBQUcsQ0FBQyxXQUFXLFdBQVcsR0FBRyxDQUFDLFlBQVksWUFBWSxHQUFHLENBQUMsV0FBVyxXQUFXLEdBQUcsQ0FBQyxZQUFZLFlBQVksR0FBRyxDQUFDLFdBQVcsV0FBVyxHQUFHLENBQUMsWUFBWSxZQUFZLEdBQUcsQ0FBQyxjQUFjLGNBQWMsR0FBRyxDQUFDLGFBQWEsYUFBYSxHQUFHLENBQUMs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LElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQ3RCLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUMxRSxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDMUUsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUNuQyxJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBRVIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElB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NGdHLEVBQU8sQ0FDL0IzSSxpQkFBaUIsS0FiVixJQUFNbmxELGNBQWNnZ0QsRUFBYSxJQUFTLEdBQUk4RixFQUFNLENBQ3pEZixVQUFXcDJGLElBQ1RrM0YsR0FSRyxJQUFNN2xELGNBQWNnZ0QsRUFBYSxJQUFTLEdBQUk4RixFQUFNLENBQ3pEZixVQUFXcDJGLElBQ1Q0a0IsR0FxQlJveEcsR0FBVXprQyxhQUFlLENBQUMsS0FBTSxXQUFZLFlBQWEsUUFBUyxVQUFXLFVBQVcsYUFBYyxXQUFZLFFBQVMsT0FBUSxPQUFRLFNBQzNJeWtDLEdBQVUxd0YsVUFvQ04sR0FDSjB3RixHQUFVdDJCLE1BQVEsR0FDbEJzMkIsR0FBVW4yQixNQUFRLEdBQ2xCbTJCLEdBQVVDLE1BQVEsR0FDbEJELEdBQVV6M0gsT0FBU2s0RixHQUF1QnUvQixJQUFXLFNBQVU5K0IsR0FDN0QsTUFBTyxDQUNMQSxRQUFTQSxNQUdFLFVDbkdmIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyNjMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJ2YXIgYmFzZUludm9rZSA9IHJlcXVpcmUoJy4vX2Jhc2VJbnZva2UnKSxcbiAgICBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0Jyk7XG5cbi8qKlxuICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gKlxuICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAqIC8vID0+IFsyLCAzXVxuICovXG52YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gaW52b2tlO1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSByZXF1aXJlKFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIik7XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm47IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHM7IiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4vZGVmaW5lUHJvcGVydHlcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gT2JqZWN0KGFyZ3VtZW50c1tpXSkgOiB7fTtcbiAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RTcHJlYWQ7IiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbnVsbGlzaCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTmlsKG51bGwpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOaWwodm9pZCAwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTmlsKE5hTik7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc05pbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05pbDtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZU1hcCA9IHJlcXVpcmUoJy4vX2Jhc2VNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gKlxuICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICogICByZXR1cm4gbiAqIG47XG4gKiB9XG4gKlxuICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF1cbiAqXG4gKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICogXTtcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gKi9cbmZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcDtcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgaXNPYmplY3QgPSBmdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWwpICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnXG59XG5cbnZhciBjb2RlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBCeSBDb2RlXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgMzogJ0NhbmNlbCcsXG4gIDY6ICdIZWxwJyxcbiAgODogJ0JhY2tzcGFjZScsXG4gIDk6ICdUYWInLFxuICAxMjogJ0NsZWFyJyxcbiAgMTM6ICdFbnRlcicsXG4gIDE2OiAnU2hpZnQnLFxuICAxNzogJ0NvbnRyb2wnLFxuICAxODogJ0FsdCcsXG4gIDE5OiAnUGF1c2UnLFxuICAyMDogJ0NhcHNMb2NrJyxcbiAgMjc6ICdFc2NhcGUnLFxuICAyODogJ0NvbnZlcnQnLFxuICAyOTogJ05vbkNvbnZlcnQnLFxuICAzMDogJ0FjY2VwdCcsXG4gIDMxOiAnTW9kZUNoYW5nZScsXG4gIDMyOiAnICcsXG4gIDMzOiAnUGFnZVVwJyxcbiAgMzQ6ICdQYWdlRG93bicsXG4gIDM1OiAnRW5kJyxcbiAgMzY6ICdIb21lJyxcbiAgMzc6ICdBcnJvd0xlZnQnLFxuICAzODogJ0Fycm93VXAnLFxuICAzOTogJ0Fycm93UmlnaHQnLFxuICA0MDogJ0Fycm93RG93bicsXG4gIDQxOiAnU2VsZWN0JyxcbiAgNDI6ICdQcmludCcsXG4gIDQzOiAnRXhlY3V0ZScsXG4gIDQ0OiAnUHJpbnRTY3JlZW4nLFxuICA0NTogJ0luc2VydCcsXG4gIDQ2OiAnRGVsZXRlJyxcbiAgNDg6IFsnMCcsICcpJ10sXG4gIDQ5OiBbJzEnLCAnISddLFxuICA1MDogWycyJywgJ0AnXSxcbiAgNTE6IFsnMycsICcjJ10sXG4gIDUyOiBbJzQnLCAnJCddLFxuICA1MzogWyc1JywgJyUnXSxcbiAgNTQ6IFsnNicsICdeJ10sXG4gIDU1OiBbJzcnLCAnJiddLFxuICA1NjogWyc4JywgJyonXSxcbiAgNTc6IFsnOScsICcoJ10sXG4gIDkxOiAnT1MnLFxuICA5MzogJ0NvbnRleHRNZW51JyxcbiAgMTQ0OiAnTnVtTG9jaycsXG4gIDE0NTogJ1Njcm9sbExvY2snLFxuICAxODE6ICdWb2x1bWVNdXRlJyxcbiAgMTgyOiAnVm9sdW1lRG93bicsXG4gIDE4MzogJ1ZvbHVtZVVwJyxcbiAgMTg2OiBbJzsnLCAnOiddLFxuICAxODc6IFsnPScsICcrJ10sXG4gIDE4ODogWycsJywgJzwnXSxcbiAgMTg5OiBbJy0nLCAnXyddLFxuICAxOTA6IFsnLicsICc+J10sXG4gIDE5MTogWycvJywgJz8nXSxcbiAgMTkyOiBbJ2AnLCAnfiddLFxuICAyMTk6IFsnWycsICd7J10sXG4gIDIyMDogWydcXFxcJywgJ3wnXSxcbiAgMjIxOiBbJ10nLCAnfSddLFxuICAyMjI6IFtcIidcIiwgJ1wiJ10sXG4gIDIyNDogJ01ldGEnLFxuICAyMjU6ICdBbHRHcmFwaCcsXG4gIDI0NjogJ0F0dG4nLFxuICAyNDc6ICdDclNlbCcsXG4gIDI0ODogJ0V4U2VsJyxcbiAgMjQ5OiAnRXJhc2VFb2YnLFxuICAyNTA6ICdQbGF5JyxcbiAgMjUxOiAnWm9vbU91dCcsXG59XG5cbi8vIEZ1bmN0aW9uIEtleXMgKEYxLTI0KVxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNDsgaSArPSAxKSB7XG4gIGNvZGVzWzExMiArIGldID0gJ0YnICsgKGkgKyAxKVxufVxuXG4vLyBBbHBoYWJldCAoYS1aKVxuZm9yICh2YXIgaiA9IDA7IGogPCAyNjsgaiArPSAxKSB7XG4gIHZhciBuID0gaiArIDY1XG4gIGNvZGVzW25dID0gW1N0cmluZy5mcm9tQ2hhckNvZGUobiArIDMyKSwgU3RyaW5nLmZyb21DaGFyQ29kZShuKV1cbn1cblxudmFyIGtleWJvYXJkS2V5ID0ge1xuICBjb2RlczogY29kZXMsXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgYGtleUNvZGVgIG9yIGB3aGljaGAgdmFsdWUgZnJvbSBhIGtleWJvYXJkIGV2ZW50IG9yIGBrZXlgIG5hbWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gZXZlbnRPcktleSBBIGtleWJvYXJkIGV2ZW50LWxpa2Ugb2JqZWN0IG9yIGBrZXlgIG5hbWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZXZlbnRPcktleS5rZXldIElmIG9iamVjdCwgaXQgbXVzdCBoYXZlIG9uZSBvZiB0aGVzZSBrZXlzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2V2ZW50T3JLZXkua2V5Q29kZV0gSWYgb2JqZWN0LCBpdCBtdXN0IGhhdmUgb25lIG9mIHRoZXNlIGtleXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZXZlbnRPcktleS53aGljaF0gSWYgb2JqZWN0LCBpdCBtdXN0IGhhdmUgb25lIG9mIHRoZXNlIGtleXMuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ8dW5kZWZpbmVkfVxuICAgKi9cbiAgZ2V0Q29kZTogZnVuY3Rpb24gZ2V0Q29kZShldmVudE9yS2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGV2ZW50T3JLZXkpKSB7XG4gICAgICByZXR1cm4gZXZlbnRPcktleS5rZXlDb2RlIHx8IGV2ZW50T3JLZXkud2hpY2ggfHwgdGhpc1tldmVudE9yS2V5LmtleV1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXNbZXZlbnRPcktleV1cbiAgfSxcblxuICAvKipcbiAgICogR2V0IHRoZSBrZXkgbmFtZSBmcm9tIGEga2V5Ym9hcmQgZXZlbnQsIGBrZXlDb2RlYCwgb3IgYHdoaWNoYCB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ8b2JqZWN0fSBldmVudE9yQ29kZSBBIGtleWJvYXJkIGV2ZW50LWxpa2Ugb2JqZWN0IG9yIGtleSBjb2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2V2ZW50T3JDb2RlLmtleV0gSWYgb2JqZWN0IHdpdGggYSBga2V5YCBuYW1lLCBpdCB3aWxsIGJlIHJldHVybmVkLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2V2ZW50T3JDb2RlLmtleUNvZGVdIElmIG9iamVjdCwgaXQgbXVzdCBoYXZlIG9uZSBvZiB0aGVzZSBrZXlzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2V2ZW50T3JDb2RlLndoaWNoXSBJZiBvYmplY3QsIGl0IG11c3QgaGF2ZSBvbmUgb2YgdGhlc2Uga2V5cy5cbiAgICogQHBhcmFtIHtib29sZWFufSBbZXZlbnRPckNvZGUuc2hpZnRLZXldIElmIG9iamVjdCwgaXQgbXVzdCBoYXZlIG9uZSBvZiB0aGVzZSBrZXlzLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH1cbiAgICovXG4gIGdldEtleTogZnVuY3Rpb24gZ2V0S2V5KGV2ZW50T3JDb2RlKSB7XG4gICAgdmFyIGlzRXZlbnQgPSBpc09iamVjdChldmVudE9yQ29kZSlcblxuICAgIC8vIGhhbmRsZSBldmVudHMgd2l0aCBhIGBrZXlgIGFscmVhZHkgZGVmaW5lZFxuICAgIGlmIChpc0V2ZW50ICYmIGV2ZW50T3JDb2RlLmtleSkge1xuICAgICAgcmV0dXJuIGV2ZW50T3JDb2RlLmtleVxuICAgIH1cblxuICAgIHZhciBuYW1lID0gY29kZXNbaXNFdmVudCA/IGV2ZW50T3JDb2RlLmtleUNvZGUgfHwgZXZlbnRPckNvZGUud2hpY2ggOiBldmVudE9yQ29kZV1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KG5hbWUpKSB7XG4gICAgICBpZiAoaXNFdmVudCkge1xuICAgICAgICBuYW1lID0gbmFtZVtldmVudE9yQ29kZS5zaGlmdEtleSA/IDEgOiAwXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmFtZSA9IG5hbWVbMF1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZVxuICB9LFxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQnkgTmFtZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIGRlY2xhcmUgdGhlc2UgbWFudWFsbHkgZm9yIHN0YXRpYyBhbmFseXNpc1xuICBDYW5jZWw6IDMsXG4gIEhlbHA6IDYsXG4gIEJhY2tzcGFjZTogOCxcbiAgVGFiOiA5LFxuICBDbGVhcjogMTIsXG4gIEVudGVyOiAxMyxcbiAgU2hpZnQ6IDE2LFxuICBDb250cm9sOiAxNyxcbiAgQWx0OiAxOCxcbiAgUGF1c2U6IDE5LFxuICBDYXBzTG9jazogMjAsXG4gIEVzY2FwZTogMjcsXG4gIENvbnZlcnQ6IDI4LFxuICBOb25Db252ZXJ0OiAyOSxcbiAgQWNjZXB0OiAzMCxcbiAgTW9kZUNoYW5nZTogMzEsXG4gICcgJzogMzIsXG4gIFBhZ2VVcDogMzMsXG4gIFBhZ2VEb3duOiAzNCxcbiAgRW5kOiAzNSxcbiAgSG9tZTogMzYsXG4gIEFycm93TGVmdDogMzcsXG4gIEFycm93VXA6IDM4LFxuICBBcnJvd1JpZ2h0OiAzOSxcbiAgQXJyb3dEb3duOiA0MCxcbiAgU2VsZWN0OiA0MSxcbiAgUHJpbnQ6IDQyLFxuICBFeGVjdXRlOiA0MyxcbiAgUHJpbnRTY3JlZW46IDQ0LFxuICBJbnNlcnQ6IDQ1LFxuICBEZWxldGU6IDQ2LFxuICAwOiA0OCxcbiAgJyknOiA0OCxcbiAgMTogNDksXG4gICchJzogNDksXG4gIDI6IDUwLFxuICAnQCc6IDUwLFxuICAzOiA1MSxcbiAgJyMnOiA1MSxcbiAgNDogNTIsXG4gICQ6IDUyLFxuICA1OiA1MyxcbiAgJyUnOiA1MyxcbiAgNjogNTQsXG4gICdeJzogNTQsXG4gIDc6IDU1LFxuICAnJic6IDU1LFxuICA4OiA1NixcbiAgJyonOiA1NixcbiAgOTogNTcsXG4gICcoJzogNTcsXG4gIGE6IDY1LFxuICBBOiA2NSxcbiAgYjogNjYsXG4gIEI6IDY2LFxuICBjOiA2NyxcbiAgQzogNjcsXG4gIGQ6IDY4LFxuICBEOiA2OCxcbiAgZTogNjksXG4gIEU6IDY5LFxuICBmOiA3MCxcbiAgRjogNzAsXG4gIGc6IDcxLFxuICBHOiA3MSxcbiAgaDogNzIsXG4gIEg6IDcyLFxuICBpOiA3MyxcbiAgSTogNzMsXG4gIGo6IDc0LFxuICBKOiA3NCxcbiAgazogNzUsXG4gIEs6IDc1LFxuICBsOiA3NixcbiAgTDogNzYsXG4gIG06IDc3LFxuICBNOiA3NyxcbiAgbjogNzgsXG4gIE46IDc4LFxuICBvOiA3OSxcbiAgTzogNzksXG4gIHA6IDgwLFxuICBQOiA4MCxcbiAgcTogODEsXG4gIFE6IDgxLFxuICByOiA4MixcbiAgUjogODIsXG4gIHM6IDgzLFxuICBTOiA4MyxcbiAgdDogODQsXG4gIFQ6IDg0LFxuICB1OiA4NSxcbiAgVTogODUsXG4gIHY6IDg2LFxuICBWOiA4NixcbiAgdzogODcsXG4gIFc6IDg3LFxuICB4OiA4OCxcbiAgWDogODgsXG4gIHk6IDg5LFxuICBZOiA4OSxcbiAgejogOTAsXG4gIFo6IDkwLFxuICBPUzogOTEsXG4gIENvbnRleHRNZW51OiA5MyxcbiAgRjE6IDExMixcbiAgRjI6IDExMyxcbiAgRjM6IDExNCxcbiAgRjQ6IDExNSxcbiAgRjU6IDExNixcbiAgRjY6IDExNyxcbiAgRjc6IDExOCxcbiAgRjg6IDExOSxcbiAgRjk6IDEyMCxcbiAgRjEwOiAxMjEsXG4gIEYxMTogMTIyLFxuICBGMTI6IDEyMyxcbiAgRjEzOiAxMjQsXG4gIEYxNDogMTI1LFxuICBGMTU6IDEyNixcbiAgRjE2OiAxMjcsXG4gIEYxNzogMTI4LFxuICBGMTg6IDEyOSxcbiAgRjE5OiAxMzAsXG4gIEYyMDogMTMxLFxuICBGMjE6IDEzMixcbiAgRjIyOiAxMzMsXG4gIEYyMzogMTM0LFxuICBGMjQ6IDEzNSxcbiAgTnVtTG9jazogMTQ0LFxuICBTY3JvbGxMb2NrOiAxNDUsXG4gIFZvbHVtZU11dGU6IDE4MSxcbiAgVm9sdW1lRG93bjogMTgyLFxuICBWb2x1bWVVcDogMTgzLFxuICAnOyc6IDE4NixcbiAgJzonOiAxODYsXG4gICc9JzogMTg3LFxuICAnKyc6IDE4NyxcbiAgJywnOiAxODgsXG4gICc8JzogMTg4LFxuICAnLSc6IDE4OSxcbiAgXzogMTg5LFxuICAnLic6IDE5MCxcbiAgJz4nOiAxOTAsXG4gICcvJzogMTkxLFxuICAnPyc6IDE5MSxcbiAgJ2AnOiAxOTIsXG4gICd+JzogMTkyLFxuICAnWyc6IDIxOSxcbiAgJ3snOiAyMTksXG4gICdcXFxcJzogMjIwLFxuICAnfCc6IDIyMCxcbiAgJ10nOiAyMjEsXG4gICd9JzogMjIxLFxuICBcIidcIjogMjIyLFxuICAnXCInOiAyMjIsXG4gIE1ldGE6IDIyNCxcbiAgQWx0R3JhcGg6IDIyNSxcbiAgQXR0bjogMjQ2LFxuICBDclNlbDogMjQ3LFxuICBFeFNlbDogMjQ4LFxuICBFcmFzZUVvZjogMjQ5LFxuICBQbGF5OiAyNTAsXG4gIFpvb21PdXQ6IDI1MSxcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQnkgQWxpYXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIHByb3ZpZGUgZG90LW5vdGF0aW9uIGFjY2Vzc2libGUga2V5cyBmb3IgYWxsIGtleSBuYW1lc1xua2V5Ym9hcmRLZXkuU3BhY2ViYXIgPSBrZXlib2FyZEtleVsnICddXG5rZXlib2FyZEtleS5EaWdpdDAgPSBrZXlib2FyZEtleVsnMCddXG5rZXlib2FyZEtleS5EaWdpdDEgPSBrZXlib2FyZEtleVsnMSddXG5rZXlib2FyZEtleS5EaWdpdDIgPSBrZXlib2FyZEtleVsnMiddXG5rZXlib2FyZEtleS5EaWdpdDMgPSBrZXlib2FyZEtleVsnMyddXG5rZXlib2FyZEtleS5EaWdpdDQgPSBrZXlib2FyZEtleVsnNCddXG5rZXlib2FyZEtleS5EaWdpdDUgPSBrZXlib2FyZEtleVsnNSddXG5rZXlib2FyZEtleS5EaWdpdDYgPSBrZXlib2FyZEtleVsnNiddXG5rZXlib2FyZEtleS5EaWdpdDcgPSBrZXlib2FyZEtleVsnNyddXG5rZXlib2FyZEtleS5EaWdpdDggPSBrZXlib2FyZEtleVsnOCddXG5rZXlib2FyZEtleS5EaWdpdDkgPSBrZXlib2FyZEtleVsnOSddXG5rZXlib2FyZEtleS5UaWxkZSA9IGtleWJvYXJkS2V5Wyd+J11cbmtleWJvYXJkS2V5LkdyYXZlQWNjZW50ID0ga2V5Ym9hcmRLZXlbJ2AnXVxua2V5Ym9hcmRLZXkuRXhjbGFtYXRpb25Qb2ludCA9IGtleWJvYXJkS2V5WychJ11cbmtleWJvYXJkS2V5LkF0U2lnbiA9IGtleWJvYXJkS2V5WydAJ11cbmtleWJvYXJkS2V5LlBvdW5kU2lnbiA9IGtleWJvYXJkS2V5WycjJ11cbmtleWJvYXJkS2V5LlBlcmNlbnRTaWduID0ga2V5Ym9hcmRLZXlbJyUnXVxua2V5Ym9hcmRLZXkuQ2FyZXQgPSBrZXlib2FyZEtleVsnXiddXG5rZXlib2FyZEtleS5BbXBlcnNhbmQgPSBrZXlib2FyZEtleVsnJiddXG5rZXlib2FyZEtleS5QbHVzU2lnbiA9IGtleWJvYXJkS2V5WycrJ11cbmtleWJvYXJkS2V5Lk1pbnVzU2lnbiA9IGtleWJvYXJkS2V5WyctJ11cbmtleWJvYXJkS2V5LkVxdWFsc1NpZ24gPSBrZXlib2FyZEtleVsnPSddXG5rZXlib2FyZEtleS5EaXZpc2lvblNpZ24gPSBrZXlib2FyZEtleVsnLyddXG5rZXlib2FyZEtleS5NdWx0aXBsaWNhdGlvblNpZ24gPSBrZXlib2FyZEtleVsnKiddXG5rZXlib2FyZEtleS5Db21tYSA9IGtleWJvYXJkS2V5WycsJ11cbmtleWJvYXJkS2V5LkRlY2ltYWwgPSBrZXlib2FyZEtleVsnLiddXG5rZXlib2FyZEtleS5Db2xvbiA9IGtleWJvYXJkS2V5Wyc6J11cbmtleWJvYXJkS2V5LlNlbWljb2xvbiA9IGtleWJvYXJkS2V5Wyc7J11cbmtleWJvYXJkS2V5LlBpcGUgPSBrZXlib2FyZEtleVsnfCddXG5rZXlib2FyZEtleS5CYWNrU2xhc2ggPSBrZXlib2FyZEtleVsnXFxcXCddXG5rZXlib2FyZEtleS5RdWVzdGlvbk1hcmsgPSBrZXlib2FyZEtleVsnPyddXG5rZXlib2FyZEtleS5TaW5nbGVRdW90ZSA9IGtleWJvYXJkS2V5W1wiJ1wiXVxua2V5Ym9hcmRLZXkuRG91YmxlUXVvdGUgPSBrZXlib2FyZEtleVsnXCInXVxua2V5Ym9hcmRLZXkuTGVmdEN1cmx5QnJhY2UgPSBrZXlib2FyZEtleVsneyddXG5rZXlib2FyZEtleS5SaWdodEN1cmx5QnJhY2UgPSBrZXlib2FyZEtleVsnfSddXG5rZXlib2FyZEtleS5MZWZ0UGFyZW50aGVzaXMgPSBrZXlib2FyZEtleVsnKCddXG5rZXlib2FyZEtleS5SaWdodFBhcmVudGhlc2lzID0ga2V5Ym9hcmRLZXlbJyknXVxua2V5Ym9hcmRLZXkuTGVmdEFuZ2xlQnJhY2tldCA9IGtleWJvYXJkS2V5Wyc8J11cbmtleWJvYXJkS2V5LlJpZ2h0QW5nbGVCcmFja2V0ID0ga2V5Ym9hcmRLZXlbJz4nXVxua2V5Ym9hcmRLZXkuTGVmdFNxdWFyZUJyYWNrZXQgPSBrZXlib2FyZEtleVsnWyddXG5rZXlib2FyZEtleS5SaWdodFNxdWFyZUJyYWNrZXQgPSBrZXlib2FyZEtleVsnXSddXG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Ym9hcmRLZXlcbiIsInZhciBiYXNlRGlmZmVyZW5jZSA9IHJlcXVpcmUoJy4vX2Jhc2VEaWZmZXJlbmNlJyksXG4gICAgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGlzQXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZU9iamVjdCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy54b3JcbiAqIEBleGFtcGxlXG4gKlxuICogXy53aXRob3V0KFsyLCAxLCAyLCAzXSwgMSwgMik7XG4gKiAvLyA9PiBbM11cbiAqL1xudmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgOiBbXTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHdpdGhvdXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXQ7XG4iLCJ2YXIgYmFzZUluZGV4T2YgPSByZXF1aXJlKCcuL19iYXNlSW5kZXhPZicpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzU3RyaW5nID0gcmVxdWlyZSgnLi9pc1N0cmluZycpLFxuICAgIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vdG9JbnRlZ2VyJyksXG4gICAgdmFsdWVzID0gcmVxdWlyZSgnLi92YWx1ZXMnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gKiBjaGVja2VkIGZvciBhIHN1YnN0cmluZyBvZiBgdmFsdWVgLCBvdGhlcndpc2VcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICogdGhlIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGNvbGxlY3Rpb25gLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgZnJvbUluZGV4ID0gKGZyb21JbmRleCAmJiAhZ3VhcmQpID8gdG9JbnRlZ2VyKGZyb21JbmRleCkgOiAwO1xuXG4gIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICBmcm9tSW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgZnJvbUluZGV4LCAwKTtcbiAgfVxuICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICA/IChmcm9tSW5kZXggPD0gbGVuZ3RoICYmIGNvbGxlY3Rpb24uaW5kZXhPZih2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKVxuICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluY2x1ZGVzO1xuIiwidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciBub25JdGVyYWJsZVNwcmVhZCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlU3ByZWFkXCIpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5OyIsIlxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RhY2s7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0YWNrID0gcmVxdWlyZSgnLi9janMvZXZlbnQtc3RhY2sucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgc3RhY2sgPSByZXF1aXJlKCcuL2Nqcy9ldmVudC1zdGFjay5kZXZlbG9wbWVudC5qcycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cy5pbnN0YW5jZSA9IHN0YWNrLmluc3RhbmNlO1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzO1xuIiwidmFyIGFycmF5V2l0aEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRoSG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXlMaW1pdCA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0XCIpO1xuXG52YXIgbm9uSXRlcmFibGVSZXN0ID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVSZXN0XCIpO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2xpY2VkVG9BcnJheTsiLCJ2YXIgYXJyYXlFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXlFYWNoJyksXG4gICAgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpLFxuICAgIGNhc3RGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2Nhc3RGdW5jdGlvbicpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICogb3IgYF8uZm9yT3duYCBmb3Igb2JqZWN0IGl0ZXJhdGlvbi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAYWxpYXMgZWFjaFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gKlxuICogXy5mb3JFYWNoKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICogICBjb25zb2xlLmxvZyhrZXkpO1xuICogfSk7XG4gKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2ggOiBiYXNlRWFjaDtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgY2FzdEZ1bmN0aW9uKGl0ZXJhdGVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9yRWFjaDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1VuZGVmaW5lZCh2b2lkIDApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNVbmRlZmluZWQobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1VuZGVmaW5lZDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGVxdWFsIHRvIG1lcmdlIHdpdGggdGhlIGRpZmZlcmVuY2UgYmVpbmcgdGhhdCBubyByZWZlcmVuY2VcbiAqIHRvIG9yaWdpbmFsIG9iamVjdHMgaXMga2VwdC5cbiAqXG4gKiBAc2VlIG1lcmdlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBkZWVwTWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZGVlcE1lcmdlOiBkZWVwTWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCLCBjb21wYXJlLCBjb21wYXJlQ29udGV4dCkge1xuICB2YXIgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgb2JqQSwgb2JqQikgOiB2b2lkIDA7XG5cbiAgaWYgKHJldCAhPT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuICEhcmV0O1xuICB9XG5cbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQSB8fCB0eXBlb2Ygb2JqQiAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYkhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKG9iakIpO1xuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGtleXNBLmxlbmd0aDsgaWR4KyspIHtcbiAgICB2YXIga2V5ID0ga2V5c0FbaWR4XTtcblxuICAgIGlmICghYkhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVBID0gb2JqQVtrZXldO1xuICAgIHZhciB2YWx1ZUIgPSBvYmpCW2tleV07XG5cbiAgICByZXQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCB2YWx1ZUEsIHZhbHVlQiwga2V5KSA6IHZvaWQgMDtcblxuICAgIGlmIChyZXQgPT09IGZhbHNlIHx8IChyZXQgPT09IHZvaWQgMCAmJiB2YWx1ZUEgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgYmFzZU1hdGNoZXMgPSByZXF1aXJlKCcuL19iYXNlTWF0Y2hlcycpLFxuICAgIGJhc2VNYXRjaGVzUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlTWF0Y2hlc1Byb3BlcnR5JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIHByb3BlcnR5ID0gcmVxdWlyZSgnLi9wcm9wZXJ0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICovXG5mdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5O1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJdGVyYXRlZTtcbiIsInZhciBiYXNlSGFzID0gcmVxdWlyZSgnLi9fYmFzZUhhcycpLFxuICAgIGhhc1BhdGggPSByZXF1aXJlKCcuL19oYXNQYXRoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICpcbiAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzKG90aGVyLCAnYScpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhcztcbiIsInZhciBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAqXG4gKiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBubyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWRcbiAqIHByb3BlcnRpZXMuXG4gKlxuICogQXJyYXktbGlrZSB2YWx1ZXMgc3VjaCBhcyBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIGJ1ZmZlcnMsIHN0cmluZ3MsIG9yXG4gKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRW1wdHkobnVsbCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0VtcHR5KHRydWUpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFbXB0eSgxKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgIGlzQnVmZmVyKHZhbHVlKSB8fCBpc1R5cGVkQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgfVxuICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKTtcbiAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgfVxuICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICB9XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRW1wdHk7XG4iLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiIsIi8qKlxuICogVGhlIGRlZmF1bHQgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIG1ldGhvZHMuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwidmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgPSByZXF1aXJlKFwiLi9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpO1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzOyIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlNYXA7XG4iLCJ2YXIgdG9GaW5pdGUgPSByZXF1aXJlKCcuL3RvRmluaXRlJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9JbnRlZ2VyKDMuMik7XG4gKiAvLyA9PiAzXG4gKlxuICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiAwXG4gKlxuICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAqXG4gKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gKiAvLyA9PiAzXG4gKi9cbmZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9JbnRlZ2VyO1xuIiwidmFyIERhdGFWaWV3ID0gcmVxdWlyZSgnLi9fRGF0YVZpZXcnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBQcm9taXNlID0gcmVxdWlyZSgnLi9fUHJvbWlzZScpLFxuICAgIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyksXG4gICAgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuIiwidmFyIGJhc2VDb252ZXJ0ID0gcmVxdWlyZSgnLi9fYmFzZUNvbnZlcnQnKSxcbiAgICB1dGlsID0gcmVxdWlyZSgnLi9fdXRpbCcpO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCBvZiBgbmFtZWAgdG8gYW4gaW1tdXRhYmxlIGF1dG8tY3VycmllZCBpdGVyYXRlZS1maXJzdCBkYXRhLWxhc3RcbiAqIHZlcnNpb24gd2l0aCBjb252ZXJzaW9uIGBvcHRpb25zYCBhcHBsaWVkLiBJZiBgbmFtZWAgaXMgYW4gb2JqZWN0IGl0cyBtZXRob2RzXG4gKiB3aWxsIGJlIGNvbnZlcnRlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmdW5jXSBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gVGhlIG9wdGlvbnMgb2JqZWN0LiBTZWUgYGJhc2VDb252ZXJ0YCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIGZ1bmN0aW9uIG9yIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY29udmVydChuYW1lLCBmdW5jLCBvcHRpb25zKSB7XG4gIHJldHVybiBiYXNlQ29udmVydCh1dGlsLCBuYW1lLCBmdW5jLCBvcHRpb25zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0O1xuIiwidmFyIGFycmF5UmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXlSZWR1Y2UnKSxcbiAgICBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZVJlZHVjZSA9IHJlcXVpcmUoJy4vX2Jhc2VSZWR1Y2UnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogUmVkdWNlcyBgY29sbGVjdGlvbmAgdG8gYSB2YWx1ZSB3aGljaCBpcyB0aGUgYWNjdW11bGF0ZWQgcmVzdWx0IG9mIHJ1bm5pbmdcbiAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAqIGlzIG5vdCBnaXZlbiwgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIGlzIHVzZWQgYXMgdGhlIGluaXRpYWxcbiAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gKlxuICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAqIGFuZCBgc29ydEJ5YFxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICogICByZXR1cm4gc3VtICsgbjtcbiAqIH0sIDApO1xuICogLy8gPT4gM1xuICpcbiAqIF8ucmVkdWNlKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAqICAgcmV0dXJuIHJlc3VsdDtcbiAqIH0sIHt9KTtcbiAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24gcmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVkdWNlO1xuIiwidmFyIGFycmF5U29tZSA9IHJlcXVpcmUoJy4vX2FycmF5U29tZScpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VTb21lID0gcmVxdWlyZSgnLi9fYmFzZVNvbWUnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbnkqKiBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYC5cbiAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uc29tZShbbnVsbCwgMCwgJ3llcycsIGZhbHNlXSwgQm9vbGVhbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAqIF07XG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uc29tZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNvbWUgOiBiYXNlU29tZTtcbiAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzb21lO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcbiIsInZhciBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBvdmVyUmVzdCA9IHJlcXVpcmUoJy4vX292ZXJSZXN0JyksXG4gICAgc2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19zZXRUb1N0cmluZycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUmVzdDtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG4iLCJ2YXIgYmFzZUZvck93biA9IHJlcXVpcmUoJy4vX2Jhc2VGb3JPd24nKSxcbiAgICBjcmVhdGVCYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VFYWNoJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gKi9cbnZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VFYWNoO1xuIiwidmFyIGJhc2VWYWx1ZXMgPSByZXF1aXJlKCcuL19iYXNlVmFsdWVzJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8udmFsdWVzKG5ldyBGb28pO1xuICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy52YWx1ZXMoJ2hpJyk7XG4gKiAvLyA9PiBbJ2gnLCAnaSddXG4gKi9cbmZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2YWx1ZXM7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIGJhc2VGaWx0ZXIgPSByZXF1aXJlKCcuL19iYXNlRmlsdGVyJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICogQHNlZSBfLnJlamVjdFxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAqIF07XG4gKlxuICogXy5maWx0ZXIodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmlsdGVyKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnKTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAqL1xuZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaWx0ZXI7XG4iLCJ2YXIgYmFzZVVuaXEgPSByZXF1aXJlKCcuL19iYXNlVW5pcScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5LCB1c2luZ1xuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAqIGlzIGtlcHQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXJcbiAqIGluIHRoZSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udW5pcShbMiwgMSwgMl0pO1xuICogLy8gPT4gWzIsIDFdXG4gKi9cbmZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXkpIDogW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pcTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5QXJyYXk7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQbGFpbk9iamVjdDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBiYXNlUGljayA9IHJlcXVpcmUoJy4vX2Jhc2VQaWNrJyksXG4gICAgZmxhdFJlc3QgPSByZXF1aXJlKCcuL19mbGF0UmVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICpcbiAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gKi9cbnZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGljaztcbiIsInZhciBiYXNlRGlmZmVyZW5jZSA9IHJlcXVpcmUoJy4vX2Jhc2VEaWZmZXJlbmNlJyksXG4gICAgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpLFxuICAgIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBpc0FycmF5TGlrZU9iamVjdCA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2VPYmplY3QnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICpcbiAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAqIEBzZWUgXy53aXRob3V0LCBfLnhvclxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRpZmZlcmVuY2UoWzIsIDFdLCBbMiwgM10pO1xuICogLy8gPT4gWzFdXG4gKi9cbnZhciBkaWZmZXJlbmNlID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgOiBbXTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpZmZlcmVuY2U7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBzdHJpbmdUb1BhdGggPSByZXF1aXJlKCcuL19zdHJpbmdUb1BhdGgnKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0UGF0aDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19kZWZpbmVQcm9wZXJ0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gKiB2YWx1ZSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ25WYWx1ZTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJdGVyYXRlZUNhbGw7XG4iLCJ2YXIgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlT2JqZWN0O1xuIiwidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKTtcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weU9iamVjdDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N0cmluZygnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N0cmluZygxKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N0cmluZztcbiIsInZhciBiYXNlSW5SYW5nZSA9IHJlcXVpcmUoJy4vX2Jhc2VJblJhbmdlJyksXG4gICAgdG9GaW5pdGUgPSByZXF1aXJlKCcuL3RvRmluaXRlJyksXG4gICAgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gKiBJZiBgc3RhcnRgIGlzIGdyZWF0ZXIgdGhhbiBgZW5kYCB0aGUgcGFyYW1zIGFyZSBzd2FwcGVkIHRvIHN1cHBvcnRcbiAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMy4wXG4gKiBAY2F0ZWdvcnkgTnVtYmVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaW5SYW5nZSg0LCA4KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmluUmFuZ2UoNCwgMik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaW5SYW5nZSgyLCAyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pblJhbmdlKDEuMiwgMik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pblJhbmdlKDUuMiwgNCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHN0YXJ0O1xuICAgIHN0YXJ0ID0gMDtcbiAgfSBlbHNlIHtcbiAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICB9XG4gIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluUmFuZ2U7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuIiwiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5O1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldDtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0ZsYXR0ZW5hYmxlID0gcmVxdWlyZSgnLi9faXNGbGF0dGVuYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRmxhdHRlbjtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvTnVtYmVyO1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsInZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXMnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpLFxuICAgIHNldENhY2hlQWRkID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVBZGQnKSxcbiAgICBzZXRDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX3NldENhY2hlSGFzJyk7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxubW9kdWxlLmV4cG9ydHMgPSBTZXRDYWNoZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSGFzO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb0FycmF5O1xuIiwidmFyIGJhc2VJbmRleE9mID0gcmVxdWlyZSgnLi9fYmFzZUluZGV4T2YnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUluY2x1ZGVzO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RWFjaDtcbiIsInZhciBiYXNlU2V0RGF0YSA9IHJlcXVpcmUoJy4vX2Jhc2VTZXREYXRhJyksXG4gICAgY3JlYXRlQmluZCA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJpbmQnKSxcbiAgICBjcmVhdGVDdXJyeSA9IHJlcXVpcmUoJy4vX2NyZWF0ZUN1cnJ5JyksXG4gICAgY3JlYXRlSHlicmlkID0gcmVxdWlyZSgnLi9fY3JlYXRlSHlicmlkJyksXG4gICAgY3JlYXRlUGFydGlhbCA9IHJlcXVpcmUoJy4vX2NyZWF0ZVBhcnRpYWwnKSxcbiAgICBnZXREYXRhID0gcmVxdWlyZSgnLi9fZ2V0RGF0YScpLFxuICAgIG1lcmdlRGF0YSA9IHJlcXVpcmUoJy4vX21lcmdlRGF0YScpLFxuICAgIHNldERhdGEgPSByZXF1aXJlKCcuL19zZXREYXRhJyksXG4gICAgc2V0V3JhcFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fc2V0V3JhcFRvU3RyaW5nJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG52YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogICAgMSAtIGBfLmJpbmRgXG4gKiAgICAyIC0gYF8uYmluZEtleWBcbiAqICAgIDQgLSBgXy5jdXJyeWAgb3IgYF8uY3VycnlSaWdodGAgb2YgYSBib3VuZCBmdW5jdGlvblxuICogICAgOCAtIGBfLmN1cnJ5YFxuICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gKiAgIDMyIC0gYF8ucGFydGlhbGBcbiAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gKiAgMTI4IC0gYF8ucmVhcmdgXG4gKiAgMjU2IC0gYF8uYXJ5YFxuICogIDUxMiAtIGBfLmZsaXBgXG4gKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICBpZiAoIWlzQmluZEtleSAmJiB0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBsZW5ndGggPSBwYXJ0aWFscyA/IHBhcnRpYWxzLmxlbmd0aCA6IDA7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgfVxuICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gIGFyaXR5ID0gYXJpdHkgPT09IHVuZGVmaW5lZCA/IGFyaXR5IDogdG9JbnRlZ2VyKGFyaXR5KTtcbiAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgIHZhciBwYXJ0aWFsc1JpZ2h0ID0gcGFydGlhbHMsXG4gICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gIHZhciBuZXdEYXRhID0gW1xuICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsXG4gICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gIF07XG5cbiAgaWYgKGRhdGEpIHtcbiAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gIH1cbiAgZnVuYyA9IG5ld0RhdGFbMF07XG4gIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgcGFydGlhbHMgPSBuZXdEYXRhWzNdO1xuICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgPyAoaXNCaW5kS2V5ID8gMCA6IGZ1bmMubGVuZ3RoKVxuICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgYml0bWFzayAmPSB+KFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyk7XG4gIH1cbiAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKTtcbiAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgfSBlbHNlIGlmICgoYml0bWFzayA9PSBXUkFQX1BBUlRJQUxfRkxBRyB8fCBiaXRtYXNrID09IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHKSkgJiYgIWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gY3JlYXRlSHlicmlkLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gIH1cbiAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gIHJldHVybiBzZXRXcmFwVG9TdHJpbmcoc2V0dGVyKHJlc3VsdCwgbmV3RGF0YSksIGZ1bmMsIGJpdG1hc2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVdyYXA7XG4iLCJ2YXIgYmFzZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX2Jhc2VDcmVhdGUnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUN0b3IoQ3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgIC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtZnVuY3Rpb24tb2JqZWN0cy1jYWxsLXRoaXNhcmd1bWVudC1hcmd1bWVudHNsaXN0XG4gICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XG4gICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgIH1cbiAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAvLyBNaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvci5cbiAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVDdG9yO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG52YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgfVxuICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VDcmVhdGU7XG4iLCIvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG52YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbi8qKlxuICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcGxhY2VIb2xkZXJzO1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXNJbiA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzSW4nKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5c0luO1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xudmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzVW5pY29kZTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gKi9cbmZ1bmN0aW9uIG5vb3AoKSB7XG4gIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbm9vcDtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudmFyIGlzQWN0aW9uU3VwcG9ydGVkID0gZnVuY3Rpb24gaXNBY3Rpb25TdXBwb3J0ZWQodGFyZ2V0UmVmLCBtZXRob2QpIHtcbiAgcmV0dXJuIHRhcmdldFJlZiAmJiAhIXRhcmdldFJlZi5jdXJyZW50ICYmICEhdGFyZ2V0UmVmLmN1cnJlbnRbbWV0aG9kXTtcbn07XG5cbnZhciB1c2VFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gdXNlRXZlbnRMaXN0ZW5lcihvcHRpb25zKSB7XG4gIHZhciBjYXB0dXJlID0gb3B0aW9ucy5jYXB0dXJlLFxuICAgICAgbGlzdGVuZXIgPSBvcHRpb25zLmxpc3RlbmVyLFxuICAgICAgdHlwZSA9IG9wdGlvbnMudHlwZSxcbiAgICAgIHRhcmdldFJlZiA9IG9wdGlvbnMudGFyZ2V0UmVmO1xuICB2YXIgbGF0ZXN0TGlzdGVuZXIgPSBSZWFjdC51c2VSZWYobGlzdGVuZXIpO1xuICBsYXRlc3RMaXN0ZW5lci5jdXJyZW50ID0gbGlzdGVuZXI7XG4gIHZhciBldmVudEhhbmRsZXIgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gbGF0ZXN0TGlzdGVuZXIuY3VycmVudChldmVudCk7XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNBY3Rpb25TdXBwb3J0ZWQodGFyZ2V0UmVmLCAnYWRkRXZlbnRMaXN0ZW5lcicpKSB7XG4gICAgICA7XG4gICAgICB0YXJnZXRSZWYuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGV2ZW50SGFuZGxlciwgY2FwdHVyZSk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0BzdGFyZHVzdC11aS9yZWFjdC1jb21wb25lbnQtZXZlbnQtbGlzdGVuZXI6IFBhc3NlZCBgdGFyZ2V0UmVmYCBpcyBub3QgdmFsaWQgb3IgZG9lcyBub3Qgc3VwcG9ydCBgYWRkRXZlbnRMaXN0ZW5lcigpYCBtZXRob2QuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0FjdGlvblN1cHBvcnRlZCh0YXJnZXRSZWYsICdyZW1vdmVFdmVudExpc3RlbmVyJykpIHtcbiAgICAgICAgO1xuICAgICAgICB0YXJnZXRSZWYuY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGV2ZW50SGFuZGxlciwgY2FwdHVyZSk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdAc3RhcmR1c3QtdWkvcmVhY3QtY29tcG9uZW50LWV2ZW50LWxpc3RlbmVyOiBQYXNzZWQgYHRhcmdldFJlZmAgaXMgbm90IHZhbGlkIG9yIGRvZXMgbm90IHN1cHBvcnQgYHJlbW92ZUV2ZW50TGlzdGVuZXIoKWAgbWV0aG9kLicpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtjYXB0dXJlLCB0YXJnZXRSZWYsIHR5cGVdKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUV2ZW50TGlzdGVuZXI7IiwidmFyIGNyZWF0ZUZpbmQgPSByZXF1aXJlKCcuL19jcmVhdGVGaW5kJyksXG4gICAgZmluZEluZGV4ID0gcmVxdWlyZSgnLi9maW5kSW5kZXgnKTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAqIF07XG4gKlxuICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAqIC8vID0+IG9iamVjdCBmb3IgJ3BlYmJsZXMnXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gKi9cbnZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmQ7XG4iLCJ2YXIgZGVidXJyTGV0dGVyID0gcmVxdWlyZSgnLi9fZGVidXJyTGV0dGVyJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIExhdGluIFVuaWNvZGUgbGV0dGVycyAoZXhjbHVkaW5nIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMpLiAqL1xudmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXSc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpIGFuZFxuICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAqL1xudmFyIHJlQ29tYm9NYXJrID0gUmVnRXhwKHJzQ29tYm8sICdnJyk7XG5cbi8qKlxuICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gKiAvLyA9PiAnZGVqYSB2dSdcbiAqL1xuZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYnVycjtcbiIsInZhciBzdXBlclByb3BCYXNlID0gcmVxdWlyZShcIi4vc3VwZXJQcm9wQmFzZVwiKTtcblxuZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF9nZXQgPSBSZWZsZWN0LmdldDtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gICAgICB2YXIgYmFzZSA9IHN1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICBpZiAoIWJhc2UpIHJldHVybjtcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7XG5cbiAgICAgIGlmIChkZXNjLmdldCkge1xuICAgICAgICByZXR1cm4gZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXQ7IiwiZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0c0xvb3NlOyIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcbiIsInZhciBtYXBDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVDbGVhcicpLFxuICAgIG1hcENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVEZWxldGUnKSxcbiAgICBtYXBDYWNoZUdldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlR2V0JyksXG4gICAgbWFwQ2FjaGVIYXMgPSByZXF1aXJlKCcuL19tYXBDYWNoZUhhcycpLFxuICAgIG1hcENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwQ2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRvU3RyaW5nO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICB9XG4gIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuZ3RoO1xuICB9XG4gIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgc3RhcnQgPj4+PSAwO1xuXG4gIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTbGljZTtcbiIsInZhciBiYXNlU2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlU2V0VG9TdHJpbmcnKSxcbiAgICBzaG9ydE91dCA9IHJlcXVpcmUoJy4vX3Nob3J0T3V0Jyk7XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9TdHJpbmc7XG4iLCJ2YXIgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduVmFsdWU7XG4iLCJ2YXIgZmxhdHRlbiA9IHJlcXVpcmUoJy4vZmxhdHRlbicpLFxuICAgIG92ZXJSZXN0ID0gcmVxdWlyZSgnLi9fb3ZlclJlc3QnKSxcbiAgICBzZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX3NldFRvU3RyaW5nJyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0UmVzdDtcbiIsIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVB1c2g7XG4iLCJ2YXIgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwODtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTIuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvRmluaXRlKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9GaW5pdGUoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvRmluaXRlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIGJhc2VGb3IgPSByZXF1aXJlKCcuL19iYXNlRm9yJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZvck93bjtcbiIsInZhciBiYXNlSXNFcXVhbERlZXAgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbERlZXAnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbDtcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHM7XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFByb3RvdHlwZTtcbiIsInZhciBiYXNlQ3JlYXRlID0gcmVxdWlyZSgnLi9fYmFzZUNyZWF0ZScpLFxuICAgIGJhc2VMb2Rhc2ggPSByZXF1aXJlKCcuL19iYXNlTG9kYXNoJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG52YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTU7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gKi9cbmZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICB0aGlzLl9fZGlyX18gPSAxO1xuICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXTtcbiAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgdGhpcy5fX3ZpZXdzX18gPSBbXTtcbn1cblxuLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG5MYXp5V3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXp5V3JhcHBlcjtcblxubW9kdWxlLmV4cG9ydHMgPSBMYXp5V3JhcHBlcjtcbiIsIi8qKlxuICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYmFzZUxvZGFzaCgpIHtcbiAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTG9kYXNoO1xuIiwidmFyIG1ldGFNYXAgPSByZXF1aXJlKCcuL19tZXRhTWFwJyksXG4gICAgbm9vcCA9IHJlcXVpcmUoJy4vbm9vcCcpO1xuXG4vKipcbiAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAqL1xudmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RGF0YTtcbiIsInZhciBiYXNlQ3JlYXRlID0gcmVxdWlyZSgnLi9fYmFzZUNyZWF0ZScpLFxuICAgIGJhc2VMb2Rhc2ggPSByZXF1aXJlKCcuL19iYXNlTG9kYXNoJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAqL1xuZnVuY3Rpb24gTG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwpIHtcbiAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcbiAgdGhpcy5fX2luZGV4X18gPSAwO1xuICB0aGlzLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG59XG5cbkxvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG5Mb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbm1vZHVsZS5leHBvcnRzID0gTG9kYXNoV3JhcHBlcjtcbiIsIi8qKlxuICogR2V0cyB0aGUgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGBmdW5jYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgdmFyIG9iamVjdCA9IGZ1bmM7XG4gIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SG9sZGVyO1xuIiwidmFyIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZUFycmF5QnVmZmVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICdjYXAnOiBmYWxzZSxcbiAgJ2N1cnJ5JzogZmFsc2UsXG4gICdmaXhlZCc6IGZhbHNlLFxuICAnaW1tdXRhYmxlJzogZmFsc2UsXG4gICdyZWFyZyc6IGZhbHNlXG59O1xuIiwidmFyIGFzY2lpVG9BcnJheSA9IHJlcXVpcmUoJy4vX2FzY2lpVG9BcnJheScpLFxuICAgIGhhc1VuaWNvZGUgPSByZXF1aXJlKCcuL19oYXNVbmljb2RlJyksXG4gICAgdW5pY29kZVRvQXJyYXkgPSByZXF1aXJlKCcuL191bmljb2RlVG9BcnJheScpO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdUb0FycmF5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzID0gcmVxdWlyZSgnb2JqZWN0LWtleXMnKTtcbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciBvcmlnRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIG9iaiA9IHt9O1xuXHR0cnkge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmosICd4JywgeyBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IG9iaiB9KTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cdFx0Zm9yICh2YXIgXyBpbiBvYmopIHsgLy8ganNjczppZ25vcmUgZGlzYWxsb3dVbnVzZWRWYXJpYWJsZXNcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIG9iai54ID09PSBvYmo7XG5cdH0gY2F0Y2ggKGUpIHsgLyogdGhpcyBpcyBJRSA4LiAqL1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gb3JpZ0RlZmluZVByb3BlcnR5ICYmIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QgJiYgKCFpc0Z1bmN0aW9uKHByZWRpY2F0ZSkgfHwgIXByZWRpY2F0ZSgpKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvYmplY3RbbmFtZV0gPSB2YWx1ZTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwidmFyIGJhc2VGaW5kSW5kZXggPSByZXF1aXJlKCcuL19iYXNlRmluZEluZGV4JyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDEuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAqIF07XG4gKlxuICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gKiAvLyA9PiAwXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gKiAvLyA9PiAxXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAqIC8vID0+IDBcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiAyXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICBpZiAoIWxlbmd0aCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgfVxuICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaW5kSW5kZXg7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZm9yRWFjaCcpO1xuIiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7IiwidmFyIGJhc2VGbGF0dGVuID0gcmVxdWlyZSgnLi9fYmFzZUZsYXR0ZW4nKSxcbiAgICBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgYmFzZVVuaXEgPSByZXF1aXJlKCcuL19iYXNlVW5pcScpLFxuICAgIGlzQXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZU9iamVjdCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqL1xudmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmlvbjtcbiIsIi8qKiFcbiAqIEBmaWxlT3ZlcnZpZXcgS2lja2FzcyBsaWJyYXJ5IHRvIGNyZWF0ZSBhbmQgcGxhY2UgcG9wcGVycyBuZWFyIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50cy5cbiAqIEB2ZXJzaW9uIDEuMTYuMVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBGZWRlcmljbyBaaXZvbG8gYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgdGltZW91dER1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGxvbmdlclRpbWVvdXRCcm93c2Vyc1tpXSkgPj0gMCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufSgpO1xuXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlO1xuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xudmFyIGRlYm91bmNlID0gc3VwcG9ydHNNaWNyb1Rhc2tzID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgY3NzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50Tm9kZSBvciB0aGUgaG9zdCBvZiB0aGUgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3Q7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gc2Nyb2xsIHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBSZXR1cm4gYm9keSwgYGdldFNjcm9sbGAgd2lsbCB0YWtlIGNhcmUgdG8gZ2V0IHRoZSBjb3JyZWN0IGBzY3JvbGxUb3BgIGZyb20gaXRcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBzd2l0Y2ggKGVsZW1lbnQubm9kZU5hbWUpIHtcbiAgICBjYXNlICdIVE1MJzpcbiAgICBjYXNlICdCT0RZJzpcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keTtcbiAgfVxuXG4gIC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuXG4gIHZhciBfZ2V0U3R5bGVDb21wdXRlZFByb3AgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dZO1xuXG4gIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZWZlcmVuY2Ugbm9kZSBvZiB0aGUgcmVmZXJlbmNlIG9iamVjdCwgb3IgdGhlIHJlZmVyZW5jZSBvYmplY3QgaXRzZWxmLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpIHtcbiAgcmV0dXJuIHJlZmVyZW5jZSAmJiByZWZlcmVuY2UucmVmZXJlbmNlTm9kZSA/IHJlZmVyZW5jZS5yZWZlcmVuY2VOb2RlIDogcmVmZXJlbmNlO1xufVxuXG52YXIgaXNJRTExID0gaXNCcm93c2VyICYmICEhKHdpbmRvdy5NU0lucHV0TWV0aG9kQ29udGV4dCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGlzSUUxMCA9IGlzQnJvd3NlciAmJiAvTVNJRSAxMC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGlzSUVcbiAqL1xuZnVuY3Rpb24gaXNJRSh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxMSkge1xuICAgIHJldHVybiBpc0lFMTE7XG4gIH1cbiAgaWYgKHZlcnNpb24gPT09IDEwKSB7XG4gICAgcmV0dXJuIGlzSUUxMDtcbiAgfVxuICByZXR1cm4gaXNJRTExIHx8IGlzSUUxMDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvZmZzZXQgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICB2YXIgbm9PZmZzZXRQYXJlbnQgPSBpc0lFKDEwKSA/IGRvY3VtZW50LmJvZHkgOiBudWxsO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCB8fCBudWxsO1xuICAvLyBTa2lwIGhpZGRlbiBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGFuIG9mZnNldFBhcmVudFxuICB3aGlsZSAob2Zmc2V0UGFyZW50ID09PSBub09mZnNldFBhcmVudCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykge1xuICAgIG9mZnNldFBhcmVudCA9IChlbGVtZW50ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpLm9mZnNldFBhcmVudDtcbiAgfVxuXG4gIHZhciBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFRILCBURCBvciBUQUJMRSBpbiBjYXNlXG4gIC8vIG5vIG9mZnNldFBhcmVudCBpcyBwcmVzZW50LCBJIGhhdGUgdGhpcyBqb2IuLi5cbiAgaWYgKFsnVEgnLCAnVEQnLCAnVEFCTEUnXS5pbmRleE9mKG9mZnNldFBhcmVudC5ub2RlTmFtZSkgIT09IC0xICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQ7XG59XG5cbmZ1bmN0aW9uIGlzT2Zmc2V0Q29udGFpbmVyKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbm9kZU5hbWUgPT09ICdIVE1MJyB8fCBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkgPT09IGVsZW1lbnQ7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcm9vdCBub2RlXG4gKi9cbmZ1bmN0aW9uIGdldFJvb3Qobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBvZmZzZXQgcGFyZW50IGNvbW1vbiB0byB0aGUgdHdvIHByb3ZpZGVkIG5vZGVzXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQxXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gY29tbW9uIG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZWxlbWVudDIpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudDEgfHwgIWVsZW1lbnQxLm5vZGVUeXBlIHx8ICFlbGVtZW50MiB8fCAhZWxlbWVudDIubm9kZVR5cGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gSGVyZSB3ZSBtYWtlIHN1cmUgdG8gZ2l2ZSBhcyBcInN0YXJ0XCIgdGhlIGVsZW1lbnQgdGhhdCBjb21lcyBmaXJzdCBpbiB0aGUgRE9NXG4gIHZhciBvcmRlciA9IGVsZW1lbnQxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGVsZW1lbnQyKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HO1xuICB2YXIgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7XG4gIHZhciBlbmQgPSBvcmRlciA/IGVsZW1lbnQyIDogZWxlbWVudDE7XG5cbiAgLy8gR2V0IGNvbW1vbiBhbmNlc3RvciBjb250YWluZXJcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnQsIDApO1xuICByYW5nZS5zZXRFbmQoZW5kLCAwKTtcbiAgdmFyIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgLy8gQm90aCBub2RlcyBhcmUgaW5zaWRlICNkb2N1bWVudFxuXG4gIGlmIChlbGVtZW50MSAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgJiYgZWxlbWVudDIgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIHx8IHN0YXJ0LmNvbnRhaW5zKGVuZCkpIHtcbiAgICBpZiAoaXNPZmZzZXRDb250YWluZXIoY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7XG4gICAgICByZXR1cm4gY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChjb21tb25BbmNlc3RvckNvbnRhaW5lcik7XG4gIH1cblxuICAvLyBvbmUgb2YgdGhlIG5vZGVzIGlzIGluc2lkZSBzaGFkb3dET00sIGZpbmQgd2hpY2ggb25lXG4gIHZhciBlbGVtZW50MXJvb3QgPSBnZXRSb290KGVsZW1lbnQxKTtcbiAgaWYgKGVsZW1lbnQxcm9vdC5ob3N0KSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDFyb290Lmhvc3QsIGVsZW1lbnQyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZ2V0Um9vdChlbGVtZW50MikuaG9zdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQgaW4gdGhlIGdpdmVuIHNpZGUgKHRvcCBhbmQgbGVmdClcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbW91bnQgb2Ygc2Nyb2xsZWQgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbChlbGVtZW50KSB7XG4gIHZhciBzaWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAndG9wJztcblxuICB2YXIgdXBwZXJTaWRlID0gc2lkZSA9PT0gJ3RvcCcgPyAnc2Nyb2xsVG9wJyA6ICdzY3JvbGxMZWZ0JztcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBzY3JvbGxpbmdFbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgaHRtbDtcbiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudFt1cHBlclNpZGVdO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRbdXBwZXJTaWRlXTtcbn1cblxuLypcbiAqIFN1bSBvciBzdWJ0cmFjdCB0aGUgZWxlbWVudCBzY3JvbGwgdmFsdWVzIChsZWZ0IGFuZCB0b3ApIGZyb20gYSBnaXZlbiByZWN0IG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHJlY3QgLSBSZWN0IG9iamVjdCB5b3Ugd2FudCB0byBjaGFuZ2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCBmcm9tIHRoZSBmdW5jdGlvbiByZWFkcyB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY3QgLSBUaGUgbW9kaWZpZXIgcmVjdCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZVNjcm9sbChyZWN0LCBlbGVtZW50KSB7XG4gIHZhciBzdWJ0cmFjdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gIHZhciBtb2RpZmllciA9IHN1YnRyYWN0ID8gLTEgOiAxO1xuICByZWN0LnRvcCArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZXR1cm4gcmVjdDtcbn1cblxuLypcbiAqIEhlbHBlciB0byBkZXRlY3QgYm9yZGVycyBvZiBhIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXG4gKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBheGlzIC0gYHhgIG9yIGB5YFxuICogQHJldHVybiB7bnVtYmVyfSBib3JkZXJzIC0gVGhlIGJvcmRlcnMgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXhpc1xuICovXG5cbmZ1bmN0aW9uIGdldEJvcmRlcnNTaXplKHN0eWxlcywgYXhpcykge1xuICB2YXIgc2lkZUEgPSBheGlzID09PSAneCcgPyAnTGVmdCcgOiAnVG9wJztcbiAgdmFyIHNpZGVCID0gc2lkZUEgPT09ICdMZWZ0JyA/ICdSaWdodCcgOiAnQm90dG9tJztcblxuICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQSArICdXaWR0aCddKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSk7XG59XG5cbmZ1bmN0aW9uIGdldFNpemUoYXhpcywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSkge1xuICByZXR1cm4gTWF0aC5tYXgoYm9keVsnb2Zmc2V0JyArIGF4aXNdLCBib2R5WydzY3JvbGwnICsgYXhpc10sIGh0bWxbJ2NsaWVudCcgKyBheGlzXSwgaHRtbFsnb2Zmc2V0JyArIGF4aXNdLCBodG1sWydzY3JvbGwnICsgYXhpc10sIGlzSUUoMTApID8gcGFyc2VJbnQoaHRtbFsnb2Zmc2V0JyArIGF4aXNdKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCcpXSkgOiAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoZG9jdW1lbnQpIHtcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBpc0lFKDEwKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxuICB9O1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHtcbiAgICByaWdodDogb2Zmc2V0cy5sZWZ0ICsgb2Zmc2V0cy53aWR0aCxcbiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHRcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIHRyeSB7XG4gICAgaWYgKGlzSUUoMTApKSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0O1xuICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgfTtcblxuICAvLyBzdWJ0cmFjdCBzY3JvbGxiYXIgc2l6ZSBmcm9tIHNpemVzXG4gIHZhciBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKGVsZW1lbnQub3duZXJEb2N1bWVudCkgOiB7fTtcbiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQud2lkdGg7XG4gIHZhciBoZWlnaHQgPSBzaXplcy5oZWlnaHQgfHwgZWxlbWVudC5jbGllbnRIZWlnaHQgfHwgcmVzdWx0LmhlaWdodDtcblxuICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIHZhciB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcbiAgICBob3JpelNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd4Jyk7XG4gICAgdmVydFNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd5Jyk7XG5cbiAgICByZXN1bHQud2lkdGggLT0gaG9yaXpTY3JvbGxiYXI7XG4gICAgcmVzdWx0LmhlaWdodCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICB9XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBpc0lFMTAgPSBpc0lFKDEwKTtcbiAgdmFyIGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgdmFyIHBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocGFyZW50KTtcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCk7XG4gIHZhciBib3JkZXJMZWZ0V2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgpO1xuXG4gIC8vIEluIGNhc2VzIHdoZXJlIHRoZSBwYXJlbnQgaXMgZml4ZWQsIHdlIG11c3QgaWdub3JlIG5lZ2F0aXZlIHNjcm9sbCBpbiBvZmZzZXQgY2FsY1xuICBpZiAoZml4ZWRQb3NpdGlvbiAmJiBpc0hUTUwpIHtcbiAgICBwYXJlbnRSZWN0LnRvcCA9IE1hdGgubWF4KHBhcmVudFJlY3QudG9wLCAwKTtcbiAgICBwYXJlbnRSZWN0LmxlZnQgPSBNYXRoLm1heChwYXJlbnRSZWN0LmxlZnQsIDApO1xuICB9XG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wKTtcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQpO1xuXG4gICAgb2Zmc2V0cy50b3AgLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5ib3R0b20gLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5sZWZ0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG4gICAgb2Zmc2V0cy5yaWdodCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuXG4gICAgLy8gQXR0YWNoIG1hcmdpblRvcCBhbmQgbWFyZ2luTGVmdCBiZWNhdXNlIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3ZSBtYXkgbmVlZCB0aGVtXG4gICAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gbWFyZ2luTGVmdDtcbiAgfVxuXG4gIGlmIChpc0lFMTAgJiYgIWZpeGVkUG9zaXRpb24gPyBwYXJlbnQuY29udGFpbnMoc2Nyb2xsUGFyZW50KSA6IHBhcmVudCA9PT0gc2Nyb2xsUGFyZW50ICYmIHNjcm9sbFBhcmVudC5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XG4gICAgb2Zmc2V0cyA9IGluY2x1ZGVTY3JvbGwob2Zmc2V0cywgcGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG5mdW5jdGlvbiBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUoZWxlbWVudCkge1xuICB2YXIgZXhjbHVkZVNjcm9sbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoZWxlbWVudCwgaHRtbCk7XG4gIHZhciB3aWR0aCA9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcblxuICB2YXIgc2Nyb2xsVG9wID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCkgOiAwO1xuICB2YXIgc2Nyb2xsTGVmdCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwsICdsZWZ0JykgOiAwO1xuXG4gIHZhciBvZmZzZXQgPSB7XG4gICAgdG9wOiBzY3JvbGxUb3AgLSByZWxhdGl2ZU9mZnNldC50b3AgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5Ub3AsXG4gICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZml4ZWQgb3IgaXMgaW5zaWRlIGEgZml4ZWQgcGFyZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvIFwiaXNGaXhlZD9cIlxuICovXG5mdW5jdGlvbiBpc0ZpeGVkKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIHBhcmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGlzRml4ZWQocGFyZW50Tm9kZSk7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IHBhcmVudCBvZiBhbiBlbGVtZW50IHRoYXQgaGFzIGEgdHJhbnNmb3JtZWQgcHJvcGVydHkgZGVmaW5lZFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gZmlyc3QgdHJhbnNmb3JtZWQgcGFyZW50IG9yIGRvY3VtZW50RWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudEVsZW1lbnQgfHwgaXNJRSgpKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICB2YXIgZWwgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIHdoaWxlIChlbCAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWwsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnKSB7XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBlbCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59XG5cbi8qKlxuICogQ29tcHV0ZWQgdGhlIGJvdW5kYXJpZXMgbGltaXRzIGFuZCByZXR1cm4gdGhlbVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudCAtIEVsZW1lbnQgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kYXJpZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZml4ZWRQb3NpdGlvbiAtIElzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzXG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuXG4gIHZhciBib3VuZGFyaWVzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpKTtcblxuICAvLyBIYW5kbGUgdmlld3BvcnQgY2FzZVxuICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd2aWV3cG9ydCcpIHtcbiAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gSGFuZGxlIG90aGVyIGNhc2VzIGJhc2VkIG9uIERPTSBlbGVtZW50IHVzZWQgYXMgYm91bmRhcmllc1xuICAgIHZhciBib3VuZGFyaWVzTm9kZSA9IHZvaWQgMDtcbiAgICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKHJlZmVyZW5jZSkpO1xuICAgICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50O1xuICAgIH1cblxuICAgIHZhciBvZmZzZXRzID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGJvdW5kYXJpZXNOb2RlLCBvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuXG4gICAgLy8gSW4gY2FzZSBvZiBIVE1MLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGNvbXB1dGF0aW9uXG4gICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnSFRNTCcgJiYgIWlzRml4ZWQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgdmFyIF9nZXRXaW5kb3dTaXplcyA9IGdldFdpbmRvd1NpemVzKHBvcHBlci5vd25lckRvY3VtZW50KSxcbiAgICAgICAgICBoZWlnaHQgPSBfZ2V0V2luZG93U2l6ZXMuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoO1xuXG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIHBhZGRpbmcgPSBwYWRkaW5nIHx8IDA7XG4gIHZhciBpc1BhZGRpbmdOdW1iZXIgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ251bWJlcic7XG4gIGJvdW5kYXJpZXMubGVmdCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5sZWZ0IHx8IDA7XG4gIGJvdW5kYXJpZXMudG9wICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnRvcCB8fCAwO1xuICBib3VuZGFyaWVzLnJpZ2h0IC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnJpZ2h0IHx8IDA7XG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmJvdHRvbSB8fCAwO1xuXG4gIHJldHVybiBib3VuZGFyaWVzO1xufVxuXG5mdW5jdGlvbiBnZXRBcmVhKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuXG4gIHJldHVybiB3aWR0aCAqIGhlaWdodDtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IHVzZWQgdG8gdHJhbnNmb3JtIHRoZSBgYXV0b2AgcGxhY2VtZW50IHRvIHRoZSBwbGFjZW1lbnQgd2l0aCBtb3JlXG4gKiBhdmFpbGFibGUgc3BhY2UuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChwbGFjZW1lbnQsIHJlZlJlY3QsIHBvcHBlciwgcmVmZXJlbmNlLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgcGFkZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMDtcblxuICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ2F1dG8nKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCk7XG5cbiAgdmFyIHJlY3RzID0ge1xuICAgIHRvcDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlZlJlY3QudG9wIC0gYm91bmRhcmllcy50b3BcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy5yaWdodCAtIHJlZlJlY3QucmlnaHQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmJvdHRvbSAtIHJlZlJlY3QuYm90dG9tXG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICB3aWR0aDogcmVmUmVjdC5sZWZ0IC0gYm91bmRhcmllcy5sZWZ0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH1cbiAgfTtcblxuICB2YXIgc29ydGVkQXJlYXMgPSBPYmplY3Qua2V5cyhyZWN0cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAga2V5OiBrZXlcbiAgICB9LCByZWN0c1trZXldLCB7XG4gICAgICBhcmVhOiBnZXRBcmVhKHJlY3RzW2tleV0pXG4gICAgfSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5hcmVhIC0gYS5hcmVhO1xuICB9KTtcblxuICB2YXIgZmlsdGVyZWRBcmVhcyA9IHNvcnRlZEFyZWFzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgd2lkdGggPSBfcmVmMi53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gX3JlZjIuaGVpZ2h0O1xuICAgIHJldHVybiB3aWR0aCA+PSBwb3BwZXIuY2xpZW50V2lkdGggJiYgaGVpZ2h0ID49IHBvcHBlci5jbGllbnRIZWlnaHQ7XG4gIH0pO1xuXG4gIHZhciBjb21wdXRlZFBsYWNlbWVudCA9IGZpbHRlcmVkQXJlYXMubGVuZ3RoID4gMCA/IGZpbHRlcmVkQXJlYXNbMF0ua2V5IDogc29ydGVkQXJlYXNbMF0ua2V5O1xuXG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICByZXR1cm4gY29tcHV0ZWRQbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtFbGVtZW50fSBmaXhlZFBvc2l0aW9uIC0gaXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG5cbiAgdmFyIGNvbW1vbk9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpKTtcbiAgcmV0dXJuIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShyZWZlcmVuY2UsIGNvbW1vbk9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvdXRlciBzaXplcyBvZiB0aGUgZ2l2ZW4gZWxlbWVudCAob2Zmc2V0IHNpemUgKyBtYXJnaW5zKVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyB3aWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Cb3R0b20gfHwgMCk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblJpZ2h0IHx8IDApO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeFxuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICB2YXIgaGFzaCA9IHsgbGVmdDogJ3JpZ2h0JywgcmlnaHQ6ICdsZWZ0JywgYm90dG9tOiAndG9wJywgdG9wOiAnYm90dG9tJyB9O1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSBDU1MgcG9zaXRpb24gdGhlIFBvcHBlciB3aWxsIGdldCBhcHBsaWVkXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzIC0gdGhlIHJlZmVyZW5jZSBvZmZzZXRzICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnQgLSBvbmUgb2YgdGhlIHZhbGlkIHBsYWNlbWVudCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UG9wcGVyT2Zmc2V0cyhwb3BwZXIsIHJlZmVyZW5jZU9mZnNldHMsIHBsYWNlbWVudCkge1xuICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICAvLyBHZXQgcG9wcGVyIG5vZGUgc2l6ZXNcbiAgdmFyIHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7XG5cbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHtcbiAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHBvcHBlclJlY3QuaGVpZ2h0XG4gIH07XG5cbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxuICB2YXIgaXNIb3JpeiA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBtYWluU2lkZSA9IGlzSG9yaXogPyAndG9wJyA6ICdsZWZ0JztcbiAgdmFyIHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzZWNvbmRhcnlNZWFzdXJlbWVudCA9ICFpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIHBvcHBlck9mZnNldHNbbWFpblNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gKyByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLSBwb3BwZXJSZWN0W21lYXN1cmVtZW50XSAvIDI7XG4gIGlmIChwbGFjZW1lbnQgPT09IHNlY29uZGFyeVNpZGUpIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSAtIHBvcHBlclJlY3Rbc2Vjb25kYXJ5TWVhc3VyZW1lbnRdO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTtcbiAgfVxuXG4gIHJldHVybiBwb3BwZXJPZmZzZXRzO1xufVxuXG4vKipcbiAqIE1pbWljcyB0aGUgYGZpbmRgIG1ldGhvZCBvZiBBcnJheVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kKGFyciwgY2hlY2spIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2spO1xuICB9XG5cbiAgLy8gdXNlIGBmaWx0ZXJgIHRvIG9idGFpbiB0aGUgc2FtZSBiZWhhdmlvciBvZiBgZmluZGBcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2spWzBdO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIGZpbmRJbmRleCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChmdW5jdGlvbiAoY3VyKSB7XG4gICAgICByZXR1cm4gY3VyW3Byb3BdID09PSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHVzZSBgZmluZGAgKyBgaW5kZXhPZmAgaWYgYGZpbmRJbmRleGAgaXNuJ3Qgc3VwcG9ydGVkXG4gIHZhciBtYXRjaCA9IGZpbmQoYXJyLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wXSA9PT0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gYXJyLmluZGV4T2YobWF0Y2gpO1xufVxuXG4vKipcbiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsXG4gKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fVxuICovXG5mdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7XG4gIHZhciBtb2RpZmllcnNUb1J1biA9IGVuZHMgPT09IHVuZGVmaW5lZCA/IG1vZGlmaWVycyA6IG1vZGlmaWVycy5zbGljZSgwLCBmaW5kSW5kZXgobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmIChtb2RpZmllclsnZnVuY3Rpb24nXSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgdmFyIGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3RcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxuICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlc1xuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcblxuICAgICAgZGF0YSA9IGZuKGRhdGEsIG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nXG4gKiB0aGUgbmV3IHN0eWxlLjxiciAvPlxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGVcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGF0YSA9IHtcbiAgICBpbnN0YW5jZTogdGhpcyxcbiAgICBzdHlsZXM6IHt9LFxuICAgIGFycm93U3R5bGVzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBmbGlwcGVkOiBmYWxzZSxcbiAgICBvZmZzZXRzOiB7fVxuICB9O1xuXG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyh0aGlzLnN0YXRlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgZGF0YS5wbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudCh0aGlzLm9wdGlvbnMucGxhY2VtZW50LCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGBcbiAgZGF0YS5vcmlnaW5hbFBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gIGRhdGEucG9zaXRpb25GaXhlZCA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkO1xuXG4gIC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKHRoaXMucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZSc7XG5cbiAgLy8gcnVuIHRoZSBtb2RpZmllcnNcbiAgZGF0YSA9IHJ1bk1vZGlmaWVycyh0aGlzLm1vZGlmaWVycywgZGF0YSk7XG5cbiAgLy8gdGhlIGZpcnN0IGB1cGRhdGVgIHdpbGwgY2FsbCBgb25DcmVhdGVgIGNhbGxiYWNrXG4gIC8vIHRoZSBvdGhlciBvbmVzIHdpbGwgY2FsbCBgb25VcGRhdGVgIGNhbGxiYWNrXG4gIGlmICghdGhpcy5zdGF0ZS5pc0NyZWF0ZWQpIHtcbiAgICB0aGlzLnN0YXRlLmlzQ3JlYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZShkYXRhKTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgIGVuYWJsZWQgPSBfcmVmLmVuYWJsZWQ7XG4gICAgcmV0dXJuIGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByZWZpeGVkIHN1cHBvcnRlZCBwcm9wZXJ0eSBuYW1lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHkgKGNhbWVsQ2FzZSlcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHByZWZpeGVkIHByb3BlcnR5IChjYW1lbENhc2Ugb3IgUGFzY2FsQ2FzZSwgZGVwZW5kaW5nIG9uIHRoZSB2ZW5kb3IgcHJlZml4KVxuICovXG5mdW5jdGlvbiBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUocHJvcGVydHkpIHtcbiAgdmFyIHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIHZhciB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgdmFyIHRvQ2hlY2sgPSBwcmVmaXggPyAnJyArIHByZWZpeCArIHVwcGVyUHJvcCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0b0NoZWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgcG9wcGVyLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucmlnaHQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5ib3R0b20gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS53aWxsQ2hhbmdlID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdGx5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge1dpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KGVsZW1lbnQpIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn1cblxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIG9wdGlvbnMsIHN0YXRlLCB1cGRhdGVCb3VuZCkge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcblxuICAvLyBSZW1vdmUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIHJlbW92ZSByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgd29uJ3QgcmVjYWxjdWxhdGUgcG9wcGVyIHBvc2l0aW9uXG4gKiB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC4gSXQgYWxzbyB3b24ndCB0cmlnZ2VyIGBvblVwZGF0ZWAgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtCb29sZWFufSBzaG91bGRSb3VuZCAtIElmIHRoZSBvZmZzZXRzIHNob3VsZCBiZSByb3VuZGVkIGF0IGFsbFxuICogQHJldHVybnMge09iamVjdH0gVGhlIHBvcHBlcidzIHBvc2l0aW9uIG9mZnNldHMgcm91bmRlZFxuICpcbiAqIFRoZSB0YWxlIG9mIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcuIEl0J3Mgc3RpbGwgbm90IDEwMCUgcGVyZmVjdCwgYnV0IGFzXG4gKiBnb29kIGFzIGl0IGNhbiBiZSB3aXRoaW4gcmVhc29uLlxuICogRGlzY3Vzc2lvbiBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9wdWxsLzcxNVxuICpcbiAqIExvdyBEUEkgc2NyZWVucyBjYXVzZSBhIHBvcHBlciB0byBiZSBibHVycnkgaWYgbm90IHVzaW5nIGZ1bGwgcGl4ZWxzIChTYWZhcmlcbiAqIGFzIHdlbGwgb24gSGlnaCBEUEkgc2NyZWVucykuXG4gKlxuICogRmlyZWZveCBwcmVmZXJzIG5vIHJvdW5kaW5nIGZvciBwb3NpdGlvbmluZyBhbmQgZG9lcyBub3QgaGF2ZSBibHVycmluZXNzIG9uXG4gKiBoaWdoIERQSSBzY3JlZW5zLlxuICpcbiAqIE9ubHkgaG9yaXpvbnRhbCBwbGFjZW1lbnQgYW5kIGxlZnQvcmlnaHQgdmFsdWVzIG5lZWQgdG8gYmUgY29uc2lkZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgc2hvdWxkUm91bmQpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4gIHZhciBub1JvdW5kID0gZnVuY3Rpb24gbm9Sb3VuZCh2KSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgdmFyIHJlZmVyZW5jZVdpZHRoID0gcm91bmQocmVmZXJlbmNlLndpZHRoKTtcbiAgdmFyIHBvcHBlcldpZHRoID0gcm91bmQocG9wcGVyLndpZHRoKTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoZGF0YS5wbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIGlzVmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuaW5kZXhPZignLScpICE9PSAtMTtcbiAgdmFyIHNhbWVXaWR0aFBhcml0eSA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gcG9wcGVyV2lkdGggJSAyO1xuICB2YXIgYm90aE9kZFdpZHRoID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSAxICYmIHBvcHBlcldpZHRoICUgMiA9PT0gMTtcblxuICB2YXIgaG9yaXpvbnRhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiBpc1ZlcnRpY2FsIHx8IGlzVmFyaWF0aW9uIHx8IHNhbWVXaWR0aFBhcml0eSA/IHJvdW5kIDogZmxvb3I7XG4gIHZhciB2ZXJ0aWNhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiByb3VuZDtcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IGhvcml6b250YWxUb0ludGVnZXIoYm90aE9kZFdpZHRoICYmICFpc1ZhcmlhdGlvbiAmJiBzaG91bGRSb3VuZCA/IHBvcHBlci5sZWZ0IC0gMSA6IHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci50b3ApLFxuICAgIGJvdHRvbTogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLmJvdHRvbSksXG4gICAgcmlnaHQ6IGhvcml6b250YWxUb0ludGVnZXIocG9wcGVyLnJpZ2h0KVxuICB9O1xufVxuXG52YXIgaXNGaXJlZm94ID0gaXNCcm93c2VyICYmIC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIHggPSBvcHRpb25zLngsXG4gICAgICB5ID0gb3B0aW9ucy55O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjJcblxuICB2YXIgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlJztcbiAgfSkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJyk7XG4gIH1cbiAgdmFyIGdwdUFjY2VsZXJhdGlvbiA9IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkID8gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIDogb3B0aW9ucy5ncHVBY2NlbGVyYXRpb247XG5cbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvblxuICB9O1xuXG4gIHZhciBvZmZzZXRzID0gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gPCAyIHx8ICFpc0ZpcmVmb3gpO1xuXG4gIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIHZhciBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICB2YXIgbGVmdCA9IHZvaWQgMCxcbiAgICAgIHRvcCA9IHZvaWQgMDtcbiAgaWYgKHNpZGVBID09PSAnYm90dG9tJykge1xuICAgIC8vIHdoZW4gb2Zmc2V0UGFyZW50IGlzIDxodG1sPiB0aGUgcG9zaXRpb25pbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIChleGNsdWRpbmcgdGhlIHNjcm9sbGJhcilcbiAgICAvLyBhbmQgbm90IHRoZSBib3R0b20gb2YgdGhlIGh0bWwgZWxlbWVudFxuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudFJlY3QuaGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRvcCA9IG9mZnNldHMudG9wO1xuICB9XG4gIGlmIChzaWRlQiA9PT0gJ3JpZ2h0Jykge1xuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xuICB9XG4gIGlmIChncHVBY2NlbGVyYXRpb24gJiYgcHJlZml4ZWRQcm9wZXJ0eSkge1xuICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9ICd0cmFuc2xhdGUzZCgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCwgMCknO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICB2YXIgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XG4gICAgc3R5bGVzW3NpZGVBXSA9IHRvcCAqIGludmVydFRvcDtcbiAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjtcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnRcbiAgfTtcblxuICAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXNcbiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XG4gIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcywgZGF0YS5zdHlsZXMpO1xuICBkYXRhLmFycm93U3R5bGVzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5hcnJvdywgZGF0YS5hcnJvd1N0eWxlcyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChtb2RpZmllcnMsIHJlcXVlc3RpbmdOYW1lLCByZXF1ZXN0ZWROYW1lKSB7XG4gIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lO1xuICB9KTtcblxuICB2YXIgaXNSZXF1aXJlZCA9ICEhcmVxdWVzdGluZyAmJiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJiBtb2RpZmllci5lbmFibGVkICYmIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlcjtcbiAgfSk7XG5cbiAgaWYgKCFpc1JlcXVpcmVkKSB7XG4gICAgdmFyIF9yZXF1ZXN0aW5nID0gJ2AnICsgcmVxdWVzdGluZ05hbWUgKyAnYCc7XG4gICAgdmFyIHJlcXVlc3RlZCA9ICdgJyArIHJlcXVlc3RlZE5hbWUgKyAnYCc7XG4gICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7XG4gIH1cbiAgcmV0dXJuIGlzUmVxdWlyZWQ7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzJGFycm93O1xuXG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgdmFyIHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsdFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICB2YXIgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1bmN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPSByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSk7XG4gIHZhciBwb3BwZXJCb3JkZXJTaWRlID0gcGFyc2VGbG9hdChjc3NbJ2JvcmRlcicgKyBzaWRlQ2FwaXRhbGl6ZWQgKyAnV2lkdGgnXSk7XG4gIHZhciBzaWRlVmFsdWUgPSBjZW50ZXIgLSBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC0gcG9wcGVyTWFyZ2luU2lkZSAtIHBvcHBlckJvcmRlclNpZGU7XG5cbiAgLy8gcHJldmVudCBhcnJvd0VsZW1lbnQgZnJvbSBiZWluZyBwbGFjZWQgbm90IGNvbnRpZ3VvdXNseSB0byBpdHMgcG9wcGVyXG4gIHNpZGVWYWx1ZSA9IE1hdGgubWF4KE1hdGgubWluKHBvcHBlcltsZW5dIC0gYXJyb3dFbGVtZW50U2l6ZSwgc2lkZVZhbHVlKSwgMCk7XG5cbiAgZGF0YS5hcnJvd0VsZW1lbnQgPSBhcnJvd0VsZW1lbnQ7XG4gIGRhdGEub2Zmc2V0cy5hcnJvdyA9IChfZGF0YSRvZmZzZXRzJGFycm93ID0ge30sIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIHNpZGUsIE1hdGgucm91bmQoc2lkZVZhbHVlKSksIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIGFsdFNpZGUsICcnKSwgX2RhdGEkb2Zmc2V0cyRhcnJvdyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgdmFyaWF0aW9uIG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudCB2YXJpYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKSB7XG4gIGlmICh2YXJpYXRpb24gPT09ICdlbmQnKSB7XG4gICAgcmV0dXJuICdzdGFydCc7XG4gIH0gZWxzZSBpZiAodmFyaWF0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgcmV0dXJuICdlbmQnO1xuICB9XG4gIHJldHVybiB2YXJpYXRpb247XG59XG5cbi8qKlxuICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz5cbiAqIFZhbGlkIHBsYWNlbWVudHMgYXJlOlxuICogLSBgYXV0b2BcbiAqIC0gYHRvcGBcbiAqIC0gYHJpZ2h0YFxuICogLSBgYm90dG9tYFxuICogLSBgbGVmdGBcbiAqXG4gKiBFYWNoIHBsYWNlbWVudCBjYW4gaGF2ZSBhIHZhcmlhdGlvbiBmcm9tIHRoaXMgbGlzdDpcbiAqIC0gYC1zdGFydGBcbiAqIC0gYC1lbmRgXG4gKlxuICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0XG4gKiB3cml0dGVuIGxhbmd1YWdlcy4gSG9yaXpvbnRhbGx5IChgdG9wYCBhbmQgYGJvdHRvbWApLCBgc3RhcnRgIGlzIGxlZnQgYW5kIGBlbmRgXG4gKiBpcyByaWdodC48YnIgLz5cbiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uXG4gKlxuICogU29tZSB2YWxpZCBleGFtcGxlcyBhcmU6XG4gKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZClcbiAqIC0gYHJpZ2h0LXN0YXJ0YCAob24gcmlnaHQgb2YgcmVmZXJlbmNlLCB0b3AgYWxpZ25lZClcbiAqIC0gYGJvdHRvbWAgKG9uIGJvdHRvbSwgY2VudGVyZWQpXG4gKiAtIGBhdXRvLWVuZGAgKG9uIHRoZSBzaWRlIHdpdGggbW9yZSBzcGFjZSBhdmFpbGFibGUsIGFsaWdubWVudCBkZXBlbmRzIGJ5IHBsYWNlbWVudClcbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7QXJyYXl9XG4gKiBAZW51bSB7U3RyaW5nfVxuICogQHJlYWRvbmx5XG4gKiBAbWV0aG9kIHBsYWNlbWVudHNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIHBsYWNlbWVudHMgPSBbJ2F1dG8tc3RhcnQnLCAnYXV0bycsICdhdXRvLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJywgJ3RvcC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAncmlnaHQtZW5kJywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tJywgJ2JvdHRvbS1zdGFydCcsICdsZWZ0LWVuZCcsICdsZWZ0JywgJ2xlZnQtc3RhcnQnXTtcblxuLy8gR2V0IHJpZCBvZiBgYXV0b2AgYGF1dG8tc3RhcnRgIGFuZCBgYXV0by1lbmRgXG52YXIgdmFsaWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5zbGljZSgzKTtcblxuLyoqXG4gKiBHaXZlbiBhbiBpbml0aWFsIHBsYWNlbWVudCwgcmV0dXJucyBhbGwgdGhlIHN1YnNlcXVlbnQgcGxhY2VtZW50c1xuICogY2xvY2t3aXNlIChvciBjb3VudGVyLWNsb2Nrd2lzZSkuXG4gKlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCAtIEEgdmFsaWQgcGxhY2VtZW50IChpdCBhY2NlcHRzIHZhcmlhdGlvbnMpXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IGNvdW50ZXIgLSBTZXQgdG8gdHJ1ZSB0byB3YWxrIHRoZSBwbGFjZW1lbnRzIGNvdW50ZXJjbG9ja3dpc2VcbiAqIEByZXR1cm5zIHtBcnJheX0gcGxhY2VtZW50cyBpbmNsdWRpbmcgdGhlaXIgdmFyaWF0aW9uc1xuICovXG5mdW5jdGlvbiBjbG9ja3dpc2UocGxhY2VtZW50KSB7XG4gIHZhciBjb3VudGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaW5kZXggPSB2YWxpZFBsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpO1xuICB2YXIgYXJyID0gdmFsaWRQbGFjZW1lbnRzLnNsaWNlKGluZGV4ICsgMSkuY29uY2F0KHZhbGlkUGxhY2VtZW50cy5zbGljZSgwLCBpbmRleCkpO1xuICByZXR1cm4gY291bnRlciA/IGFyci5yZXZlcnNlKCkgOiBhcnI7XG59XG5cbnZhciBCRUhBVklPUlMgPSB7XG4gIEZMSVA6ICdmbGlwJyxcbiAgQ0xPQ0tXSVNFOiAnY2xvY2t3aXNlJyxcbiAgQ09VTlRFUkNMT0NLV0lTRTogJ2NvdW50ZXJjbG9ja3dpc2UnXG59O1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gZmxpcChkYXRhLCBvcHRpb25zKSB7XG4gIC8vIGlmIGBpbm5lcmAgbW9kaWZpZXIgaXMgZW5hYmxlZCwgd2UgY2FuJ3QgdXNlIHRoZSBgZmxpcGAgbW9kaWZpZXJcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaW5uZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgaWYgKGRhdGEuZmxpcHBlZCAmJiBkYXRhLnBsYWNlbWVudCA9PT0gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCkge1xuICAgIC8vIHNlZW1zIGxpa2UgZmxpcCBpcyB0cnlpbmcgdG8gbG9vcCwgcHJvYmFibHkgdGhlcmUncyBub3QgZW5vdWdoIHNwYWNlIG9uIGFueSBvZiB0aGUgZmxpcHBhYmxlIHNpZGVzXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdIHx8ICcnO1xuXG4gIHZhciBmbGlwT3JkZXIgPSBbXTtcblxuICBzd2l0Y2ggKG9wdGlvbnMuYmVoYXZpb3IpIHtcbiAgICBjYXNlIEJFSEFWSU9SUy5GTElQOlxuICAgICAgZmxpcE9yZGVyID0gW3BsYWNlbWVudCwgcGxhY2VtZW50T3Bwb3NpdGVdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DT1VOVEVSQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCwgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZmxpcE9yZGVyID0gb3B0aW9ucy5iZWhhdmlvcjtcbiAgfVxuXG4gIGZsaXBPcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwLCBpbmRleCkge1xuICAgIGlmIChwbGFjZW1lbnQgIT09IHN0ZXAgfHwgZmxpcE9yZGVyLmxlbmd0aCA9PT0gaW5kZXggKyAxKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICAgIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBwb3BwZXJPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcbiAgICB2YXIgcmVmT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgICAvLyB1c2luZyBmbG9vciBiZWNhdXNlIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyBtYXkgY29udGFpbiBkZWNpbWFscyB3ZSBhcmUgbm90IGdvaW5nIHRvIGNvbnNpZGVyIGhlcmVcbiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgIHZhciBvdmVybGFwc1JlZiA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IocmVmT2Zmc2V0cy5sZWZ0KSB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKHJlZk9mZnNldHMucmlnaHQpIHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IocmVmT2Zmc2V0cy50b3ApIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IocmVmT2Zmc2V0cy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0xlZnQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IoYm91bmRhcmllcy5sZWZ0KTtcbiAgICB2YXIgb3ZlcmZsb3dzUmlnaHQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKGJvdW5kYXJpZXMucmlnaHQpO1xuICAgIHZhciBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7XG4gICAgdmFyIG92ZXJmbG93c0JvdHRvbSA9IGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKGJvdW5kYXJpZXMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NCb3VuZGFyaWVzID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBvdmVyZmxvd3NUb3AgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBvdmVyZmxvd3NCb3R0b207XG5cbiAgICAvLyBmbGlwIHRoZSB2YXJpYXRpb24gaWYgcmVxdWlyZWRcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgICAvLyBmbGlwcyB2YXJpYXRpb24gaWYgcmVmZXJlbmNlIGVsZW1lbnQgb3ZlcmZsb3dzIGJvdW5kYXJpZXNcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbkJ5UmVmID0gISFvcHRpb25zLmZsaXBWYXJpYXRpb25zICYmIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NSaWdodCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzVG9wIHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzQm90dG9tKTtcblxuICAgIC8vIGZsaXBzIHZhcmlhdGlvbiBpZiBwb3BwZXIgY29udGVudCBvdmVyZmxvd3MgYm91bmRhcmllc1xuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50ID0gISFvcHRpb25zLmZsaXBWYXJpYXRpb25zQnlDb250ZW50ICYmIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzQm90dG9tIHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzVG9wKTtcblxuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uID0gZmxpcHBlZFZhcmlhdGlvbkJ5UmVmIHx8IGZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQ7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZChmcmFnbWVudHMsIGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcbiAgfSkpO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiBvcFxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfVxuICAgIH0sIFtdKVxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgIC5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBvZmZzZXQoZGF0YSwgX3JlZikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCxcbiAgICAgIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgdmFyIG9mZnNldHMgPSB2b2lkIDA7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYm91bmRhcmllc0VsZW1lbnQgPSBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXNldHMgdGhlIHBvcHBlcidzIHBvc2l0aW9uIHNvIHRoYXQgdGhlIGRvY3VtZW50IHNpemUgY2FuIGJlIGNhbGN1bGF0ZWQgZXhjbHVkaW5nXG4gIC8vIHRoZSBzaXplIG9mIHRoZSBwb3BwZXIgZWxlbWVudCBpdHNlbGZcbiAgdmFyIHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuICB2YXIgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb25cbiAgdmFyIHRvcCA9IHBvcHBlclN0eWxlcy50b3AsXG4gICAgICBsZWZ0ID0gcG9wcGVyU3R5bGVzLmxlZnQsXG4gICAgICB0cmFuc2Zvcm0gPSBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF07XG5cbiAgcG9wcGVyU3R5bGVzLnRvcCA9ICcnO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSAnJztcblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXN0b3JlcyB0aGUgb3JpZ2luYWwgc3R5bGUgcHJvcGVydGllcyBhZnRlciB0aGUgb2Zmc2V0cyBoYXZlIGJlZW4gY29tcHV0ZWRcbiAgcG9wcGVyU3R5bGVzLnRvcCA9IHRvcDtcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSBsZWZ0O1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cbiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllcztcblxuICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICB2YXIgY2hlY2sgPSB7XG4gICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgcGxhY2VtZW50LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IGZ1bmN0aW9uIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4ocG9wcGVyW21haW5TaWRlXSwgYm91bmRhcmllc1twbGFjZW1lbnRdIC0gKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgdmFyIHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpO1xuICB9KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gcG9wcGVyO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7XG5cbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICB2YXIgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLFxuICAgICAgZW5kOiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0pXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBzaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgYm91bmQgPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gIH0pLmJvdW5kYXJpZXM7XG5cbiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gdHJ1ZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGlubmVyKGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7XG5cbiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLSAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG52YXIgbW9kaWZpZXJzID0ge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnRcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0LWxlc3MsIGludGVycHJldGVkIGFzIHBpeGVsc1xuICAgKiAtIGAlYCBvciBgJXJgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gICAqIC0gYCVwYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiAtIGB2d2AsIENTUyB2aWV3cG9ydCB3aWR0aCB1bml0XG4gICAqIC0gYHZoYCwgQ1NTIHZpZXdwb3J0IGhlaWdodCB1bml0XG4gICAqXG4gICAqIEZvciBsZW5ndGggaXMgaW50ZW5kZWQgdGhlIG1haW4gYXhpcyByZWxhdGl2ZSB0byB0aGUgcGxhY2VtZW50IG9mIHRoZSBwb3BwZXIuPGJyIC8+XG4gICAqIFRoaXMgbWVhbnMgdGhhdCBpZiB0aGUgcGxhY2VtZW50IGlzIGB0b3BgIG9yIGBib3R0b21gLCB0aGUgbGVuZ3RoIHdpbGwgYmUgdGhlXG4gICAqIGB3aWR0aGAuIEluIGNhc2Ugb2YgYGxlZnRgIG9yIGByaWdodGAsIGl0IHdpbGwgYmUgdGhlIGBoZWlnaHRgLlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gWW91IGNhbiByZWFkIG1vcmUgb24gdGhpcyBhdCB0aGlzIFtpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MykuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEEgc2NlbmFyaW8gZXhpc3RzIHdoZXJlIHRoZSByZWZlcmVuY2UgaXRzZWxmIGlzIG5vdCB3aXRoaW4gdGhlIGJvdW5kYXJpZXMuPGJyIC8+XG4gICAqIFdlIGNhbiBzYXkgaXQgaGFzIFwiZXNjYXBlZCB0aGUgYm91bmRhcmllc1wiIOKAlCBvciBqdXN0IFwiZXNjYXBlZFwiLjxiciAvPlxuICAgKiBJbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBkZWNpZGUgd2hldGhlciB0aGUgcG9wcGVyIHNob3VsZCBlaXRoZXI6XG4gICAqXG4gICAqIC0gZGV0YWNoIGZyb20gdGhlIHJlZmVyZW5jZSBhbmQgcmVtYWluIFwidHJhcHBlZFwiIGluIHRoZSBib3VuZGFyaWVzLCBvclxuICAgKiAtIGlmIGl0IHNob3VsZCBpZ25vcmUgdGhlIGJvdW5kYXJ5IGFuZCBcImVzY2FwZSB3aXRoIGl0cyByZWZlcmVuY2VcIlxuICAgKlxuICAgKiBXaGVuIGBlc2NhcGVXaXRoUmVmZXJlbmNlYCBpcyBzZXQgdG9gdHJ1ZWAgYW5kIHJlZmVyZW5jZSBpcyBjb21wbGV0ZWx5XG4gICAqIG91dHNpZGUgaXRzIGJvdW5kYXJpZXMsIHRoZSBwb3BwZXIgd2lsbCBvdmVyZmxvdyAob3IgY29tcGxldGVseSBsZWF2ZSlcbiAgICogdGhlIGJvdW5kYXJpZXMgaW4gb3JkZXIgdG8gcmVtYWluIGF0dGFjaGVkIHRvIHRoZSBlZGdlIG9mIHRoZSByZWZlcmVuY2UuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAzMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gICAgLyoqXG4gICAgICogQHByb3Age0FycmF5fSBbcHJpb3JpdHk9WydsZWZ0JywncmlnaHQnLCd0b3AnLCdib3R0b20nXV1cbiAgICAgKiBQb3BwZXIgd2lsbCB0cnkgdG8gcHJldmVudCBvdmVyZmxvdyBmb2xsb3dpbmcgdGhlc2UgcHJpb3JpdGllcyBieSBkZWZhdWx0LFxuICAgICAqIHRoZW4sIGl0IGNvdWxkIG92ZXJmbG93IG9uIHRoZSBsZWZ0IGFuZCBvbiB0b3Agb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwcmlvcml0eTogWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBBbW91bnQgb2YgcGl4ZWwgdXNlZCB0byBkZWZpbmUgYSBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gdGhlIGJvdW5kYXJpZXNcbiAgICAgKiBhbmQgdGhlIHBvcHBlci4gVGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgYWx3YXlzIGhhcyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLiBDYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNoIG90aGVyXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXNwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgaXQgcG9pbnRzIHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcy4gWW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXJcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVuY3Rpb24gYXJlIG5lZWRlZC5cbiAgICpcbiAgICogSXQgaGFzIG5vIGVmZmVjdCBpZiBubyBgYXJyb3dFbGVtZW50YCBpcyBwcm92aWRlZC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFycm93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTUwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXJyb3csXG4gICAgLyoqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGVsZW1lbnQ9J1t4LWFycm93XScgLSBTZWxlY3RvciBvciBub2RlIHVzZWQgYXMgYXJyb3cgKi9cbiAgICBlbGVtZW50OiAnW3gtYXJyb3ddJ1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGZsaXAgdGhlIHBvcHBlcidzIHBsYWNlbWVudCB3aGVuIGl0IHN0YXJ0cyB0byBvdmVybGFwIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudC5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKlxuICAgKiAqKk5PVEU6KiogdGhpcyBtb2RpZmllciB3aWxsIGludGVycnVwdCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUgYW5kIHdpbGxcbiAgICogcmVzdGFydCBpdCBpZiBpdCBkZXRlY3RzIHRoZSBuZWVkIHRvIGZsaXAgdGhlIHBsYWNlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGZsaXA6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA2MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBmbGlwLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8QXJyYXl9IGJlaGF2aW9yPSdmbGlwJ1xuICAgICAqIFRoZSBiZWhhdmlvciB1c2VkIHRvIGNoYW5nZSB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50LiBJdCBjYW4gYmUgb25lIG9mXG4gICAgICogYGZsaXBgLCBgY2xvY2t3aXNlYCwgYGNvdW50ZXJjbG9ja3dpc2VgIG9yIGFuIGFycmF5IHdpdGggYSBsaXN0IG9mIHZhbGlkXG4gICAgICogcGxhY2VtZW50cyAod2l0aCBvcHRpb25hbCB2YXJpYXRpb25zKVxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLlxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBga2VlcFRvZ2V0aGVyYCBpcyBlbmFibGVkKVxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAndmlld3BvcnQnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBmbGlwVmFyaWF0aW9ucz1mYWxzZVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBzd2l0Y2ggcGxhY2VtZW50IHZhcmlhdGlvbiBiZXR3ZWVuIGAtc3RhcnRgIGFuZCBgLWVuZGAgd2hlblxuICAgICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudCBvdmVybGFwcyBpdHMgYm91bmRhcmllcy5cbiAgICAgKlxuICAgICAqIFRoZSBvcmlnaW5hbCBwbGFjZW1lbnQgc2hvdWxkIGhhdmUgYSBzZXQgdmFyaWF0aW9uLlxuICAgICAqL1xuICAgIGZsaXBWYXJpYXRpb25zOiBmYWxzZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQ9ZmFsc2VcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgc3dpdGNoIHBsYWNlbWVudCB2YXJpYXRpb24gYmV0d2VlbiBgLXN0YXJ0YCBhbmQgYC1lbmRgIHdoZW5cbiAgICAgKiB0aGUgcG9wcGVyIGVsZW1lbnQgb3ZlcmxhcHMgaXRzIHJlZmVyZW5jZSBib3VuZGFyaWVzLlxuICAgICAqXG4gICAgICogVGhlIG9yaWdpbmFsIHBsYWNlbWVudCBzaG91bGQgaGF2ZSBhIHNldCB2YXJpYXRpb24uXG4gICAgICovXG4gICAgZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQ6IGZhbHNlXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSB0aGUgcG9wcGVyIGZsb3cgdG93YXJkIHRoZSBpbm5lciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGlubmVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD1mYWxzZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBpbm5lclxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGhpZGUgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXRzaWRlIG9mIHRoZVxuICAgKiBwb3BwZXIgYm91bmRhcmllcy4gSXQgd2lsbCBzZXQgYSBgeC1vdXQtb2YtYm91bmRhcmllc2AgYXR0cmlidXRlIHdoaWNoIGNhblxuICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpc1xuICAgKiBvdXQgb2YgYm91bmRhcmllcy5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaGlkZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDgwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGhpZGVcbiAgfSxcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgZWxlbWVudCB0byBnZXRzXG4gICAqIHByb3Blcmx5IHBvc2l0aW9uZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIG1vZGlmaWVyIHdpbGwgbm90IHRvdWNoIHRoZSBET00sIGl0IGp1c3QgcHJlcGFyZXMgdGhlIHN0eWxlc1xuICAgKiBzbyB0aGF0IGBhcHBseVN0eWxlYCBtb2RpZmllciBjYW4gYXBwbHkgaXQuIFRoaXMgc2VwYXJhdGlvbiBpcyB1c2VmdWxcbiAgICogaW4gY2FzZSB5b3UgbmVlZCB0byByZXBsYWNlIGBhcHBseVN0eWxlYCB3aXRoIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLlxuICAgKlxuICAgKiBUaGlzIG1vZGlmaWVyIGhhcyBgODUwYCBhcyBgb3JkZXJgIHZhbHVlIHRvIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICogd2l0aCBwcmV2aW91cyB2ZXJzaW9ucyBvZiBQb3BwZXIuanMuIEV4cGVjdCB0aGUgbW9kaWZpZXJzIG9yZGVyaW5nIG1ldGhvZFxuICAgKiB0byBjaGFuZ2UgaW4gZnV0dXJlIG1ham9yIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgY29tcHV0ZVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTg1MCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODUwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogY29tcHV0ZVN0eWxlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nYm90dG9tJ11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFggYXhpcyAoYGJvdHRvbWAgb3IgYHRvcGApLiBBS0EgWCBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGBib3R0b21gXG4gICAgICovXG4gICAgeDogJ2JvdHRvbScsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2xlZnQnXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWSBheGlzIChgbGVmdGAgb3IgYHJpZ2h0YCkuIEFLQSBZIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYHJpZ2h0YFxuICAgICAqL1xuICAgIHk6ICdyaWdodCdcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cbiAgICpcbiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XG4gICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayFcbiAgICpcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3VyIG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFwcGx5U3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA5MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcHBseVN0eWxlLFxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXG4gICAgb25Mb2FkOiBhcHBseVN0eWxlT25Mb2FkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHVuZGVmaW5lZFxuICB9XG59O1xuXG4vKipcbiAqIFRoZSBgZGF0YU9iamVjdGAgaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBpbmZvcm1hdGlvbiB1c2VkIGJ5IFBvcHBlci5qcy5cbiAqIFRoaXMgb2JqZWN0IGlzIHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGRhdGEuYXJyb3dFbGVtZW50IE5vZGUgdXNlZCBhcyBhcnJvdyBieSBhcnJvdyBtb2RpZmllclxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuc3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYXJyb3dTdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgYXJyb3cuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5ib3VuZGFyaWVzIE9mZnNldHMgb2YgdGhlIHBvcHBlciBib3VuZGFyaWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzIFRoZSBtZWFzdXJlbWVudHMgb2YgcG9wcGVyLCByZWZlcmVuY2UgYW5kIGFycm93IGVsZW1lbnRzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnBvcHBlciBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucmVmZXJlbmNlIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5hcnJvd10gYHRvcGAgYW5kIGBsZWZ0YCBvZmZzZXRzLCBvbmx5IG9uZSBvZiB0aGVtIHdpbGwgYmUgZGlmZmVyZW50IGZyb20gMFxuICovXG5cbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIHByb3ZpZGVkIHRvIFBvcHBlci5qcyBjb25zdHJ1Y3Rvci48YnIgLz5cbiAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIHVzaW5nIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgb2YgUG9wcGVyLmpzLjxiciAvPlxuICogVG8gb3ZlcnJpZGUgYW4gb3B0aW9uLCBzaW1wbHkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZVxuICogc3RydWN0dXJlIG9mIHRoZSBgb3B0aW9uc2Agb2JqZWN0LCBhcyB0aGUgM3JkIGFyZ3VtZW50LiBGb3IgZXhhbXBsZTpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWYsIHBvcCwge1xuICogICBtb2RpZmllcnM6IHtcbiAqICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogZmFsc2UgfVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgRGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBQb3BwZXIncyBwbGFjZW1lbnQuXG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byB0cnVlIGlmIHlvdSB3YW50IHBvcHBlciB0byBwb3NpdGlvbiBpdCBzZWxmIGluICdmaXhlZCcgbW9kZVxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcG9zaXRpb25GaXhlZD1mYWxzZVxuICAgKi9cbiAgcG9zaXRpb25GaXhlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gZXZlbnRzRW5hYmxlZD10cnVlXG4gICAqL1xuICBldmVudHNFbmFibGVkOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgcG9wcGVyIHdoZW5cbiAgICogeW91IGNhbGwgdGhlIGBkZXN0cm95YCBtZXRob2QuXG4gICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2VcbiAgICovXG4gIHJlbW92ZU9uRGVzdHJveTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgY3JlYXRlZC48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25DcmVhdGV9XG4gICAqL1xuICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7fSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyB1cGRhdGVkLiBUaGlzIGNhbGxiYWNrIGlzIG5vdCBjYWxsZWRcbiAgICogb24gdGhlIGluaXRpYWxpemF0aW9uL2NyZWF0aW9uIG9mIHRoZSBwb3BwZXIsIGJ1dCBvbmx5IG9uIHN1YnNlcXVlbnRcbiAgICogdXBkYXRlcy48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25VcGRhdGV9XG4gICAqL1xuICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoKSB7fSxcblxuICAvKipcbiAgICogTGlzdCBvZiBtb2RpZmllcnMgdXNlZCB0byBtb2RpZnkgdGhlIG9mZnNldHMgYmVmb3JlIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci5cbiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanMuXG4gICAqIEBwcm9wIHttb2RpZmllcnN9XG4gICAqL1xuICBtb2RpZmllcnM6IG1vZGlmaWVyc1xufTtcblxuLyoqXG4gKiBAY2FsbGJhY2sgb25DcmVhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9uVXBkYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vLyBVdGlsc1xuLy8gTWV0aG9kc1xudmFyIFBvcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlLlxuICAgKiBAY2xhc3MgUG9wcGVyXG4gICAqIEBwYXJhbSB7RWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCAvIFhNTCBlbGVtZW50IHVzZWQgYXMgdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFlvdXIgY3VzdG9tIG9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIG9uZXMgZGVmaW5lZCBpbiBbRGVmYXVsdHNdKCNkZWZhdWx0cylcbiAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZSAtIFRoZSBnZW5lcmF0ZWQgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqL1xuICBmdW5jdGlvbiBQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcHBlcik7XG5cbiAgICB0aGlzLnNjaGVkdWxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShfdGhpcy51cGRhdGUpO1xuICAgIH07XG5cbiAgICAvLyBtYWtlIHVwZGF0ZSgpIGRlYm91bmNlZCwgc28gdGhhdCBpdCBvbmx5IHJ1bnMgYXQgbW9zdCBvbmNlLXBlci10aWNrXG4gICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIHdpdGgge30gd2UgY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvcHRpb25zIGluc2lkZSBpdFxuICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgLy8gaW5pdCBzdGF0ZVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0Rlc3Ryb3llZDogZmFsc2UsXG4gICAgICBpc0NyZWF0ZWQ6IGZhbHNlLFxuICAgICAgc2Nyb2xsUGFyZW50czogW11cbiAgICB9O1xuXG4gICAgLy8gZ2V0IHJlZmVyZW5jZSBhbmQgcG9wcGVyIGVsZW1lbnRzIChhbGxvdyBqUXVlcnkgd3JhcHBlcnMpXG4gICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLmpxdWVyeSA/IHJlZmVyZW5jZVswXSA6IHJlZmVyZW5jZTtcbiAgICB0aGlzLnBvcHBlciA9IHBvcHBlciAmJiBwb3BwZXIuanF1ZXJ5ID8gcG9wcGVyWzBdIDogcG9wcGVyO1xuXG4gICAgLy8gRGVlcCBtZXJnZSBtb2RpZmllcnMgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVycywgb3B0aW9ucy5tb2RpZmllcnMpKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzW25hbWVdIHx8IHt9LCBvcHRpb25zLm1vZGlmaWVycyA/IG9wdGlvbnMubW9kaWZpZXJzW25hbWVdIDoge30pO1xuICAgIH0pO1xuXG4gICAgLy8gUmVmYWN0b3JpbmcgbW9kaWZpZXJzJyBsaXN0IChPYmplY3QgPT4gQXJyYXkpXG4gICAgdGhpcy5tb2RpZmllcnMgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kaWZpZXJzKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIG5hbWU6IG5hbWVcbiAgICAgIH0sIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdKTtcbiAgICB9KVxuICAgIC8vIHNvcnQgdGhlIG1vZGlmaWVycyBieSBvcmRlclxuICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG4gICAgfSk7XG5cbiAgICAvLyBtb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIHdoZW4gUG9wcGVyLmpzIGdldCBpbml0ZWRcbiAgICAvLyBzdWNoIGNvZGUgaXMgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgb2YgaXRzIG1vZGlmaWVyXG4gICAgLy8gdGhleSBjb3VsZCBhZGQgbmV3IHByb3BlcnRpZXMgdG8gdGhlaXIgb3B0aW9ucyBjb25maWd1cmF0aW9uXG4gICAgLy8gQkUgQVdBUkU6IGRvbid0IGFkZCBvcHRpb25zIHRvIGBvcHRpb25zLm1vZGlmaWVycy5uYW1lYCBidXQgdG8gYG1vZGlmaWVyT3B0aW9uc2AhXG4gICAgdGhpcy5tb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXJPcHRpb25zKSB7XG4gICAgICBpZiAobW9kaWZpZXJPcHRpb25zLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihtb2RpZmllck9wdGlvbnMub25Mb2FkKSkge1xuICAgICAgICBtb2RpZmllck9wdGlvbnMub25Mb2FkKF90aGlzLnJlZmVyZW5jZSwgX3RoaXMucG9wcGVyLCBfdGhpcy5vcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIF90aGlzLnN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGZpcmUgdGhlIGZpcnN0IHVwZGF0ZSB0byBwb3NpdGlvbiB0aGUgcG9wcGVyIGluIHRoZSByaWdodCBwbGFjZVxuICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICB2YXIgZXZlbnRzRW5hYmxlZCA9IHRoaXMub3B0aW9ucy5ldmVudHNFbmFibGVkO1xuICAgIGlmIChldmVudHNFbmFibGVkKSB7XG4gICAgICAvLyBzZXR1cCBldmVudCBsaXN0ZW5lcnMsIHRoZXkgd2lsbCB0YWtlIGNhcmUgb2YgdXBkYXRlIHRoZSBwb3NpdGlvbiBpbiBzcGVjaWZpYyBzaXR1YXRpb25zXG4gICAgICB0aGlzLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkID0gZXZlbnRzRW5hYmxlZDtcbiAgfVxuXG4gIC8vIFdlIGNhbid0IHVzZSBjbGFzcyBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBkb24ndCBnZXQgbGlzdGVkIGluIHRoZVxuICAvLyBjbGFzcyBwcm90b3R5cGUgYW5kIGJyZWFrIHN0dWZmIGxpa2UgU2lub24gc3R1YnNcblxuXG4gIGNyZWF0ZUNsYXNzKFBvcHBlciwgW3tcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUkJDEoKSB7XG4gICAgICByZXR1cm4gdXBkYXRlLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3kkJDEoKSB7XG4gICAgICByZXR1cm4gZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7XG4gICAgICByZXR1cm4gZW5hYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNhYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7XG4gICAgICByZXR1cm4gZGlzYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVzIGFuIHVwZGF0ZS4gSXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZS5cbiAgICAgKiBAbWV0aG9kIHNjaGVkdWxlVXBkYXRlXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB1c2VmdWwgd2hlbiB3cml0aW5nIGN1c3RvbSBtb2RpZmllcnMuXG4gICAgICogU3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDEuNywgdGhpcyBtZXRob2QgaXMgYXZhaWxhYmxlIG9ubHkgaWYgeW91XG4gICAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXG4gICAgICpcbiAgICAgKiAqKkRFUFJFQ0FUSU9OKio6IFRoaXMgd2F5IHRvIGFjY2VzcyBQb3BwZXJVdGlscyBpcyBkZXByZWNhdGVkXG4gICAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICAgKiBEdWUgdG8gdGhlIGhpZ2ggaW5zdGFiaWxpdHkgb2YgdGhlIG1ldGhvZHMgY29udGFpbmVkIGluIFV0aWxzLCB3ZSBjYW4ndFxuICAgICAqIGd1YXJhbnRlZSB0aGVtIHRvIGZvbGxvdyBzZW12ZXIuIFVzZSB0aGVtIGF0IHlvdXIgb3duIHJpc2shXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxuICAgICAqIEBtZW1iZXIgVXRpbHNcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cbiAgfV0pO1xuICByZXR1cm4gUG9wcGVyO1xufSgpO1xuXG4vKipcbiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qc1xuICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+XG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXG4gKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS5cbiAqXG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTtcbiAqIGBgYFxuICpcbiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwLlxuICogQG5hbWUgcmVmZXJlbmNlT2JqZWN0XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBkYXRhLmdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZXQgb2YgY29vcmRpbmF0ZXMgY29tcGF0aWJsZSB3aXRoIHRoZSBuYXRpdmUgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgbWV0aG9kLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50V2lkdGhcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgd2lkdGggb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRIZWlnaHRcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgaGVpZ2h0IG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICovXG5cblxuUG9wcGVyLlV0aWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKS5Qb3BwZXJVdGlscztcblBvcHBlci5wbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblBvcHBlci5EZWZhdWx0cyA9IERlZmF1bHRzO1xuXG5leHBvcnQgZGVmYXVsdCBQb3BwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3BwZXIuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9pbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIF9pbXBsZW1lbnRhdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbXBsZW1lbnRhdGlvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDb250ZXh0IHx8IF9pbXBsZW1lbnRhdGlvbjIuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgfVxuICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzUGF0aDtcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBtZW1vaXplQ2FwcGVkID0gcmVxdWlyZSgnLi9fbWVtb2l6ZUNhcHBlZCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIiwidmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9fYXBwbHknKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIGluZGV4ID0gLTE7XG4gICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyUmVzdDtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnN0YW50O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0eTtcbiIsIi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU5vdyA9IERhdGUubm93O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG9ydE91dDtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpLFxuICAgIGJhc2VTZXQgPSByZXF1aXJlKCcuL19iYXNlU2V0JyksXG4gICAgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0ge307XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgcGF0aCA9IHBhdGhzW2luZGV4XSxcbiAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgYmFzZVNldChyZXN1bHQsIGNhc3RQYXRoKHBhdGgsIG9iamVjdCksIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUGlja0J5O1xuIiwidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTZXQ7XG4iLCJ2YXIgYmFzZUhhc0luID0gcmVxdWlyZSgnLi9fYmFzZUhhc0luJyksXG4gICAgaGFzUGF0aCA9IHJlcXVpcmUoJy4vX2hhc1BhdGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0luO1xuIiwidmFyIGJhc2VGaW5kSW5kZXggPSByZXF1aXJlKCcuL19iYXNlRmluZEluZGV4JyksXG4gICAgYmFzZUlzTmFOID0gcmVxdWlyZSgnLi9fYmFzZUlzTmFOJyksXG4gICAgc3RyaWN0SW5kZXhPZiA9IHJlcXVpcmUoJy4vX3N0cmljdEluZGV4T2YnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW5kZXhPZjtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGaW5kSW5kZXg7XG4iLCJ2YXIgYmFzZVRpbWVzID0gcmVxdWlyZSgnLi9fYmFzZVRpbWVzJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TGlrZUtleXM7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUaW1lcztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlSZWR1Y2U7XG4iLCJ2YXIgY3JlYXRlQmFzZUZvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VGb3InKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3I7XG4iLCJ2YXIgU2V0Q2FjaGUgPSByZXF1aXJlKCcuL19TZXRDYWNoZScpLFxuICAgIGFycmF5U29tZSA9IHJlcXVpcmUoJy4vX2FycmF5U29tZScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlTb21lO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheTtcbiIsIi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwVG9BcnJheTtcbiIsInZhciBiYXNlR2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRBbGxLZXlzJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5cztcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0QWxsS2V5cztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkFycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYWtNYXA7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N0cmljdENvbXBhcmFibGU7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWF0Y2hlc1N0cmljdENvbXBhcmFibGU7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eTtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXMnKSxcbiAgICBhcnJheUluY2x1ZGVzV2l0aCA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXNXaXRoJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gKiBmb3IgZXhjbHVkaW5nIG11bHRpcGxlIGFycmF5cyBvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gW10sXG4gICAgICB2YWx1ZXNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuXG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoaXRlcmF0ZWUpIHtcbiAgICB2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICB9XG4gIGlmIChjb21wYXJhdG9yKSB7XG4gICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICB9XG4gIGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgfVxuICBvdXRlcjpcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWluY2x1ZGVzKHZhbHVlcywgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZURpZmZlcmVuY2U7XG4iLCJ2YXIgU2V0Q2FjaGUgPSByZXF1aXJlKCcuL19TZXRDYWNoZScpLFxuICAgIGFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheUluY2x1ZGVzJyksXG4gICAgYXJyYXlJbmNsdWRlc1dpdGggPSByZXF1aXJlKCcuL19hcnJheUluY2x1ZGVzV2l0aCcpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKSxcbiAgICBjcmVhdGVTZXQgPSByZXF1aXJlKCcuL19jcmVhdGVTZXQnKSxcbiAgICBzZXRUb0FycmF5ID0gcmVxdWlyZSgnLi9fc2V0VG9BcnJheScpO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICByZXN1bHQgPSBbXSxcbiAgICAgIHNlZW4gPSByZXN1bHQ7XG5cbiAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gIH1cbiAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICB2YXIgc2V0ID0gaXRlcmF0ZWUgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICBpZiAoc2V0KSB7XG4gICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgIH1cbiAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgc2VlbiA9IG5ldyBTZXRDYWNoZTtcbiAgfVxuICBlbHNlIHtcbiAgICBzZWVuID0gaXRlcmF0ZWUgPyBbXSA6IHJlc3VsdDtcbiAgfVxuICBvdXRlcjpcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmlxO1xuIiwidmFyIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RGdW5jdGlvbjtcbiIsInZhciBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBtZXRhTWFwID0gcmVxdWlyZSgnLi9fbWV0YU1hcCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldERhdGEgPSAhbWV0YU1hcCA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgZGF0YSkge1xuICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgcmV0dXJuIGZ1bmM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTZXREYXRhO1xuIiwidmFyIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyk7XG5cbi8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1ldGFNYXA7XG4iLCJ2YXIgY29tcG9zZUFyZ3MgPSByZXF1aXJlKCcuL19jb21wb3NlQXJncycpLFxuICAgIGNvbXBvc2VBcmdzUmlnaHQgPSByZXF1aXJlKCcuL19jb21wb3NlQXJnc1JpZ2h0JyksXG4gICAgY291bnRIb2xkZXJzID0gcmVxdWlyZSgnLi9fY291bnRIb2xkZXJzJyksXG4gICAgY3JlYXRlQ3RvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUN0b3InKSxcbiAgICBjcmVhdGVSZWN1cnJ5ID0gcmVxdWlyZSgnLi9fY3JlYXRlUmVjdXJyeScpLFxuICAgIGdldEhvbGRlciA9IHJlcXVpcmUoJy4vX2dldEhvbGRlcicpLFxuICAgIHJlb3JkZXIgPSByZXF1aXJlKCcuL19yZW9yZGVyJyksXG4gICAgcmVwbGFjZUhvbGRlcnMgPSByZXF1aXJlKCcuL19yZXBsYWNlSG9sZGVycycpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAqICB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgaXNGbGlwID0gYml0bWFzayAmIFdSQVBfRkxJUF9GTEFHLFxuICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICB9XG4gICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgfVxuICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgIH1cbiAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgIH1cbiAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICApO1xuICAgIH1cbiAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICBpZiAoYXJnUG9zKSB7XG4gICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgIH1cbiAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICB9XG4gICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICB9XG4gIHJldHVybiB3cmFwcGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUh5YnJpZDtcbiIsIi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAqIHBsYWNlaG9sZGVycywgYW5kIHByb3ZpZGVkIGFyZ3VtZW50cyBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gIH1cbiAgd2hpbGUgKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICByZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wb3NlQXJncztcbiIsIi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICovXG5mdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgaG9sZGVyc0luZGV4ID0gLTEsXG4gICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gIH1cbiAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gIH1cbiAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBvc2VBcmdzUmlnaHQ7XG4iLCJ2YXIgaXNMYXppYWJsZSA9IHJlcXVpcmUoJy4vX2lzTGF6aWFibGUnKSxcbiAgICBzZXREYXRhID0gcmVxdWlyZSgnLi9fc2V0RGF0YScpLFxuICAgIHNldFdyYXBUb1N0cmluZyA9IHJlcXVpcmUoJy4vX3NldFdyYXBUb1N0cmluZycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbnZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcgPSA0LFxuICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgV1JBUF9QQVJUSUFMX0ZMQUcgPSAzMixcbiAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBjb250aW51ZSBjdXJyeWluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZCxcbiAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IHBhcnRpYWxzO1xuXG4gIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICBpZiAoIShiaXRtYXNrICYgV1JBUF9DVVJSWV9CT1VORF9GTEFHKSkge1xuICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gIH1cbiAgdmFyIG5ld0RhdGEgPSBbXG4gICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgXTtcblxuICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICBzZXREYXRhKHJlc3VsdCwgbmV3RGF0YSk7XG4gIH1cbiAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVSZWN1cnJ5O1xuIiwidmFyIExhenlXcmFwcGVyID0gcmVxdWlyZSgnLi9fTGF6eVdyYXBwZXInKSxcbiAgICBnZXREYXRhID0gcmVxdWlyZSgnLi9fZ2V0RGF0YScpLFxuICAgIGdldEZ1bmNOYW1lID0gcmVxdWlyZSgnLi9fZ2V0RnVuY05hbWUnKSxcbiAgICBsb2Rhc2ggPSByZXF1aXJlKCcuL3dyYXBwZXJMb2Rhc2gnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNMYXppYWJsZShmdW5jKSB7XG4gIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gIGlmICh0eXBlb2Ygb3RoZXIgIT0gJ2Z1bmN0aW9uJyB8fCAhKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGZ1bmMgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGRhdGEgPSBnZXREYXRhKG90aGVyKTtcbiAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGF6aWFibGU7XG4iLCJ2YXIgcmVhbE5hbWVzID0gcmVxdWlyZSgnLi9fcmVhbE5hbWVzJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAqL1xuZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG4gICAgICBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0KSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICByZXR1cm4gZGF0YS5uYW1lO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEZ1bmNOYW1lO1xuIiwidmFyIGJhc2VTZXREYXRhID0gcmVxdWlyZSgnLi9fYmFzZVNldERhdGEnKSxcbiAgICBzaG9ydE91dCA9IHJlcXVpcmUoJy4vX3Nob3J0T3V0Jyk7XG5cbi8qKlxuICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICpcbiAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICogZnVuY3Rpb24gdG8gYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uIHBhdXNlcyBpbiBWOC4gU2VlXG4gKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXREYXRhID0gc2hvcnRPdXQoYmFzZVNldERhdGEpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNldERhdGE7XG4iLCJ2YXIgZ2V0V3JhcERldGFpbHMgPSByZXF1aXJlKCcuL19nZXRXcmFwRGV0YWlscycpLFxuICAgIGluc2VydFdyYXBEZXRhaWxzID0gcmVxdWlyZSgnLi9faW5zZXJ0V3JhcERldGFpbHMnKSxcbiAgICBzZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX3NldFRvU3RyaW5nJyksXG4gICAgdXBkYXRlV3JhcERldGFpbHMgPSByZXF1aXJlKCcuL191cGRhdGVXcmFwRGV0YWlscycpO1xuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gKi9cbmZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyh3cmFwcGVyLCByZWZlcmVuY2UsIGJpdG1hc2spIHtcbiAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0V3JhcFRvU3RyaW5nO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnbjtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYXJyYXlFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXlFYWNoJyksXG4gICAgYXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25WYWx1ZScpLFxuICAgIGJhc2VBc3NpZ24gPSByZXF1aXJlKCcuL19iYXNlQXNzaWduJyksXG4gICAgYmFzZUFzc2lnbkluID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnbkluJyksXG4gICAgY2xvbmVCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUJ1ZmZlcicpLFxuICAgIGNvcHlBcnJheSA9IHJlcXVpcmUoJy4vX2NvcHlBcnJheScpLFxuICAgIGNvcHlTeW1ib2xzID0gcmVxdWlyZSgnLi9fY29weVN5bWJvbHMnKSxcbiAgICBjb3B5U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fY29weVN5bWJvbHNJbicpLFxuICAgIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyksXG4gICAgZ2V0QWxsS2V5c0luID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5c0luJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaW5pdENsb25lQXJyYXkgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVBcnJheScpLFxuICAgIGluaXRDbG9uZUJ5VGFnID0gcmVxdWlyZSgnLi9faW5pdENsb25lQnlUYWcnKSxcbiAgICBpbml0Q2xvbmVPYmplY3QgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVPYmplY3QnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNNYXAgPSByZXF1aXJlKCcuL2lzTWFwJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTZXQgPSByZXF1aXJlKCcuL2lzU2V0JyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG52YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbmNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbmNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG5jbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gRGVlcCBjbG9uZVxuICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gKiAgNCAtIENsb25lIHN5bWJvbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ2xvbmU7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZUJ1ZmZlcjtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKG9iamVjdCkge1xuICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9sc0luO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzSW4nKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXNJbjtcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lVHlwZWRBcnJheTtcbiIsInZhciBiYXNlQ3JlYXRlID0gcmVxdWlyZSgnLi9fYmFzZUNyZWF0ZScpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZU9iamVjdDtcbiIsInZhciBiYXNlU2xpY2UgPSByZXF1aXJlKCcuL19iYXNlU2xpY2UnKTtcblxuLyoqXG4gKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBwb3NpdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAqL1xuZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kO1xuICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0U2xpY2U7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsYW1wYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAqL1xuZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gIGlmIChudW1iZXIgPT09IG51bWJlcikge1xuICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBudW1iZXIgPSBudW1iZXIgPD0gdXBwZXIgPyBudW1iZXIgOiB1cHBlcjtcbiAgICB9XG4gICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVtYmVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VDbGFtcDtcbiIsInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ25NZXJnZVZhbHVlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2FmZUdldDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGlzQXJncyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKTtcblxudmFyIG9yaWdLZXlzID0gT2JqZWN0LmtleXM7XG52YXIga2V5c1NoaW0gPSBvcmlnS2V5cyA/IGZ1bmN0aW9uIGtleXMobykgeyByZXR1cm4gb3JpZ0tleXMobyk7IH0gOiByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBvcmlnaW5hbEtleXMgPSBPYmplY3Qua2V5cztcblxua2V5c1NoaW0uc2hpbSA9IGZ1bmN0aW9uIHNoaW1PYmplY3RLZXlzKCkge1xuXHRpZiAoT2JqZWN0LmtleXMpIHtcblx0XHR2YXIga2V5c1dvcmtzV2l0aEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0XHQvLyBTYWZhcmkgNS4wIGJ1Z1xuXHRcdFx0dmFyIGFyZ3MgPSBPYmplY3Qua2V5cyhhcmd1bWVudHMpO1xuXHRcdFx0cmV0dXJuIGFyZ3MgJiYgYXJncy5sZW5ndGggPT09IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0fSgxLCAyKSk7XG5cdFx0aWYgKCFrZXlzV29ya3NXaXRoQXJndW1lbnRzKSB7XG5cdFx0XHRPYmplY3Qua2V5cyA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nXG5cdFx0XHRcdGlmIChpc0FyZ3Mob2JqZWN0KSkge1xuXHRcdFx0XHRcdHJldHVybiBvcmlnaW5hbEtleXMoc2xpY2UuY2FsbChvYmplY3QpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKG9iamVjdCk7XG5cdFx0XHR9O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRPYmplY3Qua2V5cyA9IGtleXNTaGltO1xuXHR9XG5cdHJldHVybiBPYmplY3Qua2V5cyB8fCBrZXlzU2hpbTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0dmFyIHN0ciA9IHRvU3RyLmNhbGwodmFsdWUpO1xuXHR2YXIgaXNBcmdzID0gc3RyID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcblx0aWYgKCFpc0FyZ3MpIHtcblx0XHRpc0FyZ3MgPSBzdHIgIT09ICdbb2JqZWN0IEFycmF5XScgJiZcblx0XHRcdHZhbHVlICE9PSBudWxsICYmXG5cdFx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdFx0XHR0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJlxuXHRcdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHRcdHRvU3RyLmNhbGwodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0fVxuXHRyZXR1cm4gaXNBcmdzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmbGFncygpIHtcblx0aWYgKHRoaXMgIT0gbnVsbCAmJiB0aGlzICE9PSAkT2JqZWN0KHRoaXMpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1JlZ0V4cC5wcm90b3R5cGUuZmxhZ3MgZ2V0dGVyIGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9ICcnO1xuXHRpZiAodGhpcy5nbG9iYWwpIHtcblx0XHRyZXN1bHQgKz0gJ2cnO1xuXHR9XG5cdGlmICh0aGlzLmlnbm9yZUNhc2UpIHtcblx0XHRyZXN1bHQgKz0gJ2knO1xuXHR9XG5cdGlmICh0aGlzLm11bHRpbGluZSkge1xuXHRcdHJlc3VsdCArPSAnbSc7XG5cdH1cblx0aWYgKHRoaXMuZG90QWxsKSB7XG5cdFx0cmVzdWx0ICs9ICdzJztcblx0fVxuXHRpZiAodGhpcy51bmljb2RlKSB7XG5cdFx0cmVzdWx0ICs9ICd1Jztcblx0fVxuXHRpZiAodGhpcy5zdGlja3kpIHtcblx0XHRyZXN1bHQgKz0gJ3knO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKS5zdXBwb3J0c0Rlc2NyaXB0b3JzO1xudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRpZiAoIXN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUmVnRXhwLnByb3RvdHlwZS5mbGFncyByZXF1aXJlcyBhIHRydWUgRVM1IGVudmlyb25tZW50IHRoYXQgc3VwcG9ydHMgcHJvcGVydHkgZGVzY3JpcHRvcnMnKTtcblx0fVxuXHRpZiAoKC9hL21pZykuZmxhZ3MgPT09ICdnaW0nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSAkZ09QRChSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnKTtcblx0XHRpZiAoZGVzY3JpcHRvciAmJiB0eXBlb2YgZGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mICgvYS8pLmRvdEFsbCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRyZXR1cm4gZGVzY3JpcHRvci5nZXQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCJpbXBvcnQgKiBhcyBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgdXNlRXZlbnRMaXN0ZW5lciBmcm9tICcuL3VzZUV2ZW50TGlzdGVuZXInO1xuXG5mdW5jdGlvbiBFdmVudExpc3RlbmVyKHByb3BzKSB7XG4gIHVzZUV2ZW50TGlzdGVuZXIocHJvcHMpO1xuICByZXR1cm4gbnVsbDtcbn1cblxuRXZlbnRMaXN0ZW5lci5kaXNwbGF5TmFtZSA9ICdFdmVudExpc3RlbmVyJzsgLy8gVE9ETzogdXNlIEJhYmVsIHBsdWdpbiBmb3IgdGhpc1xuXG5FdmVudExpc3RlbmVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGNhcHR1cmU6IFByb3BUeXBlcy5ib29sLFxuICBsaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdGFyZ2V0UmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkuaXNSZXF1aXJlZCxcbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59IDoge307XG5FdmVudExpc3RlbmVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2FwdHVyZTogZmFsc2Vcbn07XG5leHBvcnQgZGVmYXVsdCBFdmVudExpc3RlbmVyOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3VybCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICd2YWxpZGF0ZVN0YXR1cycsICdtYXhSZWRpcmVjdHMnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJ1xuICBdO1xuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMilcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgZnVuY3Rpb24gb3RoZXJLZXlzRGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9oZWFkJyk7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBOdW1iZXJgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gKiBjbGFzc2lmaWVkIGFzIG51bWJlcnMsIHVzZSB0aGUgYF8uaXNGaW5pdGVgIG1ldGhvZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTnVtYmVyKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc051bWJlcignMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IG51bWJlclRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOdW1iZXI7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZSB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQm9vbGVhbjtcbiIsInZhciBjb252ZXJ0ID0gcmVxdWlyZSgnLi9jb252ZXJ0JyksXG4gICAgZnVuYyA9IGNvbnZlcnQoJ3VuaXEnLCByZXF1aXJlKCcuLi91bmlxJyksIHJlcXVpcmUoJy4vX2ZhbHNlT3B0aW9ucycpKTtcblxuZnVuYy5wbGFjZWhvbGRlciA9IHJlcXVpcmUoJy4vcGxhY2Vob2xkZXInKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuYztcbiIsInZhciBjb252ZXJ0ID0gcmVxdWlyZSgnLi9jb252ZXJ0JyksXG4gICAgZnVuYyA9IGNvbnZlcnQoJ2lkZW50aXR5JywgcmVxdWlyZSgnLi4vaWRlbnRpdHknKSwgcmVxdWlyZSgnLi9fZmFsc2VPcHRpb25zJykpO1xuXG5mdW5jLnBsYWNlaG9sZGVyID0gcmVxdWlyZSgnLi9wbGFjZWhvbGRlcicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jO1xuIiwidmFyIGNvbnZlcnQgPSByZXF1aXJlKCcuL2NvbnZlcnQnKSxcbiAgICBmdW5jID0gY29udmVydCgnZmlsdGVyJywgcmVxdWlyZSgnLi4vZmlsdGVyJykpO1xuXG5mdW5jLnBsYWNlaG9sZGVyID0gcmVxdWlyZSgnLi9wbGFjZWhvbGRlcicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jO1xuIiwidmFyIGNvbnZlcnQgPSByZXF1aXJlKCcuL2NvbnZlcnQnKSxcbiAgICBmdW5jID0gY29udmVydCgnc3BsaXQnLCByZXF1aXJlKCcuLi9zcGxpdCcpKTtcblxuZnVuYy5wbGFjZWhvbGRlciA9IHJlcXVpcmUoJy4vcGxhY2Vob2xkZXInKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuYztcbiIsInZhciBjb252ZXJ0ID0gcmVxdWlyZSgnLi9jb252ZXJ0JyksXG4gICAgZnVuYyA9IGNvbnZlcnQoJ2ZsYXRNYXAnLCByZXF1aXJlKCcuLi9mbGF0TWFwJykpO1xuXG5mdW5jLnBsYWNlaG9sZGVyID0gcmVxdWlyZSgnLi9wbGFjZWhvbGRlcicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jO1xuIiwidmFyIGNvbnZlcnQgPSByZXF1aXJlKCcuL2NvbnZlcnQnKSxcbiAgICBmdW5jID0gY29udmVydCgnbWFwJywgcmVxdWlyZSgnLi4vbWFwJykpO1xuXG5mdW5jLnBsYWNlaG9sZGVyID0gcmVxdWlyZSgnLi9wbGFjZWhvbGRlcicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jO1xuIiwidmFyIGNvbnZlcnQgPSByZXF1aXJlKCcuL2NvbnZlcnQnKSxcbiAgICBmdW5jID0gY29udmVydCgndG9BcnJheScsIHJlcXVpcmUoJy4uL3RvQXJyYXknKSwgcmVxdWlyZSgnLi9fZmFsc2VPcHRpb25zJykpO1xuXG5mdW5jLnBsYWNlaG9sZGVyID0gcmVxdWlyZSgnLi9wbGFjZWhvbGRlcicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jO1xuIiwidmFyIGNvbnZlcnQgPSByZXF1aXJlKCcuL2NvbnZlcnQnKSxcbiAgICBmdW5jID0gY29udmVydCgnZmxvdycsIHJlcXVpcmUoJy4uL2Zsb3cnKSk7XG5cbmZ1bmMucGxhY2Vob2xkZXIgPSByZXF1aXJlKCcuL3BsYWNlaG9sZGVyJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmM7XG4iLCJ2YXIgY3JlYXRlUmFuZ2UgPSByZXF1aXJlKCcuL19jcmVhdGVSYW5nZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICogYHN0YXJ0YCBpcyBzcGVjaWZpZWQgd2l0aG91dCBhbiBgZW5kYCBvciBgc3RlcGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsXG4gKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gKlxuICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogXy5yYW5nZSg0KTtcbiAqIC8vID0+IFswLCAxLCAyLCAzXVxuICpcbiAqIF8ucmFuZ2UoLTQpO1xuICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gKlxuICogXy5yYW5nZSgxLCA1KTtcbiAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICpcbiAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICogLy8gPT4gWzAsIDUsIDEwLCAxNV1cbiAqXG4gKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAqXG4gKiBfLnJhbmdlKDEsIDQsIDApO1xuICogLy8gPT4gWzEsIDEsIDFdXG4gKlxuICogXy5yYW5nZSgwKTtcbiAqIC8vID0+IFtdXG4gKi9cbnZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmFuZ2U7XG4iLCJ2YXIgY3JlYXRlQ29tcG91bmRlciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUNvbXBvdW5kZXInKSxcbiAgICB1cHBlckZpcnN0ID0gcmVxdWlyZSgnLi91cHBlckZpcnN0Jyk7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAqIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4xLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICogLy8gPT4gJ0ZvbyBCYXInXG4gKlxuICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICogLy8gPT4gJ0ZvbyBCYXInXG4gKlxuICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gKiAvLyA9PiAnRk9PIEJBUidcbiAqL1xudmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXJ0Q2FzZTtcbiIsInZhciBiYXNlU2V0ID0gcmVxdWlyZSgnLi9fYmFzZVNldCcpO1xuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICogaXQncyBjcmVhdGVkLiBBcnJheXMgYXJlIGNyZWF0ZWQgZm9yIG1pc3NpbmcgaW5kZXggcHJvcGVydGllcyB3aGlsZSBvYmplY3RzXG4gKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICogYHBhdGhgIGNyZWF0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAqIC8vID0+IDRcbiAqXG4gKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gKiAvLyA9PiA1XG4gKi9cbmZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0O1xuIiwiLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsXG4gKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uY29tcGFjdChbMCwgMSwgZmFsc2UsIDIsICcnLCAzXSk7XG4gKiAvLyA9PiBbMSwgMiwgM11cbiAqL1xuZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wYWN0O1xuIiwidmFyIGFycmF5RXZlcnkgPSByZXF1aXJlKCcuL19hcnJheUV2ZXJ5JyksXG4gICAgYmFzZUV2ZXJ5ID0gcmVxdWlyZSgnLi9fYmFzZUV2ZXJ5JyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzSXRlcmF0ZWVDYWxsID0gcmVxdWlyZSgnLi9faXNJdGVyYXRlZUNhbGwnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxuICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAqIF07XG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmV2ZXJ5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBiYXNlSXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXZlcnk7XG4iLCJ2YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4vKipcbiAqIEVzY2FwZXMgdGhlIGBSZWdFeHBgIHNwZWNpYWwgY2hhcmFjdGVycyBcIl5cIiwgXCIkXCIsIFwiXFxcIiwgXCIuXCIsIFwiKlwiLCBcIitcIixcbiAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICogLy8gPT4gJ1xcW2xvZGFzaFxcXVxcKGh0dHBzOi8vbG9kYXNoXFwuY29tL1xcKSdcbiAqL1xuZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICA6IHN0cmluZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGVSZWdFeHA7XG4iLCJ2YXIgYmFzZVNsaWNlID0gcmVxdWlyZSgnLi9fYmFzZVNsaWNlJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAqIC8vID0+IFsxXVxuICpcbiAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gKiAvLyA9PiBbXVxuICpcbiAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gKiAvLyA9PiBbMSwgMiwgM11cbiAqL1xuZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gIG4gPSBsZW5ndGggLSBuO1xuICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkcm9wUmlnaHQ7XG4iLCJ2YXIgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzU3RyaW5nID0gcmVxdWlyZSgnLi9pc1N0cmluZycpLFxuICAgIHN0cmluZ1NpemUgPSByZXF1aXJlKCcuL19zdHJpbmdTaXplJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqXG4gKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29sbGVjdGlvbiBzaXplLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnNpemUoWzEsIDIsIDNdKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLnNpemUoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAqIC8vID0+IDJcbiAqXG4gKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAqIC8vID0+IDdcbiAqL1xuZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gIH1cbiAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgIHJldHVybiBjb2xsZWN0aW9uLnNpemU7XG4gIH1cbiAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaXplO1xuIiwidmFyIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gKiBlcXVpdmFsZW50LlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBvYmplY3QgPT09IG90aGVyO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFcXVhbDtcbiIsInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICogQHNlZSBfLm1hcEtleXNcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0ge1xuICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAqIH07XG4gKlxuICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaXRlcmF0ZWUgPSBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBWYWx1ZXM7XG4iLCJ2YXIgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyksXG4gICAgY3JlYXRlQWdncmVnYXRvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUFnZ3JlZ2F0b3InKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICogZWFjaCBrZXkgaXMgdGhlIGxhc3QgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LiBUaGVcbiAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXkgPSBbXG4gKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gKiBdO1xuICpcbiAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAqICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoby5jb2RlKTtcbiAqIH0pO1xuICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICpcbiAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gKi9cbnZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Qnk7XG4iLCJ2YXIgYmFzZU1lcmdlID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlJyksXG4gICAgY3JlYXRlQXNzaWduZXIgPSByZXF1aXJlKCcuL19jcmVhdGVBc3NpZ25lcicpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC41LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHtcbiAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAqIH07XG4gKlxuICogdmFyIG90aGVyID0ge1xuICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICogfTtcbiAqXG4gKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICovXG52YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZTtcbiIsInZhciBjb25zdGFudCA9IHJlcXVpcmUoJy4vY29uc3RhbnQnKSxcbiAgICBjcmVhdGVJbnZlcnRlciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUludmVydGVyJyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAqIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuNy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICpcbiAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gKi9cbnZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG59LCBjb25zdGFudChpZGVudGl0eSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmVydDtcbiIsInZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnb2JqZWN0LWtleXMnKTtcbnZhciBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJ2lzLWFyZ3VtZW50cycpO1xudmFyIGlzID0gcmVxdWlyZSgnb2JqZWN0LWlzJyk7XG52YXIgaXNSZWdleCA9IHJlcXVpcmUoJ2lzLXJlZ2V4Jyk7XG52YXIgZmxhZ3MgPSByZXF1aXJlKCdyZWdleHAucHJvdG90eXBlLmZsYWdzJyk7XG52YXIgaXNEYXRlID0gcmVxdWlyZSgnaXMtZGF0ZS1vYmplY3QnKTtcblxudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xuXG5mdW5jdGlvbiBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gNy4xLiBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4gIGlmIChvcHRzLnN0cmljdCA/IGlzKGFjdHVhbCwgZXhwZWN0ZWQpIDogYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gNy4zLiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLCBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuICBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQgfHwgKHR5cGVvZiBhY3R1YWwgIT09ICdvYmplY3QnICYmIHR5cGVvZiBleHBlY3RlZCAhPT0gJ29iamVjdCcpKSB7XG4gICAgcmV0dXJuIG9wdHMuc3RyaWN0ID8gaXMoYWN0dWFsLCBleHBlY3RlZCkgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG4gIH1cblxuICAvKlxuICAgKiA3LjQuIEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgICogZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gICAqIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgICogKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAgKiBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAgKiBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkT3JOdWxsKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc0J1ZmZlcih4KSB7XG4gIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHgubGVuZ3RoICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIHguY29weSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeC5zbGljZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoeC5sZW5ndGggPiAwICYmIHR5cGVvZiB4WzBdICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgb3B0cykge1xuICAvKiBlc2xpbnQgbWF4LXN0YXRlbWVudHM6IFsyLCA1MF0gKi9cbiAgdmFyIGksIGtleTtcbiAgaWYgKHR5cGVvZiBhICE9PSB0eXBlb2YgYikgeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYgKGlzVW5kZWZpbmVkT3JOdWxsKGEpIHx8IGlzVW5kZWZpbmVkT3JOdWxsKGIpKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS5cbiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICBpZiAoaXNBcmd1bWVudHMoYSkgIT09IGlzQXJndW1lbnRzKGIpKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIHZhciBhSXNSZWdleCA9IGlzUmVnZXgoYSk7XG4gIHZhciBiSXNSZWdleCA9IGlzUmVnZXgoYik7XG4gIGlmIChhSXNSZWdleCAhPT0gYklzUmVnZXgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGlmIChhSXNSZWdleCB8fCBiSXNSZWdleCkge1xuICAgIHJldHVybiBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgZmxhZ3MoYSkgPT09IGZsYWdzKGIpO1xuICB9XG5cbiAgaWYgKGlzRGF0ZShhKSAmJiBpc0RhdGUoYikpIHtcbiAgICByZXR1cm4gZ2V0VGltZS5jYWxsKGEpID09PSBnZXRUaW1lLmNhbGwoYik7XG4gIH1cblxuICB2YXIgYUlzQnVmZmVyID0gaXNCdWZmZXIoYSk7XG4gIHZhciBiSXNCdWZmZXIgPSBpc0J1ZmZlcihiKTtcbiAgaWYgKGFJc0J1ZmZlciAhPT0gYklzQnVmZmVyKSB7IHJldHVybiBmYWxzZTsgfVxuICBpZiAoYUlzQnVmZmVyIHx8IGJJc0J1ZmZlcikgeyAvLyAmJiB3b3VsZCB3b3JrIHRvbywgYmVjYXVzZSBib3RoIGFyZSB0cnVlIG9yIGJvdGggZmFsc2UgaGVyZVxuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldICE9PSBiW2ldKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSAhPT0gdHlwZW9mIGIpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgdHJ5IHtcbiAgICB2YXIga2EgPSBvYmplY3RLZXlzKGEpO1xuICAgIHZhciBrYiA9IG9iamVjdEtleXMoYik7XG4gIH0gY2F0Y2ggKGUpIHsgLy8gaGFwcGVucyB3aGVuIG9uZSBpcyBhIHN0cmluZyBsaXRlcmFsIGFuZCB0aGUgb3RoZXIgaXNuJ3RcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlcyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPT0ga2IubGVuZ3RoKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIHRoZSBzYW1lIHNldCBvZiBrZXlzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLFxuICBrYS5zb3J0KCk7XG4gIGtiLnNvcnQoKTtcbiAgLy8gfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT0ga2JbaV0pIHsgcmV0dXJuIGZhbHNlOyB9XG4gIH1cbiAgLy8gZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGtleSA9IGthW2ldO1xuICAgIGlmICghZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBvcHRzKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZXBFcXVhbDtcbiIsInZhciBjcmVhdGVSb3VuZCA9IHJlcXVpcmUoJy4vX2NyZWF0ZVJvdW5kJyk7XG5cbi8qKlxuICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMTAuMFxuICogQGNhdGVnb3J5IE1hdGhcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5yb3VuZCg0LjAwNik7XG4gKiAvLyA9PiA0XG4gKlxuICogXy5yb3VuZCg0LjAwNiwgMik7XG4gKiAvLyA9PiA0LjAxXG4gKlxuICogXy5yb3VuZCg0MDYwLCAtMik7XG4gKiAvLyA9PiA0MTAwXG4gKi9cbnZhciByb3VuZCA9IGNyZWF0ZVJvdW5kKCdyb3VuZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvdW5kO1xuIiwidmFyIGJhc2VDbGFtcCA9IHJlcXVpcmUoJy4vX2Jhc2VDbGFtcCcpLFxuICAgIHRvTnVtYmVyID0gcmVxdWlyZSgnLi90b051bWJlcicpO1xuXG4vKipcbiAqIENsYW1wcyBgbnVtYmVyYCB3aXRoaW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTnVtYmVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uY2xhbXAoLTEwLCAtNSwgNSk7XG4gKiAvLyA9PiAtNVxuICpcbiAqIF8uY2xhbXAoMTAsIC01LCA1KTtcbiAqIC8vID0+IDVcbiAqL1xuZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICB1cHBlciA9IGxvd2VyO1xuICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdXBwZXIgPSB0b051bWJlcih1cHBlcik7XG4gICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gIH1cbiAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgfVxuICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhbXA7XG4iLCJ2YXIgYmFzZVRpbWVzID0gcmVxdWlyZSgnLi9fYmFzZVRpbWVzJyksXG4gICAgY2FzdEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fY2FzdEZ1bmN0aW9uJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG52YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICogZWFjaCBpbnZvY2F0aW9uLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKGluZGV4KS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gKiAvLyA9PiBbJzAnLCAnMScsICcyJ11cbiAqXG4gKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAqIC8vID0+IFswLCAwLCAwLCAwXVxuICovXG5mdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICBuID0gdG9JbnRlZ2VyKG4pO1xuICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICBpdGVyYXRlZSA9IGNhc3RGdW5jdGlvbihpdGVyYXRlZSk7XG4gIG4gLT0gTUFYX0FSUkFZX0xFTkdUSDtcblxuICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0aW1lcztcbiIsInZhciBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgY3JlYXRlV3JhcCA9IHJlcXVpcmUoJy4vX2NyZWF0ZVdyYXAnKSxcbiAgICBnZXRIb2xkZXIgPSByZXF1aXJlKCcuL19nZXRIb2xkZXInKSxcbiAgICByZXBsYWNlSG9sZGVycyA9IHJlcXVpcmUoJy4vX3JlcGxhY2VIb2xkZXJzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQ7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wYXJ0aWFsYCBleGNlcHQgdGhhdCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHNcbiAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICpcbiAqIFRoZSBgXy5wYXJ0aWFsUmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICogYXBwbGllZCBmdW5jdGlvbnMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAxLjAuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAqIH1cbiAqXG4gKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gKiBncmVldEZyZWQoJ2hpJyk7XG4gKiAvLyA9PiAnaGkgZnJlZCdcbiAqXG4gKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdoZWxsbycsIF8pO1xuICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gKi9cbnZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbn0pO1xuXG4vLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG5wYXJ0aWFsUmlnaHQucGxhY2Vob2xkZXIgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJ0aWFsUmlnaHQ7XG4iLCJleHBvcnQgdmFyIGRvY3VtZW50UmVmID0ge1xuICBjdXJyZW50OiB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IGRvY3VtZW50XG59O1xuZXhwb3J0IHZhciB3aW5kb3dSZWYgPSB7XG4gIGN1cnJlbnQ6IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHdpbmRvd1xufTtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRXZlbnRMaXN0ZW5lciB9IGZyb20gJy4vRXZlbnRMaXN0ZW5lcic7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlRXZlbnRMaXN0ZW5lciB9IGZyb20gJy4vdXNlRXZlbnRMaXN0ZW5lcic7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcbmltcG9ydCBBcHAgZnJvbSAnLi9jb21wb25lbnRzL0FwcCdcblxuUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSk7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEyLjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBoPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzO24mJlN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO1xudmFyIHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxhYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O24mJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTtuJiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO24mJlN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTt2YXIgQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBCKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBDPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxEPXt9O1xuZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1jfHxDfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEIoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1jfHxDfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO2goSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST17Y3VycmVudDpudWxsfSxKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxsPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGw9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBrPUFycmF5KGYpLG09MDttPGY7bSsrKWtbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1rfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmwscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIGJhKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGMsZSl7aWYoUC5sZW5ndGgpe3ZhciBkPVAucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgbD0wO2w8YS5sZW5ndGg7bCsrKXtkPWFbbF07dmFyIGY9YitUKGQsbCk7Zys9UyhkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUEmJmFbQV18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksbD1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1QoZCxsKyspLGcrPVMoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihCKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFUoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIsYixjKX1mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBjYShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBkYShhLGIsYyl7dmFyIGU9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsZSxjLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE4oYSkmJihhPWJhKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gVihhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKTtiPVEoYixnLGUsZCk7VShhLGRhLGIpO1IoYil9ZnVuY3Rpb24gVygpe3ZhciBhPUkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihCKDMyMSkpO3JldHVybiBhfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107VihhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixjKTtVKGEsY2EsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFUoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU4oYSkpdGhyb3cgRXJyb3IoQigxNDMpKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19LGxhenk6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOmFhLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fSxtZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnosdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ2FsbGJhY2soYSxiKX0sdXNlQ29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ29udGV4dChhLGIpfSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUVmZmVjdChhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsXG5iLGMpe3JldHVybiBXKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9LHVzZURlYnVnVmFsdWU6ZnVuY3Rpb24oKXt9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZU1lbW8oYSxiKX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFcoKS51c2VSZWR1Y2VyKGEsYixjKX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlUmVmKGEpfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVN0YXRlKGEpfSxGcmFnbWVudDpyLFByb2ZpbGVyOnUsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnksY3JlYXRlRWxlbWVudDpNLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQigyNjcsYSkpO3ZhciBlPWgoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGw9YS5fb3duZXI7XG5pZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsbD1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoayBpbiBiKUsuY2FsbChiLGspJiYhTC5oYXNPd25Qcm9wZXJ0eShrKSYmKGVba109dm9pZCAwPT09YltrXSYmdm9pZCAwIT09Zj9mW2tdOmJba10pfXZhciBrPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ayllLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGspe2Y9QXJyYXkoayk7Zm9yKHZhciBtPTA7bTxrO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjpsfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuMTIuMFwiLFxuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6SSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7c3VzcGVuc2U6bnVsbH0sUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmh9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEyLjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxxPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gdShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IodSgyMjcpKTt2YXIgYmE9bnVsbCxjYT17fTtcbmZ1bmN0aW9uIGRhKCl7aWYoYmEpZm9yKHZhciBhIGluIGNhKXt2YXIgYj1jYVthXSxjPWJhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighZWFbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7ZWFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZihmYS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTtmYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZoYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oaGEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIGhhKGEsYixjKXtpZihpYVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7aWFbYV09YjtqYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBlYT1bXSxmYT17fSxpYT17fSxqYT17fTtmdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgbGE9ITEsbWE9bnVsbCxuYT0hMSxvYT1udWxsLHBhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2xhPSEwO21hPWF9fTtmdW5jdGlvbiBxYShhLGIsYyxkLGUsZixnLGgsayl7bGE9ITE7bWE9bnVsbDtrYS5hcHBseShwYSxhcmd1bWVudHMpfVxuZnVuY3Rpb24gcmEoYSxiLGMsZCxlLGYsZyxoLGspe3FhLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihsYSl7aWYobGEpe3ZhciBsPW1hO2xhPSExO21hPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih1KDE5OCkpO25hfHwobmE9ITAsb2E9bCl9fXZhciBzYT1udWxsLHVhPW51bGwsdmE9bnVsbDtmdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dmEoYyk7cmEoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB4YShhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHlhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciB6YT1udWxsO2Z1bmN0aW9uIEFhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl3YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ3YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gQmEoYSl7bnVsbCE9PWEmJih6YT14YSh6YSxhKSk7YT16YTt6YT1udWxsO2lmKGEpe3lhKGEsQWEpO2lmKHphKXRocm93IEVycm9yKHUoOTUpKTtpZihuYSl0aHJvdyBhPW9hLG5hPSExLG9hPW51bGwsYTt9fVxudmFyIENhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2lmKGJhKXRocm93IEVycm9yKHUoMTAxKSk7YmE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7ZGEoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFjYS5oYXNPd25Qcm9wZXJ0eShjKXx8Y2FbY10hPT1kKXtpZihjYVtjXSl0aHJvdyBFcnJvcih1KDEwMixjKSk7Y2FbY109ZDtiPSEwfX1iJiZkYSgpfX07XG5mdW5jdGlvbiBEYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXNhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLGIsdHlwZW9mIGMpKTtcbnJldHVybiBjfXZhciBFYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtFYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChFYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtFYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoRWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbnZhciBGYT0vXiguKilbXFxcXFxcL10vLHc9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixHYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLEhhPXc/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixJYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxKYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxLYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxMYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxNYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLE5hPXc/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxPYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixQYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxRYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsUmE9dz9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxTYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O3cmJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTt3JiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO3cmJlN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTt2YXIgVGE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIFVhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1UYSYmYVtUYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFZhKGEpe2lmKC0xPT09YS5fc3RhdHVzKXthLl9zdGF0dXM9MDt2YXIgYj1hLl9jdG9yO2I9YigpO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9fVxuZnVuY3Rpb24gV2EoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBJYTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBIYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgS2E6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgSmE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBQYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBRYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBNYTpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIExhOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgT2E6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIFJhOnJldHVybiBXYShhLnR5cGUpO2Nhc2UgU2E6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBXYShhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYShhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9V2EoYS50eXBlKTtjPW51bGw7ZCYmKGM9V2EoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShGYSxcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIFlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxaYT1udWxsLCRhPW51bGwsYWI9bnVsbDtmdW5jdGlvbiBiYihhKXtpZihhPXVhKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgWmEpdGhyb3cgRXJyb3IodSgyODApKTt2YXIgYj1zYShhLnN0YXRlTm9kZSk7WmEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBjYihhKXskYT9hYj9hYi5wdXNoKGEpOmFiPVthXTokYT1hfWZ1bmN0aW9uIGRiKCl7aWYoJGEpe3ZhciBhPSRhLGI9YWI7YWI9JGE9bnVsbDtiYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspYmIoYlthXSl9fWZ1bmN0aW9uIGViKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gZmIoYSxiLGMsZCl7cmV0dXJuIGEoYixjLGQpfWZ1bmN0aW9uIGdiKCl7fVxudmFyIGhiPWViLGliPSExLGpiPSExO2Z1bmN0aW9uIGtiKCl7aWYobnVsbCE9PSRhfHxudWxsIT09YWIpZ2IoKSxkYigpfW5ldyBNYXA7dmFyIGxiPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxtYj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG5iPXt9LG9iPXt9O1xuZnVuY3Rpb24gcGIoYSl7aWYobWIuY2FsbChvYixhKSlyZXR1cm4hMDtpZihtYi5jYWxsKG5iLGEpKXJldHVybiExO2lmKGxiLnRlc3QoYSkpcmV0dXJuIG9iW2FdPSEwO25iW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHFiKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcmIoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cWIoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgc2I9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB0YihhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShzYixcbnRiKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uoc2IsdGIpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uoc2IsdGIpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTtmdW5jdGlvbiB1YihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiB2YihhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChyYihiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/cGIoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIHdiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiB4YihhKXt2YXIgYj13YihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24geWIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPXhiKGEpKX1mdW5jdGlvbiB6YihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9d2IoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBBYihhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBCYihhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz11YihudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIENiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdmIoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIEViKGEsYil7Q2IoYSxiKTt2YXIgYz11YihiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9GYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZGYihhLGIudHlwZSx1YihiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEdiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIEZiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBIYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBJYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUhiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIit1YihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gS2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBMYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmRlZmF1bHRWYWx1ZTtiPWIuY2hpbGRyZW47aWYobnVsbCE9Yil7aWYobnVsbCE9Yyl0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShiKSl7aWYoISgxPj1iLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2I9YlswXX1jPWJ9bnVsbD09YyYmKGM9XCJcIil9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6dWIoYyl9fVxuZnVuY3Rpb24gTWIoYSxiKXt2YXIgYz11YihiLnZhbHVlKSxkPXViKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gTmIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIgT2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gUGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBRYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/UGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUmIsU2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09T2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UmI9UmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9UmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gVGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1mdW5jdGlvbiBVYihhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBWYj17YW5pbWF0aW9uZW5kOlViKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlViKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VWIoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxXYj17fSxYYj17fTtcbllhJiYoWGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVmIuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVmIuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVmIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVmIudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBZYihhKXtpZihXYlthXSlyZXR1cm4gV2JbYV07aWYoIVZiW2FdKXJldHVybiBhO3ZhciBiPVZiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFhiKXJldHVybiBXYlthXT1iW2NdO3JldHVybiBhfXZhciBaYj1ZYihcImFuaW1hdGlvbmVuZFwiKSwkYj1ZYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxhYz1ZYihcImFuaW1hdGlvbnN0YXJ0XCIpLGJjPVliKFwidHJhbnNpdGlvbmVuZFwiKSxjYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBlYyhhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZWZmZWN0VGFnJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBmYyhhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGdjKGEpe2lmKGVjKGEpIT09YSl0aHJvdyBFcnJvcih1KDE4OCkpO31cbmZ1bmN0aW9uIGhjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPWVjKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGdjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGdjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IodSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih1KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHUoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaWMoYSl7YT1oYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciBqYyxrYyxsYyxtYz0hMSxuYz1bXSxvYz1udWxsLHBjPW51bGwscWM9bnVsbCxyYz1uZXcgTWFwLHNjPW5ldyBNYXAsdGM9W10sdWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSx2Yz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj14YyhhKTt1Yy5mb3JFYWNoKGZ1bmN0aW9uKGMpe3ljKGMsYSxiKX0pO3ZjLmZvckVhY2goZnVuY3Rpb24oYyl7eWMoYyxhLGIpfSl9ZnVuY3Rpb24gemMoYSxiLGMsZCl7cmV0dXJue2Jsb2NrZWRPbjphLHRvcExldmVsVHlwZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wzMixuYXRpdmVFdmVudDpkfX1mdW5jdGlvbiBBYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOm9jPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpwYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpxYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6cmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6c2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBCYyhhLGIsYyxkLGUpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZSlyZXR1cm4gYT16YyhiLGMsZCxlKSxudWxsIT09YiYmKGI9Q2MoYiksbnVsbCE9PWImJmtjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtyZXR1cm4gYX1mdW5jdGlvbiBEYyhhLGIsYyxkKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIG9jPUJjKG9jLGEsYixjLGQpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gcGM9QmMocGMsYSxiLGMsZCksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBxYz1CYyhxYyxhLGIsYyxkKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZT1kLnBvaW50ZXJJZDtyYy5zZXQoZSxCYyhyYy5nZXQoZSl8fG51bGwsYSxiLGMsZCkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBlPWQucG9pbnRlcklkLHNjLnNldChlLEJjKHNjLmdldChlKXx8bnVsbCxhLGIsYyxkKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBFYyhhKXt2YXIgYj1GYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPWVjKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPWZjKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO3EudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXtsYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9ZnVuY3Rpb24gR2MoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO3ZhciBiPUhjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yil7dmFyIGM9Q2MoYik7bnVsbCE9PWMmJmtjKGMpO2EuYmxvY2tlZE9uPWI7cmV0dXJuITF9cmV0dXJuITB9XG5mdW5jdGlvbiBJYyhhLGIsYyl7R2MoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIEpjKCl7Zm9yKG1jPSExOzA8bmMubGVuZ3RoOyl7dmFyIGE9bmNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPUNjKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmamMoYSk7YnJlYWt9dmFyIGI9SGMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEubmF0aXZlRXZlbnQpO251bGwhPT1iP2EuYmxvY2tlZE9uPWI6bmMuc2hpZnQoKX1udWxsIT09b2MmJkdjKG9jKSYmKG9jPW51bGwpO251bGwhPT1wYyYmR2MocGMpJiYocGM9bnVsbCk7bnVsbCE9PXFjJiZHYyhxYykmJihxYz1udWxsKTtyYy5mb3JFYWNoKEljKTtzYy5mb3JFYWNoKEljKX1mdW5jdGlvbiBLYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsbWN8fChtYz0hMCxxLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2socS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxKYykpKX1cbmZ1bmN0aW9uIExjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEtjKGIsYSl9aWYoMDxuYy5sZW5ndGgpe0tjKG5jWzBdLGEpO2Zvcih2YXIgYz0xO2M8bmMubGVuZ3RoO2MrKyl7dmFyIGQ9bmNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1vYyYmS2Mob2MsYSk7bnVsbCE9PXBjJiZLYyhwYyxhKTtudWxsIT09cWMmJktjKHFjLGEpO3JjLmZvckVhY2goYik7c2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8dGMubGVuZ3RoO2MrKylkPXRjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDx0Yy5sZW5ndGgmJihjPXRjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KUVjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmdGMuc2hpZnQoKX1cbmZ1bmN0aW9uIE1jKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBOYyhhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIE9jKGEsYixjKXtpZihiPURhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9XG5mdW5jdGlvbiBQYyhhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPU5jKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylPYyhjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU9jKGNbYl0sXCJidWJibGVkXCIsYSl9fWZ1bmN0aW9uIFFjKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPURhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gUmMoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZRYyhhLl90YXJnZXRJbnN0LG51bGwsYSl9XG5mdW5jdGlvbiBTYyhhKXt5YShhLFBjKX1mdW5jdGlvbiBUYygpe3JldHVybiEwfWZ1bmN0aW9uIFVjKCl7cmV0dXJuITF9ZnVuY3Rpb24gRShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/VGM6VWM7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1VYztyZXR1cm4gdGhpc31cbm4oRS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1UYyl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1UYyl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1UY30saXNQZXJzaXN0ZW50OlVjLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPVVjO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7RS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5FLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO1ZjKGMpO3JldHVybiBjfTtWYyhFKTtmdW5jdGlvbiBXYyhhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIFhjKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IEVycm9yKHUoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIFZjKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPVdjO2EucmVsZWFzZT1YY312YXIgWWM9RS5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLFpjPUUuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksJGM9RS5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLGFkPSRjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBiZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBjZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sZGQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LGVkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBnZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPWVkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gaGQoKXtyZXR1cm4gZ2R9XG52YXIgaWQ9JGMuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPWNkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPWJkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9kZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6aGQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP2JkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/YmQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxqZD0wLGtkPTAsbGQ9ITEsbWQ9ITEsbmQ9JGMuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmhkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPWpkO2pkPWEuc2NyZWVuWDtyZXR1cm4gbGQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtXG5iOjA6KGxkPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO3ZhciBiPWtkO2tkPWEuc2NyZWVuWTtyZXR1cm4gbWQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihtZD0hMCwwKX19KSxvZD1uZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSkscGQ9bmQuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHFkPSRjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmhkfSkscmQ9RS5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLFxuZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxzZD1uZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksdGQ9W1tcImJsdXJcIixcImJsdXJcIiwwXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiLDBdLFtcImNsaWNrXCIsXCJjbGlja1wiLDBdLFtcImNsb3NlXCIsXCJjbG9zZVwiLDBdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiLDBdLFtcImNvcHlcIixcImNvcHlcIiwwXSxbXCJjdXRcIixcImN1dFwiLDBdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiLDBdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiLDBdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIixcbjBdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCIsMF0sW1wiZHJvcFwiLFwiZHJvcFwiLDBdLFtcImZvY3VzXCIsXCJmb2N1c1wiLDBdLFtcImlucHV0XCIsXCJpbnB1dFwiLDBdLFtcImludmFsaWRcIixcImludmFsaWRcIiwwXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCIsMF0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCIsMF0sW1wia2V5dXBcIixcImtleVVwXCIsMF0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIiwwXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCIsMF0sW1wicGFzdGVcIixcInBhc3RlXCIsMF0sW1wicGF1c2VcIixcInBhdXNlXCIsMF0sW1wicGxheVwiLFwicGxheVwiLDBdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIiwwXSxbXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIiwwXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiLDBdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIiwwXSxbXCJyZXNldFwiLFwicmVzZXRcIiwwXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiLDBdLFtcInN1Ym1pdFwiLFwic3VibWl0XCIsMF0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCIsXG4wXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIiwwXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCIsMF0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIiwwXSxbXCJkcmFnXCIsXCJkcmFnXCIsMV0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIiwxXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIiwxXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiLDFdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiLDFdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCIsMV0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCIsMV0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIiwxXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIiwxXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCIsMV0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCIsMV0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIiwxXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiLDFdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCIsMV0sW1wid2hlZWxcIixcIndoZWVsXCIsMV0sW1wiYWJvcnRcIixcImFib3J0XCIsXG4yXSxbWmIsXCJhbmltYXRpb25FbmRcIiwyXSxbJGIsXCJhbmltYXRpb25JdGVyYXRpb25cIiwyXSxbYWMsXCJhbmltYXRpb25TdGFydFwiLDJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIiwyXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIiwyXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIiwyXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsMl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIiwyXSxbXCJlbmRlZFwiLFwiZW5kZWRcIiwyXSxbXCJlcnJvclwiLFwiZXJyb3JcIiwyXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJsb2FkXCIsXCJsb2FkXCIsMl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLDJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLDJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsMl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsMl0sW1wicHJvZ3Jlc3NcIixcblwicHJvZ3Jlc3NcIiwyXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsMl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiLDJdLFtcInN1c3BlbmRcIixcInN1c3BlbmRcIiwyXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsMl0sW2JjLFwidHJhbnNpdGlvbkVuZFwiLDJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIiwyXV0sdWQ9e30sdmQ9e30sd2Q9MDtmb3IoO3dkPHRkLmxlbmd0aDt3ZCsrKXt2YXIgeWQ9dGRbd2RdLHpkPXlkWzBdLEFkPXlkWzFdLEJkPXlkWzJdLENkPVwib25cIisoQWRbMF0udG9VcHBlckNhc2UoKStBZC5zbGljZSgxKSksRGQ9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOkNkLGNhcHR1cmVkOkNkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W3pkXSxldmVudFByaW9yaXR5OkJkfTt1ZFtBZF09RGQ7dmRbemRdPURkfVxudmFyIEVkPXtldmVudFR5cGVzOnVkLGdldEV2ZW50UHJpb3JpdHk6ZnVuY3Rpb24oYSl7YT12ZFthXTtyZXR1cm4gdm9pZCAwIT09YT9hLmV2ZW50UHJpb3JpdHk6Mn0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12ZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PWJkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1pZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9YWQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1uZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxucGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT1xZDticmVhaztjYXNlIFpiOmNhc2UgJGI6Y2FzZSBhYzphPVljO2JyZWFrO2Nhc2UgYmM6YT1yZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT0kYzticmVhaztjYXNlIFwid2hlZWxcIjphPXNkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9WmM7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1vZDticmVhaztkZWZhdWx0OmE9RX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1NjKGIpO3JldHVybiBifX0sRmQ9cS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxcbkdkPXEudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEhkPUVkLmdldEV2ZW50UHJpb3JpdHksSWQ9MTAsSmQ9W107XG5mdW5jdGlvbiBLZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9RmMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9TWMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxnPWEuZXZlbnRTeXN0ZW1GbGFncyxoPW51bGwsaz0wO2s8ZWEubGVuZ3RoO2srKyl7dmFyIGw9ZWFba107bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUsZykpJiYoaD14YShoLGwpKX1CYShoKX19XG52YXIgTGQ9ITA7ZnVuY3Rpb24gRihhLGIpe01kKGIsYSwhMSl9ZnVuY3Rpb24gTWQoYSxiLGMpe3N3aXRjaChIZChiKSl7Y2FzZSAwOnZhciBkPU5kLmJpbmQobnVsbCxiLDEpO2JyZWFrO2Nhc2UgMTpkPU9kLmJpbmQobnVsbCxiLDEpO2JyZWFrO2RlZmF1bHQ6ZD1QZC5iaW5kKG51bGwsYiwxKX1jP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITApOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITEpfWZ1bmN0aW9uIE5kKGEsYixjKXtpYnx8Z2IoKTt2YXIgZD1QZCxlPWliO2liPSEwO3RyeXtmYihkLGEsYixjKX1maW5hbGx5eyhpYj1lKXx8a2IoKX19ZnVuY3Rpb24gT2QoYSxiLGMpe0dkKEZkLFBkLmJpbmQobnVsbCxhLGIsYykpfVxuZnVuY3Rpb24gUWQoYSxiLGMsZCl7aWYoSmQubGVuZ3RoKXt2YXIgZT1KZC5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1iO2UubmF0aXZlRXZlbnQ9YztlLnRhcmdldEluc3Q9ZDthPWV9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxldmVudFN5c3RlbUZsYWdzOmIsbmF0aXZlRXZlbnQ6Yyx0YXJnZXRJbnN0OmQsYW5jZXN0b3JzOltdfTt0cnl7aWYoYj1LZCxjPWEsamIpYihjLHZvaWQgMCk7ZWxzZXtqYj0hMDt0cnl7aGIoYixjLHZvaWQgMCl9ZmluYWxseXtqYj0hMSxrYigpfX19ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCxKZC5sZW5ndGg8SWQmJkpkLnB1c2goYSl9fVxuZnVuY3Rpb24gUGQoYSxiLGMpe2lmKExkKWlmKDA8bmMubGVuZ3RoJiYtMTx1Yy5pbmRleE9mKGEpKWE9emMobnVsbCxhLGIsYyksbmMucHVzaChhKTtlbHNle3ZhciBkPUhjKGEsYixjKTtudWxsPT09ZD9BYyhhLGMpOi0xPHVjLmluZGV4T2YoYSk/KGE9emMoZCxhLGIsYyksbmMucHVzaChhKSk6RGMoZCxhLGIsYyl8fChBYyhhLGMpLFFkKGEsYixjLG51bGwpKX19ZnVuY3Rpb24gSGMoYSxiLGMpe3ZhciBkPU1jKGMpO2Q9RmMoZCk7aWYobnVsbCE9PWQpe3ZhciBlPWVjKGQpO2lmKG51bGw9PT1lKWQ9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7ZD1mYyhlKTtpZihudWxsIT09ZClyZXR1cm4gZDtkPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtkPW51bGx9ZWxzZSBlIT09ZCYmKGQ9bnVsbCl9fVFkKGEsYixjLGQpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUmQoYSl7aWYoIVlhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifXZhciBTZD1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtmdW5jdGlvbiB4YyhhKXt2YXIgYj1TZC5nZXQoYSk7dm9pZCAwPT09YiYmKGI9bmV3IFNldCxTZC5zZXQoYSxiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiB5YyhhLGIsYyl7aWYoIWMuaGFzKGEpKXtzd2l0Y2goYSl7Y2FzZSBcInNjcm9sbFwiOk1kKGIsXCJzY3JvbGxcIiwhMCk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpNZChiLFwiZm9jdXNcIiwhMCk7TWQoYixcImJsdXJcIiwhMCk7Yy5hZGQoXCJibHVyXCIpO2MuYWRkKFwiZm9jdXNcIik7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOlJkKGEpJiZNZChiLGEsITApO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1jYy5pbmRleE9mKGEpJiZGKGEsYil9Yy5hZGQoYSl9fVxudmFyIFRkPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LFVkPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhUZCkuZm9yRWFjaChmdW5jdGlvbihhKXtVZC5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1RkW2JdPVRkW2FdfSl9KTtmdW5jdGlvbiBWZChhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8VGQuaGFzT3duUHJvcGVydHkoYSkmJlRkW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIFdkKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPVZkKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIFhkPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBZZChhLGIpe2lmKGIpe2lmKFhkW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSgxMzcsYSxcIlwiKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih1KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih1KDYyLFwiXCIpKTt9fVxuZnVuY3Rpb24gWmQoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uICRkKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPXhjKGEpO2I9amFbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspeWMoYltkXSxhLGMpfWZ1bmN0aW9uIGFlKCl7fVxuZnVuY3Rpb24gYmUoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIGNlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1mdW5jdGlvbiBkZShhLGIpe3ZhciBjPWNlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPWNlKGMpfX1cbmZ1bmN0aW9uIGVlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/ZWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfWZ1bmN0aW9uIGZlKCl7Zm9yKHZhciBhPXdpbmRvdyxiPWJlKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPWJlKGEuZG9jdW1lbnQpfXJldHVybiBifVxuZnVuY3Rpb24gZ2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX12YXIgaGU9XCIkXCIsaWU9XCIvJFwiLGplPVwiJD9cIixrZT1cIiQhXCIsbGU9bnVsbCxtZT1udWxsO2Z1bmN0aW9uIG5lKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG9lKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgcGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHJlKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfVxuZnVuY3Rpb24gc2UoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09aGV8fGM9PT1rZXx8Yz09PWplKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZSBjPT09aWUmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0ZT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx1ZT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK3RlLHZlPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrdGUsd2U9XCJfX3JlYWN0Q29udGFpbmVyZSRcIit0ZTtcbmZ1bmN0aW9uIEZjKGEpe3ZhciBiPWFbdWVdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3dlXXx8Y1t1ZV0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1zZShhKTtudWxsIT09YTspe2lmKGM9YVt1ZV0pcmV0dXJuIGM7YT1zZShhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2MoYSl7YT1hW3VlXXx8YVt3ZV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHhlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih1KDMzKSk7fWZ1bmN0aW9uIHllKGEpe3JldHVybiBhW3ZlXXx8bnVsbH12YXIgemU9bnVsbCxBZT1udWxsLEJlPW51bGw7XG5mdW5jdGlvbiBDZSgpe2lmKEJlKXJldHVybiBCZTt2YXIgYSxiPUFlLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIHplP3plLnZhbHVlOnplLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIEJlPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9dmFyIERlPUUuZXh0ZW5kKHtkYXRhOm51bGx9KSxFZT1FLmV4dGVuZCh7ZGF0YTpudWxsfSksRmU9WzksMTMsMjcsMzJdLEdlPVlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxIZT1udWxsO1lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihIZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIEllPVlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhSGUsSmU9WWEmJighR2V8fEhlJiY4PEhlJiYxMT49SGUpLEtlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLExlPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LE1lPSExO1xuZnVuY3Rpb24gTmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1GZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIE9lKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIFBlPSExO2Z1bmN0aW9uIFFlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBPZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7TWU9ITA7cmV0dXJuIEtlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PUtlJiZNZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBSZShhLGIpe2lmKFBlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFHZSYmTmUoYSxiKT8oYT1DZSgpLEJlPUFlPXplPW51bGwsUGU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIEplJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBTZT17ZXZlbnRUeXBlczpMZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKEdlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPUxlLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPUxlLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1MZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2UgUGU/TmUoYSxjKSYmKGY9TGUuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1MZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhKZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihQZXx8ZiE9PUxlLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PUxlLmNvbXBvc2l0aW9uRW5kJiZQZSYmKGU9Q2UoKSk6KHplPWQsQWU9XCJ2YWx1ZVwiaW4gemU/emUudmFsdWU6emUudGV4dENvbnRlbnQsUGU9ITApKSxmPURlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9T2UoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFNjKGYpLGU9Zik6ZT1udWxsOyhhPUllP1FlKGEsYyk6UmUoYSxjKSk/KGI9RWUuZ2V0UG9vbGVkKExlLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxTYyhiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSxUZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBVZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVRlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciBWZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBXZShhLGIsYyl7YT1FLmdldFBvb2xlZChWZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO2NiKGMpO1NjKGEpO3JldHVybiBhfXZhciBYZT1udWxsLFllPW51bGw7ZnVuY3Rpb24gWmUoYSl7QmEoYSl9ZnVuY3Rpb24gJGUoYSl7dmFyIGI9eGUoYSk7aWYoemIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gYWYoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgYmY9ITE7WWEmJihiZj1SZChcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIGNmKCl7WGUmJihYZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixkZiksWWU9WGU9bnVsbCl9ZnVuY3Rpb24gZGYoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJiRlKFllKSlpZihhPVdlKFllLGEsTWMoYSkpLGliKUJhKGEpO2Vsc2V7aWI9ITA7dHJ5e2ViKFplLGEpfWZpbmFsbHl7aWI9ITEsa2IoKX19fWZ1bmN0aW9uIGVmKGEsYixjKXtcImZvY3VzXCI9PT1hPyhjZigpLFhlPWIsWWU9YyxYZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixkZikpOlwiYmx1clwiPT09YSYmY2YoKX1mdW5jdGlvbiBmZihhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiAkZShZZSl9ZnVuY3Rpb24gZ2YoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiAkZShiKX1mdW5jdGlvbiBoZihhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiAkZShiKX1cbnZhciBqZj17ZXZlbnRUeXBlczpWZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOmJmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj94ZShiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPWFmO2Vsc2UgaWYoVWUoZSkpaWYoYmYpZz1oZjtlbHNle2c9ZmY7dmFyIGg9ZWZ9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPWdmKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiBXZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkZiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LGtmPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsXG5kZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxsZixtZj17ZXZlbnRUeXBlczprZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtcbmU9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoZyl7aWYoZz1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/RmMoYik6bnVsbCxudWxsIT09YiYmKGY9ZWMoYiksYiE9PWZ8fDUhPT1iLnRhZyYmNiE9PWIudGFnKSliPW51bGx9ZWxzZSBnPW51bGw7aWYoZz09PWIpcmV0dXJuIG51bGw7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpe3ZhciBoPW5kO3ZhciBrPWtmLm1vdXNlTGVhdmU7dmFyIGw9a2YubW91c2VFbnRlcjt2YXIgbT1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaD1vZCxrPWtmLnBvaW50ZXJMZWF2ZSxsPWtmLnBvaW50ZXJFbnRlcixtPVwicG9pbnRlclwiO2E9bnVsbD09Zz9lOnhlKGcpO2U9bnVsbD09Yj9lOnhlKGIpO2s9aC5nZXRQb29sZWQoayxnLGMsZCk7ay50eXBlPW0rXCJsZWF2ZVwiO2sudGFyZ2V0PVxuYTtrLnJlbGF0ZWRUYXJnZXQ9ZTtkPWguZ2V0UG9vbGVkKGwsYixjLGQpO2QudHlwZT1tK1wiZW50ZXJcIjtkLnRhcmdldD1lO2QucmVsYXRlZFRhcmdldD1hO2g9ZzttPWI7aWYoaCYmbSlhOntsPWg7YT1tO2c9MDtmb3IoYj1sO2I7Yj1OYyhiKSlnKys7Yj0wO2ZvcihlPWE7ZTtlPU5jKGUpKWIrKztmb3IoOzA8Zy1iOylsPU5jKGwpLGctLTtmb3IoOzA8Yi1nOylhPU5jKGEpLGItLTtmb3IoO2ctLTspe2lmKGw9PT1hfHxsPT09YS5hbHRlcm5hdGUpYnJlYWsgYTtsPU5jKGwpO2E9TmMoYSl9bD1udWxsfWVsc2UgbD1udWxsO2E9bDtmb3IobD1bXTtoJiZoIT09YTspe2c9aC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1hKWJyZWFrO2wucHVzaChoKTtoPU5jKGgpfWZvcihoPVtdO20mJm0hPT1hOyl7Zz1tLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWEpYnJlYWs7aC5wdXNoKG0pO209TmMobSl9Zm9yKG09MDttPGwubGVuZ3RoO20rKylRYyhsW21dLFwiYnViYmxlZFwiLGspO2ZvcihtPVxuaC5sZW5ndGg7MDxtLS07KVFjKGhbbV0sXCJjYXB0dXJlZFwiLGQpO2lmKGM9PT1sZilyZXR1cm4gbGY9bnVsbCxba107bGY9YztyZXR1cm5bayxkXX19O2Z1bmN0aW9uIG5mKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6bmYscGY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBxZihhLGIpe2lmKG9mKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighcGYuY2FsbChiLGNbZF0pfHwhb2YoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciByZj1ZYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLHNmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSx0Zj1udWxsLHVmPW51bGwsdmY9bnVsbCx3Zj0hMTtcbmZ1bmN0aW9uIHhmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYod2Z8fG51bGw9PXRmfHx0ZiE9PWJlKGMpKXJldHVybiBudWxsO2M9dGY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmZ2UoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gdmYmJnFmKHZmLGMpP251bGw6KHZmPWMsYT1FLmdldFBvb2xlZChzZi5zZWxlY3QsdWYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD10ZixTYyhhKSxhKX1cbnZhciB5Zj17ZXZlbnRUeXBlczpzZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT14YyhlKTtmPWphLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj94ZShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKFVlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKXRmPWUsdWY9Yix2Zj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6dmY9dWY9dGY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6d2Y9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiB3Zj0hMSx4ZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihyZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIHhmKGMsZCl9cmV0dXJuIG51bGx9fTtDYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3ZhciB6Zj1DYztzYT15ZTt1YT16Zjt2YT14ZTtDYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOkVkLEVudGVyTGVhdmVFdmVudFBsdWdpbjptZixDaGFuZ2VFdmVudFBsdWdpbjpqZixTZWxlY3RFdmVudFBsdWdpbjp5ZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOlNlfSk7bmV3IFNldDt2YXIgQWY9W10sQmY9LTE7ZnVuY3Rpb24gRyhhKXswPkJmfHwoYS5jdXJyZW50PUFmW0JmXSxBZltCZl09bnVsbCxCZi0tKX1cbmZ1bmN0aW9uIEkoYSxiKXtCZisrO0FmW0JmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIENmPXt9LEo9e2N1cnJlbnQ6Q2Z9LEs9e2N1cnJlbnQ6ITF9LERmPUNmO2Z1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTChhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfVxuZnVuY3Rpb24gRmYoYSl7RyhLLGEpO0coSixhKX1mdW5jdGlvbiBHZihhKXtHKEssYSk7RyhKLGEpfWZ1bmN0aW9uIEhmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1DZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiLGEpO0koSyxjLGEpfWZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IodSgxMDgsV2EoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbih7fSxjLHt9LGQpfWZ1bmN0aW9uIEpmKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8Q2Y7RGY9Si5jdXJyZW50O0koSixiLGEpO0koSyxLLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhiPUlmKGEsYixEZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1iLEcoSyxhKSxHKEosYSksSShKLGIsYSkpOkcoSyxhKTtJKEssYyxhKX1cbnZhciBMZj1xLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxNZj1xLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssTmY9cS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxPZj1xLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFBmPXEudW5zdGFibGVfcmVxdWVzdFBhaW50LFFmPXEudW5zdGFibGVfbm93LFJmPXEudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsU2Y9cS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxUZj1xLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFVmPXEudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVmY9cS51bnN0YWJsZV9Mb3dQcmlvcml0eSxXZj1xLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxYZj17fSxZZj12b2lkIDAhPT1QZj9QZjpmdW5jdGlvbigpe30sWmY9bnVsbCwkZj1udWxsLGFnPSExLGJnPVFmKCksY2c9MUU0PmJnP1FmOmZ1bmN0aW9uKCl7cmV0dXJuIFFmKCktYmd9O1xuZnVuY3Rpb24gZGcoKXtzd2l0Y2goUmYoKSl7Y2FzZSBTZjpyZXR1cm4gOTk7Y2FzZSBUZjpyZXR1cm4gOTg7Y2FzZSBVZjpyZXR1cm4gOTc7Y2FzZSBWZjpyZXR1cm4gOTY7Y2FzZSBXZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gZWcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFNmO2Nhc2UgOTg6cmV0dXJuIFRmO2Nhc2UgOTc6cmV0dXJuIFVmO2Nhc2UgOTY6cmV0dXJuIFZmO2Nhc2UgOTU6cmV0dXJuIFdmO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEsYil7YT1lZyhhKTtyZXR1cm4gTGYoYSxiKX1mdW5jdGlvbiBnZyhhLGIsYyl7YT1lZyhhKTtyZXR1cm4gTWYoYSxiLGMpfWZ1bmN0aW9uIGhnKGEpe251bGw9PT1aZj8oWmY9W2FdLCRmPU1mKFNmLGlnKSk6WmYucHVzaChhKTtyZXR1cm4gWGZ9ZnVuY3Rpb24gamcoKXtpZihudWxsIT09JGYpe3ZhciBhPSRmOyRmPW51bGw7TmYoYSl9aWcoKX1cbmZ1bmN0aW9uIGlnKCl7aWYoIWFnJiZudWxsIT09WmYpe2FnPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPVpmO2ZnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTtaZj1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1aZiYmKFpmPVpmLnNsaWNlKGErMSkpLE1mKFNmLGpnKSxjO31maW5hbGx5e2FnPSExfX19dmFyIGtnPTM7ZnVuY3Rpb24gbGcoYSxiLGMpe2MvPTEwO3JldHVybiAxMDczNzQxODIxLSgoKDEwNzM3NDE4MjEtYStiLzEwKS9jfDApKzEpKmN9ZnVuY3Rpb24gbWcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9dmFyIG5nPXtjdXJyZW50Om51bGx9LG9nPW51bGwscGc9bnVsbCxxZz1udWxsO2Z1bmN0aW9uIHJnKCl7cWc9cGc9b2c9bnVsbH1cbmZ1bmN0aW9uIHNnKGEsYil7dmFyIGM9YS50eXBlLl9jb250ZXh0O0kobmcsYy5fY3VycmVudFZhbHVlLGEpO2MuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHRnKGEpe3ZhciBiPW5nLmN1cnJlbnQ7RyhuZyxhKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHVnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fVxuZnVuY3Rpb24gdmcoYSxiKXtvZz1hO3FnPXBnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoYS5leHBpcmF0aW9uVGltZT49YiYmKHdnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1mdW5jdGlvbiB4ZyhhLGIpe2lmKHFnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilxZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09cGcpe2lmKG51bGw9PT1vZyl0aHJvdyBFcnJvcih1KDMwOCkpO3BnPWI7b2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBwZz1wZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgeWc9ITE7XG5mdW5jdGlvbiB6ZyhhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gQWcoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gQmcoYSxiKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSxzdXNwZW5zZUNvbmZpZzpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIENnKGEsYil7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIERnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7aWYobnVsbD09PWMpe3ZhciBkPWEudXBkYXRlUXVldWU7dmFyIGU9bnVsbDtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT16ZyhhLm1lbW9pemVkU3RhdGUpKX1lbHNlIGQ9YS51cGRhdGVRdWV1ZSxlPWMudXBkYXRlUXVldWUsbnVsbD09PWQ/bnVsbD09PWU/KGQ9YS51cGRhdGVRdWV1ZT16ZyhhLm1lbW9pemVkU3RhdGUpLGU9Yy51cGRhdGVRdWV1ZT16ZyhjLm1lbW9pemVkU3RhdGUpKTpkPWEudXBkYXRlUXVldWU9QWcoZSk6bnVsbD09PWUmJihlPWMudXBkYXRlUXVldWU9QWcoZCkpO251bGw9PT1lfHxkPT09ZT9DZyhkLGIpOm51bGw9PT1kLmxhc3RVcGRhdGV8fG51bGw9PT1lLmxhc3RVcGRhdGU/KENnKGQsYiksQ2coZSxiKSk6KENnKGQsYiksZS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gRWcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlO2M9bnVsbD09PWM/YS51cGRhdGVRdWV1ZT16ZyhhLm1lbW9pemVkU3RhdGUpOkZnKGEsYyk7bnVsbD09PWMubGFzdENhcHR1cmVkVXBkYXRlP2MuZmlyc3RDYXB0dXJlZFVwZGF0ZT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihjLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsYy5sYXN0Q2FwdHVyZWRVcGRhdGU9Yil9ZnVuY3Rpb24gRmcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9QWcoYikpO3JldHVybiBifVxuZnVuY3Rpb24gR2coYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSAzOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gbih7fSxkLGUpO2Nhc2UgMjp5Zz0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIEhnKGEsYixjLGQsZSl7eWc9ITE7Yj1GZyhhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGs9Yi5maXJzdFVwZGF0ZSxsPWY7bnVsbCE9PWs7KXt2YXIgbT1rLmV4cGlyYXRpb25UaW1lO208ZT8obnVsbD09PWcmJihnPWssZj1sKSxoPG0mJihoPW0pKTooSWcobSxrLnN1c3BlbnNlQ29uZmlnKSxsPUdnKGEsYixrLGwsYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWs6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0RWZmZWN0PWspKSk7az1rLm5leHR9bT1udWxsO2ZvcihrPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09azspe3ZhciBDPWsuZXhwaXJhdGlvblRpbWU7QzxlPyhudWxsPT09bSYmKG09ayxudWxsPT09ZyYmKGY9bCkpLGg8QyYmKGg9QykpOihsPUdnKGEsYixrLGwsYyxkKSxudWxsIT09XG5rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9azooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdENhcHR1cmVkRWZmZWN0PWspKSk7az1rLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW0/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1tJiYoZj1sKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bTtKZyhoKTthLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPWx9XG5mdW5jdGlvbiBLZyhhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7TGcoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO0xnKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiBMZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyBFcnJvcih1KDE5MSxjKSk7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbnZhciBNZz1FYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxOZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBPZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciBTZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/ZWMoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPVBnKCksZT1NZy5zdXNwZW5zZTtkPVFnKGQsYSxlKTtlPUJnKGQsZSk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO0RnKGEsZSk7UmcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9UGcoKSxlPU1nLnN1c3BlbnNlO2Q9UWcoZCxhLGUpO2U9QmcoZCxlKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtEZyhhLGUpO1JnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPVBnKCksZD1NZy5zdXNwZW5zZTtcbmM9UWcoYyxhLGQpO2Q9QmcoYyxkKTtkLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtEZyhhLGQpO1JnKGEsYyl9fTtmdW5jdGlvbiBUZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFxZihjLGQpfHwhcWYoZSxmKTohMH1cbmZ1bmN0aW9uIFVnKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXhnKGYpOihlPUwoYik/RGY6Si5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/RWYoYSxlKTpDZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPVNnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFZnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZTZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIFdnKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Tmc7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD14ZyhmKTooZj1MKGIpP0RmOkouY3VycmVudCxlLmNvbnRleHQ9RWYoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoSGcoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKE9nKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJlNnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKEhnKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgWGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFlnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih1KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1OZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih1KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih1KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gWmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IodSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIikpO31cbmZ1bmN0aW9uICRnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9YWgoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1iaChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9WWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPWNoKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVlnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9ZGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9ZWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEMoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWJoKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIEdhOnJldHVybiBjPWNoKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVlnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBIYTpyZXR1cm4gYj1kaChiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoWGcoYil8fFxuVWEoYikpcmV0dXJuIGI9ZWgoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7WmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIEdhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09SWE/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFhnKGMpfHxVYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7WmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBIKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgR2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PUlhP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIEhhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFhnKGQpfHxVYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7WmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCxyPWcseD1nPTAsQT1udWxsO251bGwhPT1yJiZ4PGgubGVuZ3RoO3grKyl7ci5pbmRleD54PyhBPXIscj1udWxsKTpBPXIuc2libGluZzt2YXIgcD15KGUscixoW3hdLGspO2lmKG51bGw9PT1wKXtudWxsPT09ciYmKHI9QSk7YnJlYWt9YSYmXG5yJiZudWxsPT09cC5hbHRlcm5hdGUmJmIoZSxyKTtnPWYocCxnLHgpO251bGw9PT1tP2w9cDptLnNpYmxpbmc9cDttPXA7cj1BfWlmKHg9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHIpLGw7aWYobnVsbD09PXIpe2Zvcig7eDxoLmxlbmd0aDt4Kyspcj1DKGUsaFt4XSxrKSxudWxsIT09ciYmKGc9ZihyLGcseCksbnVsbD09PW0/bD1yOm0uc2libGluZz1yLG09cik7cmV0dXJuIGx9Zm9yKHI9ZChlLHIpO3g8aC5sZW5ndGg7eCsrKUE9SChyLGUseCxoW3hdLGspLG51bGwhPT1BJiYoYSYmbnVsbCE9PUEuYWx0ZXJuYXRlJiZyLmRlbGV0ZShudWxsPT09QS5rZXk/eDpBLmtleSksZz1mKEEsZyx4KSxudWxsPT09bT9sPUE6bS5zaWJsaW5nPUEsbT1BKTthJiZyLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHRhKGUsZyxoLGspe3ZhciBsPVVhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHUoMTUwKSk7aD1sLmNhbGwoaCk7XG5pZihudWxsPT1oKXRocm93IEVycm9yKHUoMTUxKSk7Zm9yKHZhciBtPWw9bnVsbCxyPWcseD1nPTAsQT1udWxsLHA9aC5uZXh0KCk7bnVsbCE9PXImJiFwLmRvbmU7eCsrLHA9aC5uZXh0KCkpe3IuaW5kZXg+eD8oQT1yLHI9bnVsbCk6QT1yLnNpYmxpbmc7dmFyIHo9eShlLHIscC52YWx1ZSxrKTtpZihudWxsPT09eil7bnVsbD09PXImJihyPUEpO2JyZWFrfWEmJnImJm51bGw9PT16LmFsdGVybmF0ZSYmYihlLHIpO2c9Zih6LGcseCk7bnVsbD09PW0/bD16Om0uc2libGluZz16O209ejtyPUF9aWYocC5kb25lKXJldHVybiBjKGUsciksbDtpZihudWxsPT09cil7Zm9yKDshcC5kb25lO3grKyxwPWgubmV4dCgpKXA9QyhlLHAudmFsdWUsayksbnVsbCE9PXAmJihnPWYocCxnLHgpLG51bGw9PT1tP2w9cDptLnNpYmxpbmc9cCxtPXApO3JldHVybiBsfWZvcihyPWQoZSxyKTshcC5kb25lO3grKyxwPWgubmV4dCgpKXA9SChyLGUseCxwLnZhbHVlLGspLG51bGwhPT1wJiYoYSYmbnVsbCE9PVxucC5hbHRlcm5hdGUmJnIuZGVsZXRlKG51bGw9PT1wLmtleT94OnAua2V5KSxnPWYocCxnLHgpLG51bGw9PT1tP2w9cDptLnNpYmxpbmc9cCxtPXApO2EmJnIuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PUlhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIEdhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09SWE6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09SWE/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPVlnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLFxuayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09SWE/KGQ9ZWgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPWNoKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVlnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBIYTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWRoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT1cbnR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1iaChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihYZyhmKSlyZXR1cm4geihhLGQsZixoKTtpZihVYShmKSlyZXR1cm4gdGEoYSxkLGYsaCk7bCYmWmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIGZoPSRnKCEwKSxnaD0kZyghMSksaGg9e30saWg9e2N1cnJlbnQ6aGh9LGpoPXtjdXJyZW50OmhofSxraD17Y3VycmVudDpoaH07ZnVuY3Rpb24gbGgoYSl7aWYoYT09PWhoKXRocm93IEVycm9yKHUoMTc0KSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBtaChhLGIpe0koa2gsYixhKTtJKGpoLGEsYSk7SShpaCxoaCxhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpRYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9UWIoYixjKX1HKGloLGEpO0koaWgsYixhKX1mdW5jdGlvbiBuaChhKXtHKGloLGEpO0coamgsYSk7RyhraCxhKX1mdW5jdGlvbiBvaChhKXtsaChraC5jdXJyZW50KTt2YXIgYj1saChpaC5jdXJyZW50KTt2YXIgYz1RYihiLGEudHlwZSk7YiE9PWMmJihJKGpoLGEsYSksSShpaCxjLGEpKX1mdW5jdGlvbiBwaChhKXtqaC5jdXJyZW50PT09YSYmKEcoaWgsYSksRyhqaCxhKSl9dmFyIE09e2N1cnJlbnQ6MH07XG5mdW5jdGlvbiBxaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxjLmRhdGE9PT1qZXx8Yy5kYXRhPT09a2UpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcmgoYSxiKXtyZXR1cm57cmVzcG9uZGVyOmEscHJvcHM6Yn19XG52YXIgc2g9RWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixOPUVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHRoPTAsdWg9bnVsbCxPPW51bGwsdmg9bnVsbCx3aD1udWxsLFA9bnVsbCx4aD1udWxsLHloPTAsemg9bnVsbCxBaD0wLEJoPSExLENoPW51bGwsR2g9MDtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gSGgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighb2YoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIEloKGEsYixjLGQsZSxmKXt0aD1mO3VoPWI7dmg9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7c2guY3VycmVudD1udWxsPT09dmg/Smg6S2g7Yj1jKGQsZSk7aWYoQmgpe2RvIEJoPSExLEdoKz0xLHZoPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLHhoPXdoLHpoPVA9Tz1udWxsLHNoLmN1cnJlbnQ9S2gsYj1jKGQsZSk7d2hpbGUoQmgpO0NoPW51bGw7R2g9MH1zaC5jdXJyZW50PUxoO2E9dWg7YS5tZW1vaXplZFN0YXRlPXdoO2EuZXhwaXJhdGlvblRpbWU9eWg7YS51cGRhdGVRdWV1ZT16aDthLmVmZmVjdFRhZ3w9QWg7YT1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDt0aD0wO3hoPVA9d2g9dmg9Tz11aD1udWxsO3loPTA7emg9bnVsbDtBaD0wO2lmKGEpdGhyb3cgRXJyb3IodSgzMDApKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE1oKCl7c2guY3VycmVudD1MaDt0aD0wO3hoPVA9d2g9dmg9Tz11aD1udWxsO3loPTA7emg9bnVsbDtBaD0wO0JoPSExO0NoPW51bGw7R2g9MH1mdW5jdGlvbiBOaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwscXVldWU6bnVsbCxiYXNlVXBkYXRlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD93aD1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiBPaCgpe2lmKG51bGwhPT14aClQPXhoLHhoPVAubmV4dCxPPXZoLHZoPW51bGwhPT1PP08ubmV4dDpudWxsO2Vsc2V7aWYobnVsbD09PXZoKXRocm93IEVycm9yKHUoMzEwKSk7Tz12aDt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLHF1ZXVlOk8ucXVldWUsYmFzZVVwZGF0ZTpPLmJhc2VVcGRhdGUsbmV4dDpudWxsfTtQPW51bGw9PT1QP3doPWE6UC5uZXh0PWE7dmg9Ty5uZXh0fXJldHVybiBQfVxuZnVuY3Rpb24gUGgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBRaChhKXt2YXIgYj1PaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO2lmKDA8R2gpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PUNoKXt2YXIgZT1DaC5nZXQoYyk7aWYodm9pZCAwIT09ZSl7Q2guZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO29mKGYsYi5tZW1vaXplZFN0YXRlKXx8KHdnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWY7cmV0dXJuW2YsZF19fXJldHVybltiLm1lbW9pemVkU3RhdGUsZF19ZD1jLmxhc3Q7dmFyIGc9Yi5iYXNlVXBkYXRlO2Y9Yi5iYXNlU3RhdGU7bnVsbCE9PWc/KG51bGwhPT1kJiYoZC5uZXh0PW51bGwpLGQ9Zy5uZXh0KTpkPW51bGwhPT1kP2QubmV4dDpudWxsO2lmKG51bGwhPT1cbmQpe3ZhciBoPWU9bnVsbCxrPWQsbD0hMTtkb3t2YXIgbT1rLmV4cGlyYXRpb25UaW1lO208dGg/KGx8fChsPSEwLGg9ZyxlPWYpLG0+eWgmJih5aD1tLEpnKHloKSkpOihJZyhtLGsuc3VzcGVuc2VDb25maWcpLGY9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGYsay5hY3Rpb24pKTtnPWs7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1kKTtsfHwoaD1nLGU9Zik7b2YoZixiLm1lbW9pemVkU3RhdGUpfHwod2c9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT1oO2IuYmFzZVN0YXRlPWU7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBSaChhKXt2YXIgYj1OaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpQaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9U2guYmluZChudWxsLHVoLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gVGgoYSl7cmV0dXJuIFFoKFBoLGEpfWZ1bmN0aW9uIFVoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09emg/KHpoPXtsYXN0RWZmZWN0Om51bGx9LHpoLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPXpoLmxhc3RFZmZlY3QsbnVsbD09PWI/emgubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMsemgubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBWaChhLGIsYyxkKXt2YXIgZT1OaCgpO0FofD1hO2UubWVtb2l6ZWRTdGF0ZT1VaChiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1mdW5jdGlvbiBXaChhLGIsYyxkKXt2YXIgZT1PaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJkhoKGQsZy5kZXBzKSl7VWgoMCxjLGYsZCk7cmV0dXJufX1BaHw9YTtlLm1lbW9pemVkU3RhdGU9VWgoYixjLGYsZCl9ZnVuY3Rpb24gWGgoYSxiKXtyZXR1cm4gVmgoNTE2LDE5MixhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFdoKDUxNiwxOTIsYSxiKX1cbmZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gJGgoKXt9ZnVuY3Rpb24gYWkoYSxiKXtOaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9T2goKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkhoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gU2goYSxiLGMpe2lmKCEoMjU+R2gpKXRocm93IEVycm9yKHUoMzAxKSk7dmFyIGQ9YS5hbHRlcm5hdGU7aWYoYT09PXVofHxudWxsIT09ZCYmZD09PXVoKWlmKEJoPSEwLGE9e2V4cGlyYXRpb25UaW1lOnRoLHN1c3BlbnNlQ29uZmlnOm51bGwsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sbnVsbD09PUNoJiYoQ2g9bmV3IE1hcCksYz1DaC5nZXQoYiksdm9pZCAwPT09YylDaC5zZXQoYixhKTtlbHNle2ZvcihiPWM7bnVsbCE9PWIubmV4dDspYj1iLm5leHQ7Yi5uZXh0PWF9ZWxzZXt2YXIgZT1QZygpLGY9TWcuc3VzcGVuc2U7ZT1RZyhlLGEsZik7Zj17ZXhwaXJhdGlvblRpbWU6ZSxzdXNwZW5zZUNvbmZpZzpmLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O3ZhciBnPWIubGFzdDtpZihudWxsPT09ZylmLm5leHQ9ZjtlbHNle3ZhciBoPWcubmV4dDtudWxsIT09aCYmXG4oZi5uZXh0PWgpO2cubmV4dD1mfWIubGFzdD1mO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PWR8fDA9PT1kLmV4cGlyYXRpb25UaW1lKSYmKGQ9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1kKSl0cnl7dmFyIGs9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxsPWQoayxjKTtmLmVhZ2VyUmVkdWNlcj1kO2YuZWFnZXJTdGF0ZT1sO2lmKG9mKGwsaykpcmV0dXJufWNhdGNoKG0pe31maW5hbGx5e31SZyhhLGUpfX1cbnZhciBMaD17cmVhZENvbnRleHQ6eGcsdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlUmVzcG9uZGVyOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246UX0sSmg9e3JlYWRDb250ZXh0OnhnLHVzZUNhbGxiYWNrOmFpLHVzZUNvbnRleHQ6eGcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBWaCg0LDM2LFpoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVmgoNCwzNixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9TmgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1cblthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1OaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPVNoLmJpbmQobnVsbCx1aCxhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9TmgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6UmgsdXNlRGVidWdWYWx1ZTokaCx1c2VSZXNwb25kZXI6cmgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPVJoKGEpLGQ9Y1swXSxlPWNbMV07WGgoZnVuY3Rpb24oKXtxLnVuc3RhYmxlX25leHQoZnVuY3Rpb24oKXt2YXIgYz1OLnN1c3BlbnNlO04uc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtOLnN1c3BlbnNlPVxuY319KX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVJoKCExKSxjPWJbMF0sZD1iWzFdO3JldHVyblthaShmdW5jdGlvbihiKXtkKCEwKTtxLnVuc3RhYmxlX25leHQoZnVuY3Rpb24oKXt2YXIgYz1OLnN1c3BlbnNlO04uc3VzcGVuc2U9dm9pZCAwPT09YT9udWxsOmE7dHJ5e2QoITEpLGIoKX1maW5hbGx5e04uc3VzcGVuc2U9Y319KX0sW2EsY10pLGNdfX0sS2g9e3JlYWRDb250ZXh0OnhnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6eGcsdXNlRWZmZWN0OlloLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBXaCg0LDM2LFpoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gV2goNCwzNixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9T2goKTtiPXZvaWQgMD09PWI/XG5udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmSGgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6UWgsdXNlUmVmOmZ1bmN0aW9uKCl7cmV0dXJuIE9oKCkubWVtb2l6ZWRTdGF0ZX0sdXNlU3RhdGU6VGgsdXNlRGVidWdWYWx1ZTokaCx1c2VSZXNwb25kZXI6cmgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPVRoKGEpLGQ9Y1swXSxlPWNbMV07WWgoZnVuY3Rpb24oKXtxLnVuc3RhYmxlX25leHQoZnVuY3Rpb24oKXt2YXIgYz1OLnN1c3BlbnNlO04uc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtOLnN1c3BlbnNlPWN9fSl9LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj1UaCghMSksYz1iWzBdLGQ9YlsxXTtyZXR1cm5bYmkoZnVuY3Rpb24oYil7ZCghMCk7cS51bnN0YWJsZV9uZXh0KGZ1bmN0aW9uKCl7dmFyIGM9XG5OLnN1c3BlbnNlO04uc3VzcGVuc2U9dm9pZCAwPT09YT9udWxsOmE7dHJ5e2QoITEpLGIoKX1maW5hbGx5e04uc3VzcGVuc2U9Y319KX0sW2EsY10pLGNdfX0sY2k9bnVsbCxkaT1udWxsLGVpPSExO2Z1bmN0aW9uIGZpKGEsYil7dmFyIGM9Z2koNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIGhpKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBpaShhKXtpZihlaSl7dmFyIGI9ZGk7aWYoYil7dmFyIGM9YjtpZighaGkoYSxiKSl7Yj1yZShjLm5leHRTaWJsaW5nKTtpZighYnx8IWhpKGEsYikpe2EuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDI7ZWk9ITE7Y2k9YTtyZXR1cm59ZmkoY2ksYyl9Y2k9YTtkaT1yZShiLmZpcnN0Q2hpbGQpfWVsc2UgYS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MixlaT0hMSxjaT1hfX1mdW5jdGlvbiBqaShhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47Y2k9YX1cbmZ1bmN0aW9uIGtpKGEpe2lmKGEhPT1jaSlyZXR1cm4hMTtpZighZWkpcmV0dXJuIGppKGEpLGVpPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhb2UoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWRpO2I7KWZpKGEsYiksYj1yZShiLm5leHRTaWJsaW5nKTtqaShhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHUoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PWllKXtpZigwPT09Yil7ZGk9cmUoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZSBjIT09aGUmJmMhPT1rZSYmYyE9PWplfHxiKyt9YT1hLm5leHRTaWJsaW5nfWRpPW51bGx9fWVsc2UgZGk9Y2k/cmUoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBsaSgpe2RpPWNpPW51bGw7ZWk9ITF9dmFyIG1pPUVhLlJlYWN0Q3VycmVudE93bmVyLHdnPSExO2Z1bmN0aW9uIFIoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9naChiLG51bGwsYyxkKTpmaChiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBuaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dmcoYixlKTtkPUloKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXdnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksb2koYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIXFpKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLHJpKGEsYixnLGQsZSxmKTthPWNoKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6cWYsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gb2koYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9YWgoZyxkLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIHJpKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJnFmKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHdnPSExLGU8Zik/b2koYSxiLGYpOnNpKGEsYixjLGQsZil9ZnVuY3Rpb24gdGkoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBzaShhLGIsYyxkLGUpe3ZhciBmPUwoYyk/RGY6Si5jdXJyZW50O2Y9RWYoYixmKTt2ZyhiLGUpO2M9SWgoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhd2cpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxvaShhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHVpKGEsYixjLGQsZSl7aWYoTChjKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO3ZnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxVZyhiLGMsZCxlKSxXZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD14ZyhsKToobD1MKGMpP0RmOkouY3VycmVudCxsPUVmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEM9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0N8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZWZyhiLGcsZCxsKTt5Zz0hMTt2YXIgeT1iLm1lbW9pemVkU3RhdGU7az1nLnN0YXRlPXk7dmFyIEg9Yi51cGRhdGVRdWV1ZTtudWxsIT09SCYmKEhnKGIsSCxkLGcsZSksaz1iLm1lbW9pemVkU3RhdGUpO2ghPT1kfHx5IT09a3x8Sy5jdXJyZW50fHx5Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihPZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9eWd8fFRnKGIsYyxoLGQseSxrLGwpKT8oQ3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOm1nKGIudHlwZSxoKSxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXhnKGwpOihsPUwoYyk/RGY6Si5jdXJyZW50LGw9RWYoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywoQz1cblwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmVmcoYixnLGQsbCkseWc9ITEsaz1iLm1lbW9pemVkU3RhdGUseT1nLnN0YXRlPWssSD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1IJiYoSGcoYixILGQsZyxlKSx5PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGshPT15fHxLLmN1cnJlbnR8fHlnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKE9nKGIsYyxtLGQpLHk9Yi5tZW1vaXplZFN0YXRlKSwobT15Z3x8VGcoYixjLGgsZCxrLHksbCkpPyhDfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQseSxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHksbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPVxuZCxiLm1lbW9pemVkU3RhdGU9eSksZy5wcm9wcz1kLGcuc3RhdGU9eSxnLmNvbnRleHQ9bCxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gdmkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gdmkoYSxiLGMsZCxlLGYpe3RpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZLZihiLGMsITEpLG9pKGEsYixmKTtkPWIuc3RhdGVOb2RlO21pLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPWZoKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9ZmgoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmS2YoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiB3aShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0hmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkhmKGEsYi5jb250ZXh0LCExKTttaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgeGk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiB5aShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxLGIpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1lLmZhbGxiYWNrJiZpaShiKTtpZihnKXtnPWUuZmFsbGJhY2s7ZT1laChudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPWVoKGcsZCxjLG51bGwpO2MucmV0dXJuPVxuYjtlLnNpYmxpbmc9YztiLm1lbW9pemVkU3RhdGU9eGk7Yi5jaGlsZD1lO3JldHVybiBjfWQ9ZS5jaGlsZHJlbjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1naChiLG51bGwsZCxjKX1pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthPWEuY2hpbGQ7ZD1hLnNpYmxpbmc7aWYoZyl7ZT1lLmZhbGxiYWNrO2M9YWgoYSxhLnBlbmRpbmdQcm9wcywwKTtjLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpJiYoZz1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09YS5jaGlsZCkpZm9yKGMuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YyxnPWcuc2libGluZztkPWFoKGQsZSxkLmV4cGlyYXRpb25UaW1lKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT14aTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1maChiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9XG5udWxsO3JldHVybiBiLmNoaWxkPWN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPWVoKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9ZWgoZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9eGk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPWZoKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24gemkoYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3VnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIEFpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbEV4cGlyYXRpb249MCxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQmkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtSKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnppKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXppKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoTSxkLGIpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1xaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO0FpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PXFoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1BaShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6QWkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZKZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9YWgoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9YWgoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIENpKGEpe2EuZWZmZWN0VGFnfD00fXZhciBIaSxJaSxKaSxLaTtcbkhpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtJaT1mdW5jdGlvbigpe307XG5KaT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7bGgoaWguY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPUFiKGcsZik7ZD1BYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9SWIoZyxmKTtkPUliKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9S2IoZyxmKTtkPUtiKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9YWUpfVlkKGMsZCk7dmFyIGgsaztjPW51bGw7Zm9yKGggaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShoKSYmZi5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZltoXSlpZihcInN0eWxlXCI9PT1cbmgpZm9yKGsgaW4gZz1mW2hdLGcpZy5oYXNPd25Qcm9wZXJ0eShrKSYmKGN8fChjPXt9KSxjW2tdPVwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1oJiZcImNoaWxkcmVuXCIhPT1oJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYoaWEuaGFzT3duUHJvcGVydHkoaCk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGgsbnVsbCkpO2ZvcihoIGluIGQpe3ZhciBsPWRbaF07Zz1udWxsIT1mP2ZbaF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoaCkmJmwhPT1nJiYobnVsbCE9bHx8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09aClpZihnKXtmb3IoayBpbiBnKSFnLmhhc093blByb3BlcnR5KGspfHxsJiZsLmhhc093blByb3BlcnR5KGspfHwoY3x8KGM9e30pLGNba109XCJcIik7Zm9yKGsgaW4gbClsLmhhc093blByb3BlcnR5KGspJiZnW2tdIT09bFtrXSYmKGN8fChjPXt9KSxcbmNba109bFtrXSl9ZWxzZSBjfHwoYXx8KGE9W10pLGEucHVzaChoLGMpKSxjPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGw9bD9sLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1sJiZnIT09bCYmKGE9YXx8W10pLnB1c2goaCxcIlwiK2wpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKGlhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiYkZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7KGIudXBkYXRlUXVldWU9ZSkmJkNpKGIpfX07S2k9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJkNpKGIpfTtcbmZ1bmN0aW9uIExpKGEsYil7c3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIE1pKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRmYoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpuaChhKTtHZihhKTtiPWEuZWZmZWN0VGFnO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IodSgyODUpKTthLmVmZmVjdFRhZz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gcGgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBHKE0sYSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBHKE0sYSksbnVsbDtjYXNlIDQ6cmV0dXJuIG5oKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gdGcoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBOaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOlhhKGIpfX1cbnZhciBPaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBQaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPVhhKGMpKTtudWxsIT09YyYmV2EoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmV2EoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gUWkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe1JpKGEsYyl9fWZ1bmN0aW9uIFNpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1JpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFRpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlVpKDIsMCxiKTticmVhaztjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzptZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjMpKTt9fVxuZnVuY3Rpb24gVWkoYSxiLGMpe2M9Yy51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkb3tpZigwIT09KGQudGFnJmEpKXt2YXIgZT1kLmRlc3Ryb3k7ZC5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1lJiZlKCl9MCE9PShkLnRhZyZiKSYmKGU9ZC5jcmVhdGUsZC5kZXN0cm95PWUoKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWMpfX1cbmZ1bmN0aW9uIFZpKGEsYixjKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2kmJldpKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGQ9YS5uZXh0O2ZnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBhPWQ7ZG97dmFyIGM9YS5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBnPWI7dHJ5e2MoKX1jYXRjaChoKXtSaShnLGgpfX1hPWEubmV4dH13aGlsZShhIT09ZCl9KX1icmVhaztjYXNlIDE6U2koYik7Yz1iLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCYmUWkoYixjKTticmVhaztjYXNlIDU6U2koYik7YnJlYWs7Y2FzZSA0OlhpKGEsYixjKX19XG5mdW5jdGlvbiBZaShhKXt2YXIgYj1hLmFsdGVybmF0ZTthLnJldHVybj1udWxsO2EuY2hpbGQ9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmFsdGVybmF0ZT1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO251bGwhPT1iJiZZaShiKX1mdW5jdGlvbiBaaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uICRpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKFppKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihUYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8WmkoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXt2YXIgZj01PT09ZS50YWd8fDY9PT1lLnRhZztpZihmKXt2YXIgZz1mP2Uuc3RhdGVOb2RlOmUuc3RhdGVOb2RlLmluc3RhbmNlO2lmKGMpaWYoZCl7Zj1iO3ZhciBoPWc7Zz1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaCxnKTpmLmluc2VydEJlZm9yZShoLGcpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZyxjKTtlbHNlIGQ/KGg9Yiw4PT09aC5ub2RlVHlwZT8oZj1oLnBhcmVudE5vZGUsZi5pbnNlcnRCZWZvcmUoZyxoKSk6KGY9aCxmLmFwcGVuZENoaWxkKGcpKSxoPWguX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09aCYmdm9pZCAwIT09aHx8bnVsbCE9PWYub25jbGlja3x8KGYub25jbGljaz1hZSkpOmIuYXBwZW5kQ2hpbGQoZyl9ZWxzZSBpZig0IT09XG5lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gWGkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihWaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrO2Zvcig7bnVsbD09PW0uc2libGluZzspe2lmKG51bGw9PT1tLnJldHVybnx8bS5yZXR1cm49PT1rKWJyZWFrIGE7bT1tLnJldHVybn1tLnNpYmxpbmcucmV0dXJuPW0ucmV0dXJuO209bS5zaWJsaW5nfWc/KGg9XG5mLGs9ZC5zdGF0ZU5vZGUsOD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGspOmgucmVtb3ZlQ2hpbGQoaykpOmYucmVtb3ZlQ2hpbGQoZC5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWQudGFnKXtpZihudWxsIT09ZC5jaGlsZCl7Zj1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoVmkoYSxkLGMpLG51bGwhPT1kLmNoaWxkKXtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX1pZihkPT09YilicmVhaztmb3IoO251bGw9PT1kLnNpYmxpbmc7KXtpZihudWxsPT09ZC5yZXR1cm58fGQucmV0dXJuPT09YilyZXR1cm47ZD1kLnJldHVybjs0PT09ZC50YWcmJihlPSExKX1kLnNpYmxpbmcucmV0dXJuPWQucmV0dXJuO2Q9ZC5zaWJsaW5nfX1cbmZ1bmN0aW9uIGFqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6VWkoNCw4LGIpO2JyZWFrO2Nhc2UgMTpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbdmVdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkNiKGMsZCk7WmQoYSxlKTtiPVpkKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9XZChjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/U2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP1RiKGMsaCk6dmIoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkViKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TWIoYyxcbmQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP0piKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9KYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6SmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1icmVhaztjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsTGMoYi5jb250YWluZXJJbmZvKSk7YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmM9YjtudWxsPT09Yi5tZW1vaXplZFN0YXRlP2Q9ITE6KGQ9ITAsYz1iLmNoaWxkLGJqPWNnKCkpO1xuaWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9Zi5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGY9YS5zdGF0ZU5vZGUsZT1hLm1lbW9pemVkUHJvcHMuc3R5bGUsZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGwsZi5zdHlsZS5kaXNwbGF5PVZkKFwiZGlzcGxheVwiLGUpKTtlbHNlIGlmKDY9PT1hLnRhZylhLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZD9cIlwiOmEubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09YS50YWcmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGw9PT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPWY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49XG5hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YylicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWNqKGIpO2JyZWFrO2Nhc2UgMTk6Y2ooYik7YnJlYWs7Y2FzZSAxNzpicmVhaztjYXNlIDIwOmJyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MykpO319ZnVuY3Rpb24gY2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgT2kpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1kai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX12YXIgZWo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7XG5mdW5jdGlvbiBmaihhLGIsYyl7Yz1CZyhjLG51bGwpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe2dqfHwoZ2o9ITAsaGo9ZCk7UGkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBpaihhLGIsYyl7Yz1CZyhjLG51bGwpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtQaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09amo/amo9bmV3IFNldChbdGhpc10pOmpqLmFkZCh0aGlzKSxQaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbnZhciBraj1NYXRoLmNlaWwsbGo9RWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixtaj1FYS5SZWFjdEN1cnJlbnRPd25lcixTPTAsbmo9OCxvaj0xNixwaj0zMixxaj0wLHJqPTEsc2o9Mix0aj0zLHVqPTQsdmo9NSxUPVMsVT1udWxsLFY9bnVsbCxXPTAsWD1xaix3aj1udWxsLHhqPTEwNzM3NDE4MjMseWo9MTA3Mzc0MTgyMyx6aj1udWxsLEFqPTAsQmo9ITEsYmo9MCxDaj01MDAsWT1udWxsLGdqPSExLGhqPW51bGwsamo9bnVsbCxEaj0hMSxFaj1udWxsLEZqPTkwLEdqPW51bGwsSGo9MCxJaj1udWxsLEpqPTA7ZnVuY3Rpb24gUGcoKXtyZXR1cm4oVCYob2p8cGopKSE9PVM/MTA3Mzc0MTgyMS0oY2coKS8xMHwwKTowIT09Smo/Smo6Smo9MTA3Mzc0MTgyMS0oY2coKS8xMHwwKX1cbmZ1bmN0aW9uIFFnKGEsYixjKXtiPWIubW9kZTtpZigwPT09KGImMikpcmV0dXJuIDEwNzM3NDE4MjM7dmFyIGQ9ZGcoKTtpZigwPT09KGImNCkpcmV0dXJuIDk5PT09ZD8xMDczNzQxODIzOjEwNzM3NDE4MjI7aWYoKFQmb2opIT09UylyZXR1cm4gVztpZihudWxsIT09YylhPWxnKGEsYy50aW1lb3V0TXN8MHx8NUUzLDI1MCk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPWxnKGEsMTUwLDEwMCk7YnJlYWs7Y2FzZSA5NzpjYXNlIDk2OmE9bGcoYSw1RTMsMjUwKTticmVhaztjYXNlIDk1OmE9MjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI2KSk7fW51bGwhPT1VJiZhPT09VyYmLS1hO3JldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZig1MDxIail0aHJvdyBIaj0wLElqPW51bGwsRXJyb3IodSgxODUpKTthPUtqKGEsYik7aWYobnVsbCE9PWEpe3ZhciBjPWRnKCk7MTA3Mzc0MTgyMz09PWI/KFQmbmopIT09UyYmKFQmKG9qfHBqKSk9PT1TP0xqKGEpOihaKGEpLFQ9PT1TJiZqZygpKTpaKGEpOyhUJjQpPT09U3x8OTghPT1jJiY5OSE9PWN8fChudWxsPT09R2o/R2o9bmV3IE1hcChbW2EsYl1dKTooYz1Hai5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJkdqLnNldChhLGIpKSl9fVxuZnVuY3Rpb24gS2ooYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKFU9PT1lJiYoSmcoYiksWD09PXVqJiZNaihlLFcpKSxOaihlLGIpKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIE9qKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2lmKDAhPT1iKXJldHVybiBiO2I9YS5maXJzdFBlbmRpbmdUaW1lO2lmKCFQaihhLGIpKXJldHVybiBiO2I9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO3JldHVybiBiPmE/YjphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWhnKExqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj1PaihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9UGcoKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09WGYmJk5mKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9oZyhMai5iaW5kKG51bGwsYSkpOmdnKGQsUWouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLWNnKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBRaihhLGIpe0pqPTA7aWYoYilyZXR1cm4gYj1QZygpLFJqKGEsYiksWihhKSxudWxsO3ZhciBjPU9qKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDMyNykpO1NqKCk7YT09PVUmJmM9PT1XfHxUaihhLGMpO2lmKG51bGwhPT1WKXt2YXIgZD1UO1R8PW9qO3ZhciBlPVVqKGEpO2RvIHRyeXtWaigpO2JyZWFrfWNhdGNoKGgpe1dqKGEsaCl9d2hpbGUoMSk7cmcoKTtUPWQ7bGouY3VycmVudD1lO2lmKFg9PT1yail0aHJvdyBiPXdqLFRqKGEsYyksTWooYSxjKSxaKGEpLGI7aWYobnVsbD09PVYpc3dpdGNoKGU9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZSxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YyxkPVgsVT1udWxsLGQpe2Nhc2UgcWo6Y2FzZSByajp0aHJvdyBFcnJvcih1KDM0NSkpO2Nhc2Ugc2o6UmooYSwyPGM/MjpjKTticmVhaztjYXNlIHRqOk1qKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO1xuYz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1YaihlKSk7aWYoMTA3Mzc0MTgyMz09PXhqJiYoZT1iaitDai1jZygpLDEwPGUpKXtpZihCail7dmFyIGY9YS5sYXN0UGluZ2VkVGltZTtpZigwPT09Znx8Zj49Yyl7YS5sYXN0UGluZ2VkVGltZT1jO1RqKGEsYyk7YnJlYWt9fWY9T2ooYSk7aWYoMCE9PWYmJmYhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1kO2JyZWFrfWEudGltZW91dEhhbmRsZT1wZShZai5iaW5kKG51bGwsYSksZSk7YnJlYWt9WWooYSk7YnJlYWs7Y2FzZSB1ajpNaihhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtjPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPVhqKGUpKTtpZihCaiYmKGU9YS5sYXN0UGluZ2VkVGltZSwwPT09ZXx8ZT49Yykpe2EubGFzdFBpbmdlZFRpbWU9YztUaihhLGMpO2JyZWFrfWU9T2ooYSk7aWYoMCE9PWUmJmUhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1cbmQ7YnJlYWt9MTA3Mzc0MTgyMyE9PXlqP2Q9MTAqKDEwNzM3NDE4MjEteWopLWNnKCk6MTA3Mzc0MTgyMz09PXhqP2Q9MDooZD0xMCooMTA3Mzc0MTgyMS14aiktNUUzLGU9Y2coKSxjPTEwKigxMDczNzQxODIxLWMpLWUsZD1lLWQsMD5kJiYoZD0wKSxkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmtqKGQvMTk2MCkpLWQsYzxkJiYoZD1jKSk7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPXBlKFlqLmJpbmQobnVsbCxhKSxkKTticmVha31ZaihhKTticmVhaztjYXNlIHZqOmlmKDEwNzM3NDE4MjMhPT14aiYmbnVsbCE9PXpqKXtmPXhqO3ZhciBnPXpqO2Q9Zy5idXN5TWluRHVyYXRpb25Nc3wwOzA+PWQ/ZD0wOihlPWcuYnVzeURlbGF5TXN8MCxmPWNnKCktKDEwKigxMDczNzQxODIxLWYpLShnLnRpbWVvdXRNc3wwfHw1RTMpKSxkPWY8PWU/MDplK2QtZik7aWYoMTA8ZCl7TWooYSxjKTthLnRpbWVvdXRIYW5kbGU9XG5wZShZai5iaW5kKG51bGwsYSksZCk7YnJlYWt9fVlqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjkpKTt9WihhKTtpZihhLmNhbGxiYWNrTm9kZT09PWIpcmV0dXJuIFFqLmJpbmQobnVsbCxhKX19cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBMaihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtiPTAhPT1iP2I6MTA3Mzc0MTgyMztpZihhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9PT1iKVlqKGEpO2Vsc2V7aWYoKFQmKG9qfHBqKSkhPT1TKXRocm93IEVycm9yKHUoMzI3KSk7U2ooKTthPT09VSYmYj09PVd8fFRqKGEsYik7aWYobnVsbCE9PVYpe3ZhciBjPVQ7VHw9b2o7dmFyIGQ9VWooYSk7ZG8gdHJ5e1pqKCk7YnJlYWt9Y2F0Y2goZSl7V2ooYSxlKX13aGlsZSgxKTtyZygpO1Q9Yztsai5jdXJyZW50PWQ7aWYoWD09PXJqKXRocm93IGM9d2osVGooYSxiKSxNaihhLGIpLFooYSksYztpZihudWxsIT09Vil0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VT1udWxsO1lqKGEpO1ooYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gYWsoKXtpZihudWxsIT09R2ope3ZhciBhPUdqO0dqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7UmooYyxhKTtaKGMpfSk7amcoKX19ZnVuY3Rpb24gYmsoYSxiKXt2YXIgYz1UO1R8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VD1jLFQ9PT1TJiZqZygpfX1mdW5jdGlvbiBjayhhLGIpe3ZhciBjPVQ7VCY9LTI7VHw9bmo7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VD1jLFQ9PT1TJiZqZygpfX1cbmZ1bmN0aW9uIFRqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHFlKGMpKTtpZihudWxsIT09Vilmb3IoYz1WLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6dmFyIGU9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1lJiZ2b2lkIDAhPT1lJiZGZihkKTticmVhaztjYXNlIDM6bmgoZCk7R2YoZCk7YnJlYWs7Y2FzZSA1OnBoKGQpO2JyZWFrO2Nhc2UgNDpuaChkKTticmVhaztjYXNlIDEzOkcoTSxkKTticmVhaztjYXNlIDE5OkcoTSxkKTticmVhaztjYXNlIDEwOnRnKGQpfWM9Yy5yZXR1cm59VT1hO1Y9YWgoYS5jdXJyZW50LG51bGwsYik7Vz1iO1g9cWo7d2o9bnVsbDt5aj14aj0xMDczNzQxODIzO3pqPW51bGw7QWo9MDtCaj0hMX1cbmZ1bmN0aW9uIFdqKGEsYil7ZG97dHJ5e3JnKCk7TWgoKTtpZihudWxsPT09Vnx8bnVsbD09PVYucmV0dXJuKXJldHVybiBYPXJqLHdqPWIsbnVsbDthOnt2YXIgYz1hLGQ9Vi5yZXR1cm4sZT1WLGY9YjtiPVc7ZS5lZmZlY3RUYWd8PTIwNDg7ZS5maXJzdEVmZmVjdD1lLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ZiYmXCJvYmplY3RcIj09PXR5cGVvZiBmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi50aGVuKXt2YXIgZz1mLGg9MCE9PShNLmN1cnJlbnQmMSksaz1kO2Rve3ZhciBsO2lmKGw9MTM9PT1rLnRhZyl7dmFyIG09ay5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1tKWw9bnVsbCE9PW0uZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciBDPWsubWVtb2l6ZWRQcm9wcztsPXZvaWQgMD09PUMuZmFsbGJhY2s/ITE6ITAhPT1DLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOmg/ITE6ITB9fWlmKGwpe3ZhciB5PWsudXBkYXRlUXVldWU7aWYobnVsbD09PXkpe3ZhciBIPW5ldyBTZXQ7XG5ILmFkZChnKTtrLnVwZGF0ZVF1ZXVlPUh9ZWxzZSB5LmFkZChnKTtpZigwPT09KGsubW9kZSYyKSl7ay5lZmZlY3RUYWd8PTY0O2UuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09ZS50YWcpaWYobnVsbD09PWUuYWx0ZXJuYXRlKWUudGFnPTE3O2Vsc2V7dmFyIHo9QmcoMTA3Mzc0MTgyMyxudWxsKTt6LnRhZz0yO0RnKGUseil9ZS5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9Zj12b2lkIDA7ZT1iO3ZhciB0YT1jLnBpbmdDYWNoZTtudWxsPT09dGE/KHRhPWMucGluZ0NhY2hlPW5ldyBlaixmPW5ldyBTZXQsdGEuc2V0KGcsZikpOihmPXRhLmdldChnKSx2b2lkIDA9PT1mJiYoZj1uZXcgU2V0LHRhLnNldChnLGYpKSk7aWYoIWYuaGFzKGUpKXtmLmFkZChlKTt2YXIgcj1kay5iaW5kKG51bGwsYyxnLGUpO2cudGhlbihyLHIpfWsuZWZmZWN0VGFnfD00MDk2O2suZXhwaXJhdGlvblRpbWU9YjticmVhayBhfWs9ay5yZXR1cm59d2hpbGUobnVsbCE9PWspO2Y9RXJyb3IoKFdhKGUudHlwZSl8fFxuXCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK1hhKGUpKX1YIT09dmomJihYPXNqKTtmPU5pKGYsZSk7az1kO2Rve3N3aXRjaChrLnRhZyl7Y2FzZSAzOmc9ZjtrLmVmZmVjdFRhZ3w9NDA5NjtrLmV4cGlyYXRpb25UaW1lPWI7dmFyIHg9ZmooayxnLGIpO0VnKGsseCk7YnJlYWsgYTtjYXNlIDE6Zz1mO3ZhciBBPWsudHlwZSxwPWsuc3RhdGVOb2RlO2lmKDA9PT0oay5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEEuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09cCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHAuY29tcG9uZW50RGlkQ2F0Y2gmJlxuKG51bGw9PT1qanx8IWpqLmhhcyhwKSkpKXtrLmVmZmVjdFRhZ3w9NDA5NjtrLmV4cGlyYXRpb25UaW1lPWI7dmFyIHQ9aWooayxnLGIpO0VnKGssdCk7YnJlYWsgYX19az1rLnJldHVybn13aGlsZShudWxsIT09ayl9Vj1layhWKX1jYXRjaCh2KXtiPXY7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gVWooKXt2YXIgYT1sai5jdXJyZW50O2xqLmN1cnJlbnQ9TGg7cmV0dXJuIG51bGw9PT1hP0xoOmF9ZnVuY3Rpb24gSWcoYSxiKXthPHhqJiYyPGEmJih4aj1hKTtudWxsIT09YiYmYTx5aiYmMjxhJiYoeWo9YSx6aj1iKX1mdW5jdGlvbiBKZyhhKXthPkFqJiYoQWo9YSl9ZnVuY3Rpb24gWmooKXtmb3IoO251bGwhPT1WOylWPWZrKFYpfWZ1bmN0aW9uIFZqKCl7Zm9yKDtudWxsIT09ViYmIU9mKCk7KVY9ZmsoVil9XG5mdW5jdGlvbiBmayhhKXt2YXIgYj1nayhhLmFsdGVybmF0ZSxhLFcpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9ZWsoYSkpO21qLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIGVrKGEpe1Y9YTtkb3t2YXIgYj1WLmFsdGVybmF0ZTthPVYucmV0dXJuO2lmKDA9PT0oVi5lZmZlY3RUYWcmMjA0OCkpe2E6e3ZhciBjPWI7Yj1WO3ZhciBkPVc7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSAxNjpicmVhaztjYXNlIDE1OmNhc2UgMDpicmVhaztjYXNlIDE6TChiLnR5cGUpJiZGZihiKTticmVhaztjYXNlIDM6bmgoYik7R2YoYik7ZT1iLnN0YXRlTm9kZTtlLnBlbmRpbmdDb250ZXh0JiYoZS5jb250ZXh0PWUucGVuZGluZ0NvbnRleHQsZS5wZW5kaW5nQ29udGV4dD1udWxsKTsobnVsbD09PWN8fG51bGw9PT1jLmNoaWxkKSYma2koYikmJkNpKGIpO0lpKGIpO2JyZWFrO2Nhc2UgNTpwaChiKTtkPWxoKGtoLmN1cnJlbnQpO3ZhciBmPWIudHlwZTtpZihudWxsIT09YyYmbnVsbCE9Yi5zdGF0ZU5vZGUpSmkoYyxiLGYsZSxkKSxjLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCk7ZWxzZSBpZihlKXt2YXIgZz1cbmxoKGloLmN1cnJlbnQpO2lmKGtpKGIpKXtlPWI7dmFyIGg9ZS5zdGF0ZU5vZGU7Yz1lLnR5cGU7dmFyIGs9ZS5tZW1vaXplZFByb3BzLGw9ZDtoW3VlXT1lO2hbdmVdPWs7Zj12b2lkIDA7ZD1oO3N3aXRjaChjKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGNjLmxlbmd0aDtoKyspRihjY1toXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpCYihkLGspO0YoXCJpbnZhbGlkXCIsZCk7JGQobCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFrLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpOyRkKGwsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpMYihkLGspLEYoXCJpbnZhbGlkXCIsZCksJGQobCxcIm9uQ2hhbmdlXCIpfVlkKGMsayk7aD1udWxsO2ZvcihmIGluIGspay5oYXNPd25Qcm9wZXJ0eShmKSYmKGc9a1tmXSxcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgZz9kLnRleHRDb250ZW50IT09ZyYmKGg9W1wiY2hpbGRyZW5cIixnXSk6XCJudW1iZXJcIj09PXR5cGVvZiBnJiZkLnRleHRDb250ZW50IT09XCJcIitnJiYoaD1bXCJjaGlsZHJlblwiLFwiXCIrZ10pOmlhLmhhc093blByb3BlcnR5KGYpJiZudWxsIT1nJiYkZChsLGYpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6eWIoZCk7R2IoZCxrLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp5YihkKTtOYihkLGspO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay5vbkNsaWNrJiZcbihkLm9uY2xpY2s9YWUpfWY9aDtlLnVwZGF0ZVF1ZXVlPWY7ZT1udWxsIT09Zj8hMDohMTtlJiZDaShiKX1lbHNle2M9YjtsPWY7az1lO2g9OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQ7Zz09PU9iLmh0bWwmJihnPVBiKGwpKTtnPT09T2IuaHRtbD9cInNjcmlwdFwiPT09bD8oaz1oLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksay5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixoPWsucmVtb3ZlQ2hpbGQoay5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBrLmlzP2g9aC5jcmVhdGVFbGVtZW50KGwse2lzOmsuaXN9KTooaD1oLmNyZWF0ZUVsZW1lbnQobCksXCJzZWxlY3RcIj09PWwmJihsPWgsay5tdWx0aXBsZT9sLm11bHRpcGxlPSEwOmsuc2l6ZSYmKGwuc2l6ZT1rLnNpemUpKSk6aD1oLmNyZWF0ZUVsZW1lbnROUyhnLGwpO2s9aDtrW3VlXT1jO2tbdmVdPWU7SGkoayxiLCExLCExKTtiLnN0YXRlTm9kZT1rO2w9ZjtjPWU7dmFyIG09ZCxDPVpkKGwsYyk7c3dpdGNoKGwpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixcbmspO2Q9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZD0wO2Q8Y2MubGVuZ3RoO2QrKylGKGNjW2RdLGspO2Q9YzticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsayk7ZD1jO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGspO0YoXCJsb2FkXCIsayk7ZD1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsayk7RihcInN1Ym1pdFwiLGspO2Q9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixrKTtkPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6QmIoayxjKTtkPUFiKGssYyk7RihcImludmFsaWRcIixrKTskZChtLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmQ9SWIoayxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6ay5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWMubXVsdGlwbGV9O2Q9bih7fSxjLHt2YWx1ZTp2b2lkIDB9KTtGKFwiaW52YWxpZFwiLGspOyRkKG0sXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpMYihrLFxuYyk7ZD1LYihrLGMpO0YoXCJpbnZhbGlkXCIsayk7JGQobSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6ZD1jfVlkKGwsZCk7aD12b2lkIDA7Zz1sO3ZhciB5PWssSD1kO2ZvcihoIGluIEgpaWYoSC5oYXNPd25Qcm9wZXJ0eShoKSl7dmFyIHo9SFtoXTtcInN0eWxlXCI9PT1oP1dkKHkseik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8oej16P3ouX19odG1sOnZvaWQgMCxudWxsIT16JiZTYih5LHopKTpcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2Ygej8oXCJ0ZXh0YXJlYVwiIT09Z3x8XCJcIiE9PXopJiZUYih5LHopOlwibnVtYmVyXCI9PT10eXBlb2YgeiYmVGIoeSxcIlwiK3opOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJihpYS5oYXNPd25Qcm9wZXJ0eShoKT9udWxsIT16JiYkZChtLGgpOm51bGwhPXomJnZiKHksaCx6LEMpKX1zd2l0Y2gobCl7Y2FzZSBcImlucHV0XCI6eWIoayk7XG5HYihrLGMsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnliKGspO05iKGssYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmsuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3ViKGMudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZD1rO2QubXVsdGlwbGU9ISFjLm11bHRpcGxlO2s9Yy52YWx1ZTtudWxsIT1rP0piKGQsISFjLm11bHRpcGxlLGssITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZKYihkLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoay5vbmNsaWNrPWFlKX0oZT1uZShmLGUpKSYmQ2koYil9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTticmVhaztjYXNlIDY6aWYoYyYmbnVsbCE9Yi5zdGF0ZU5vZGUpS2koYyxiLGMubWVtb2l6ZWRQcm9wcyxlKTtlbHNle2lmKFwic3RyaW5nXCIhPT1cbnR5cGVvZiBlJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtkPWxoKGtoLmN1cnJlbnQpO2xoKGloLmN1cnJlbnQpO2tpKGIpPyhlPWIsZj1lLnN0YXRlTm9kZSxkPWUubWVtb2l6ZWRQcm9wcyxmW3VlXT1lLChlPWYubm9kZVZhbHVlIT09ZCkmJkNpKGIpKTooZj1iLGU9KDk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShlKSxlW3VlXT1mLGIuc3RhdGVOb2RlPWUpfWJyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpHKE0sYik7ZT1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpe2IuZXhwaXJhdGlvblRpbWU9ZDticmVhayBhfWU9bnVsbCE9PWU7Zj0hMTtudWxsPT09Yz92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJmtpKGIpOihkPWMubWVtb2l6ZWRTdGF0ZSxmPW51bGwhPT1kLGV8fG51bGw9PT1kfHwoZD1jLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWQmJihrPWIuZmlyc3RFZmZlY3QsXG5udWxsIT09az8oYi5maXJzdEVmZmVjdD1kLGQubmV4dEVmZmVjdD1rKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9ZCxkLm5leHRFZmZlY3Q9bnVsbCksZC5lZmZlY3RUYWc9OCkpKTtpZihlJiYhZiYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWMmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlYPT09cWomJihYPXRqKTtlbHNle2lmKFg9PT1xanx8WD09PXRqKVg9dWo7MCE9PUFqJiZudWxsIT09VSYmKE1qKFUsVyksTmooVSxBaikpfWlmKGV8fGYpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpuaChiKTtJaShiKTticmVhaztjYXNlIDEwOnRnKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6TChiLnR5cGUpJiZGZihiKTticmVhaztjYXNlIDE5OkcoTSxiKTtlPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09XG5lKWJyZWFrO2Y9MCE9PShiLmVmZmVjdFRhZyY2NCk7az1lLnJlbmRlcmluZztpZihudWxsPT09aylpZihmKUxpKGUsITEpO2Vsc2V7aWYoWCE9PXFqfHxudWxsIT09YyYmMCE9PShjLmVmZmVjdFRhZyY2NCkpZm9yKGM9Yi5jaGlsZDtudWxsIT09Yzspe2s9cWgoYyk7aWYobnVsbCE9PWspe2IuZWZmZWN0VGFnfD02NDtMaShlLCExKTtmPWsudXBkYXRlUXVldWU7bnVsbCE9PWYmJihiLnVwZGF0ZVF1ZXVlPWYsYi5lZmZlY3RUYWd8PTQpO251bGw9PT1lLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1lLmxhc3RFZmZlY3Q7ZT1kO2ZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KWQ9ZixjPWUsZC5lZmZlY3RUYWcmPTIsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsLGs9ZC5hbHRlcm5hdGUsbnVsbD09PWs/KGQuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGQuZXhwaXJhdGlvblRpbWU9YyxkLmNoaWxkPW51bGwsXG5kLm1lbW9pemVkUHJvcHM9bnVsbCxkLm1lbW9pemVkU3RhdGU9bnVsbCxkLnVwZGF0ZVF1ZXVlPW51bGwsZC5kZXBlbmRlbmNpZXM9bnVsbCk6KGQuY2hpbGRFeHBpcmF0aW9uVGltZT1rLmNoaWxkRXhwaXJhdGlvblRpbWUsZC5leHBpcmF0aW9uVGltZT1rLmV4cGlyYXRpb25UaW1lLGQuY2hpbGQ9ay5jaGlsZCxkLm1lbW9pemVkUHJvcHM9ay5tZW1vaXplZFByb3BzLGQubWVtb2l6ZWRTdGF0ZT1rLm1lbW9pemVkU3RhdGUsZC51cGRhdGVRdWV1ZT1rLnVwZGF0ZVF1ZXVlLGM9ay5kZXBlbmRlbmNpZXMsZC5kZXBlbmRlbmNpZXM9bnVsbD09PWM/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yy5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Yy5maXJzdENvbnRleHQscmVzcG9uZGVyczpjLnJlc3BvbmRlcnN9KSxmPWYuc2libGluZztJKE0sTS5jdXJyZW50JjF8MixiKTtiPWIuY2hpbGQ7YnJlYWsgYX1jPWMuc2libGluZ319ZWxzZXtpZighZilpZihjPXFoKGspLG51bGwhPT1jKXtpZihiLmVmZmVjdFRhZ3w9XG42NCxmPSEwLGQ9Yy51cGRhdGVRdWV1ZSxudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmVmZmVjdFRhZ3w9NCksTGkoZSwhMCksbnVsbD09PWUudGFpbCYmXCJoaWRkZW5cIj09PWUudGFpbE1vZGUmJiFrLmFsdGVybmF0ZSl7Yj1iLmxhc3RFZmZlY3Q9ZS5sYXN0RWZmZWN0O251bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpO2JyZWFrfX1lbHNlIGNnKCk+ZS50YWlsRXhwaXJhdGlvbiYmMTxkJiYoYi5lZmZlY3RUYWd8PTY0LGY9ITAsTGkoZSwhMSksYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9ZC0xKTtlLmlzQmFja3dhcmRzPyhrLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWspOihkPWUubGFzdCxudWxsIT09ZD9kLnNpYmxpbmc9azpiLmNoaWxkPWssZS5sYXN0PWspfWlmKG51bGwhPT1lLnRhaWwpezA9PT1lLnRhaWxFeHBpcmF0aW9uJiYoZS50YWlsRXhwaXJhdGlvbj1jZygpKzUwMCk7ZD1lLnRhaWw7ZS5yZW5kZXJpbmc9ZDtlLnRhaWw9ZC5zaWJsaW5nO1xuZS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdDtkLnNpYmxpbmc9bnVsbDtlPU0uY3VycmVudDtlPWY/ZSYxfDI6ZSYxO0koTSxlLGIpO2I9ZDticmVhayBhfWJyZWFrO2Nhc2UgMjA6YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fWI9bnVsbH1lPVY7aWYoMT09PVd8fDEhPT1lLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Y9MDtmb3IoZD1lLmNoaWxkO251bGwhPT1kOyljPWQuZXhwaXJhdGlvblRpbWUsaz1kLmNoaWxkRXhwaXJhdGlvblRpbWUsYz5mJiYoZj1jKSxrPmYmJihmPWspLGQ9ZC5zaWJsaW5nO2UuY2hpbGRFeHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVYuZmlyc3RFZmZlY3QpLG51bGwhPT1WLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9XG5WLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Vi5sYXN0RWZmZWN0KSwxPFYuZWZmZWN0VGFnJiYobnVsbCE9PWEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1WOmEuZmlyc3RFZmZlY3Q9VixhLmxhc3RFZmZlY3Q9VikpfWVsc2V7Yj1NaShWLFcpO2lmKG51bGwhPT1iKXJldHVybiBiLmVmZmVjdFRhZyY9MjA0NyxiO251bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmVmZmVjdFRhZ3w9MjA0OCl9Yj1WLnNpYmxpbmc7aWYobnVsbCE9PWIpcmV0dXJuIGI7Vj1hfXdoaWxlKG51bGwhPT1WKTtYPT09cWomJihYPXZqKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBYaihhKXt2YXIgYj1hLmV4cGlyYXRpb25UaW1lO2E9YS5jaGlsZEV4cGlyYXRpb25UaW1lO3JldHVybiBiPmE/YjphfWZ1bmN0aW9uIFlqKGEpe3ZhciBiPWRnKCk7ZmcoOTksaWsuYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gaWsoYSxiKXtkbyBTaigpO3doaWxlKG51bGwhPT1Faik7aWYoKFQmKG9qfHBqKSkhPT1TKXRocm93IEVycm9yKHUoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHUoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDthLmNhbGxiYWNrUHJpb3JpdHk9OTA7YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDt2YXIgZT1YaihjKTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtkPD1hLmxhc3RTdXNwZW5kZWRUaW1lP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpkPD1hLmZpcnN0U3VzcGVuZGVkVGltZSYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPVxuZC0xKTtkPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtkPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApO2E9PT1VJiYoVj1VPW51bGwsVz0wKTsxPGMuZWZmZWN0VGFnP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZT1jLmZpcnN0RWZmZWN0KTplPWM6ZT1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1lKXt2YXIgZj1UO1R8PXBqO21qLmN1cnJlbnQ9bnVsbDtsZT1MZDt2YXIgZz1mZSgpO2lmKGdlKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKXZhciBoPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgaz1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKTtpZihrJiYwIT09ay5yYW5nZUNvdW50KXtoPWsuYW5jaG9yTm9kZTt2YXIgbD1rLmFuY2hvck9mZnNldCxcbm09ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLG0ubm9kZVR5cGV9Y2F0Y2goRGIpe2g9bnVsbDticmVhayBhfXZhciBDPTAseT0tMSxIPS0xLHo9MCx0YT0wLHI9Zyx4PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgQTs7KXtyIT09aHx8MCE9PWwmJjMhPT1yLm5vZGVUeXBlfHwoeT1DK2wpO3IhPT1tfHwwIT09ayYmMyE9PXIubm9kZVR5cGV8fChIPUMrayk7Mz09PXIubm9kZVR5cGUmJihDKz1yLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQT1yLmZpcnN0Q2hpbGQpKWJyZWFrO3g9cjtyPUF9Zm9yKDs7KXtpZihyPT09ZylicmVhayBiO3g9PT1oJiYrK3o9PT1sJiYoeT1DKTt4PT09bSYmKyt0YT09PWsmJihIPUMpO2lmKG51bGwhPT0oQT1yLm5leHRTaWJsaW5nKSlicmVhaztyPXg7eD1yLnBhcmVudE5vZGV9cj1BfWg9LTE9PT15fHwtMT09PUg/bnVsbDp7c3RhcnQ6eSxlbmQ6SH19ZWxzZSBoPW51bGx9aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPVxubnVsbDttZT17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtMZD0hMTtZPWU7ZG8gdHJ5e2prKCl9Y2F0Y2goRGIpe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7UmkoWSxEYik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9ZTtkbyB0cnl7Zm9yKGc9YSxoPWI7bnVsbCE9PVk7KXt2YXIgcD1ZLmVmZmVjdFRhZztwJjE2JiZUYihZLnN0YXRlTm9kZSxcIlwiKTtpZihwJjEyOCl7dmFyIHQ9WS5hbHRlcm5hdGU7aWYobnVsbCE9PXQpe3ZhciB2PXQucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChwJjEwMzgpe2Nhc2UgMjokaShZKTtZLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OiRpKFkpO1kuZWZmZWN0VGFnJj0tMzthaihZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDEwMjQ6WS5lZmZlY3RUYWcmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpZLmVmZmVjdFRhZyY9LTEwMjU7YWooWS5hbHRlcm5hdGUsXG5ZKTticmVhaztjYXNlIDQ6YWooWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA4Omw9WSxYaShnLGwsaCksWWkobCl9WT1ZLm5leHRFZmZlY3R9fWNhdGNoKERiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO1JpKFksRGIpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTt2PW1lO3Q9ZmUoKTtwPXYuZm9jdXNlZEVsZW07aD12LnNlbGVjdGlvblJhbmdlO2lmKHQhPT1wJiZwJiZwLm93bmVyRG9jdW1lbnQmJmVlKHAub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscCkpe251bGwhPT1oJiZnZShwKSYmKHQ9aC5zdGFydCx2PWguZW5kLHZvaWQgMD09PXYmJih2PXQpLFwic2VsZWN0aW9uU3RhcnRcImluIHA/KHAuc2VsZWN0aW9uU3RhcnQ9dCxwLnNlbGVjdGlvbkVuZD1NYXRoLm1pbih2LHAudmFsdWUubGVuZ3RoKSk6KHY9KHQ9cC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnQuZGVmYXVsdFZpZXd8fHdpbmRvdyx2LmdldFNlbGVjdGlvbiYmKHY9di5nZXRTZWxlY3Rpb24oKSxcbmw9cC50ZXh0Q29udGVudC5sZW5ndGgsZz1NYXRoLm1pbihoLnN0YXJ0LGwpLGg9dm9pZCAwPT09aC5lbmQ/ZzpNYXRoLm1pbihoLmVuZCxsKSwhdi5leHRlbmQmJmc+aCYmKGw9aCxoPWcsZz1sKSxsPWRlKHAsZyksbT1kZShwLGgpLGwmJm0mJigxIT09di5yYW5nZUNvdW50fHx2LmFuY2hvck5vZGUhPT1sLm5vZGV8fHYuYW5jaG9yT2Zmc2V0IT09bC5vZmZzZXR8fHYuZm9jdXNOb2RlIT09bS5ub2RlfHx2LmZvY3VzT2Zmc2V0IT09bS5vZmZzZXQpJiYodD10LmNyZWF0ZVJhbmdlKCksdC5zZXRTdGFydChsLm5vZGUsbC5vZmZzZXQpLHYucmVtb3ZlQWxsUmFuZ2VzKCksZz5oPyh2LmFkZFJhbmdlKHQpLHYuZXh0ZW5kKG0ubm9kZSxtLm9mZnNldCkpOih0LnNldEVuZChtLm5vZGUsbS5vZmZzZXQpLHYuYWRkUmFuZ2UodCkpKSkpKTt0PVtdO2Zvcih2PXA7dj12LnBhcmVudE5vZGU7KTE9PT12Lm5vZGVUeXBlJiZ0LnB1c2goe2VsZW1lbnQ6dixsZWZ0OnYuc2Nyb2xsTGVmdCx0b3A6di5zY3JvbGxUb3B9KTtcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBwLmZvY3VzJiZwLmZvY3VzKCk7Zm9yKHA9MDtwPHQubGVuZ3RoO3ArKyl2PXRbcF0sdi5lbGVtZW50LnNjcm9sbExlZnQ9di5sZWZ0LHYuZWxlbWVudC5zY3JvbGxUb3A9di50b3B9bWU9bnVsbDtMZD0hIWxlO2xlPW51bGw7YS5jdXJyZW50PWM7WT1lO2RvIHRyeXtmb3IocD1kO251bGwhPT1ZOyl7dmFyIERoPVkuZWZmZWN0VGFnO2lmKERoJjM2KXt2YXIgZGM9WS5hbHRlcm5hdGU7dD1ZO3Y9cDtzd2l0Y2godC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VWkoMTYsMzIsdCk7YnJlYWs7Y2FzZSAxOnZhciBmZD10LnN0YXRlTm9kZTtpZih0LmVmZmVjdFRhZyY0KWlmKG51bGw9PT1kYylmZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGhrPXQuZWxlbWVudFR5cGU9PT10LnR5cGU/ZGMubWVtb2l6ZWRQcm9wczptZyh0LnR5cGUsZGMubWVtb2l6ZWRQcm9wcyk7ZmQuY29tcG9uZW50RGlkVXBkYXRlKGhrLGRjLm1lbW9pemVkU3RhdGUsXG5mZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIEVoPXQudXBkYXRlUXVldWU7bnVsbCE9PUVoJiZLZyh0LEVoLGZkLHYpO2JyZWFrO2Nhc2UgMzp2YXIgRmg9dC51cGRhdGVRdWV1ZTtpZihudWxsIT09Rmgpe2c9bnVsbDtpZihudWxsIT09dC5jaGlsZClzd2l0Y2godC5jaGlsZC50YWcpe2Nhc2UgNTpnPXQuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpnPXQuY2hpbGQuc3RhdGVOb2RlfUtnKHQsRmgsZyx2KX1icmVhaztjYXNlIDU6dmFyIHhrPXQuc3RhdGVOb2RlO251bGw9PT1kYyYmdC5lZmZlY3RUYWcmNCYmbmUodC50eXBlLHQubWVtb2l6ZWRQcm9wcykmJnhrLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PXQubWVtb2l6ZWRTdGF0ZSl7dmFyIERpPXQuYWx0ZXJuYXRlO2lmKG51bGwhPT1EaSl7dmFyIEVpPURpLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PUVpKXt2YXIgRmk9XG5FaS5kZWh5ZHJhdGVkO251bGwhPT1GaSYmTGMoRmkpfX19YnJlYWs7Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYzKSk7fX1pZihEaCYxMjgpe3Q9dm9pZCAwO3ZhciB4ZD1ZLnJlZjtpZihudWxsIT09eGQpe3ZhciBHaT1ZLnN0YXRlTm9kZTtzd2l0Y2goWS50YWcpe2Nhc2UgNTp0PUdpO2JyZWFrO2RlZmF1bHQ6dD1HaX1cImZ1bmN0aW9uXCI9PT10eXBlb2YgeGQ/eGQodCk6eGQuY3VycmVudD10fX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2goRGIpe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7UmkoWSxEYik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9bnVsbDtZZigpO1Q9Zn1lbHNlIGEuY3VycmVudD1jO2lmKERqKURqPSExLEVqPWEsRmo9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmXG4oamo9bnVsbCk7MTA3Mzc0MTgyMz09PWI/YT09PUlqP0hqKys6KEhqPTAsSWo9YSk6SGo9MDtcImZ1bmN0aW9uXCI9PT10eXBlb2Yga2smJmtrKGMuc3RhdGVOb2RlLGQpO1ooYSk7aWYoZ2opdGhyb3cgZ2o9ITEsYT1oaixoaj1udWxsLGE7aWYoKFQmbmopIT09UylyZXR1cm4gbnVsbDtqZygpO3JldHVybiBudWxsfWZ1bmN0aW9uIGprKCl7Zm9yKDtudWxsIT09WTspe3ZhciBhPVkuZWZmZWN0VGFnOzAhPT0oYSYyNTYpJiZUaShZLmFsdGVybmF0ZSxZKTswPT09KGEmNTEyKXx8RGp8fChEaj0hMCxnZyg5NyxmdW5jdGlvbigpe1NqKCk7cmV0dXJuIG51bGx9KSk7WT1ZLm5leHRFZmZlY3R9fWZ1bmN0aW9uIFNqKCl7aWYoOTAhPT1Gail7dmFyIGE9OTc8Rmo/OTc6Rmo7Rmo9OTA7cmV0dXJuIGZnKGEsbGspfX1cbmZ1bmN0aW9uIGxrKCl7aWYobnVsbD09PUVqKXJldHVybiExO3ZhciBhPUVqO0VqPW51bGw7aWYoKFQmKG9qfHBqKSkhPT1TKXRocm93IEVycm9yKHUoMzMxKSk7dmFyIGI9VDtUfD1wajtmb3IoYT1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWE7KXt0cnl7dmFyIGM9YTtpZigwIT09KGMuZWZmZWN0VGFnJjUxMikpc3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlVpKDEyOCwwLGMpLFVpKDAsNjQsYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzMwKSk7UmkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9VD1iO2pnKCk7cmV0dXJuITB9ZnVuY3Rpb24gbWsoYSxiLGMpe2I9TmkoYyxiKTtiPWZqKGEsYiwxMDczNzQxODIzKTtEZyhhLGIpO2E9S2ooYSwxMDczNzQxODIzKTtudWxsIT09YSYmWihhKX1cbmZ1bmN0aW9uIFJpKGEsYil7aWYoMz09PWEudGFnKW1rKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7bWsoYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09amp8fCFqai5oYXMoZCkpKXthPU5pKGIsYSk7YT1paihjLGEsMTA3Mzc0MTgyMyk7RGcoYyxhKTtjPUtqKGMsMTA3Mzc0MTgyMyk7bnVsbCE9PWMmJlooYyk7YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gZGsoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtVPT09YSYmVz09PWM/WD09PXVqfHxYPT09dGomJjEwNzM3NDE4MjM9PT14aiYmY2coKS1iajxDaj9UaihhLFcpOkJqPSEwOlBqKGEsYykmJihiPWEubGFzdFBpbmdlZFRpbWUsMCE9PWImJmI8Y3x8KGEubGFzdFBpbmdlZFRpbWU9YyxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9PT1jJiYoYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTAsYS5maW5pc2hlZFdvcms9bnVsbCksWihhKSkpfWZ1bmN0aW9uIGRqKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9UGcoKSxiPVFnKGIsYSxudWxsKSk7YT1LaihhLGIpO251bGwhPT1hJiZaKGEpfXZhciBnaztcbmdrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKXt2YXIgZT1iLnBlbmRpbmdQcm9wcztpZihhLm1lbW9pemVkUHJvcHMhPT1lfHxLLmN1cnJlbnQpd2c9ITA7ZWxzZXtpZihkPGMpe3dnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOndpKGIpO2xpKCk7YnJlYWs7Y2FzZSA1Om9oKGIpO2lmKGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4pcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsbnVsbDticmVhaztjYXNlIDE6TChiLnR5cGUpJiZKZihiKTticmVhaztjYXNlIDQ6bWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnNnKGIsYi5tZW1vaXplZFByb3BzLnZhbHVlKTticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDAhPT1kJiZkPj1jKXJldHVybiB5aShhLGIsYyk7SShNLE0uY3VycmVudCZcbjEsYik7Yj1vaShhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfUkoTSxNLmN1cnJlbnQmMSxiKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBCaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCxiKTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gb2koYSxiLGMpfXdnPSExfX1lbHNlIHdnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsSi5jdXJyZW50KTt2ZyhiLGMpO2U9SWgobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO01oKCk7aWYoTChkKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJk9nKGIsZCxnLGEpO2UudXBkYXRlcj1TZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO1dnKGIsZCxhLGMpO2I9dmkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7VmEoZSk7aWYoMSE9PWUuX3N0YXR1cyl0aHJvdyBlLl9yZXN1bHQ7XG5lPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPW5rKGUpO2E9bWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9c2kobnVsbCxiLGUsYSxjKTticmVhaztjYXNlIDE6Yj11aShudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTE6Yj1uaShudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTQ6Yj1waShudWxsLGIsZSxtZyhlLnR5cGUsYSksZCxjKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOm1nKGQsZSksc2koYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOm1nKGQsZSksdWkoYSxiLGQsZSxjKTtjYXNlIDM6d2koYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6XG5udWxsO0hnKGIsZCxiLnBlbmRpbmdQcm9wcyxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpbGkoKSxiPW9pKGEsYixjKTtlbHNle2lmKGU9Yi5zdGF0ZU5vZGUuaHlkcmF0ZSlkaT1yZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGNpPWIsZT1laT0hMDtpZihlKWZvcihjPWdoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmVmZmVjdFRhZz1jLmVmZmVjdFRhZyYtM3wxMDI0LGM9Yy5zaWJsaW5nO2Vsc2UgUihhLGIsZCxjKSxsaSgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIG9oKGIpLG51bGw9PT1hJiZpaShiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG9lKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZvZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSx0aShhLGIpLGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9XG5iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihSKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZpaShiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHlpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIG1oKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPWZoKGIsbnVsbCxkLGMpOlIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTptZyhkLGUpLG5pKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7XG5lPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtzZyhiLGYpO2lmKG51bGwhPT1nKXt2YXIgaD1nLnZhbHVlO2Y9b2YoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj1vaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9QmcoYyxudWxsKSxsLnRhZz0yLERnKGgsbCkpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9XG5jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3VnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z319UihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix2ZyhiLGMpLGU9eGcoZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFIoYSxiLGQsYyksYi5jaGlsZDtcbmNhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bWcoZSxiLnBlbmRpbmdQcm9wcyksZj1tZyhlLnR5cGUsZikscGkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIHJpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTptZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEwoZCk/KGE9ITAsSmYoYikpOmE9ITEsdmcoYixjKSxVZyhiLGQsZSxjKSxXZyhiLGQsZSxjKSx2aShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEJpKGEsYixjKX10aHJvdyBFcnJvcih1KDE1NixiLnRhZykpO307dmFyIGtrPW51bGwsV2k9bnVsbDtcbmZ1bmN0aW9uIG9rKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO2trPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O1dpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gcGsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBnaShhLGIsYyxkKXtyZXR1cm4gbmV3IHBrKGEsYixjLGQpfVxuZnVuY3Rpb24gcWkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBuayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gcWkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PU9hKXJldHVybiAxMTtpZihhPT09UmEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gYWgoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1naShhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIGNoKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlxaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBJYTpyZXR1cm4gZWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBOYTpnPTg7ZXw9NzticmVhaztjYXNlIEphOmc9ODtlfD0xO2JyZWFrO2Nhc2UgS2E6cmV0dXJuIGE9Z2koMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1LYSxhLnR5cGU9S2EsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBQYTpyZXR1cm4gYT1naSgxMyxjLGIsZSksYS50eXBlPVBhLGEuZWxlbWVudFR5cGU9UGEsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBRYTpyZXR1cm4gYT1naSgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1RYSxhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgTGE6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBNYTpnPTk7YnJlYWsgYTtjYXNlIE9hOmc9MTE7YnJlYWsgYTtjYXNlIFJhOmc9MTQ7YnJlYWsgYTtjYXNlIFNhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1naShnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIGVoKGEsYixjLGQpe2E9Z2koNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGJoKGEsYixjKXthPWdpKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIGRoKGEsYixjKXtiPWdpKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gcWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIFBqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiBNaihhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24gTmooYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBSaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIHJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPVBnKCksZz1NZy5zdXNwZW5zZTtmPVFnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGVjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9SWYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9Q2Y7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1CZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO0RnKGUsYik7UmcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBzayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIHRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiB1ayhhLGIpe3RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZ0ayhhLGIpfVxuZnVuY3Rpb24gdmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IHFrKGEsYixjKSxlPWdpKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO2Fbd2VdPWQuY3VycmVudDtjJiYwIT09YiYmd2MoOT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQpO3RoaXMuX2ludGVybmFsUm9vdD1kfXZrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXtyayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLHZvaWQgMD09PWI/bnVsbDpiKX07dmsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9dm9pZCAwPT09YT9udWxsOmEsZD1iLmNvbnRhaW5lckluZm87cmsobnVsbCxiLG51bGwsZnVuY3Rpb24oKXtkW3dlXT1udWxsO251bGwhPT1jJiZjKCl9KX07XG5mdW5jdGlvbiB3ayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24geWsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyB2ayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHprKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9c2soZyk7aC5jYWxsKGEpfX1yayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXlrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXNrKGcpO2suY2FsbChhKX19Y2soZnVuY3Rpb24oKXtyayhiLGcsYSxlKX0pfXJldHVybiBzayhnKX1mdW5jdGlvbiBBayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOkhhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuamM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9bGcoUGcoKSwxNTAsMTAwKTtSZyhhLGIpO3VrKGEsYil9fTtrYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXtQZygpO3ZhciBiPWtnKys7UmcoYSxiKTt1ayhhLGIpfX07bGM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9UGcoKTtiPVFnKGIsYSxudWxsKTtSZyhhLGIpO3VrKGEsYil9fTtcblphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6RWIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPXllKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt6YihkKTtFYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkpiKGEsISFjLm11bHRpcGxlLGIsITEpfX07ZWI9Yms7XG5mYj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1UO1R8PTQ7dHJ5e3JldHVybiBmZyg5OCxhLmJpbmQobnVsbCxiLGMsZCkpfWZpbmFsbHl7VD1lLFQ9PT1TJiZqZygpfX07Z2I9ZnVuY3Rpb24oKXsoVCYoMXxvanxwaikpPT09UyYmKGFrKCksU2ooKSl9O2hiPWZ1bmN0aW9uKGEsYil7dmFyIGM9VDtUfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1Q9YyxUPT09UyYmamcoKX19O2Z1bmN0aW9uIEJrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIEFrKGEsYixudWxsLGMpfVxudmFyIENrPXtjcmVhdGVQb3J0YWw6QmssZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHUoMTg4KSk7dGhyb3cgRXJyb3IodSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1pYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe2lmKCF3ayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiB6ayhudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtpZighd2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gemsobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe2lmKCF3ayhjKSl0aHJvdyBFcnJvcih1KDIwMCkpO1xuaWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gemsoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7aWYoIXdrKGEpKXRocm93IEVycm9yKHUoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhjayhmdW5jdGlvbigpe3prKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVt3ZV09bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gQmsuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOmJrLGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVQ7VHw9MTt0cnl7cmV0dXJuIGZnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1Q9YyxqZygpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbQ2MsXG54ZSx5ZSxDYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUsZmEsU2MsZnVuY3Rpb24oYSl7eWEoYSxSYyl9LGNiLGRiLFBkLEJhLFNqLHtjdXJyZW50OiExfV19fTtcbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBvayhuKHt9LGEse292ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6RWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWljKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9LGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6RmMsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4xMi4wXCIsXG5yZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgRGs9e2RlZmF1bHQ6Q2t9LEVrPURrJiZDa3x8RGs7bW9kdWxlLmV4cG9ydHM9RWsuZGVmYXVsdHx8RWs7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjE4LjBcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZixnLGgsayxsO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHA9bnVsbCxxPW51bGwsdD1mdW5jdGlvbigpe2lmKG51bGwhPT1wKXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3AoITAsYSk7cD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodCwwKSxiO319LHU9RGF0ZS5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLXV9O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXA/c2V0VGltZW91dChmLDAsYSk6KHA9YSxzZXRUaW1lb3V0KHQsMCkpfTtnPWZ1bmN0aW9uKGEsYil7cT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocSl9O2s9ZnVuY3Rpb24oKXtyZXR1cm4hMX07bD1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB3PXdpbmRvdy5wZXJmb3JtYW5jZSx4PXdpbmRvdy5EYXRlLFxueT13aW5kb3cuc2V0VGltZW91dCx6PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgQT13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKX1pZihcIm9iamVjdFwiPT09XG50eXBlb2YgdyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHcubm93KWV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHcubm93KCl9O2Vsc2V7dmFyIEI9eC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpLUJ9fXZhciBDPSExLEQ9bnVsbCxFPS0xLEY9NSxHPTA7az1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtsPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6Rj0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEg9bmV3IE1lc3NhZ2VDaGFubmVsLEk9SC5wb3J0MjtILnBvcnQxLm9ubWVzc2FnZT1cbmZ1bmN0aW9uKCl7aWYobnVsbCE9PUQpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7Rz1hK0Y7dHJ5e0QoITAsYSk/SS5wb3N0TWVzc2FnZShudWxsKTooQz0hMSxEPW51bGwpfWNhdGNoKGIpe3Rocm93IEkucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQz0hMX07Zj1mdW5jdGlvbihhKXtEPWE7Q3x8KEM9ITAsSS5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtFPXkoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3ooRSk7RT0tMX19ZnVuY3Rpb24gSihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9TWF0aC5mbG9vcigoYy0xKS8yKSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxLKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBMKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBNKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPksobixjKSl2b2lkIDAhPT1yJiYwPksocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPksocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEsoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIE49W10sTz1bXSxQPTEsUT1udWxsLFI9MyxTPSExLFQ9ITEsVT0hMTtcbmZ1bmN0aW9uIFYoYSl7Zm9yKHZhciBiPUwoTyk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylNKE8pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpTShPKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEooTixiKTtlbHNlIGJyZWFrO2I9TChPKX19ZnVuY3Rpb24gVyhhKXtVPSExO1YoYSk7aWYoIVQpaWYobnVsbCE9PUwoTikpVD0hMCxmKFgpO2Vsc2V7dmFyIGI9TChPKTtudWxsIT09YiYmZyhXLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFgoYSxiKXtUPSExO1UmJihVPSExLGgoKSk7Uz0hMDt2YXIgYz1SO3RyeXtWKGIpO2ZvcihRPUwoTik7bnVsbCE9PVEmJighKFEuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFrKCkpOyl7dmFyIGQ9US5jYWxsYmFjaztpZihudWxsIT09ZCl7US5jYWxsYmFjaz1udWxsO1I9US5wcmlvcml0eUxldmVsO3ZhciBlPWQoUS5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP1EuY2FsbGJhY2s9ZTpRPT09TChOKSYmTShOKTtWKGIpfWVsc2UgTShOKTtRPUwoTil9aWYobnVsbCE9PVEpdmFyIG09ITA7ZWxzZXt2YXIgbj1MKE8pO251bGwhPT1uJiZnKFcsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e1E9bnVsbCxSPWMsUz0hMX19XG5mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319dmFyIFo9bDtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFIpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVJ9dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxlPWQ7Yz1lK2M7YT17aWQ6UCsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSihPLGEpLG51bGw9PT1MKE4pJiZhPT09TChPKSYmKFU/aCgpOlU9ITAsZyhXLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxKKE4sYSksVHx8U3x8KFQ9ITAsZihYKSkpO3JldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1SO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtSPWN9fX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBSfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVo7ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1R8fFN8fChUPSEwLGYoWCkpfTtcbmV4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBIZWFkZXIsIEljb24sIExpc3QgfSBmcm9tICdzZW1hbnRpYy11aS1yZWFjdCdcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcblxuaW50ZXJmYWNlIFZhbHVlIHtcbiAgICBpZDogbnVtYmVyO1xuICAgIG5hbWU6IHN0cmluZztcbn1cblxuY29uc3QgQXBwOiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgICBjb25zdCBbdmFsdWVzLCBzZXRWYWx1ZXNdID0gdXNlU3RhdGU8VmFsdWVbXT4oW10pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgYXhpb3MuZ2V0PFZhbHVlW10+KCdodHRwOi8vMTcyLjE4LjAuMjo0OTk5L2FwaS92YWx1ZXMnKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpXG4gICAgICAgICAgICBzZXRWYWx1ZXMocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgIH0pXG4gICAgICAgIC8vIHNldFZhbHVlcyhbeyBpZDogMSwgbmFtZTogJzIyJ31dKVxuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8SGVhZGVyIGFzPSdoMic+XG4gICAgICAgICAgICAgICAgPEljb24gbmFtZT0ncGx1ZycgLz5cbiAgICAgICAgICAgICAgICA8SGVhZGVyLkNvbnRlbnQ+IFJlYWN0aXZpdGllcyA8L0hlYWRlci5Db250ZW50PlxuICAgICAgICAgICAgPC9IZWFkZXI+XG4gICAgICAgICAgICA8TGlzdD5cbiAgICAgICAgICAgICAgICB7IHZhbHVlcy5tYXAoeCA9PiAoPExpc3QuSXRlbSBrZXk9e3guaWR9Pnt4Lm5hbWV9PC9MaXN0Lkl0ZW0+KSkgfVxuICAgICAgICAgICAgPC9MaXN0PiAgICAgICAgICAgIFxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIHsgdmFsdWVzLm1hcCh4ID0+ICg8bGkga2V5PXt4LmlkfT57eC5uYW1lfTwvbGk+KSkgfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTIuMFxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7XG52YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx3PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O2Z1bmN0aW9uIHkoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiB6KGEpe3JldHVybiB5KGEpPT09bX1cbmV4cG9ydHMudHlwZU9mPXk7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO2V4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09dnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14KX07ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKXx8eShhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT16O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09aH07XG5leHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PXR9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09cH07XG4iLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUhhcztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVDYXBwZWQ7XG4iLCJ2YXIgSGFzaCA9IHJlcXVpcmUoJy4vX0hhc2gnKSxcbiAgICBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlQ2xlYXI7XG4iLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaENsZWFyO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hdGl2ZTtcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoRGVsZXRlO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEdldDtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hIYXM7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hTZXQ7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVEZWxldGU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXlhYmxlO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUdldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlSGFzO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZVNldDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuIiwidmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9fYXBwbHknKSxcbiAgICBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgbGFzdCA9IHJlcXVpcmUoJy4vbGFzdCcpLFxuICAgIHBhcmVudCA9IHJlcXVpcmUoJy4vX3BhcmVudCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZva2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICogbWV0aG9kIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICovXG5mdW5jdGlvbiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncykge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gIHZhciBmdW5jID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW52b2tlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAzXG4gKi9cbmZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGFzdDtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpLFxuICAgIGJhc2VTbGljZSA9IHJlcXVpcmUoJy4vX2Jhc2VTbGljZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggdG8gZ2V0IHRoZSBwYXJlbnQgdmFsdWUgb2YuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICovXG5mdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyZW50O1xuIiwidmFyIGNvbnN0YW50ID0gcmVxdWlyZSgnLi9jb25zdGFudCcpLFxuICAgIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNldFRvU3RyaW5nO1xuIiwidmFyIGJhc2VQaWNrQnkgPSByZXF1aXJlKCcuL19iYXNlUGlja0J5JyksXG4gICAgaGFzSW4gPSByZXF1aXJlKCcuL2hhc0luJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gKiBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgIHJldHVybiBoYXNJbihvYmplY3QsIHBhdGgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUGljaztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VIYXNJbjtcbiIsInZhciBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4vX2Jhc2VGbGF0dGVuJyk7XG5cbi8qKlxuICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICovXG5mdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW47XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sID8gU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZsYXR0ZW5hYmxlO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hTmAgd2l0aG91dCBzdXBwb3J0IGZvciBudW1iZXIgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYU47XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaWN0SW5kZXhPZjtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICogb2YgYHByb3BzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VWYWx1ZXM7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRm9yO1xuIiwidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VFYWNoO1xuIiwidmFyIGJhc2VJc01hdGNoID0gcmVxdWlyZSgnLi9fYmFzZUlzTWF0Y2gnKSxcbiAgICBnZXRNYXRjaERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXRjaERhdGEnKSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hdGNoO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBlcXVhbEJ5VGFnID0gcmVxdWlyZSgnLi9fZXF1YWxCeVRhZycpLFxuICAgIGVxdWFsT2JqZWN0cyA9IHJlcXVpcmUoJy4vX2VxdWFsT2JqZWN0cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbERlZXA7XG4iLCIvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUhhcztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBtYXBUb0FycmF5ID0gcmVxdWlyZSgnLi9fbWFwVG9BcnJheScpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxCeVRhZztcbiIsInZhciBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbE9iamVjdHM7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFWaWV3O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcbiIsInZhciBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyksXG4gICAgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKSxcbiAgICBoYXNJbiA9IHJlcXVpcmUoJy4vaGFzSW4nKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzUHJvcGVydHk7XG4iLCJ2YXIgYmFzZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5JyksXG4gICAgYmFzZVByb3BlcnR5RGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eURlZXAnKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqXG4gKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvcGVydHk7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5RGVlcDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICogIGBjb2xsZWN0aW9uYCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICBhY2N1bXVsYXRvciA9IGluaXRBY2N1bVxuICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUmVkdWNlO1xuIiwiLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIG51bWJlciA+PSBuYXRpdmVNaW4oc3RhcnQsIGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJblJhbmdlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGFsaWFzIGZpcnN0XG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaGVhZChbMSwgMiwgM10pO1xuICogLy8gPT4gMVxuICpcbiAqIF8uaGVhZChbXSk7XG4gKiAvLyA9PiB1bmRlZmluZWRcbiAqL1xuZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoZWFkO1xuIiwidmFyIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gIHZhciByZXN1bHQ7XG5cbiAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgcmV0dXJuICFyZXN1bHQ7XG4gIH0pO1xuICByZXR1cm4gISFyZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNvbWU7XG4iLCJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZW52PXJlcXVpcmUoXCJleGVudlwiKTtyZXF1aXJlKFwicHJvcC10eXBlc1wiKTt2YXIgUmVhY3Q9cmVxdWlyZShcInJlYWN0XCIpO2Z1bmN0aW9uIF90eXBlb2YoZSl7cmV0dXJuKF90eXBlb2Y9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0pKGUpfWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fWZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLHQsbil7cmV0dXJuIHQmJl9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLHQpLG4mJl9kZWZpbmVQcm9wZXJ0aWVzKGUsbiksZX1mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkoZSx0LG4pe3JldHVybiB0IGluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbdF09bixlfWZ1bmN0aW9uIF9pbmhlcml0cyhlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmX3NldFByb3RvdHlwZU9mKGUsdCl9ZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKGUpe3JldHVybihfZ2V0UHJvdG90eXBlT2Y9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZjpmdW5jdGlvbihlKXtyZXR1cm4gZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKX0pKGUpfWZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihlLHQpe3JldHVybihfc2V0UHJvdG90eXBlT2Y9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlLHQpe3JldHVybiBlLl9fcHJvdG9fXz10LGV9KShlLHQpfWZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSl7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIGV9ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oZSx0KXtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/X2Fzc2VydFRoaXNJbml0aWFsaXplZChlKTp0fXZhciBFdmVudFNldD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsZSksX2RlZmluZVByb3BlcnR5KHRoaXMsXCJoYW5kbGVyc1wiLHZvaWQgMCksdGhpcy5oYW5kbGVycz10LnNsaWNlKDApfXJldHVybiBfY3JlYXRlQ2xhc3MoZSxbe2tleTpcImFkZEhhbmRsZXJzXCIsdmFsdWU6ZnVuY3Rpb24odCl7Zm9yKHZhciBuPXRoaXMuaGFuZGxlcnMuc2xpY2UoMCkscj10Lmxlbmd0aCxvPTA7bzxyO28rPTEpbi5wdXNoKHRbb10pO3JldHVybiBuZXcgZShuKX19LHtrZXk6XCJkaXNwYXRjaEV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmhhbmRsZXJzLmxlbmd0aC0xO2lmKHQpe2Zvcih2YXIgcj1uO3I+PTA7ci09MSl0aGlzLmhhbmRsZXJzW3JdLmNhbGxlZHx8KHRoaXMuaGFuZGxlcnNbcl0uY2FsbGVkPSEwLHRoaXMuaGFuZGxlcnNbcl0oZSkpO2Zvcih2YXIgbz1uO28+PTA7by09MSl0aGlzLmhhbmRsZXJzW29dLmNhbGxlZD0hMX1lbHNleygwLHRoaXMuaGFuZGxlcnNbbl0pKGUpfX19LHtrZXk6XCJoYXNIYW5kbGVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoPjB9fSx7a2V5OlwicmVtb3ZlSGFuZGxlcnNcIix2YWx1ZTpmdW5jdGlvbih0KXtmb3IodmFyIG49W10scj10aGlzLmhhbmRsZXJzLmxlbmd0aCxvPTA7bzxyO28rPTEpe3ZhciBhPXRoaXMuaGFuZGxlcnNbb107LTE9PT10LmluZGV4T2YoYSkmJm4ucHVzaChhKX1yZXR1cm4gbmV3IGUobil9fV0pLGV9KCk7ZnVuY3Rpb24gY2xvbmVNYXAoZSl7dmFyIHQ9bmV3IE1hcDtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUsbil7dC5zZXQobixlKX0pLHR9ZnVuY3Rpb24gbm9ybWFsaXplSGFuZGxlcnMoZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZTpbZV19dmFyIGlzUmVmT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT09ZSYmXCJvYmplY3RcIj09PV90eXBlb2YoZSkmJmUuaGFzT3duUHJvcGVydHkoXCJjdXJyZW50XCIpfTtmdW5jdGlvbiBub3JtYWxpemVUYXJnZXQoZSl7cmV0dXJuXCJkb2N1bWVudFwiPT09ZT9kb2N1bWVudDpcIndpbmRvd1wiPT09ZT93aW5kb3c6aXNSZWZPYmplY3QoZSk/ZS5jdXJyZW50fHxkb2N1bWVudDplfHxkb2N1bWVudH12YXIgRXZlbnRQb29sPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4pe19jbGFzc0NhbGxDaGVjayh0aGlzLGUpLF9kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaGFuZGxlclNldHNcIix2b2lkIDApLF9kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicG9vbE5hbWVcIix2b2lkIDApLHRoaXMuaGFuZGxlclNldHM9bix0aGlzLnBvb2xOYW1lPXR9cmV0dXJuIF9jcmVhdGVDbGFzcyhlLFt7a2V5OlwiYWRkSGFuZGxlcnNcIix2YWx1ZTpmdW5jdGlvbih0LG4pe3ZhciByPWNsb25lTWFwKHRoaXMuaGFuZGxlclNldHMpO2lmKHIuaGFzKHQpKXt2YXIgbz1yLmdldCh0KTtyLnNldCh0LG8uYWRkSGFuZGxlcnMobikpfWVsc2Ugci5zZXQodCxuZXcgRXZlbnRTZXQobikpO3JldHVybiBuZXcgZSh0aGlzLnBvb2xOYW1lLHIpfX0se2tleTpcImRpc3BhdGNoRXZlbnRcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuaGFuZGxlclNldHMuZ2V0KGUpLHI9XCJkZWZhdWx0XCI9PT10aGlzLnBvb2xOYW1lO24mJm4uZGlzcGF0Y2hFdmVudCh0LHIpfX0se2tleTpcImhhc0hhbmRsZXJzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuIHRoaXMuaGFuZGxlclNldHMuc2l6ZT4wO3ZhciB0PXRoaXMuaGFuZGxlclNldHMuZ2V0KGUpO3JldHVybiEhdCYmdC5oYXNIYW5kbGVycygpfX0se2tleTpcInJlbW92ZUhhbmRsZXJzXCIsdmFsdWU6ZnVuY3Rpb24odCxuKXt2YXIgcj1jbG9uZU1hcCh0aGlzLmhhbmRsZXJTZXRzKTtpZighci5oYXModCkpcmV0dXJuIG5ldyBlKHRoaXMucG9vbE5hbWUscik7dmFyIG89ci5nZXQodCkucmVtb3ZlSGFuZGxlcnMobik7cmV0dXJuIG8uaGFzSGFuZGxlcnMoKT9yLnNldCh0LG8pOnIuZGVsZXRlKHQpLG5ldyBlKHRoaXMucG9vbE5hbWUscil9fV0pLGV9KCk7X2RlZmluZVByb3BlcnR5KEV2ZW50UG9vbCxcImNyZWF0ZUJ5VHlwZVwiLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uZXcgTWFwO3JldHVybiByLnNldCh0LG5ldyBFdmVudFNldChuKSksbmV3IEV2ZW50UG9vbChlLHIpfSk7dmFyIEV2ZW50VGFyZ2V0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt2YXIgbj10aGlzO19jbGFzc0NhbGxDaGVjayh0aGlzLGUpLF9kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaGFuZGxlcnNcIixuZXcgTWFwKSxfZGVmaW5lUHJvcGVydHkodGhpcyxcInBvb2xzXCIsbmV3IE1hcCksX2RlZmluZVByb3BlcnR5KHRoaXMsXCJ0YXJnZXRcIix2b2lkIDApLF9kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiY3JlYXRlRW1pdHRlclwiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtuLnBvb2xzLmZvckVhY2goZnVuY3Rpb24obil7bi5kaXNwYXRjaEV2ZW50KGUsdCl9KX19KSx0aGlzLnRhcmdldD10fXJldHVybiBfY3JlYXRlQ2xhc3MoZSxbe2tleTpcImFkZEhhbmRsZXJzXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe2lmKHRoaXMucG9vbHMuaGFzKGUpKXt2YXIgcj10aGlzLnBvb2xzLmdldChlKTt0aGlzLnBvb2xzLnNldChlLHIuYWRkSGFuZGxlcnModCxuKSl9ZWxzZSB0aGlzLnBvb2xzLnNldChlLEV2ZW50UG9vbC5jcmVhdGVCeVR5cGUoZSx0LG4pKTt0aGlzLmhhbmRsZXJzLmhhcyh0KXx8dGhpcy5hZGRUYXJnZXRIYW5kbGVyKHQpfX0se2tleTpcImhhc0hhbmRsZXJzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYW5kbGVycy5zaXplPjB9fSx7a2V5OlwicmVtb3ZlSGFuZGxlcnNcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7aWYodGhpcy5wb29scy5oYXMoZSkpe3ZhciByPXRoaXMucG9vbHMuZ2V0KGUpLnJlbW92ZUhhbmRsZXJzKHQsbik7ci5oYXNIYW5kbGVycygpP3RoaXMucG9vbHMuc2V0KGUscik6dGhpcy5wb29scy5kZWxldGUoZSk7dmFyIG89ITE7dGhpcy5wb29scy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBvPW98fGUuaGFzSGFuZGxlcnModCl9KSxvfHx0aGlzLnJlbW92ZVRhcmdldEhhbmRsZXIodCl9fX0se2tleTpcImFkZFRhcmdldEhhbmRsZXJcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmNyZWF0ZUVtaXR0ZXIoZSk7dGhpcy5oYW5kbGVycy5zZXQoZSx0KSx0aGlzLnRhcmdldC5hZGRFdmVudExpc3RlbmVyKGUsdCwhMCl9fSx7a2V5OlwicmVtb3ZlVGFyZ2V0SGFuZGxlclwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuaGFuZGxlcnMuaGFzKGUpJiYodGhpcy50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLHRoaXMuaGFuZGxlcnMuZ2V0KGUpLCEwKSx0aGlzLmhhbmRsZXJzLmRlbGV0ZShlKSl9fV0pLGV9KCksRXZlbnRTdGFjaz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2YXIgdD10aGlzO19jbGFzc0NhbGxDaGVjayh0aGlzLGUpLF9kZWZpbmVQcm9wZXJ0eSh0aGlzLFwidGFyZ2V0c1wiLG5ldyBNYXApLF9kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZ2V0VGFyZ2V0XCIsZnVuY3Rpb24oZSl7dmFyIG49IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXSxyPW5vcm1hbGl6ZVRhcmdldChlKTtpZih0LnRhcmdldHMuaGFzKHIpKXJldHVybiB0LnRhcmdldHMuZ2V0KHIpO2lmKCFuKXJldHVybiBudWxsO3ZhciBvPW5ldyBFdmVudFRhcmdldChyKTtyZXR1cm4gdC50YXJnZXRzLnNldChyLG8pLG99KSxfZGVmaW5lUHJvcGVydHkodGhpcyxcInJlbW92ZVRhcmdldFwiLGZ1bmN0aW9uKGUpe3QudGFyZ2V0cy5kZWxldGUobm9ybWFsaXplVGFyZ2V0KGUpKX0pfXJldHVybiBfY3JlYXRlQ2xhc3MoZSxbe2tleTpcInN1YlwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9O2lmKGVudi5jYW5Vc2VET00pe3ZhciByPW4udGFyZ2V0LG89dm9pZCAwPT09cj9kb2N1bWVudDpyLGE9bi5wb29sLHM9dm9pZCAwPT09YT9cImRlZmF1bHRcIjphO3RoaXMuZ2V0VGFyZ2V0KG8pLmFkZEhhbmRsZXJzKHMsZSxub3JtYWxpemVIYW5kbGVycyh0KSl9fX0se2tleTpcInVuc3ViXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307aWYoZW52LmNhblVzZURPTSl7dmFyIHI9bi50YXJnZXQsbz12b2lkIDA9PT1yP2RvY3VtZW50OnIsYT1uLnBvb2wscz12b2lkIDA9PT1hP1wiZGVmYXVsdFwiOmEsaT10aGlzLmdldFRhcmdldChvLCExKTtpJiYoaS5yZW1vdmVIYW5kbGVycyhzLGUsbm9ybWFsaXplSGFuZGxlcnModCkpLGkuaGFzSGFuZGxlcnMoKXx8dGhpcy5yZW1vdmVUYXJnZXQobykpfX19XSksZX0oKSxpbnN0YW5jZT1uZXcgRXZlbnRTdGFjayxFdmVudFN0YWNrJDE9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBfY2xhc3NDYWxsQ2hlY2sodGhpcyx0KSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLF9nZXRQcm90b3R5cGVPZih0KS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBfaW5oZXJpdHModCxSZWFjdC5QdXJlQ29tcG9uZW50KSxfY3JlYXRlQ2xhc3ModCxbe2tleTpcImNvbXBvbmVudERpZE1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnN1YnNjcmliZSh0aGlzLnByb3BzKX19LHtrZXk6XCJjb21wb25lbnREaWRVcGRhdGVcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLnVuc3Vic2NyaWJlKGUpLHRoaXMuc3Vic2NyaWJlKHRoaXMucHJvcHMpfX0se2tleTpcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnVuc3Vic2NyaWJlKHRoaXMucHJvcHMpfX0se2tleTpcInN1YnNjcmliZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUubmFtZSxuPWUub24scj1lLnBvb2wsbz1lLnRhcmdldDtpbnN0YW5jZS5zdWIodCxuLHtwb29sOnIsdGFyZ2V0Om99KX19LHtrZXk6XCJ1bnN1YnNjcmliZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUubmFtZSxuPWUub24scj1lLnBvb2wsbz1lLnRhcmdldDtpbnN0YW5jZS51bnN1Yih0LG4se3Bvb2w6cix0YXJnZXQ6b30pfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9fV0pLHR9KCk7X2RlZmluZVByb3BlcnR5KEV2ZW50U3RhY2skMSxcImRlZmF1bHRQcm9wc1wiLHtwb29sOlwiZGVmYXVsdFwiLHRhcmdldDpcImRvY3VtZW50XCJ9KSxFdmVudFN0YWNrJDEucHJvcFR5cGVzPXt9LGV4cG9ydHMuaW5zdGFuY2U9aW5zdGFuY2UsZXhwb3J0cy5kZWZhdWx0PUV2ZW50U3RhY2skMTtcbiIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTUgSmVkIFdhdHNvbi5cbiAgQmFzZWQgb24gY29kZSB0aGF0IGlzIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGNhblVzZURPTSA9ICEhKFxuXHRcdHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0d2luZG93LmRvY3VtZW50ICYmXG5cdFx0d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcblx0KTtcblxuXHR2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cblx0XHRjYW5Vc2VET006IGNhblVzZURPTSxcblxuXHRcdGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG5cdFx0Y2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG5cdFx0XHRjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuXHRcdGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuXG5cblx0fTtcblxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZShmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5FeGVjdXRpb25FbnZpcm9ubWVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHR9XG5cbn0oKSk7XG4iLCJ2YXIgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlRmluZDtcbiIsImZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyIsInZhciBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBub29wID0gcmVxdWlyZSgnLi9ub29wJyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICovXG52YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTZXQ7XG4iLCJmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aEhvbGVzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgaWYgKCEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5TGltaXQ7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlUmVzdDsiLCJ2YXIgbWFwcGluZyA9IHJlcXVpcmUoJy4vX21hcHBpbmcnKSxcbiAgICBmYWxsYmFja0hvbGRlciA9IHJlcXVpcmUoJy4vcGxhY2Vob2xkZXInKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZS4gKi9cbnZhciBwdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uLCB3aXRoIGFuIGFyaXR5IG9mIGBuYCwgdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZVxuICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGFyaXR5IG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFyaXR5KGZ1bmMsIG4pIHtcbiAgcmV0dXJuIG4gPT0gMlxuICAgID8gZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7IH1cbiAgICA6IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpOyB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsIGlnbm9yaW5nXG4gKiBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGFyaXR5IGNhcC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlQXJ5KGZ1bmMsIG4pIHtcbiAgcmV0dXJuIG4gPT0gMlxuICAgID8gZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gZnVuYyhhLCBiKTsgfVxuICAgIDogZnVuY3Rpb24oYSkgeyByZXR1cm4gZnVuYyhhKTsgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQXJyYXkoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgcmVzdWx0W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2xvbmVzIGEgZ2l2ZW4gb2JqZWN0IHVzaW5nIHRoZSBhc3NpZ25tZW50IGBmdW5jYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgYXNzaWdubWVudCBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNsb25lciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2xvbmVyKGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jKHt9LCBvYmplY3QpO1xuICB9O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zcHJlYWRgIHdoaWNoIGZsYXR0ZW5zIHRoZSBzcHJlYWQgYXJyYXkgaW50b1xuICogdGhlIGFyZ3VtZW50cyBvZiB0aGUgaW52b2tlZCBgZnVuY2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBmbGF0U3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFyZ3NbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgIH1cbiAgICB2YXIgYXJyYXkgPSBhcmdzW3N0YXJ0XSxcbiAgICAgICAgb3RoZXJBcmdzID0gYXJncy5zbGljZSgwLCBzdGFydCk7XG5cbiAgICBpZiAoYXJyYXkpIHtcbiAgICAgIHB1c2guYXBwbHkob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgfVxuICAgIGlmIChzdGFydCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgIHB1c2guYXBwbHkob3RoZXJBcmdzLCBhcmdzLnNsaWNlKHN0YXJ0ICsgMSkpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCBhbmQgdXNlcyBgY2xvbmVyYCB0byBjbG9uZSB0aGUgZmlyc3RcbiAqIGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2xvbmVyIFRoZSBmdW5jdGlvbiB0byBjbG9uZSBhcmd1bWVudHMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbW11dGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHdyYXBJbW11dGFibGUoZnVuYywgY2xvbmVyKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhcmdzW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGFyZ3NbMF0gPSBjbG9uZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgY29udmVydGAgd2hpY2ggYWNjZXB0cyBhIGB1dGlsYCBvYmplY3Qgb2YgbWV0aG9kc1xuICogcmVxdWlyZWQgdG8gcGVyZm9ybSBjb252ZXJzaW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdXRpbCBUaGUgdXRpbCBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2FwPXRydWVdIFNwZWNpZnkgY2FwcGluZyBpdGVyYXRlZSBhcmd1bWVudHMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmN1cnJ5PXRydWVdIFNwZWNpZnkgY3VycnlpbmcuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmZpeGVkPXRydWVdIFNwZWNpZnkgZml4ZWQgYXJpdHkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmltbXV0YWJsZT10cnVlXSBTcGVjaWZ5IGltbXV0YWJsZSBvcGVyYXRpb25zLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZWFyZz10cnVlXSBTcGVjaWZ5IHJlYXJyYW5naW5nIGFyZ3VtZW50cy5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBmdW5jdGlvbiBvciBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDb252ZXJ0KHV0aWwsIG5hbWUsIGZ1bmMsIG9wdGlvbnMpIHtcbiAgdmFyIGlzTGliID0gdHlwZW9mIG5hbWUgPT0gJ2Z1bmN0aW9uJyxcbiAgICAgIGlzT2JqID0gbmFtZSA9PT0gT2JqZWN0KG5hbWUpO1xuXG4gIGlmIChpc09iaikge1xuICAgIG9wdGlvbnMgPSBmdW5jO1xuICAgIGZ1bmMgPSBuYW1lO1xuICAgIG5hbWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGZ1bmMgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gIH1cbiAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcblxuICB2YXIgY29uZmlnID0ge1xuICAgICdjYXAnOiAnY2FwJyBpbiBvcHRpb25zID8gb3B0aW9ucy5jYXAgOiB0cnVlLFxuICAgICdjdXJyeSc6ICdjdXJyeScgaW4gb3B0aW9ucyA/IG9wdGlvbnMuY3VycnkgOiB0cnVlLFxuICAgICdmaXhlZCc6ICdmaXhlZCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuZml4ZWQgOiB0cnVlLFxuICAgICdpbW11dGFibGUnOiAnaW1tdXRhYmxlJyBpbiBvcHRpb25zID8gb3B0aW9ucy5pbW11dGFibGUgOiB0cnVlLFxuICAgICdyZWFyZyc6ICdyZWFyZycgaW4gb3B0aW9ucyA/IG9wdGlvbnMucmVhcmcgOiB0cnVlXG4gIH07XG5cbiAgdmFyIGRlZmF1bHRIb2xkZXIgPSBpc0xpYiA/IGZ1bmMgOiBmYWxsYmFja0hvbGRlcixcbiAgICAgIGZvcmNlQ3VycnkgPSAoJ2N1cnJ5JyBpbiBvcHRpb25zKSAmJiBvcHRpb25zLmN1cnJ5LFxuICAgICAgZm9yY2VGaXhlZCA9ICgnZml4ZWQnIGluIG9wdGlvbnMpICYmIG9wdGlvbnMuZml4ZWQsXG4gICAgICBmb3JjZVJlYXJnID0gKCdyZWFyZycgaW4gb3B0aW9ucykgJiYgb3B0aW9ucy5yZWFyZyxcbiAgICAgIHByaXN0aW5lID0gaXNMaWIgPyBmdW5jLnJ1bkluQ29udGV4dCgpIDogdW5kZWZpbmVkO1xuXG4gIHZhciBoZWxwZXJzID0gaXNMaWIgPyBmdW5jIDoge1xuICAgICdhcnknOiB1dGlsLmFyeSxcbiAgICAnYXNzaWduJzogdXRpbC5hc3NpZ24sXG4gICAgJ2Nsb25lJzogdXRpbC5jbG9uZSxcbiAgICAnY3VycnknOiB1dGlsLmN1cnJ5LFxuICAgICdmb3JFYWNoJzogdXRpbC5mb3JFYWNoLFxuICAgICdpc0FycmF5JzogdXRpbC5pc0FycmF5LFxuICAgICdpc0Vycm9yJzogdXRpbC5pc0Vycm9yLFxuICAgICdpc0Z1bmN0aW9uJzogdXRpbC5pc0Z1bmN0aW9uLFxuICAgICdpc1dlYWtNYXAnOiB1dGlsLmlzV2Vha01hcCxcbiAgICAnaXRlcmF0ZWUnOiB1dGlsLml0ZXJhdGVlLFxuICAgICdrZXlzJzogdXRpbC5rZXlzLFxuICAgICdyZWFyZyc6IHV0aWwucmVhcmcsXG4gICAgJ3RvSW50ZWdlcic6IHV0aWwudG9JbnRlZ2VyLFxuICAgICd0b1BhdGgnOiB1dGlsLnRvUGF0aFxuICB9O1xuXG4gIHZhciBhcnkgPSBoZWxwZXJzLmFyeSxcbiAgICAgIGFzc2lnbiA9IGhlbHBlcnMuYXNzaWduLFxuICAgICAgY2xvbmUgPSBoZWxwZXJzLmNsb25lLFxuICAgICAgY3VycnkgPSBoZWxwZXJzLmN1cnJ5LFxuICAgICAgZWFjaCA9IGhlbHBlcnMuZm9yRWFjaCxcbiAgICAgIGlzQXJyYXkgPSBoZWxwZXJzLmlzQXJyYXksXG4gICAgICBpc0Vycm9yID0gaGVscGVycy5pc0Vycm9yLFxuICAgICAgaXNGdW5jdGlvbiA9IGhlbHBlcnMuaXNGdW5jdGlvbixcbiAgICAgIGlzV2Vha01hcCA9IGhlbHBlcnMuaXNXZWFrTWFwLFxuICAgICAga2V5cyA9IGhlbHBlcnMua2V5cyxcbiAgICAgIHJlYXJnID0gaGVscGVycy5yZWFyZyxcbiAgICAgIHRvSW50ZWdlciA9IGhlbHBlcnMudG9JbnRlZ2VyLFxuICAgICAgdG9QYXRoID0gaGVscGVycy50b1BhdGg7XG5cbiAgdmFyIGFyeU1ldGhvZEtleXMgPSBrZXlzKG1hcHBpbmcuYXJ5TWV0aG9kKTtcblxuICB2YXIgd3JhcHBlcnMgPSB7XG4gICAgJ2Nhc3RBcnJheSc6IGZ1bmN0aW9uKGNhc3RBcnJheSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gY2FzdEFycmF5KGNsb25lQXJyYXkodmFsdWUpKVxuICAgICAgICAgIDogY2FzdEFycmF5LmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICAnaXRlcmF0ZWUnOiBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZnVuYyA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICAgIGFyaXR5ID0gYXJndW1lbnRzWzFdLFxuICAgICAgICAgICAgcmVzdWx0ID0gaXRlcmF0ZWUoZnVuYywgYXJpdHkpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgICBpZiAoY29uZmlnLmNhcCAmJiB0eXBlb2YgYXJpdHkgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBhcml0eSA9IGFyaXR5ID4gMiA/IChhcml0eSAtIDIpIDogMTtcbiAgICAgICAgICByZXR1cm4gKGxlbmd0aCAmJiBsZW5ndGggPD0gYXJpdHkpID8gcmVzdWx0IDogYmFzZUFyeShyZXN1bHQsIGFyaXR5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9LFxuICAgICdtaXhpbic6IGZ1bmN0aW9uKG1peGluKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHZhciBmdW5jID0gdGhpcztcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpKSB7XG4gICAgICAgICAgcmV0dXJuIG1peGluKGZ1bmMsIE9iamVjdChzb3VyY2UpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFpcnMgPSBbXTtcbiAgICAgICAgZWFjaChrZXlzKHNvdXJjZSksIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHNvdXJjZVtrZXldKSkge1xuICAgICAgICAgICAgcGFpcnMucHVzaChba2V5LCBmdW5jLnByb3RvdHlwZVtrZXldXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBtaXhpbihmdW5jLCBPYmplY3Qoc291cmNlKSk7XG5cbiAgICAgICAgZWFjaChwYWlycywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHBhaXJbMV07XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgICBmdW5jLnByb3RvdHlwZVtwYWlyWzBdXSA9IHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgZnVuYy5wcm90b3R5cGVbcGFpclswXV07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ250aEFyZyc6IGZ1bmN0aW9uKG50aEFyZykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgdmFyIGFyaXR5ID0gbiA8IDAgPyAxIDogKHRvSW50ZWdlcihuKSArIDEpO1xuICAgICAgICByZXR1cm4gY3VycnkobnRoQXJnKG4pLCBhcml0eSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ3JlYXJnJzogZnVuY3Rpb24ocmVhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihmdW5jLCBpbmRleGVzKSB7XG4gICAgICAgIHZhciBhcml0eSA9IGluZGV4ZXMgPyBpbmRleGVzLmxlbmd0aCA6IDA7XG4gICAgICAgIHJldHVybiBjdXJyeShyZWFyZyhmdW5jLCBpbmRleGVzKSwgYXJpdHkpO1xuICAgICAgfTtcbiAgICB9LFxuICAgICdydW5JbkNvbnRleHQnOiBmdW5jdGlvbihydW5JbkNvbnRleHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29udmVydCh1dGlsLCBydW5JbkNvbnRleHQoY29udGV4dCksIG9wdGlvbnMpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENhc3RzIGBmdW5jYCB0byBhIGZ1bmN0aW9uIHdpdGggYW4gYXJpdHkgY2FwcGVkIGl0ZXJhdGVlIGlmIG5lZWRlZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2FzdCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGNhc3RDYXAobmFtZSwgZnVuYykge1xuICAgIGlmIChjb25maWcuY2FwKSB7XG4gICAgICB2YXIgaW5kZXhlcyA9IG1hcHBpbmcuaXRlcmF0ZWVSZWFyZ1tuYW1lXTtcbiAgICAgIGlmIChpbmRleGVzKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZVJlYXJnKGZ1bmMsIGluZGV4ZXMpO1xuICAgICAgfVxuICAgICAgdmFyIG4gPSAhaXNMaWIgJiYgbWFwcGluZy5pdGVyYXRlZUFyeVtuYW1lXTtcbiAgICAgIGlmIChuKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZUFyeShmdW5jLCBuKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cblxuICAvKipcbiAgICogQ2FzdHMgYGZ1bmNgIHRvIGEgY3VycmllZCBmdW5jdGlvbiBpZiBuZWVkZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhc3QgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBjYXN0Q3VycnkobmFtZSwgZnVuYywgbikge1xuICAgIHJldHVybiAoZm9yY2VDdXJyeSB8fCAoY29uZmlnLmN1cnJ5ICYmIG4gPiAxKSlcbiAgICAgID8gY3VycnkoZnVuYywgbilcbiAgICAgIDogZnVuYztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYXN0cyBgZnVuY2AgdG8gYSBmaXhlZCBhcml0eSBmdW5jdGlvbiBpZiBuZWVkZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgYXJpdHkgY2FwLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhc3QgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBjYXN0Rml4ZWQobmFtZSwgZnVuYywgbikge1xuICAgIGlmIChjb25maWcuZml4ZWQgJiYgKGZvcmNlRml4ZWQgfHwgIW1hcHBpbmcuc2tpcEZpeGVkW25hbWVdKSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXBwaW5nLm1ldGhvZFNwcmVhZFtuYW1lXSxcbiAgICAgICAgICBzdGFydCA9IGRhdGEgJiYgZGF0YS5zdGFydDtcblxuICAgICAgcmV0dXJuIHN0YXJ0ICA9PT0gdW5kZWZpbmVkID8gYXJ5KGZ1bmMsIG4pIDogZmxhdFNwcmVhZChmdW5jLCBzdGFydCk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jO1xuICB9XG5cbiAgLyoqXG4gICAqIENhc3RzIGBmdW5jYCB0byBhbiByZWFyZ2VkIGZ1bmN0aW9uIGlmIG5lZWRlZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2FzdCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGNhc3RSZWFyZyhuYW1lLCBmdW5jLCBuKSB7XG4gICAgcmV0dXJuIChjb25maWcucmVhcmcgJiYgbiA+IDEgJiYgKGZvcmNlUmVhcmcgfHwgIW1hcHBpbmcuc2tpcFJlYXJnW25hbWVdKSlcbiAgICAgID8gcmVhcmcoZnVuYywgbWFwcGluZy5tZXRob2RSZWFyZ1tuYW1lXSB8fCBtYXBwaW5nLmFyeVJlYXJnW25dKVxuICAgICAgOiBmdW5jO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgb2JqZWN0YCBieSBgcGF0aGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2xvbmUgYnkuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBvYmplY3QuXG4gICAqL1xuICBmdW5jdGlvbiBjbG9uZUJ5UGF0aChvYmplY3QsIHBhdGgpIHtcbiAgICBwYXRoID0gdG9QYXRoKHBhdGgpO1xuXG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICByZXN1bHQgPSBjbG9uZShPYmplY3Qob2JqZWN0KSksXG4gICAgICAgIG5lc3RlZCA9IHJlc3VsdDtcblxuICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIga2V5ID0gcGF0aFtpbmRleF0sXG4gICAgICAgICAgdmFsdWUgPSBuZXN0ZWRba2V5XTtcblxuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICAhKGlzRnVuY3Rpb24odmFsdWUpIHx8IGlzRXJyb3IodmFsdWUpIHx8IGlzV2Vha01hcCh2YWx1ZSkpKSB7XG4gICAgICAgIG5lc3RlZFtrZXldID0gY2xvbmUoaW5kZXggPT0gbGFzdEluZGV4ID8gdmFsdWUgOiBPYmplY3QodmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBsb2Rhc2hgIHRvIGFuIGltbXV0YWJsZSBhdXRvLWN1cnJpZWQgaXRlcmF0ZWUtZmlyc3QgZGF0YS1sYXN0XG4gICAqIHZlcnNpb24gd2l0aCBjb252ZXJzaW9uIGBvcHRpb25zYCBhcHBsaWVkLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIFRoZSBvcHRpb25zIG9iamVjdC4gU2VlIGBiYXNlQ29udmVydGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYGxvZGFzaGAuXG4gICAqL1xuICBmdW5jdGlvbiBjb252ZXJ0TGliKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gXy5ydW5JbkNvbnRleHQuY29udmVydChvcHRpb25zKSh1bmRlZmluZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNvbnZlcnRlciBmdW5jdGlvbiBmb3IgYGZ1bmNgIG9mIGBuYW1lYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnZlcnRlciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbnZlcnRlcihuYW1lLCBmdW5jKSB7XG4gICAgdmFyIHJlYWxOYW1lID0gbWFwcGluZy5hbGlhc1RvUmVhbFtuYW1lXSB8fCBuYW1lLFxuICAgICAgICBtZXRob2ROYW1lID0gbWFwcGluZy5yZW1hcFtyZWFsTmFtZV0gfHwgcmVhbE5hbWUsXG4gICAgICAgIG9sZE9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBuZXdVdGlsID0gaXNMaWIgPyBwcmlzdGluZSA6IGhlbHBlcnMsXG4gICAgICAgICAgbmV3RnVuYyA9IGlzTGliID8gcHJpc3RpbmVbbWV0aG9kTmFtZV0gOiBmdW5jLFxuICAgICAgICAgIG5ld09wdGlvbnMgPSBhc3NpZ24oYXNzaWduKHt9LCBvbGRPcHRpb25zKSwgb3B0aW9ucyk7XG5cbiAgICAgIHJldHVybiBiYXNlQ29udmVydChuZXdVdGlsLCByZWFsTmFtZSwgbmV3RnVuYywgbmV3T3B0aW9ucyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0cyBpdGVyYXRlZSwgd2l0aCB1cCB0byBgbmBcbiAgICogYXJndW1lbnRzLCBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBpdGVyYXRlZSBhcmd1bWVudHMgZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgYXJpdHkgY2FwLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdGVlQXJ5KGZ1bmMsIG4pIHtcbiAgICByZXR1cm4gb3ZlckFyZyhmdW5jLCBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGJhc2VBcnkoZnVuYywgbikgOiBmdW5jO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXRzIGl0ZXJhdGVlIHdpdGggYXJndW1lbnRzXG4gICAqIGFycmFuZ2VkIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXRcbiAgICogdGhlIGZpcnN0IGluZGV4IGlzIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0XG4gICAqIHRoZSBzZWNvbmQgaW5kZXggaXMgcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCwgYW5kIHNvIG9uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgaXRlcmF0ZWUgYXJndW1lbnRzIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJndW1lbnQgaW5kZXhlcy5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBpdGVyYXRlZVJlYXJnKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICByZXR1cm4gb3ZlckFyZyhmdW5jLCBmdW5jdGlvbihmdW5jKSB7XG4gICAgICB2YXIgbiA9IGluZGV4ZXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VBcml0eShyZWFyZyhiYXNlQXJ5KGZ1bmMsIG4pLCBpbmRleGVzKSwgbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgZmlyc3QgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZnVuYygpO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGFyZ3NbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gY29uZmlnLnJlYXJnID8gMCA6IChsZW5ndGggLSAxKTtcbiAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3JtKGFyZ3NbaW5kZXhdKTtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgYW5kIGFwcGx5cyB0aGUgY29udmVyc2lvbnNcbiAgICogcnVsZXMgYnkgYG5hbWVgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiB3cmFwKG5hbWUsIGZ1bmMsIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIHJlc3VsdCxcbiAgICAgICAgcmVhbE5hbWUgPSBtYXBwaW5nLmFsaWFzVG9SZWFsW25hbWVdIHx8IG5hbWUsXG4gICAgICAgIHdyYXBwZWQgPSBmdW5jLFxuICAgICAgICB3cmFwcGVyID0gd3JhcHBlcnNbcmVhbE5hbWVdO1xuXG4gICAgaWYgKHdyYXBwZXIpIHtcbiAgICAgIHdyYXBwZWQgPSB3cmFwcGVyKGZ1bmMpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb25maWcuaW1tdXRhYmxlKSB7XG4gICAgICBpZiAobWFwcGluZy5tdXRhdGUuYXJyYXlbcmVhbE5hbWVdKSB7XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwSW1tdXRhYmxlKGZ1bmMsIGNsb25lQXJyYXkpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobWFwcGluZy5tdXRhdGUub2JqZWN0W3JlYWxOYW1lXSkge1xuICAgICAgICB3cmFwcGVkID0gd3JhcEltbXV0YWJsZShmdW5jLCBjcmVhdGVDbG9uZXIoZnVuYykpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobWFwcGluZy5tdXRhdGUuc2V0W3JlYWxOYW1lXSkge1xuICAgICAgICB3cmFwcGVkID0gd3JhcEltbXV0YWJsZShmdW5jLCBjbG9uZUJ5UGF0aCk7XG4gICAgICB9XG4gICAgfVxuICAgIGVhY2goYXJ5TWV0aG9kS2V5cywgZnVuY3Rpb24oYXJ5S2V5KSB7XG4gICAgICBlYWNoKG1hcHBpbmcuYXJ5TWV0aG9kW2FyeUtleV0sIGZ1bmN0aW9uKG90aGVyTmFtZSkge1xuICAgICAgICBpZiAocmVhbE5hbWUgPT0gb3RoZXJOYW1lKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBtYXBwaW5nLm1ldGhvZFNwcmVhZFtyZWFsTmFtZV0sXG4gICAgICAgICAgICAgIGFmdGVyUmVhcmcgPSBkYXRhICYmIGRhdGEuYWZ0ZXJSZWFyZztcblxuICAgICAgICAgIHJlc3VsdCA9IGFmdGVyUmVhcmdcbiAgICAgICAgICAgID8gY2FzdEZpeGVkKHJlYWxOYW1lLCBjYXN0UmVhcmcocmVhbE5hbWUsIHdyYXBwZWQsIGFyeUtleSksIGFyeUtleSlcbiAgICAgICAgICAgIDogY2FzdFJlYXJnKHJlYWxOYW1lLCBjYXN0Rml4ZWQocmVhbE5hbWUsIHdyYXBwZWQsIGFyeUtleSksIGFyeUtleSk7XG5cbiAgICAgICAgICByZXN1bHQgPSBjYXN0Q2FwKHJlYWxOYW1lLCByZXN1bHQpO1xuICAgICAgICAgIHJlc3VsdCA9IGNhc3RDdXJyeShyZWFsTmFtZSwgcmVzdWx0LCBhcnlLZXkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gIXJlc3VsdDtcbiAgICB9KTtcblxuICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gd3JhcHBlZCk7XG4gICAgaWYgKHJlc3VsdCA9PSBmdW5jKSB7XG4gICAgICByZXN1bHQgPSBmb3JjZUN1cnJ5ID8gY3VycnkocmVzdWx0LCAxKSA6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmVzdWx0LmNvbnZlcnQgPSBjcmVhdGVDb252ZXJ0ZXIocmVhbE5hbWUsIGZ1bmMpO1xuICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGZ1bmMucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICBpZiAoIWlzT2JqKSB7XG4gICAgcmV0dXJuIHdyYXAobmFtZSwgZnVuYywgZGVmYXVsdEhvbGRlcik7XG4gIH1cbiAgdmFyIF8gPSBmdW5jO1xuXG4gIC8vIENvbnZlcnQgbWV0aG9kcyBieSBhcnkgY2FwLlxuICB2YXIgcGFpcnMgPSBbXTtcbiAgZWFjaChhcnlNZXRob2RLZXlzLCBmdW5jdGlvbihhcnlLZXkpIHtcbiAgICBlYWNoKG1hcHBpbmcuYXJ5TWV0aG9kW2FyeUtleV0sIGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIGZ1bmMgPSBfW21hcHBpbmcucmVtYXBba2V5XSB8fCBrZXldO1xuICAgICAgaWYgKGZ1bmMpIHtcbiAgICAgICAgcGFpcnMucHVzaChba2V5LCB3cmFwKGtleSwgZnVuYywgXyldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gQ29udmVydCByZW1haW5pbmcgbWV0aG9kcy5cbiAgZWFjaChrZXlzKF8pLCBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgZnVuYyA9IF9ba2V5XTtcbiAgICBpZiAodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAocGFpcnNbbGVuZ3RoXVswXSA9PSBrZXkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmMuY29udmVydCA9IGNyZWF0ZUNvbnZlcnRlcihrZXksIGZ1bmMpO1xuICAgICAgcGFpcnMucHVzaChba2V5LCBmdW5jXSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBBc3NpZ24gdG8gYF9gIGxlYXZpbmcgYF8ucHJvdG90eXBlYCB1bmNoYW5nZWQgdG8gYWxsb3cgY2hhaW5pbmcuXG4gIGVhY2gocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICBfW3BhaXJbMF1dID0gcGFpclsxXTtcbiAgfSk7XG5cbiAgXy5jb252ZXJ0ID0gY29udmVydExpYjtcbiAgXy5wbGFjZWhvbGRlciA9IF87XG5cbiAgLy8gQXNzaWduIGFsaWFzZXMuXG4gIGVhY2goa2V5cyhfKSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgZWFjaChtYXBwaW5nLnJlYWxUb0FsaWFzW2tleV0gfHwgW10sIGZ1bmN0aW9uKGFsaWFzKSB7XG4gICAgICBfW2FsaWFzXSA9IF9ba2V5XTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIF87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNvbnZlcnQ7XG4iLCIvKiogVXNlZCB0byBtYXAgYWxpYXNlcyB0byB0aGVpciByZWFsIG5hbWVzLiAqL1xuZXhwb3J0cy5hbGlhc1RvUmVhbCA9IHtcblxuICAvLyBMb2Rhc2ggYWxpYXNlcy5cbiAgJ2VhY2gnOiAnZm9yRWFjaCcsXG4gICdlYWNoUmlnaHQnOiAnZm9yRWFjaFJpZ2h0JyxcbiAgJ2VudHJpZXMnOiAndG9QYWlycycsXG4gICdlbnRyaWVzSW4nOiAndG9QYWlyc0luJyxcbiAgJ2V4dGVuZCc6ICdhc3NpZ25JbicsXG4gICdleHRlbmRBbGwnOiAnYXNzaWduSW5BbGwnLFxuICAnZXh0ZW5kQWxsV2l0aCc6ICdhc3NpZ25JbkFsbFdpdGgnLFxuICAnZXh0ZW5kV2l0aCc6ICdhc3NpZ25JbldpdGgnLFxuICAnZmlyc3QnOiAnaGVhZCcsXG5cbiAgLy8gTWV0aG9kcyB0aGF0IGFyZSBjdXJyaWVkIHZhcmlhbnRzIG9mIG90aGVycy5cbiAgJ2NvbmZvcm1zJzogJ2NvbmZvcm1zVG8nLFxuICAnbWF0Y2hlcyc6ICdpc01hdGNoJyxcbiAgJ3Byb3BlcnR5JzogJ2dldCcsXG5cbiAgLy8gUmFtZGEgYWxpYXNlcy5cbiAgJ19fJzogJ3BsYWNlaG9sZGVyJyxcbiAgJ0YnOiAnc3R1YkZhbHNlJyxcbiAgJ1QnOiAnc3R1YlRydWUnLFxuICAnYWxsJzogJ2V2ZXJ5JyxcbiAgJ2FsbFBhc3MnOiAnb3ZlckV2ZXJ5JyxcbiAgJ2Fsd2F5cyc6ICdjb25zdGFudCcsXG4gICdhbnknOiAnc29tZScsXG4gICdhbnlQYXNzJzogJ292ZXJTb21lJyxcbiAgJ2FwcGx5JzogJ3NwcmVhZCcsXG4gICdhc3NvYyc6ICdzZXQnLFxuICAnYXNzb2NQYXRoJzogJ3NldCcsXG4gICdjb21wbGVtZW50JzogJ25lZ2F0ZScsXG4gICdjb21wb3NlJzogJ2Zsb3dSaWdodCcsXG4gICdjb250YWlucyc6ICdpbmNsdWRlcycsXG4gICdkaXNzb2MnOiAndW5zZXQnLFxuICAnZGlzc29jUGF0aCc6ICd1bnNldCcsXG4gICdkcm9wTGFzdCc6ICdkcm9wUmlnaHQnLFxuICAnZHJvcExhc3RXaGlsZSc6ICdkcm9wUmlnaHRXaGlsZScsXG4gICdlcXVhbHMnOiAnaXNFcXVhbCcsXG4gICdpZGVudGljYWwnOiAnZXEnLFxuICAnaW5kZXhCeSc6ICdrZXlCeScsXG4gICdpbml0JzogJ2luaXRpYWwnLFxuICAnaW52ZXJ0T2JqJzogJ2ludmVydCcsXG4gICdqdXh0JzogJ292ZXInLFxuICAnb21pdEFsbCc6ICdvbWl0JyxcbiAgJ25BcnknOiAnYXJ5JyxcbiAgJ3BhdGgnOiAnZ2V0JyxcbiAgJ3BhdGhFcSc6ICdtYXRjaGVzUHJvcGVydHknLFxuICAncGF0aE9yJzogJ2dldE9yJyxcbiAgJ3BhdGhzJzogJ2F0JyxcbiAgJ3BpY2tBbGwnOiAncGljaycsXG4gICdwaXBlJzogJ2Zsb3cnLFxuICAncGx1Y2snOiAnbWFwJyxcbiAgJ3Byb3AnOiAnZ2V0JyxcbiAgJ3Byb3BFcSc6ICdtYXRjaGVzUHJvcGVydHknLFxuICAncHJvcE9yJzogJ2dldE9yJyxcbiAgJ3Byb3BzJzogJ2F0JyxcbiAgJ3N5bW1ldHJpY0RpZmZlcmVuY2UnOiAneG9yJyxcbiAgJ3N5bW1ldHJpY0RpZmZlcmVuY2VCeSc6ICd4b3JCeScsXG4gICdzeW1tZXRyaWNEaWZmZXJlbmNlV2l0aCc6ICd4b3JXaXRoJyxcbiAgJ3Rha2VMYXN0JzogJ3Rha2VSaWdodCcsXG4gICd0YWtlTGFzdFdoaWxlJzogJ3Rha2VSaWdodFdoaWxlJyxcbiAgJ3VuYXBwbHknOiAncmVzdCcsXG4gICd1bm5lc3QnOiAnZmxhdHRlbicsXG4gICd1c2VXaXRoJzogJ292ZXJBcmdzJyxcbiAgJ3doZXJlJzogJ2NvbmZvcm1zVG8nLFxuICAnd2hlcmVFcSc6ICdpc01hdGNoJyxcbiAgJ3ppcE9iaic6ICd6aXBPYmplY3QnXG59O1xuXG4vKiogVXNlZCB0byBtYXAgYXJ5IHRvIG1ldGhvZCBuYW1lcy4gKi9cbmV4cG9ydHMuYXJ5TWV0aG9kID0ge1xuICAnMSc6IFtcbiAgICAnYXNzaWduQWxsJywgJ2Fzc2lnbkluQWxsJywgJ2F0dGVtcHQnLCAnY2FzdEFycmF5JywgJ2NlaWwnLCAnY3JlYXRlJyxcbiAgICAnY3VycnknLCAnY3VycnlSaWdodCcsICdkZWZhdWx0c0FsbCcsICdkZWZhdWx0c0RlZXBBbGwnLCAnZmxvb3InLCAnZmxvdycsXG4gICAgJ2Zsb3dSaWdodCcsICdmcm9tUGFpcnMnLCAnaW52ZXJ0JywgJ2l0ZXJhdGVlJywgJ21lbW9pemUnLCAnbWV0aG9kJywgJ21lcmdlQWxsJyxcbiAgICAnbWV0aG9kT2YnLCAnbWl4aW4nLCAnbnRoQXJnJywgJ292ZXInLCAnb3ZlckV2ZXJ5JywgJ292ZXJTb21lJywncmVzdCcsICdyZXZlcnNlJyxcbiAgICAncm91bmQnLCAncnVuSW5Db250ZXh0JywgJ3NwcmVhZCcsICd0ZW1wbGF0ZScsICd0cmltJywgJ3RyaW1FbmQnLCAndHJpbVN0YXJ0JyxcbiAgICAndW5pcXVlSWQnLCAnd29yZHMnLCAnemlwQWxsJ1xuICBdLFxuICAnMic6IFtcbiAgICAnYWRkJywgJ2FmdGVyJywgJ2FyeScsICdhc3NpZ24nLCAnYXNzaWduQWxsV2l0aCcsICdhc3NpZ25JbicsICdhc3NpZ25JbkFsbFdpdGgnLFxuICAgICdhdCcsICdiZWZvcmUnLCAnYmluZCcsICdiaW5kQWxsJywgJ2JpbmRLZXknLCAnY2h1bmsnLCAnY2xvbmVEZWVwV2l0aCcsXG4gICAgJ2Nsb25lV2l0aCcsICdjb25jYXQnLCAnY29uZm9ybXNUbycsICdjb3VudEJ5JywgJ2N1cnJ5TicsICdjdXJyeVJpZ2h0TicsXG4gICAgJ2RlYm91bmNlJywgJ2RlZmF1bHRzJywgJ2RlZmF1bHRzRGVlcCcsICdkZWZhdWx0VG8nLCAnZGVsYXknLCAnZGlmZmVyZW5jZScsXG4gICAgJ2RpdmlkZScsICdkcm9wJywgJ2Ryb3BSaWdodCcsICdkcm9wUmlnaHRXaGlsZScsICdkcm9wV2hpbGUnLCAnZW5kc1dpdGgnLCAnZXEnLFxuICAgICdldmVyeScsICdmaWx0ZXInLCAnZmluZCcsICdmaW5kSW5kZXgnLCAnZmluZEtleScsICdmaW5kTGFzdCcsICdmaW5kTGFzdEluZGV4JyxcbiAgICAnZmluZExhc3RLZXknLCAnZmxhdE1hcCcsICdmbGF0TWFwRGVlcCcsICdmbGF0dGVuRGVwdGgnLCAnZm9yRWFjaCcsXG4gICAgJ2ZvckVhY2hSaWdodCcsICdmb3JJbicsICdmb3JJblJpZ2h0JywgJ2Zvck93bicsICdmb3JPd25SaWdodCcsICdnZXQnLFxuICAgICdncm91cEJ5JywgJ2d0JywgJ2d0ZScsICdoYXMnLCAnaGFzSW4nLCAnaW5jbHVkZXMnLCAnaW5kZXhPZicsICdpbnRlcnNlY3Rpb24nLFxuICAgICdpbnZlcnRCeScsICdpbnZva2UnLCAnaW52b2tlTWFwJywgJ2lzRXF1YWwnLCAnaXNNYXRjaCcsICdqb2luJywgJ2tleUJ5JyxcbiAgICAnbGFzdEluZGV4T2YnLCAnbHQnLCAnbHRlJywgJ21hcCcsICdtYXBLZXlzJywgJ21hcFZhbHVlcycsICdtYXRjaGVzUHJvcGVydHknLFxuICAgICdtYXhCeScsICdtZWFuQnknLCAnbWVyZ2UnLCAnbWVyZ2VBbGxXaXRoJywgJ21pbkJ5JywgJ211bHRpcGx5JywgJ250aCcsICdvbWl0JyxcbiAgICAnb21pdEJ5JywgJ292ZXJBcmdzJywgJ3BhZCcsICdwYWRFbmQnLCAncGFkU3RhcnQnLCAncGFyc2VJbnQnLCAncGFydGlhbCcsXG4gICAgJ3BhcnRpYWxSaWdodCcsICdwYXJ0aXRpb24nLCAncGljaycsICdwaWNrQnknLCAncHJvcGVydHlPZicsICdwdWxsJywgJ3B1bGxBbGwnLFxuICAgICdwdWxsQXQnLCAncmFuZG9tJywgJ3JhbmdlJywgJ3JhbmdlUmlnaHQnLCAncmVhcmcnLCAncmVqZWN0JywgJ3JlbW92ZScsXG4gICAgJ3JlcGVhdCcsICdyZXN0RnJvbScsICdyZXN1bHQnLCAnc2FtcGxlU2l6ZScsICdzb21lJywgJ3NvcnRCeScsICdzb3J0ZWRJbmRleCcsXG4gICAgJ3NvcnRlZEluZGV4T2YnLCAnc29ydGVkTGFzdEluZGV4JywgJ3NvcnRlZExhc3RJbmRleE9mJywgJ3NvcnRlZFVuaXFCeScsXG4gICAgJ3NwbGl0JywgJ3NwcmVhZEZyb20nLCAnc3RhcnRzV2l0aCcsICdzdWJ0cmFjdCcsICdzdW1CeScsICd0YWtlJywgJ3Rha2VSaWdodCcsXG4gICAgJ3Rha2VSaWdodFdoaWxlJywgJ3Rha2VXaGlsZScsICd0YXAnLCAndGhyb3R0bGUnLCAndGhydScsICd0aW1lcycsICd0cmltQ2hhcnMnLFxuICAgICd0cmltQ2hhcnNFbmQnLCAndHJpbUNoYXJzU3RhcnQnLCAndHJ1bmNhdGUnLCAndW5pb24nLCAndW5pcUJ5JywgJ3VuaXFXaXRoJyxcbiAgICAndW5zZXQnLCAndW56aXBXaXRoJywgJ3dpdGhvdXQnLCAnd3JhcCcsICd4b3InLCAnemlwJywgJ3ppcE9iamVjdCcsXG4gICAgJ3ppcE9iamVjdERlZXAnXG4gIF0sXG4gICczJzogW1xuICAgICdhc3NpZ25JbldpdGgnLCAnYXNzaWduV2l0aCcsICdjbGFtcCcsICdkaWZmZXJlbmNlQnknLCAnZGlmZmVyZW5jZVdpdGgnLFxuICAgICdmaW5kRnJvbScsICdmaW5kSW5kZXhGcm9tJywgJ2ZpbmRMYXN0RnJvbScsICdmaW5kTGFzdEluZGV4RnJvbScsICdnZXRPcicsXG4gICAgJ2luY2x1ZGVzRnJvbScsICdpbmRleE9mRnJvbScsICdpblJhbmdlJywgJ2ludGVyc2VjdGlvbkJ5JywgJ2ludGVyc2VjdGlvbldpdGgnLFxuICAgICdpbnZva2VBcmdzJywgJ2ludm9rZUFyZ3NNYXAnLCAnaXNFcXVhbFdpdGgnLCAnaXNNYXRjaFdpdGgnLCAnZmxhdE1hcERlcHRoJyxcbiAgICAnbGFzdEluZGV4T2ZGcm9tJywgJ21lcmdlV2l0aCcsICdvcmRlckJ5JywgJ3BhZENoYXJzJywgJ3BhZENoYXJzRW5kJyxcbiAgICAncGFkQ2hhcnNTdGFydCcsICdwdWxsQWxsQnknLCAncHVsbEFsbFdpdGgnLCAncmFuZ2VTdGVwJywgJ3JhbmdlU3RlcFJpZ2h0JyxcbiAgICAncmVkdWNlJywgJ3JlZHVjZVJpZ2h0JywgJ3JlcGxhY2UnLCAnc2V0JywgJ3NsaWNlJywgJ3NvcnRlZEluZGV4QnknLFxuICAgICdzb3J0ZWRMYXN0SW5kZXhCeScsICd0cmFuc2Zvcm0nLCAndW5pb25CeScsICd1bmlvbldpdGgnLCAndXBkYXRlJywgJ3hvckJ5JyxcbiAgICAneG9yV2l0aCcsICd6aXBXaXRoJ1xuICBdLFxuICAnNCc6IFtcbiAgICAnZmlsbCcsICdzZXRXaXRoJywgJ3VwZGF0ZVdpdGgnXG4gIF1cbn07XG5cbi8qKiBVc2VkIHRvIG1hcCBhcnkgdG8gcmVhcmcgY29uZmlncy4gKi9cbmV4cG9ydHMuYXJ5UmVhcmcgPSB7XG4gICcyJzogWzEsIDBdLFxuICAnMyc6IFsyLCAwLCAxXSxcbiAgJzQnOiBbMywgMiwgMCwgMV1cbn07XG5cbi8qKiBVc2VkIHRvIG1hcCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgaXRlcmF0ZWUgYXJ5LiAqL1xuZXhwb3J0cy5pdGVyYXRlZUFyeSA9IHtcbiAgJ2Ryb3BSaWdodFdoaWxlJzogMSxcbiAgJ2Ryb3BXaGlsZSc6IDEsXG4gICdldmVyeSc6IDEsXG4gICdmaWx0ZXInOiAxLFxuICAnZmluZCc6IDEsXG4gICdmaW5kRnJvbSc6IDEsXG4gICdmaW5kSW5kZXgnOiAxLFxuICAnZmluZEluZGV4RnJvbSc6IDEsXG4gICdmaW5kS2V5JzogMSxcbiAgJ2ZpbmRMYXN0JzogMSxcbiAgJ2ZpbmRMYXN0RnJvbSc6IDEsXG4gICdmaW5kTGFzdEluZGV4JzogMSxcbiAgJ2ZpbmRMYXN0SW5kZXhGcm9tJzogMSxcbiAgJ2ZpbmRMYXN0S2V5JzogMSxcbiAgJ2ZsYXRNYXAnOiAxLFxuICAnZmxhdE1hcERlZXAnOiAxLFxuICAnZmxhdE1hcERlcHRoJzogMSxcbiAgJ2ZvckVhY2gnOiAxLFxuICAnZm9yRWFjaFJpZ2h0JzogMSxcbiAgJ2ZvckluJzogMSxcbiAgJ2ZvckluUmlnaHQnOiAxLFxuICAnZm9yT3duJzogMSxcbiAgJ2Zvck93blJpZ2h0JzogMSxcbiAgJ21hcCc6IDEsXG4gICdtYXBLZXlzJzogMSxcbiAgJ21hcFZhbHVlcyc6IDEsXG4gICdwYXJ0aXRpb24nOiAxLFxuICAncmVkdWNlJzogMixcbiAgJ3JlZHVjZVJpZ2h0JzogMixcbiAgJ3JlamVjdCc6IDEsXG4gICdyZW1vdmUnOiAxLFxuICAnc29tZSc6IDEsXG4gICd0YWtlUmlnaHRXaGlsZSc6IDEsXG4gICd0YWtlV2hpbGUnOiAxLFxuICAndGltZXMnOiAxLFxuICAndHJhbnNmb3JtJzogMlxufTtcblxuLyoqIFVzZWQgdG8gbWFwIG1ldGhvZCBuYW1lcyB0byBpdGVyYXRlZSByZWFyZyBjb25maWdzLiAqL1xuZXhwb3J0cy5pdGVyYXRlZVJlYXJnID0ge1xuICAnbWFwS2V5cyc6IFsxXSxcbiAgJ3JlZHVjZVJpZ2h0JzogWzEsIDBdXG59O1xuXG4vKiogVXNlZCB0byBtYXAgbWV0aG9kIG5hbWVzIHRvIHJlYXJnIGNvbmZpZ3MuICovXG5leHBvcnRzLm1ldGhvZFJlYXJnID0ge1xuICAnYXNzaWduSW5BbGxXaXRoJzogWzEsIDBdLFxuICAnYXNzaWduSW5XaXRoJzogWzEsIDIsIDBdLFxuICAnYXNzaWduQWxsV2l0aCc6IFsxLCAwXSxcbiAgJ2Fzc2lnbldpdGgnOiBbMSwgMiwgMF0sXG4gICdkaWZmZXJlbmNlQnknOiBbMSwgMiwgMF0sXG4gICdkaWZmZXJlbmNlV2l0aCc6IFsxLCAyLCAwXSxcbiAgJ2dldE9yJzogWzIsIDEsIDBdLFxuICAnaW50ZXJzZWN0aW9uQnknOiBbMSwgMiwgMF0sXG4gICdpbnRlcnNlY3Rpb25XaXRoJzogWzEsIDIsIDBdLFxuICAnaXNFcXVhbFdpdGgnOiBbMSwgMiwgMF0sXG4gICdpc01hdGNoV2l0aCc6IFsyLCAxLCAwXSxcbiAgJ21lcmdlQWxsV2l0aCc6IFsxLCAwXSxcbiAgJ21lcmdlV2l0aCc6IFsxLCAyLCAwXSxcbiAgJ3BhZENoYXJzJzogWzIsIDEsIDBdLFxuICAncGFkQ2hhcnNFbmQnOiBbMiwgMSwgMF0sXG4gICdwYWRDaGFyc1N0YXJ0JzogWzIsIDEsIDBdLFxuICAncHVsbEFsbEJ5JzogWzIsIDEsIDBdLFxuICAncHVsbEFsbFdpdGgnOiBbMiwgMSwgMF0sXG4gICdyYW5nZVN0ZXAnOiBbMSwgMiwgMF0sXG4gICdyYW5nZVN0ZXBSaWdodCc6IFsxLCAyLCAwXSxcbiAgJ3NldFdpdGgnOiBbMywgMSwgMiwgMF0sXG4gICdzb3J0ZWRJbmRleEJ5JzogWzIsIDEsIDBdLFxuICAnc29ydGVkTGFzdEluZGV4QnknOiBbMiwgMSwgMF0sXG4gICd1bmlvbkJ5JzogWzEsIDIsIDBdLFxuICAndW5pb25XaXRoJzogWzEsIDIsIDBdLFxuICAndXBkYXRlV2l0aCc6IFszLCAxLCAyLCAwXSxcbiAgJ3hvckJ5JzogWzEsIDIsIDBdLFxuICAneG9yV2l0aCc6IFsxLCAyLCAwXSxcbiAgJ3ppcFdpdGgnOiBbMSwgMiwgMF1cbn07XG5cbi8qKiBVc2VkIHRvIG1hcCBtZXRob2QgbmFtZXMgdG8gc3ByZWFkIGNvbmZpZ3MuICovXG5leHBvcnRzLm1ldGhvZFNwcmVhZCA9IHtcbiAgJ2Fzc2lnbkFsbCc6IHsgJ3N0YXJ0JzogMCB9LFxuICAnYXNzaWduQWxsV2l0aCc6IHsgJ3N0YXJ0JzogMCB9LFxuICAnYXNzaWduSW5BbGwnOiB7ICdzdGFydCc6IDAgfSxcbiAgJ2Fzc2lnbkluQWxsV2l0aCc6IHsgJ3N0YXJ0JzogMCB9LFxuICAnZGVmYXVsdHNBbGwnOiB7ICdzdGFydCc6IDAgfSxcbiAgJ2RlZmF1bHRzRGVlcEFsbCc6IHsgJ3N0YXJ0JzogMCB9LFxuICAnaW52b2tlQXJncyc6IHsgJ3N0YXJ0JzogMiB9LFxuICAnaW52b2tlQXJnc01hcCc6IHsgJ3N0YXJ0JzogMiB9LFxuICAnbWVyZ2VBbGwnOiB7ICdzdGFydCc6IDAgfSxcbiAgJ21lcmdlQWxsV2l0aCc6IHsgJ3N0YXJ0JzogMCB9LFxuICAncGFydGlhbCc6IHsgJ3N0YXJ0JzogMSB9LFxuICAncGFydGlhbFJpZ2h0JzogeyAnc3RhcnQnOiAxIH0sXG4gICd3aXRob3V0JzogeyAnc3RhcnQnOiAxIH0sXG4gICd6aXBBbGwnOiB7ICdzdGFydCc6IDAgfVxufTtcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgbWV0aG9kcyB3aGljaCBtdXRhdGUgYXJyYXlzIG9yIG9iamVjdHMuICovXG5leHBvcnRzLm11dGF0ZSA9IHtcbiAgJ2FycmF5Jzoge1xuICAgICdmaWxsJzogdHJ1ZSxcbiAgICAncHVsbCc6IHRydWUsXG4gICAgJ3B1bGxBbGwnOiB0cnVlLFxuICAgICdwdWxsQWxsQnknOiB0cnVlLFxuICAgICdwdWxsQWxsV2l0aCc6IHRydWUsXG4gICAgJ3B1bGxBdCc6IHRydWUsXG4gICAgJ3JlbW92ZSc6IHRydWUsXG4gICAgJ3JldmVyc2UnOiB0cnVlXG4gIH0sXG4gICdvYmplY3QnOiB7XG4gICAgJ2Fzc2lnbic6IHRydWUsXG4gICAgJ2Fzc2lnbkFsbCc6IHRydWUsXG4gICAgJ2Fzc2lnbkFsbFdpdGgnOiB0cnVlLFxuICAgICdhc3NpZ25Jbic6IHRydWUsXG4gICAgJ2Fzc2lnbkluQWxsJzogdHJ1ZSxcbiAgICAnYXNzaWduSW5BbGxXaXRoJzogdHJ1ZSxcbiAgICAnYXNzaWduSW5XaXRoJzogdHJ1ZSxcbiAgICAnYXNzaWduV2l0aCc6IHRydWUsXG4gICAgJ2RlZmF1bHRzJzogdHJ1ZSxcbiAgICAnZGVmYXVsdHNBbGwnOiB0cnVlLFxuICAgICdkZWZhdWx0c0RlZXAnOiB0cnVlLFxuICAgICdkZWZhdWx0c0RlZXBBbGwnOiB0cnVlLFxuICAgICdtZXJnZSc6IHRydWUsXG4gICAgJ21lcmdlQWxsJzogdHJ1ZSxcbiAgICAnbWVyZ2VBbGxXaXRoJzogdHJ1ZSxcbiAgICAnbWVyZ2VXaXRoJzogdHJ1ZSxcbiAgfSxcbiAgJ3NldCc6IHtcbiAgICAnc2V0JzogdHJ1ZSxcbiAgICAnc2V0V2l0aCc6IHRydWUsXG4gICAgJ3Vuc2V0JzogdHJ1ZSxcbiAgICAndXBkYXRlJzogdHJ1ZSxcbiAgICAndXBkYXRlV2l0aCc6IHRydWVcbiAgfVxufTtcblxuLyoqIFVzZWQgdG8gbWFwIHJlYWwgbmFtZXMgdG8gdGhlaXIgYWxpYXNlcy4gKi9cbmV4cG9ydHMucmVhbFRvQWxpYXMgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG4gICAgICBvYmplY3QgPSBleHBvcnRzLmFsaWFzVG9SZWFsLFxuICAgICAgcmVzdWx0ID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufSgpKTtcblxuLyoqIFVzZWQgdG8gbWFwIG1ldGhvZCBuYW1lcyB0byBvdGhlciBuYW1lcy4gKi9cbmV4cG9ydHMucmVtYXAgPSB7XG4gICdhc3NpZ25BbGwnOiAnYXNzaWduJyxcbiAgJ2Fzc2lnbkFsbFdpdGgnOiAnYXNzaWduV2l0aCcsXG4gICdhc3NpZ25JbkFsbCc6ICdhc3NpZ25JbicsXG4gICdhc3NpZ25JbkFsbFdpdGgnOiAnYXNzaWduSW5XaXRoJyxcbiAgJ2N1cnJ5Tic6ICdjdXJyeScsXG4gICdjdXJyeVJpZ2h0Tic6ICdjdXJyeVJpZ2h0JyxcbiAgJ2RlZmF1bHRzQWxsJzogJ2RlZmF1bHRzJyxcbiAgJ2RlZmF1bHRzRGVlcEFsbCc6ICdkZWZhdWx0c0RlZXAnLFxuICAnZmluZEZyb20nOiAnZmluZCcsXG4gICdmaW5kSW5kZXhGcm9tJzogJ2ZpbmRJbmRleCcsXG4gICdmaW5kTGFzdEZyb20nOiAnZmluZExhc3QnLFxuICAnZmluZExhc3RJbmRleEZyb20nOiAnZmluZExhc3RJbmRleCcsXG4gICdnZXRPcic6ICdnZXQnLFxuICAnaW5jbHVkZXNGcm9tJzogJ2luY2x1ZGVzJyxcbiAgJ2luZGV4T2ZGcm9tJzogJ2luZGV4T2YnLFxuICAnaW52b2tlQXJncyc6ICdpbnZva2UnLFxuICAnaW52b2tlQXJnc01hcCc6ICdpbnZva2VNYXAnLFxuICAnbGFzdEluZGV4T2ZGcm9tJzogJ2xhc3RJbmRleE9mJyxcbiAgJ21lcmdlQWxsJzogJ21lcmdlJyxcbiAgJ21lcmdlQWxsV2l0aCc6ICdtZXJnZVdpdGgnLFxuICAncGFkQ2hhcnMnOiAncGFkJyxcbiAgJ3BhZENoYXJzRW5kJzogJ3BhZEVuZCcsXG4gICdwYWRDaGFyc1N0YXJ0JzogJ3BhZFN0YXJ0JyxcbiAgJ3Byb3BlcnR5T2YnOiAnZ2V0JyxcbiAgJ3JhbmdlU3RlcCc6ICdyYW5nZScsXG4gICdyYW5nZVN0ZXBSaWdodCc6ICdyYW5nZVJpZ2h0JyxcbiAgJ3Jlc3RGcm9tJzogJ3Jlc3QnLFxuICAnc3ByZWFkRnJvbSc6ICdzcHJlYWQnLFxuICAndHJpbUNoYXJzJzogJ3RyaW0nLFxuICAndHJpbUNoYXJzRW5kJzogJ3RyaW1FbmQnLFxuICAndHJpbUNoYXJzU3RhcnQnOiAndHJpbVN0YXJ0JyxcbiAgJ3ppcEFsbCc6ICd6aXAnXG59O1xuXG4vKiogVXNlZCB0byB0cmFjayBtZXRob2RzIHRoYXQgc2tpcCBmaXhpbmcgdGhlaXIgYXJpdHkuICovXG5leHBvcnRzLnNraXBGaXhlZCA9IHtcbiAgJ2Nhc3RBcnJheSc6IHRydWUsXG4gICdmbG93JzogdHJ1ZSxcbiAgJ2Zsb3dSaWdodCc6IHRydWUsXG4gICdpdGVyYXRlZSc6IHRydWUsXG4gICdtaXhpbic6IHRydWUsXG4gICdyZWFyZyc6IHRydWUsXG4gICdydW5JbkNvbnRleHQnOiB0cnVlXG59O1xuXG4vKiogVXNlZCB0byB0cmFjayBtZXRob2RzIHRoYXQgc2tpcCByZWFycmFuZ2luZyBhcmd1bWVudHMuICovXG5leHBvcnRzLnNraXBSZWFyZyA9IHtcbiAgJ2FkZCc6IHRydWUsXG4gICdhc3NpZ24nOiB0cnVlLFxuICAnYXNzaWduSW4nOiB0cnVlLFxuICAnYmluZCc6IHRydWUsXG4gICdiaW5kS2V5JzogdHJ1ZSxcbiAgJ2NvbmNhdCc6IHRydWUsXG4gICdkaWZmZXJlbmNlJzogdHJ1ZSxcbiAgJ2RpdmlkZSc6IHRydWUsXG4gICdlcSc6IHRydWUsXG4gICdndCc6IHRydWUsXG4gICdndGUnOiB0cnVlLFxuICAnaXNFcXVhbCc6IHRydWUsXG4gICdsdCc6IHRydWUsXG4gICdsdGUnOiB0cnVlLFxuICAnbWF0Y2hlc1Byb3BlcnR5JzogdHJ1ZSxcbiAgJ21lcmdlJzogdHJ1ZSxcbiAgJ211bHRpcGx5JzogdHJ1ZSxcbiAgJ292ZXJBcmdzJzogdHJ1ZSxcbiAgJ3BhcnRpYWwnOiB0cnVlLFxuICAncGFydGlhbFJpZ2h0JzogdHJ1ZSxcbiAgJ3Byb3BlcnR5T2YnOiB0cnVlLFxuICAncmFuZG9tJzogdHJ1ZSxcbiAgJ3JhbmdlJzogdHJ1ZSxcbiAgJ3JhbmdlUmlnaHQnOiB0cnVlLFxuICAnc3VidHJhY3QnOiB0cnVlLFxuICAnemlwJzogdHJ1ZSxcbiAgJ3ppcE9iamVjdCc6IHRydWUsXG4gICd6aXBPYmplY3REZWVwJzogdHJ1ZVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAnYXJ5JzogcmVxdWlyZSgnLi4vYXJ5JyksXG4gICdhc3NpZ24nOiByZXF1aXJlKCcuLi9fYmFzZUFzc2lnbicpLFxuICAnY2xvbmUnOiByZXF1aXJlKCcuLi9jbG9uZScpLFxuICAnY3VycnknOiByZXF1aXJlKCcuLi9jdXJyeScpLFxuICAnZm9yRWFjaCc6IHJlcXVpcmUoJy4uL19hcnJheUVhY2gnKSxcbiAgJ2lzQXJyYXknOiByZXF1aXJlKCcuLi9pc0FycmF5JyksXG4gICdpc0Vycm9yJzogcmVxdWlyZSgnLi4vaXNFcnJvcicpLFxuICAnaXNGdW5jdGlvbic6IHJlcXVpcmUoJy4uL2lzRnVuY3Rpb24nKSxcbiAgJ2lzV2Vha01hcCc6IHJlcXVpcmUoJy4uL2lzV2Vha01hcCcpLFxuICAnaXRlcmF0ZWUnOiByZXF1aXJlKCcuLi9pdGVyYXRlZScpLFxuICAna2V5cyc6IHJlcXVpcmUoJy4uL19iYXNlS2V5cycpLFxuICAncmVhcmcnOiByZXF1aXJlKCcuLi9yZWFyZycpLFxuICAndG9JbnRlZ2VyJzogcmVxdWlyZSgnLi4vdG9JbnRlZ2VyJyksXG4gICd0b1BhdGgnOiByZXF1aXJlKCcuLi90b1BhdGgnKVxufTtcbiIsInZhciBjcmVhdGVXcmFwID0gcmVxdWlyZSgnLi9fY3JlYXRlV3JhcCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbnZhciBXUkFQX0FSWV9GTEFHID0gMTI4O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbj1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IGNhcC5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gKiAvLyA9PiBbNiwgOCwgMTBdXG4gKi9cbmZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICBuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBuO1xuICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnk7XG4iLCJ2YXIgY3JlYXRlQ3RvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUN0b3InKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbnZhciBXUkFQX0JJTkRfRkxBRyA9IDE7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmluZDtcbiIsInZhciBhcHBseSA9IHJlcXVpcmUoJy4vX2FwcGx5JyksXG4gICAgY3JlYXRlQ3RvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUN0b3InKSxcbiAgICBjcmVhdGVIeWJyaWQgPSByZXF1aXJlKCcuL19jcmVhdGVIeWJyaWQnKSxcbiAgICBjcmVhdGVSZWN1cnJ5ID0gcmVxdWlyZSgnLi9fY3JlYXRlUmVjdXJyeScpLFxuICAgIGdldEhvbGRlciA9IHJlcXVpcmUoJy4vX2dldEhvbGRlcicpLFxuICAgIHJlcGxhY2VIb2xkZXJzID0gcmVxdWlyZSgnLi9fcmVwbGFjZUhvbGRlcnMnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtudW1iZXJ9IGFyaXR5IFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSkge1xuICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKTtcblxuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgfVxuICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICA/IFtdXG4gICAgICA6IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcblxuICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICB9XG4gICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICB9XG4gIHJldHVybiB3cmFwcGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUN1cnJ5O1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBudW1iZXIgb2YgYHBsYWNlaG9sZGVyYCBvY2N1cnJlbmNlcyBpbiBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAqL1xuZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gMDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvdW50SG9sZGVycztcbiIsIi8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xudmFyIHJlYWxOYW1lcyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWxOYW1lcztcbiIsInZhciBMYXp5V3JhcHBlciA9IHJlcXVpcmUoJy4vX0xhenlXcmFwcGVyJyksXG4gICAgTG9kYXNoV3JhcHBlciA9IHJlcXVpcmUoJy4vX0xvZGFzaFdyYXBwZXInKSxcbiAgICBiYXNlTG9kYXNoID0gcmVxdWlyZSgnLi9fYmFzZUxvZGFzaCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpLFxuICAgIHdyYXBwZXJDbG9uZSA9IHJlcXVpcmUoJy4vX3dyYXBwZXJDbG9uZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgaW1wbGljaXQgbWV0aG9kXG4gKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAqIGFuZCBmdW5jdGlvbnMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZVxuICogb3IgbWF5IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZW5kIHRoZSBjaGFpbiBzZXF1ZW5jZVxuICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICogd2l0aCBgXyN2YWx1ZWAuXG4gKlxuICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gKiBlbmFibGVkIHVzaW5nIGBfLmNoYWluYC5cbiAqXG4gKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gKiBgXyN2YWx1ZWAgaXMgaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGNhbGxlZC5cbiAqXG4gKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAqIFNob3J0Y3V0IGZ1c2lvbiBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWVyZ2UgaXRlcmF0ZWUgY2FsbHM7IHRoaXMgYXZvaWRzXG4gKiB0aGUgY3JlYXRpb24gb2YgaW50ZXJtZWRpYXRlIGFycmF5cyBhbmQgY2FuIGdyZWF0bHkgcmVkdWNlIHRoZSBudW1iZXIgb2ZcbiAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAqIGZ1c2lvbiBpZiB0aGUgc2VjdGlvbiBpcyBhcHBsaWVkIHRvIGFuIGFycmF5IGFuZCBpdGVyYXRlZXMgYWNjZXB0IG9ubHlcbiAqIG9uZSBhcmd1bWVudC4gVGhlIGhldXJpc3RpYyBmb3Igd2hldGhlciBhIHNlY3Rpb24gcXVhbGlmaWVzIGZvciBzaG9ydGN1dFxuICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICpcbiAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGBfI3ZhbHVlYCBtZXRob2QgaXNcbiAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICpcbiAqIEluIGFkZGl0aW9uIHRvIGxvZGFzaCBtZXRob2RzLCB3cmFwcGVycyBoYXZlIGBBcnJheWAgYW5kIGBTdHJpbmdgIG1ldGhvZHMuXG4gKlxuICogVGhlIHdyYXBwZXIgYEFycmF5YCBtZXRob2RzIGFyZTpcbiAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGBzaGlmdGAsIGBzb3J0YCwgYHNwbGljZWAsIGFuZCBgdW5zaGlmdGBcbiAqXG4gKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAqIGByZXBsYWNlYCBhbmQgYHNwbGl0YFxuICpcbiAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gKiBgYXRgLCBgY29tcGFjdGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBkcm9wV2hpbGVgLCBgZmlsdGVyYCwgYGZpbmRgLFxuICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gKiBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBhbmQgYHRvQXJyYXlgXG4gKlxuICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXNzaWduSW5gLCBgYXNzaWduSW5XaXRoYCwgYGFzc2lnbldpdGhgLCBgYXRgLFxuICogYGJlZm9yZWAsIGBiaW5kYCwgYGJpbmRBbGxgLCBgYmluZEtleWAsIGBjYXN0QXJyYXlgLCBgY2hhaW5gLCBgY2h1bmtgLFxuICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gKiBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGRlZmVyYCwgYGRlbGF5YCxcbiAqIGBkaWZmZXJlbmNlYCwgYGRpZmZlcmVuY2VCeWAsIGBkaWZmZXJlbmNlV2l0aGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsXG4gKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAqIGBmbGF0TWFwYCwgYGZsYXRNYXBEZWVwYCwgYGZsYXRNYXBEZXB0aGAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCxcbiAqIGBmbGF0dGVuRGVwdGhgLCBgZmxpcGAsIGBmbG93YCwgYGZsb3dSaWdodGAsIGBmcm9tUGFpcnNgLCBgZnVuY3Rpb25zYCxcbiAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAqIGBpbnRlcnNlY3Rpb25XaXRoYCwgYGludmVydGAsIGBpbnZlcnRCeWAsIGBpbnZva2VNYXBgLCBgaXRlcmF0ZWVgLCBga2V5QnlgLFxuICogYGtleXNgLCBga2V5c0luYCwgYG1hcGAsIGBtYXBLZXlzYCwgYG1hcFZhbHVlc2AsIGBtYXRjaGVzYCwgYG1hdGNoZXNQcm9wZXJ0eWAsXG4gKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gKiBgbnRoQXJnYCwgYG9taXRgLCBgb21pdEJ5YCwgYG9uY2VgLCBgb3JkZXJCeWAsIGBvdmVyYCwgYG92ZXJBcmdzYCxcbiAqIGBvdmVyRXZlcnlgLCBgb3ZlclNvbWVgLCBgcGFydGlhbGAsIGBwYXJ0aWFsUmlnaHRgLCBgcGFydGl0aW9uYCwgYHBpY2tgLFxuICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICogYHB1bGxBbGxXaXRoYCwgYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVhcmdgLCBgcmVqZWN0YCxcbiAqIGByZW1vdmVgLCBgcmVzdGAsIGByZXZlcnNlYCwgYHNhbXBsZVNpemVgLCBgc2V0YCwgYHNldFdpdGhgLCBgc2h1ZmZsZWAsXG4gKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAqIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdG9BcnJheWAsXG4gKiBgdG9QYWlyc2AsIGB0b1BhaXJzSW5gLCBgdG9QYXRoYCwgYHRvUGxhaW5PYmplY3RgLCBgdHJhbnNmb3JtYCwgYHVuYXJ5YCxcbiAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gKiBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdXBkYXRlYCwgYHVwZGF0ZVdpdGhgLCBgdmFsdWVzYCxcbiAqIGB2YWx1ZXNJbmAsIGB3aXRob3V0YCwgYHdyYXBgLCBgeG9yYCwgYHhvckJ5YCwgYHhvcldpdGhgLCBgemlwYCxcbiAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAqXG4gKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgYXJlICoqbm90KiogY2hhaW5hYmxlIGJ5IGRlZmF1bHQgYXJlOlxuICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICogYGNsb25lRGVlcGAsIGBjbG9uZURlZXBXaXRoYCwgYGNsb25lV2l0aGAsIGBjb25mb3Jtc1RvYCwgYGRlYnVycmAsXG4gKiBgZGVmYXVsdFRvYCwgYGRpdmlkZWAsIGBlYWNoYCwgYGVhY2hSaWdodGAsIGBlbmRzV2l0aGAsIGBlcWAsIGBlc2NhcGVgLFxuICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAqIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpcnN0YCwgYGZsb29yYCwgYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCxcbiAqIGBmb3JJbmAsIGBmb3JJblJpZ2h0YCwgYGZvck93bmAsIGBmb3JPd25SaWdodGAsIGBnZXRgLCBgZ3RgLCBgZ3RlYCwgYGhhc2AsXG4gKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAqIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQXJyYXlCdWZmZXJgLCBgaXNBcnJheUxpa2VgLCBgaXNBcnJheUxpa2VPYmplY3RgLFxuICogYGlzQm9vbGVhbmAsIGBpc0J1ZmZlcmAsIGBpc0RhdGVgLCBgaXNFbGVtZW50YCwgYGlzRW1wdHlgLCBgaXNFcXVhbGAsXG4gKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gKiBgaXNNYXBgLCBgaXNNYXRjaGAsIGBpc01hdGNoV2l0aGAsIGBpc05hTmAsIGBpc05hdGl2ZWAsIGBpc05pbGAsIGBpc051bGxgLFxuICogYGlzTnVtYmVyYCwgYGlzT2JqZWN0YCwgYGlzT2JqZWN0TGlrZWAsIGBpc1BsYWluT2JqZWN0YCwgYGlzUmVnRXhwYCxcbiAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gKiBgaXNXZWFrTWFwYCwgYGlzV2Vha1NldGAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsIGBsYXN0YCwgYGxhc3RJbmRleE9mYCxcbiAqIGBsb3dlckNhc2VgLCBgbG93ZXJGaXJzdGAsIGBsdGAsIGBsdGVgLCBgbWF4YCwgYG1heEJ5YCwgYG1lYW5gLCBgbWVhbkJ5YCxcbiAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAqIGBwYWRFbmRgLCBgcGFkU3RhcnRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLFxuICogYHJlcGVhdGAsIGByZXN1bHRgLCBgcm91bmRgLCBgcnVuSW5Db250ZXh0YCwgYHNhbXBsZWAsIGBzaGlmdGAsIGBzaXplYCxcbiAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gKiBgc29ydGVkTGFzdEluZGV4QnlgLCBgc3RhcnRDYXNlYCwgYHN0YXJ0c1dpdGhgLCBgc3R1YkFycmF5YCwgYHN0dWJGYWxzZWAsXG4gKiBgc3R1Yk9iamVjdGAsIGBzdHViU3RyaW5nYCwgYHN0dWJUcnVlYCwgYHN1YnRyYWN0YCwgYHN1bWAsIGBzdW1CeWAsXG4gKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gKiBgdG9Mb3dlcmAsIGB0b051bWJlcmAsIGB0b1NhZmVJbnRlZ2VyYCwgYHRvU3RyaW5nYCwgYHRvVXBwZXJgLCBgdHJpbWAsXG4gKiBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBgdHJ1bmNhdGVgLCBgdW5lc2NhcGVgLCBgdW5pcXVlSWRgLCBgdXBwZXJDYXNlYCxcbiAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAqXG4gKiBAbmFtZSBfXG4gKiBAY29uc3RydWN0b3JcbiAqIEBjYXRlZ29yeSBTZXFcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICogICByZXR1cm4gbiAqIG47XG4gKiB9XG4gKlxuICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gKlxuICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gKiB3cmFwcGVkLnJlZHVjZShfLmFkZCk7XG4gKiAvLyA9PiA2XG4gKlxuICogLy8gUmV0dXJucyBhIHdyYXBwZWQgdmFsdWUuXG4gKiB2YXIgc3F1YXJlcyA9IHdyYXBwZWQubWFwKHNxdWFyZSk7XG4gKlxuICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xufVxuXG4vLyBFbnN1cmUgd3JhcHBlcnMgYXJlIGluc3RhbmNlcyBvZiBgYmFzZUxvZGFzaGAuXG5sb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG5sb2Rhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbG9kYXNoO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvZGFzaDtcbiIsInZhciBMYXp5V3JhcHBlciA9IHJlcXVpcmUoJy4vX0xhenlXcmFwcGVyJyksXG4gICAgTG9kYXNoV3JhcHBlciA9IHJlcXVpcmUoJy4vX0xvZGFzaFdyYXBwZXInKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICovXG5mdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgcmV0dXJuIHdyYXBwZXIuY2xvbmUoKTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkod3JhcHBlci5fX2FjdGlvbnNfXyk7XG4gIHJlc3VsdC5fX2luZGV4X18gID0gd3JhcHBlci5fX2luZGV4X187XG4gIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBwZXJDbG9uZTtcbiIsIi8qKiBVc2VkIHRvIG1hdGNoIHdyYXAgZGV0YWlsIGNvbW1lbnRzLiAqL1xudmFyIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgcmVTcGxpdERldGFpbHMgPSAvLD8gJiAvO1xuXG4vKipcbiAqIEV4dHJhY3RzIHdyYXBwZXIgZGV0YWlscyBmcm9tIHRoZSBgc291cmNlYCBib2R5IGNvbW1lbnQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3cmFwcGVyIGRldGFpbHMuXG4gKi9cbmZ1bmN0aW9uIGdldFdyYXBEZXRhaWxzKHNvdXJjZSkge1xuICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFdyYXBEZXRhaWxzO1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG52YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy87XG5cbi8qKlxuICogSW5zZXJ0cyB3cmFwcGVyIGBkZXRhaWxzYCBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgYHNvdXJjZWAgYm9keS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIG1vZGlmeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gKi9cbmZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKHJlV3JhcENvbW1lbnQsICd7XFxuLyogW3dyYXBwZWQgd2l0aCAnICsgZGV0YWlscyArICddICovXFxuJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0V3JhcERldGFpbHM7XG4iLCJ2YXIgYXJyYXlFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXlFYWNoJyksXG4gICAgYXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG52YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQsXG4gICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbi8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG52YXIgd3JhcEZsYWdzID0gW1xuICBbJ2FyeScsIFdSQVBfQVJZX0ZMQUddLFxuICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gIFsnY3VycnknLCBXUkFQX0NVUlJZX0ZMQUddLFxuICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gIFsncGFydGlhbCcsIFdSQVBfUEFSVElBTF9GTEFHXSxcbiAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG5dO1xuXG4vKipcbiAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXBkYXRlV3JhcERldGFpbHM7XG4iLCJ2YXIgY29weUFycmF5ID0gcmVxdWlyZSgnLi9fY29weUFycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkoYXJyYXkpO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVvcmRlcjtcbiIsInZhciBhcHBseSA9IHJlcXVpcmUoJy4vX2FwcGx5JyksXG4gICAgY3JlYXRlQ3RvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUN0b3InKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbnZhciBXUkFQX0JJTkRfRkxBRyA9IDE7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZ1xuICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgfVxuICAgIHdoaWxlIChhcmdzTGVuZ3RoLS0pIHtcbiAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGFwcGx5KGZuLCBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJncyk7XG4gIH1cbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUGFydGlhbDtcbiIsInZhciBjb21wb3NlQXJncyA9IHJlcXVpcmUoJy4vX2NvbXBvc2VBcmdzJyksXG4gICAgY29tcG9zZUFyZ3NSaWdodCA9IHJlcXVpcmUoJy4vX2NvbXBvc2VBcmdzUmlnaHQnKSxcbiAgICByZXBsYWNlSG9sZGVycyA9IHJlcXVpcmUoJy4vX3JlcGxhY2VIb2xkZXJzJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cbnZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG52YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgV1JBUF9SRUFSR19GTEFHID0gMjU2O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogTWVyZ2VzIHRoZSBmdW5jdGlvbiBtZXRhZGF0YSBvZiBgc291cmNlYCBpbnRvIGBkYXRhYC5cbiAqXG4gKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICogVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIG1ldGhvZHMgbGlrZSBgXy5iaW5kYCwgYF8uY3VycnlgLCBhbmQgYF8ucGFydGlhbGBcbiAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gKiBleGVjdXRlZCBpbXBvcnRhbnQsIHByZXZlbnRpbmcgdGhlIG1lcmdpbmcgb2YgbWV0YWRhdGEuIEhvd2V2ZXIsIHdlIG1ha2VcbiAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBzb3VyY2UgbWV0YWRhdGEuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEoZGF0YSwgc291cmNlKSB7XG4gIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICB2YXIgaXNDb21ibyA9XG4gICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpIHx8XG4gICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAvLyBFeGl0IGVhcmx5IGlmIG1ldGFkYXRhIGNhbid0IGJlIG1lcmdlZC5cbiAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICBkYXRhWzJdID0gc291cmNlWzJdO1xuICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICB9XG4gIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNF07XG4gIH1cbiAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgdmFsdWUgPSBzb3VyY2VbNV07XG4gIGlmICh2YWx1ZSkge1xuICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgfVxuICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgdmFsdWUgPSBzb3VyY2VbN107XG4gIGlmICh2YWx1ZSkge1xuICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgfVxuICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHKSB7XG4gICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICB9XG4gIC8vIFVzZSBzb3VyY2UgYGFyaXR5YCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkLlxuICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgfVxuICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gIGRhdGFbMV0gPSBuZXdCaXRtYXNrO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlRGF0YTtcbiIsInZhciBiYXNlQ2xvbmUgPSByZXF1aXJlKCcuL19iYXNlQ2xvbmUnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICogYW5kIHN1cHBvcnRzIGNsb25pbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucywgZGF0ZSBvYmplY3RzLCBtYXBzLFxuICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICogYXMgcGxhaW4gb2JqZWN0cy4gQW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkIGZvciB1bmNsb25lYWJsZSB2YWx1ZXMgc3VjaFxuICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICogQHNlZSBfLmNsb25lRGVlcFxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gKiBjb25zb2xlLmxvZyhzaGFsbG93WzBdID09PSBvYmplY3RzWzBdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZTtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduSW47XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXNJbiA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXNJbicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzSW47XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzSW47XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpO1xuXG4vKipcbiAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weVN5bWJvbHM7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBnZXRTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzSW4nKTtcblxuLyoqXG4gKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlTeW1ib2xzSW47XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZUFycmF5O1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyksXG4gICAgY2xvbmVEYXRhVmlldyA9IHJlcXVpcmUoJy4vX2Nsb25lRGF0YVZpZXcnKSxcbiAgICBjbG9uZVJlZ0V4cCA9IHJlcXVpcmUoJy4vX2Nsb25lUmVnRXhwJyksXG4gICAgY2xvbmVTeW1ib2wgPSByZXF1aXJlKCcuL19jbG9uZVN5bWJvbCcpLFxuICAgIGNsb25lVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Nsb25lVHlwZWRBcnJheScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVCeVRhZztcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICovXG5mdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lRGF0YVZpZXc7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUZsYWdzID0gL1xcdyokLztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lUmVnRXhwO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVTeW1ib2w7XG4iLCJ2YXIgYmFzZUlzTWFwID0gcmVxdWlyZSgnLi9fYmFzZUlzTWFwJyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc01hcChuZXcgTWFwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFwO1xuIiwidmFyIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hcDtcbiIsInZhciBiYXNlSXNTZXQgPSByZXF1aXJlKCcuL19iYXNlSXNTZXQnKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU2V0KG5ldyBTZXQpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTZXQ7XG4iLCJ2YXIgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzU2V0O1xuIiwidmFyIGNyZWF0ZVdyYXAgPSByZXF1aXJlKCcuL19jcmVhdGVXcmFwJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIFdSQVBfQ1VSUllfRkxBRyA9IDg7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICogYGZ1bmNgIHJldHVybmluZyBpdHMgcmVzdWx0LCBpZiBhdCBsZWFzdCBgYXJpdHlgIG51bWJlciBvZiBhcmd1bWVudHMgaGF2ZVxuICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gKiBpcyBub3Qgc3VmZmljaWVudC5cbiAqXG4gKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gKiAgIHJldHVybiBbYSwgYiwgY107XG4gKiB9O1xuICpcbiAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShhYmMpO1xuICpcbiAqIGN1cnJpZWQoMSkoMikoMyk7XG4gKiAvLyA9PiBbMSwgMiwgM11cbiAqXG4gKiBjdXJyaWVkKDEsIDIpKDMpO1xuICogLy8gPT4gWzEsIDIsIDNdXG4gKlxuICogY3VycmllZCgxLCAyLCAzKTtcbiAqIC8vID0+IFsxLCAyLCAzXVxuICpcbiAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gKiBjdXJyaWVkKDEpKF8sIDMpKDIpO1xuICogLy8gPT4gWzEsIDIsIDNdXG4gKi9cbmZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnkucGxhY2Vob2xkZXI7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbmN1cnJ5LnBsYWNlaG9sZGVyID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gY3Vycnk7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpLFxuICAgIGlzUGxhaW5PYmplY3QgPSByZXF1aXJlKCcuL2lzUGxhaW5PYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICogYFN5bnRheEVycm9yYCwgYFR5cGVFcnJvcmAsIG9yIGBVUklFcnJvcmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRXJyb3IoRXJyb3IpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGVycm9yVGFnIHx8IHRhZyA9PSBkb21FeGNUYWcgfHxcbiAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Vycm9yO1xuIiwidmFyIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1dlYWtNYXAobmV3IFdlYWtNYXApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNXZWFrTWFwKG5ldyBNYXApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1dlYWtNYXA7XG4iLCJ2YXIgYmFzZUNsb25lID0gcmVxdWlyZSgnLi9fYmFzZUNsb25lJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gKiBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGNvbnRhaW4gdGhlIGVxdWl2YWxlbnRcbiAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSA0LjAuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAqIF07XG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICogLy8gPT4gW3sgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9XVxuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKFsndXNlcicsICdmcmVkJ10pKTtcbiAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gKlxuICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICogICByZXR1cm4gIV8uaXNSZWdFeHAoZnVuYykgPyBpdGVyYXRlZShmdW5jKSA6IGZ1bmN0aW9uKHN0cmluZykge1xuICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAqICAgfTtcbiAqIH0pO1xuICpcbiAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAqIC8vID0+IFsnZGVmJ11cbiAqL1xuZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICByZXR1cm4gYmFzZUl0ZXJhdGVlKHR5cGVvZiBmdW5jID09ICdmdW5jdGlvbicgPyBmdW5jIDogYmFzZUNsb25lKGZ1bmMsIENMT05FX0RFRVBfRkxBRykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGl0ZXJhdGVlO1xuIiwidmFyIGNyZWF0ZVdyYXAgPSByZXF1aXJlKCcuL19jcmVhdGVXcmFwJyksXG4gICAgZmxhdFJlc3QgPSByZXF1aXJlKCcuL19mbGF0UmVzdCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbnZhciBXUkFQX1JFQVJHX0ZMQUcgPSAyNTY7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gKiBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgc2Vjb25kIGluZGV4IGlzXG4gKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHJlYXJnZWQgPSBfLnJlYXJnKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAqIH0sIFsyLCAwLCAxXSk7XG4gKlxuICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gKi9cbnZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYXJnO1xuIiwidmFyIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyksXG4gICAgc3RyaW5nVG9QYXRoID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9QYXRoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAqXG4gKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gKi9cbmZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIHRvS2V5KTtcbiAgfVxuICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9QYXRoO1xuIiwidmFyIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGaWx0ZXI7XG4iLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyksXG4gICAgY2FzdFNsaWNlID0gcmVxdWlyZSgnLi9fY2FzdFNsaWNlJyksXG4gICAgaGFzVW5pY29kZSA9IHJlcXVpcmUoJy4vX2hhc1VuaWNvZGUnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyksXG4gICAgaXNSZWdFeHAgPSByZXF1aXJlKCcuL2lzUmVnRXhwJyksXG4gICAgc3RyaW5nVG9BcnJheSA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvQXJyYXknKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbnZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NTtcblxuLyoqXG4gKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHNlcGFyYXRvciBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICovXG5mdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpKSB7XG4gICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX0FSUkFZX0xFTkdUSCA6IGxpbWl0ID4+PiAwO1xuICBpZiAoIWxpbWl0KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICB0eXBlb2Ygc2VwYXJhdG9yID09ICdzdHJpbmcnIHx8XG4gICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICkpIHtcbiAgICBzZXBhcmF0b3IgPSBiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3BsaXQ7XG4iLCJ2YXIgYmFzZUlzUmVnRXhwID0gcmVxdWlyZSgnLi9fYmFzZUlzUmVnRXhwJyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgUmVnRXhwYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUmVnRXhwO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzUmVnRXhwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gcmVnZXhwVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1JlZ0V4cDtcbiIsIi8qKlxuICogQ29udmVydHMgYW4gQVNDSUkgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNjaWlUb0FycmF5O1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbnZhciByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbnZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pY29kZVRvQXJyYXk7XG4iLCJ2YXIgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpLFxuICAgIG1hcCA9IHJlcXVpcmUoJy4vbWFwJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gKiB0aHJ1IGBpdGVyYXRlZWAgYW5kIGZsYXR0ZW5pbmcgdGhlIG1hcHBlZCByZXN1bHRzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gKiAgIHJldHVybiBbbiwgbl07XG4gKiB9XG4gKlxuICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICovXG5mdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0TWFwO1xuIiwidmFyIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWFwO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGNvcHlBcnJheSA9IHJlcXVpcmUoJy4vX2NvcHlBcnJheScpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzU3RyaW5nID0gcmVxdWlyZSgnLi9pc1N0cmluZycpLFxuICAgIGl0ZXJhdG9yVG9BcnJheSA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9yVG9BcnJheScpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKSxcbiAgICBzdHJpbmdUb0FycmF5ID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9BcnJheScpLFxuICAgIHZhbHVlcyA9IHJlcXVpcmUoJy4vdmFsdWVzJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltSXRlcmF0b3IgPSBTeW1ib2wgPyBTeW1ib2wuaXRlcmF0b3IgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIF8udG9BcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAqXG4gKiBfLnRvQXJyYXkoMSk7XG4gKiAvLyA9PiBbXVxuICpcbiAqIF8udG9BcnJheShudWxsKTtcbiAqIC8vID0+IFtdXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBpZiAoaXNBcnJheUxpa2UodmFsdWUpKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgfVxuICBpZiAoc3ltSXRlcmF0b3IgJiYgdmFsdWVbc3ltSXRlcmF0b3JdKSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gIH1cbiAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gIHJldHVybiBmdW5jKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gIHZhciBkYXRhLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXRlcmF0b3JUb0FycmF5O1xuIiwidmFyIGNyZWF0ZUZsb3cgPSByZXF1aXJlKCcuL19jcmVhdGVGbG93Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICogQHNlZSBfLmZsb3dSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICogICByZXR1cm4gbiAqIG47XG4gKiB9XG4gKlxuICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvdyhbXy5hZGQsIHNxdWFyZV0pO1xuICogYWRkU3F1YXJlKDEsIDIpO1xuICogLy8gPT4gOVxuICovXG52YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmbG93O1xuIiwidmFyIExvZGFzaFdyYXBwZXIgPSByZXF1aXJlKCcuL19Mb2Rhc2hXcmFwcGVyJyksXG4gICAgZmxhdFJlc3QgPSByZXF1aXJlKCcuL19mbGF0UmVzdCcpLFxuICAgIGdldERhdGEgPSByZXF1aXJlKCcuL19nZXREYXRhJyksXG4gICAgZ2V0RnVuY05hbWUgPSByZXF1aXJlKCcuL19nZXRGdW5jTmFtZScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0xhemlhYmxlID0gcmVxdWlyZSgnLi9faXNMYXppYWJsZScpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbnZhciBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTY7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgdmFyIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgIGRhdGFbMV0gPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykgJiZcbiAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICApIHtcbiAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpXG4gICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcblxuICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUZsb3c7XG4iLCJ2YXIgYmFzZUNsYW1wID0gcmVxdWlyZSgnLi9fYmFzZUNsYW1wJyksXG4gICAgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgPyAwXG4gICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXJ0c1dpdGg7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJbnRlcnNlY3Rpb24gPSByZXF1aXJlKCcuL19iYXNlSW50ZXJzZWN0aW9uJyksXG4gICAgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGNhc3RBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL19jYXN0QXJyYXlMaWtlT2JqZWN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gKiAvLyA9PiBbMl1cbiAqL1xudmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgOiBbXTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludGVyc2VjdGlvbjtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXMnKSxcbiAgICBhcnJheUluY2x1ZGVzV2l0aCA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXNXaXRoJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICB9XG4gICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgfVxuICBhcnJheSA9IGFycmF5c1swXTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgb3V0ZXI6XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgIGlmICghKHNlZW5cbiAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgKSkge1xuICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW50ZXJzZWN0aW9uO1xuIiwidmFyIGlzQXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZU9iamVjdCcpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RBcnJheUxpa2VPYmplY3Q7XG4iLCJ2YXIgYmFzZVJhbmdlID0gcmVxdWlyZSgnLi9fYmFzZVJhbmdlJyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpLFxuICAgIHRvRmluaXRlID0gcmVxdWlyZSgnLi90b0Zpbml0ZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICB9XG4gICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUmFuZ2U7XG4iLCIvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAqIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgc3RhcnQgKz0gc3RlcDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VSYW5nZTtcbiIsInZhciBhcnJheVJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5UmVkdWNlJyksXG4gICAgZGVidXJyID0gcmVxdWlyZSgnLi9kZWJ1cnInKSxcbiAgICB3b3JkcyA9IHJlcXVpcmUoJy4vd29yZHMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiO1xuXG4vKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbnZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVDb21wb3VuZGVyO1xuIiwidmFyIGJhc2VQcm9wZXJ0eU9mID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5T2YnKTtcblxuLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xudmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgLy8gTGF0aW4tMSBTdXBwbGVtZW50IGJsb2NrLlxuICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICdcXHhjNyc6ICdDJywgICdcXHhlNyc6ICdjJyxcbiAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAnXFx4ZTgnOiAnZScsICAnXFx4ZTknOiAnZScsICdcXHhlYSc6ICdlJywgJ1xceGViJzogJ2UnLFxuICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAnXFx4ZDEnOiAnTicsICAnXFx4ZjEnOiAnbicsXG4gICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgJ1xceGQ5JzogJ1UnLCAgJ1xceGRhJzogJ1UnLCAnXFx4ZGInOiAnVScsICdcXHhkYyc6ICdVJyxcbiAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICdcXHhjNic6ICdBZScsICdcXHhlNic6ICdhZScsXG4gICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICdcXHhkZic6ICdzcycsXG4gIC8vIExhdGluIEV4dGVuZGVkLUEgYmxvY2suXG4gICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgJ1xcdTAxMDYnOiAnQycsICAnXFx1MDEwOCc6ICdDJywgJ1xcdTAxMGEnOiAnQycsICdcXHUwMTBjJzogJ0MnLFxuICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgJ1xcdTAxMTInOiAnRScsICAnXFx1MDExNCc6ICdFJywgJ1xcdTAxMTYnOiAnRScsICdcXHUwMTE4JzogJ0UnLCAnXFx1MDExYSc6ICdFJyxcbiAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAnXFx1MDExZCc6ICdnJywgICdcXHUwMTFmJzogJ2cnLCAnXFx1MDEyMSc6ICdnJywgJ1xcdTAxMjMnOiAnZycsXG4gICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgJ1xcdTAxMjknOiAnaScsICAnXFx1MDEyYic6ICdpJywgJ1xcdTAxMmQnOiAnaScsICdcXHUwMTJmJzogJ2knLCAnXFx1MDEzMSc6ICdpJyxcbiAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICdcXHUwMTM5JzogJ0wnLCAgJ1xcdTAxM2InOiAnTCcsICdcXHUwMTNkJzogJ0wnLCAnXFx1MDEzZic6ICdMJywgJ1xcdTAxNDEnOiAnTCcsXG4gICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgJ1xcdTAxNDQnOiAnbicsICAnXFx1MDE0Nic6ICduJywgJ1xcdTAxNDgnOiAnbicsICdcXHUwMTRiJzogJ24nLFxuICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICdcXHUwMTU0JzogJ1InLCAgJ1xcdTAxNTYnOiAnUicsICdcXHUwMTU4JzogJ1InLFxuICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAnXFx1MDE1Yic6ICdzJywgICdcXHUwMTVkJzogJ3MnLCAnXFx1MDE1Zic6ICdzJywgJ1xcdTAxNjEnOiAncycsXG4gICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgJ1xcdTAxNjgnOiAnVScsICAnXFx1MDE2YSc6ICdVJywgJ1xcdTAxNmMnOiAnVScsICdcXHUwMTZlJzogJ1UnLCAnXFx1MDE3MCc6ICdVJywgJ1xcdTAxNzInOiAnVScsXG4gICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAnXFx1MDE3Nic6ICdZJywgICdcXHUwMTc3JzogJ3knLCAnXFx1MDE3OCc6ICdZJyxcbiAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAnXFx1MDEzMic6ICdJSicsICdcXHUwMTMzJzogJ2lqJyxcbiAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xufTtcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICovXG52YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWJ1cnJMZXR0ZXI7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5T2Y7XG4iLCJ2YXIgYXNjaWlXb3JkcyA9IHJlcXVpcmUoJy4vX2FzY2lpV29yZHMnKSxcbiAgICBoYXNVbmljb2RlV29yZCA9IHJlcXVpcmUoJy4vX2hhc1VuaWNvZGVXb3JkJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyksXG4gICAgdW5pY29kZVdvcmRzID0gcmVxdWlyZSgnLi9fdW5pY29kZVdvcmRzJyk7XG5cbi8qKlxuICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAqXG4gKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gKi9cbmZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdvcmRzO1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG52YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbi8qKlxuICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNjaWlXb3JkcztcbiIsIi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbnZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1VuaWNvZGVXb3JkO1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG52YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbnZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gIHJzT3JkVXBwZXIsXG4gIHJzT3JkTG93ZXIsXG4gIHJzRGlnaXRzLFxuICByc0Vtb2ppXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqXG4gKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVuaWNvZGVXb3JkcztcbiIsInZhciBjcmVhdGVDYXNlRmlyc3QgPSByZXF1aXJlKCcuL19jcmVhdGVDYXNlRmlyc3QnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udXBwZXJGaXJzdCgnZnJlZCcpO1xuICogLy8gPT4gJ0ZyZWQnXG4gKlxuICogXy51cHBlckZpcnN0KCdGUkVEJyk7XG4gKiAvLyA9PiAnRlJFRCdcbiAqL1xudmFyIHVwcGVyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvVXBwZXJDYXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdXBwZXJGaXJzdDtcbiIsInZhciBjYXN0U2xpY2UgPSByZXF1aXJlKCcuL19jYXN0U2xpY2UnKSxcbiAgICBoYXNVbmljb2RlID0gcmVxdWlyZSgnLi9faGFzVW5pY29kZScpLFxuICAgIHN0cmluZ1RvQXJyYXkgPSByZXF1aXJlKCcuL19zdHJpbmdUb0FycmF5JyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ubG93ZXJGaXJzdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgU3RyaW5nYCBjYXNlIG1ldGhvZCB0byB1c2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgIHZhciBzdHJTeW1ib2xzID0gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgY2hyID0gc3RyU3ltYm9sc1xuICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICB2YXIgdHJhaWxpbmcgPSBzdHJTeW1ib2xzXG4gICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICByZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZztcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVDYXNlRmlyc3Q7XG4iLCJ2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9nZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkge1xuICB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgIG9iamVjdCA9IGdldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zdXBlclByb3BCYXNlOyIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmV2ZXJ5YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUV2ZXJ5KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUV2ZXJ5O1xuIiwidmFyIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYFxuICovXG5mdW5jdGlvbiBiYXNlRXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHQgPSAhIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VFdmVyeTtcbiIsInZhciBhc2NpaVNpemUgPSByZXF1aXJlKCcuL19hc2NpaVNpemUnKSxcbiAgICBoYXNVbmljb2RlID0gcmVxdWlyZSgnLi9faGFzVW5pY29kZScpLFxuICAgIHVuaWNvZGVTaXplID0gcmVxdWlyZSgnLi9fdW5pY29kZVNpemUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nU2l6ZTtcbiIsInZhciBiYXNlUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHknKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBzaXplIG9mIGFuIEFTQ0lJIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICovXG52YXIgYXNjaWlTaXplID0gYmFzZVByb3BlcnR5KCdsZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc2NpaVNpemU7XG4iLCIvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xudmFyIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4vKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xudmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4vKipcbiAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICovXG5mdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICsrcmVzdWx0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pY29kZVNpemU7XG4iLCJ2YXIgYXJyYXlBZ2dyZWdhdG9yID0gcmVxdWlyZSgnLi9fYXJyYXlBZ2dyZWdhdG9yJyksXG4gICAgYmFzZUFnZ3JlZ2F0b3IgPSByZXF1aXJlKCcuL19iYXNlQWdncmVnYXRvcicpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgc2V0dGVyLCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQWdncmVnYXRvcjtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgYXJyYXkpO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUFnZ3JlZ2F0b3I7XG4iLCJ2YXIgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpO1xuXG4vKipcbiAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gKiBieSBgaXRlcmF0ZWVgIGFuZCB2YWx1ZXMgc2V0IGJ5IGBzZXR0ZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICovXG5mdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQWdncmVnYXRvcjtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZVBpY2tCeSA9IHJlcXVpcmUoJy4vX2Jhc2VQaWNrQnknKSxcbiAgICBnZXRBbGxLZXlzSW4gPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzSW4nKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gKlxuICogXy5waWNrQnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICovXG5mdW5jdGlvbiBwaWNrQnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgcmV0dXJuIFtwcm9wXTtcbiAgfSk7XG4gIHByZWRpY2F0ZSA9IGJhc2VJdGVyYXRlZShwcmVkaWNhdGUpO1xuICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwaWNrQnk7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFzc2lnbk1lcmdlVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25NZXJnZVZhbHVlJyksXG4gICAgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBiYXNlTWVyZ2VEZWVwID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlRGVlcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyksXG4gICAgc2FmZUdldCA9IHJlcXVpcmUoJy4vX3NhZmVHZXQnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBrZXlzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNZXJnZTtcbiIsInZhciBhc3NpZ25NZXJnZVZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduTWVyZ2VWYWx1ZScpLFxuICAgIGNsb25lQnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVCdWZmZXInKSxcbiAgICBjbG9uZVR5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19jbG9uZVR5cGVkQXJyYXknKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBpbml0Q2xvbmVPYmplY3QgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVPYmplY3QnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUGxhaW5PYmplY3QgPSByZXF1aXJlKCcuL2lzUGxhaW5PYmplY3QnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpLFxuICAgIHNhZmVHZXQgPSByZXF1aXJlKCcuL19zYWZlR2V0JyksXG4gICAgdG9QbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vdG9QbGFpbk9iamVjdCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAqICBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgaWYgKHN0YWNrZWQpIHtcbiAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICA6IHVuZGVmaW5lZDtcblxuICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIGlmIChpc0NvbW1vbikge1xuICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNDb21tb24pIHtcbiAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gIH1cbiAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNZXJnZURlZXA7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAqL1xuZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9QbGFpbk9iamVjdDtcbiIsInZhciBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgIGxlbmd0aCA9IDE7XG4gICAgfVxuICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUFzc2lnbmVyO1xuIiwidmFyIGJhc2VJbnZlcnRlciA9IHJlcXVpcmUoJy4vX2Jhc2VJbnZlcnRlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVJbnZlcnRlcjtcbiIsInZhciBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gKiBgb2JqZWN0YCB3aXRoIHZhbHVlcyB0cmFuc2Zvcm1lZCBieSBgaXRlcmF0ZWVgIGFuZCBzZXQgYnkgYHNldHRlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGludmVydGVkIG9iamVjdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICovXG5mdW5jdGlvbiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgfSk7XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW52ZXJ0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzU2hpbTtcbmlmICghT2JqZWN0LmtleXMpIHtcblx0Ly8gbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cblx0dmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cdHZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cdHZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ2xvYmFsLXJlcXVpcmVcblx0dmFyIGlzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cdHZhciBoYXNEb250RW51bUJ1ZyA9ICFpc0VudW1lcmFibGUuY2FsbCh7IHRvU3RyaW5nOiBudWxsIH0sICd0b1N0cmluZycpO1xuXHR2YXIgaGFzUHJvdG9FbnVtQnVnID0gaXNFbnVtZXJhYmxlLmNhbGwoZnVuY3Rpb24gKCkge30sICdwcm90b3R5cGUnKTtcblx0dmFyIGRvbnRFbnVtcyA9IFtcblx0XHQndG9TdHJpbmcnLFxuXHRcdCd0b0xvY2FsZVN0cmluZycsXG5cdFx0J3ZhbHVlT2YnLFxuXHRcdCdoYXNPd25Qcm9wZXJ0eScsXG5cdFx0J2lzUHJvdG90eXBlT2YnLFxuXHRcdCdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG5cdFx0J2NvbnN0cnVjdG9yJ1xuXHRdO1xuXHR2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUgPSBmdW5jdGlvbiAobykge1xuXHRcdHZhciBjdG9yID0gby5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gY3RvciAmJiBjdG9yLnByb3RvdHlwZSA9PT0gbztcblx0fTtcblx0dmFyIGV4Y2x1ZGVkS2V5cyA9IHtcblx0XHQkYXBwbGljYXRpb25DYWNoZTogdHJ1ZSxcblx0XHQkY29uc29sZTogdHJ1ZSxcblx0XHQkZXh0ZXJuYWw6IHRydWUsXG5cdFx0JGZyYW1lOiB0cnVlLFxuXHRcdCRmcmFtZUVsZW1lbnQ6IHRydWUsXG5cdFx0JGZyYW1lczogdHJ1ZSxcblx0XHQkaW5uZXJIZWlnaHQ6IHRydWUsXG5cdFx0JGlubmVyV2lkdGg6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmNoYW5nZTogdHJ1ZSxcblx0XHQkb25tb3pmdWxsc2NyZWVuZXJyb3I6IHRydWUsXG5cdFx0JG91dGVySGVpZ2h0OiB0cnVlLFxuXHRcdCRvdXRlcldpZHRoOiB0cnVlLFxuXHRcdCRwYWdlWE9mZnNldDogdHJ1ZSxcblx0XHQkcGFnZVlPZmZzZXQ6IHRydWUsXG5cdFx0JHBhcmVudDogdHJ1ZSxcblx0XHQkc2Nyb2xsTGVmdDogdHJ1ZSxcblx0XHQkc2Nyb2xsVG9wOiB0cnVlLFxuXHRcdCRzY3JvbGxYOiB0cnVlLFxuXHRcdCRzY3JvbGxZOiB0cnVlLFxuXHRcdCRzZWxmOiB0cnVlLFxuXHRcdCR3ZWJraXRJbmRleGVkREI6IHRydWUsXG5cdFx0JHdlYmtpdFN0b3JhZ2VJbmZvOiB0cnVlLFxuXHRcdCR3aW5kb3c6IHRydWVcblx0fTtcblx0dmFyIGhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRmb3IgKHZhciBrIGluIHdpbmRvdykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0aWYgKCFleGNsdWRlZEtleXNbJyQnICsga10gJiYgaGFzLmNhbGwod2luZG93LCBrKSAmJiB3aW5kb3dba10gIT09IG51bGwgJiYgdHlwZW9mIHdpbmRvd1trXSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0ZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUod2luZG93W2tdKTtcblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSgpKTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSA9IGZ1bmN0aW9uIChvKSB7XG5cdFx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnKSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcblxuXHRrZXlzU2hpbSA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG5cdFx0dmFyIGlzT2JqZWN0ID0gb2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnO1xuXHRcdHZhciBpc0Z1bmN0aW9uID0gdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHRcdHZhciBpc0FyZ3VtZW50cyA9IGlzQXJncyhvYmplY3QpO1xuXHRcdHZhciBpc1N0cmluZyA9IGlzT2JqZWN0ICYmIHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cdFx0dmFyIHRoZUtleXMgPSBbXTtcblxuXHRcdGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24gJiYgIWlzQXJndW1lbnRzKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0dmFyIHNraXBQcm90byA9IGhhc1Byb3RvRW51bUJ1ZyAmJiBpc0Z1bmN0aW9uO1xuXHRcdGlmIChpc1N0cmluZyAmJiBvYmplY3QubGVuZ3RoID4gMCAmJiAhaGFzLmNhbGwob2JqZWN0LCAwKSkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhpKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGlzQXJndW1lbnRzICYmIG9iamVjdC5sZW5ndGggPiAwKSB7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG9iamVjdC5sZW5ndGg7ICsraikge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGopKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcblx0XHRcdFx0aWYgKCEoc2tpcFByb3RvICYmIG5hbWUgPT09ICdwcm90b3R5cGUnKSAmJiBoYXMuY2FsbChvYmplY3QsIG5hbWUpKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhuYW1lKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaGFzRG9udEVudW1CdWcpIHtcblx0XHRcdHZhciBza2lwQ29uc3RydWN0b3IgPSBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kob2JqZWN0KTtcblxuXHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBkb250RW51bXMubGVuZ3RoOyArK2spIHtcblx0XHRcdFx0aWYgKCEoc2tpcENvbnN0cnVjdG9yICYmIGRvbnRFbnVtc1trXSA9PT0gJ2NvbnN0cnVjdG9yJykgJiYgaGFzLmNhbGwob2JqZWN0LCBkb250RW51bXNba10pKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKGRvbnRFbnVtc1trXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRoZUtleXM7XG5cdH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGlzU3RhbmRhcmRBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIHRvU3RyLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn07XG5cbnZhciBpc0xlZ2FjeUFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdGlmIChpc1N0YW5kYXJkQXJndW1lbnRzKHZhbHVlKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHR0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJlxuXHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0dG9TdHIuY2FsbCh2YWx1ZSkgIT09ICdbb2JqZWN0IEFycmF5XScgJiZcblx0XHR0b1N0ci5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBpc1N0YW5kYXJkQXJndW1lbnRzKGFyZ3VtZW50cyk7XG59KCkpO1xuXG5pc1N0YW5kYXJkQXJndW1lbnRzLmlzTGVnYWN5QXJndW1lbnRzID0gaXNMZWdhY3lBcmd1bWVudHM7IC8vIGZvciB0ZXN0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMgPyBpc1N0YW5kYXJkQXJndW1lbnRzIDogaXNMZWdhY3lBcmd1bWVudHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3QuaXNcblxudmFyIG51bWJlcklzTmFOID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzKGEsIGIpIHtcblx0aWYgKGEgPT09IDAgJiYgYiA9PT0gMCkge1xuXHRcdHJldHVybiAxIC8gYSA9PT0gMSAvIGI7XG5cdH1cblx0aWYgKGEgPT09IGIpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAobnVtYmVySXNOYU4oYSkgJiYgbnVtYmVySXNOYU4oYikpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciByZWdleEV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciB0cnlSZWdleEV4ZWNDYWxsID0gZnVuY3Rpb24gdHJ5UmVnZXhFeGVjKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0dmFyIGxhc3RJbmRleCA9IHZhbHVlLmxhc3RJbmRleDtcblx0XHR2YWx1ZS5sYXN0SW5kZXggPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cblx0XHRyZWdleEV4ZWMuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0dmFsdWUubGFzdEluZGV4ID0gbGFzdEluZGV4OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdH1cbn07XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHJlZ2V4Q2xhc3MgPSAnW29iamVjdCBSZWdFeHBdJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNSZWdleCh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZykge1xuXHRcdHJldHVybiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gcmVnZXhDbGFzcztcblx0fVxuXG5cdHZhciBkZXNjcmlwdG9yID0gZ09QRCh2YWx1ZSwgJ2xhc3RJbmRleCcpO1xuXHR2YXIgaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBoYXMoZGVzY3JpcHRvciwgJ3ZhbHVlJyk7XG5cdGlmICghaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5KSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHRyeVJlZ2V4RXhlY0NhbGwodmFsdWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHRvU3RyLmNhbGwodGFyZ2V0KSAhPT0gZnVuY1R5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBib3VuZExlbmd0aCA9IE1hdGgubWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG4gICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICBib3VuZEFyZ3MucHVzaCgnJCcgKyBpKTtcbiAgICB9XG5cbiAgICBib3VuZCA9IEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgYm91bmRBcmdzLmpvaW4oJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJpbmQnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIGZsYWdzQm91bmQgPSBjYWxsQmluZChpbXBsZW1lbnRhdGlvbik7XG5cbmRlZmluZShmbGFnc0JvdW5kLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmbGFnc0JvdW5kO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJEZ1bmN0aW9uID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24lJyk7XG52YXIgJGFwcGx5ID0gJEZ1bmN0aW9uLmFwcGx5O1xudmFyICRjYWxsID0gJEZ1bmN0aW9uLmNhbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJpbmQoKSB7XG5cdHJldHVybiBiaW5kLmFwcGx5KCRjYWxsLCBhcmd1bWVudHMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMuYXBwbHkgPSBmdW5jdGlvbiBhcHBseUJpbmQoKSB7XG5cdHJldHVybiBiaW5kLmFwcGx5KCRhcHBseSwgYXJndW1lbnRzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbHNcblx0QXRvbWljcyxcblx0U2hhcmVkQXJyYXlCdWZmZXIsXG4qL1xuXG52YXIgdW5kZWZpbmVkO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKHt9LCAnJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQkZ09QRCA9IG51bGw7IC8vIHRoaXMgaXMgSUUgOCwgd2hpY2ggaGFzIGEgYnJva2VuIGdPUERcblx0fVxufVxuXG52YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyAkVHlwZUVycm9yKCk7IH07XG52YXIgVGhyb3dUeXBlRXJyb3IgPSAkZ09QRFxuXHQ/IChmdW5jdGlvbiAoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnMsIG5vLWNhbGxlciwgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG5cdFx0XHRhcmd1bWVudHMuY2FsbGVlOyAvLyBJRSA4IGRvZXMgbm90IHRocm93IGhlcmVcblx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHR9IGNhdGNoIChjYWxsZWVUaHJvd3MpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdC8vIElFIDggdGhyb3dzIG9uIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYXJndW1lbnRzLCAnJylcblx0XHRcdFx0cmV0dXJuICRnT1BEKGFyZ3VtZW50cywgJ2NhbGxlZScpLmdldDtcblx0XHRcdH0gY2F0Y2ggKGdPUER0aHJvd3MpIHtcblx0XHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdFx0fVxuXHRcdH1cblx0fSgpKVxuXHQ6IHRocm93VHlwZUVycm9yO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Ll9fcHJvdG9fXzsgfTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b1xuXG52YXIgZ2VuZXJhdG9yOyAvLyA9IGZ1bmN0aW9uICogKCkge307XG52YXIgZ2VuZXJhdG9yRnVuY3Rpb24gPSBnZW5lcmF0b3IgPyBnZXRQcm90byhnZW5lcmF0b3IpIDogdW5kZWZpbmVkO1xudmFyIGFzeW5jRm47IC8vIGFzeW5jIGZ1bmN0aW9uKCkge307XG52YXIgYXN5bmNGdW5jdGlvbiA9IGFzeW5jRm4gPyBhc3luY0ZuLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkO1xudmFyIGFzeW5jR2VuOyAvLyBhc3luYyBmdW5jdGlvbiAqICgpIHt9O1xudmFyIGFzeW5jR2VuRnVuY3Rpb24gPSBhc3luY0dlbiA/IGdldFByb3RvKGFzeW5jR2VuKSA6IHVuZGVmaW5lZDtcbnZhciBhc3luY0dlbkl0ZXJhdG9yID0gYXN5bmNHZW4gPyBhc3luY0dlbigpIDogdW5kZWZpbmVkO1xuXG52YXIgVHlwZWRBcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKFVpbnQ4QXJyYXkpO1xuXG52YXIgSU5UUklOU0lDUyA9IHtcblx0JyVBcnJheSUnOiBBcnJheSxcblx0JyVBcnJheUJ1ZmZlciUnOiB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXJyYXlCdWZmZXIsXG5cdCclQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLnByb3RvdHlwZSxcblx0JyVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJUFycmF5UHJvdG90eXBlJSc6IEFycmF5LnByb3RvdHlwZSxcblx0JyVBcnJheVByb3RvX2VudHJpZXMlJzogQXJyYXkucHJvdG90eXBlLmVudHJpZXMsXG5cdCclQXJyYXlQcm90b19mb3JFYWNoJSc6IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLFxuXHQnJUFycmF5UHJvdG9fa2V5cyUnOiBBcnJheS5wcm90b3R5cGUua2V5cyxcblx0JyVBcnJheVByb3RvX3ZhbHVlcyUnOiBBcnJheS5wcm90b3R5cGUudmFsdWVzLFxuXHQnJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGdW5jdGlvbiUnOiBhc3luY0Z1bmN0aW9uLFxuXHQnJUFzeW5jRnVuY3Rpb25Qcm90b3R5cGUlJzogYXN5bmNGdW5jdGlvbiA/IGFzeW5jRnVuY3Rpb24ucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IGFzeW5jR2VuID8gZ2V0UHJvdG8oYXN5bmNHZW5JdGVyYXRvcikgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnOiBhc3luY0dlbkZ1bmN0aW9uLFxuXHQnJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJSc6IGFzeW5jR2VuRnVuY3Rpb24gPyBhc3luY0dlbkZ1bmN0aW9uLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IGFzeW5jR2VuSXRlcmF0b3IgJiYgaGFzU3ltYm9scyAmJiBTeW1ib2wuYXN5bmNJdGVyYXRvciA/IGFzeW5jR2VuSXRlcmF0b3JbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkgOiB1bmRlZmluZWQsXG5cdCclQXRvbWljcyUnOiB0eXBlb2YgQXRvbWljcyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBdG9taWNzLFxuXHQnJUJvb2xlYW4lJzogQm9vbGVhbixcblx0JyVCb29sZWFuUHJvdG90eXBlJSc6IEJvb2xlYW4ucHJvdG90eXBlLFxuXHQnJURhdGFWaWV3JSc6IHR5cGVvZiBEYXRhVmlldyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBEYXRhVmlldyxcblx0JyVEYXRhVmlld1Byb3RvdHlwZSUnOiB0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRGF0YVZpZXcucHJvdG90eXBlLFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVEYXRlUHJvdG90eXBlJSc6IERhdGUucHJvdG90eXBlLFxuXHQnJWRlY29kZVVSSSUnOiBkZWNvZGVVUkksXG5cdCclZGVjb2RlVVJJQ29tcG9uZW50JSc6IGRlY29kZVVSSUNvbXBvbmVudCxcblx0JyVlbmNvZGVVUkklJzogZW5jb2RlVVJJLFxuXHQnJWVuY29kZVVSSUNvbXBvbmVudCUnOiBlbmNvZGVVUklDb21wb25lbnQsXG5cdCclRXJyb3IlJzogRXJyb3IsXG5cdCclRXJyb3JQcm90b3R5cGUlJzogRXJyb3IucHJvdG90eXBlLFxuXHQnJWV2YWwlJzogZXZhbCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG5cdCclRXZhbEVycm9yJSc6IEV2YWxFcnJvcixcblx0JyVFdmFsRXJyb3JQcm90b3R5cGUlJzogRXZhbEVycm9yLnByb3RvdHlwZSxcblx0JyVGbG9hdDMyQXJyYXklJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXksXG5cdCclRmxvYXQzMkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQzMkFycmF5LnByb3RvdHlwZSxcblx0JyVGbG9hdDY0QXJyYXklJzogdHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDY0QXJyYXksXG5cdCclRmxvYXQ2NEFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LnByb3RvdHlwZSxcblx0JyVGdW5jdGlvbiUnOiBGdW5jdGlvbixcblx0JyVGdW5jdGlvblByb3RvdHlwZSUnOiBGdW5jdGlvbi5wcm90b3R5cGUsXG5cdCclR2VuZXJhdG9yJSc6IGdlbmVyYXRvciA/IGdldFByb3RvKGdlbmVyYXRvcigpKSA6IHVuZGVmaW5lZCxcblx0JyVHZW5lcmF0b3JGdW5jdGlvbiUnOiBnZW5lcmF0b3JGdW5jdGlvbixcblx0JyVHZW5lcmF0b3JQcm90b3R5cGUlJzogZ2VuZXJhdG9yRnVuY3Rpb24gPyBnZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCclSW50OEFycmF5JSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LFxuXHQnJUludDhBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheS5wcm90b3R5cGUsXG5cdCclSW50MTZBcnJheSUnOiB0eXBlb2YgSW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQxNkFycmF5LFxuXHQnJUludDE2QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LnByb3RvdHlwZSxcblx0JyVJbnQzMkFycmF5JSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXksXG5cdCclSW50MzJBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LnByb3RvdHlwZSxcblx0JyVpc0Zpbml0ZSUnOiBpc0Zpbml0ZSxcblx0JyVpc05hTiUnOiBpc05hTixcblx0JyVJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSkgOiB1bmRlZmluZWQsXG5cdCclSlNPTiUnOiB0eXBlb2YgSlNPTiA9PT0gJ29iamVjdCcgPyBKU09OIDogdW5kZWZpbmVkLFxuXHQnJUpTT05QYXJzZSUnOiB0eXBlb2YgSlNPTiA9PT0gJ29iamVjdCcgPyBKU09OLnBhcnNlIDogdW5kZWZpbmVkLFxuXHQnJU1hcCUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE1hcCxcblx0JyVNYXBJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBNYXAoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJU1hcFByb3RvdHlwZSUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE1hcC5wcm90b3R5cGUsXG5cdCclTWF0aCUnOiBNYXRoLFxuXHQnJU51bWJlciUnOiBOdW1iZXIsXG5cdCclTnVtYmVyUHJvdG90eXBlJSc6IE51bWJlci5wcm90b3R5cGUsXG5cdCclT2JqZWN0JSc6IE9iamVjdCxcblx0JyVPYmplY3RQcm90b3R5cGUlJzogT2JqZWN0LnByb3RvdHlwZSxcblx0JyVPYmpQcm90b190b1N0cmluZyUnOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuXHQnJU9ialByb3RvX3ZhbHVlT2YlJzogT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLFxuXHQnJXBhcnNlRmxvYXQlJzogcGFyc2VGbG9hdCxcblx0JyVwYXJzZUludCUnOiBwYXJzZUludCxcblx0JyVQcm9taXNlJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UsXG5cdCclUHJvbWlzZVByb3RvdHlwZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnByb3RvdHlwZSxcblx0JyVQcm9taXNlUHJvdG9fdGhlbiUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnByb3RvdHlwZS50aGVuLFxuXHQnJVByb21pc2VfYWxsJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UuYWxsLFxuXHQnJVByb21pc2VfcmVqZWN0JSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UucmVqZWN0LFxuXHQnJVByb21pc2VfcmVzb2x2ZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnJlc29sdmUsXG5cdCclUHJveHklJzogdHlwZW9mIFByb3h5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb3h5LFxuXHQnJVJhbmdlRXJyb3IlJzogUmFuZ2VFcnJvcixcblx0JyVSYW5nZUVycm9yUHJvdG90eXBlJSc6IFJhbmdlRXJyb3IucHJvdG90eXBlLFxuXHQnJVJlZmVyZW5jZUVycm9yJSc6IFJlZmVyZW5jZUVycm9yLFxuXHQnJVJlZmVyZW5jZUVycm9yUHJvdG90eXBlJSc6IFJlZmVyZW5jZUVycm9yLnByb3RvdHlwZSxcblx0JyVSZWZsZWN0JSc6IHR5cGVvZiBSZWZsZWN0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFJlZmxlY3QsXG5cdCclUmVnRXhwJSc6IFJlZ0V4cCxcblx0JyVSZWdFeHBQcm90b3R5cGUlJzogUmVnRXhwLnByb3RvdHlwZSxcblx0JyVTZXQlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTZXQsXG5cdCclU2V0SXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgPyB1bmRlZmluZWQgOiBnZXRQcm90byhuZXcgU2V0KClbU3ltYm9sLml0ZXJhdG9yXSgpKSxcblx0JyVTZXRQcm90b3R5cGUlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTZXQucHJvdG90eXBlLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyVTaGFyZWRBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2hhcmVkQXJyYXlCdWZmZXIucHJvdG90eXBlLFxuXHQnJVN0cmluZyUnOiBTdHJpbmcsXG5cdCclU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclU3RyaW5nUHJvdG90eXBlJSc6IFN0cmluZy5wcm90b3R5cGUsXG5cdCclU3ltYm9sJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wgOiB1bmRlZmluZWQsXG5cdCclU3ltYm9sUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJVN5bnRheEVycm9yJSc6IFN5bnRheEVycm9yLFxuXHQnJVN5bnRheEVycm9yUHJvdG90eXBlJSc6IFN5bnRheEVycm9yLnByb3RvdHlwZSxcblx0JyVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyVUeXBlZEFycmF5JSc6IFR5cGVkQXJyYXksXG5cdCclVHlwZWRBcnJheVByb3RvdHlwZSUnOiBUeXBlZEFycmF5ID8gVHlwZWRBcnJheS5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCclVHlwZUVycm9yJSc6ICRUeXBlRXJyb3IsXG5cdCclVHlwZUVycm9yUHJvdG90eXBlJSc6ICRUeXBlRXJyb3IucHJvdG90eXBlLFxuXHQnJVVpbnQ4QXJyYXklJzogdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhBcnJheSxcblx0JyVVaW50OEFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXkucHJvdG90eXBlLFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyVVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlLFxuXHQnJVVpbnQxNkFycmF5JSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheSxcblx0JyVVaW50MTZBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXkucHJvdG90eXBlLFxuXHQnJVVpbnQzMkFycmF5JSc6IHR5cGVvZiBVaW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MzJBcnJheSxcblx0JyVVaW50MzJBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXkucHJvdG90eXBlLFxuXHQnJVVSSUVycm9yJSc6IFVSSUVycm9yLFxuXHQnJVVSSUVycm9yUHJvdG90eXBlJSc6IFVSSUVycm9yLnByb3RvdHlwZSxcblx0JyVXZWFrTWFwJSc6IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtNYXAsXG5cdCclV2Vha01hcFByb3RvdHlwZSUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLnByb3RvdHlwZSxcblx0JyVXZWFrU2V0JSc6IHR5cGVvZiBXZWFrU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtTZXQsXG5cdCclV2Vha1NldFByb3RvdHlwZSUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0LnByb3RvdHlwZVxufTtcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgJHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcblxuLyogYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvNC4xNy4xNS9kaXN0L2xvZGFzaC5qcyNMNjczNS1MNjc0NCAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14lLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCUkKSkvZztcbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZzsgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgc3RyaW5nVG9QYXRoID0gZnVuY3Rpb24gc3RyaW5nVG9QYXRoKHN0cmluZykge1xuXHR2YXIgcmVzdWx0ID0gW107XG5cdCRyZXBsYWNlKHN0cmluZywgcmVQcm9wTmFtZSwgZnVuY3Rpb24gKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcblx0XHRyZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBxdW90ZSA/ICRyZXBsYWNlKHN1YlN0cmluZywgcmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpO1xuXHR9KTtcblx0cmV0dXJuIHJlc3VsdDtcbn07XG4vKiBlbmQgYWRhcHRhdGlvbiAqL1xuXG52YXIgZ2V0QmFzZUludHJpbnNpYyA9IGZ1bmN0aW9uIGdldEJhc2VJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdGlmICghKG5hbWUgaW4gSU5UUklOU0lDUykpIHtcblx0XHR0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZG9lcyBub3QgZXhpc3QhJyk7XG5cdH1cblxuXHQvLyBpc3RhbmJ1bCBpZ25vcmUgaWYgLy8gaG9wZWZ1bGx5IHRoaXMgaXMgaW1wb3NzaWJsZSB0byB0ZXN0IDotKVxuXHRpZiAodHlwZW9mIElOVFJJTlNJQ1NbbmFtZV0gPT09ICd1bmRlZmluZWQnICYmICFhbGxvd01pc3NpbmcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSEnKTtcblx0fVxuXG5cdHJldHVybiBJTlRSSU5TSUNTW25hbWVdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnRyaW5zaWMgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYWxsb3dNaXNzaW5nICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdcImFsbG93TWlzc2luZ1wiIGFyZ3VtZW50IG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblxuXHR2YXIgcGFydHMgPSBzdHJpbmdUb1BhdGgobmFtZSk7XG5cblx0dmFyIHZhbHVlID0gZ2V0QmFzZUludHJpbnNpYygnJScgKyAocGFydHMubGVuZ3RoID4gMCA/IHBhcnRzWzBdIDogJycpICsgJyUnLCBhbGxvd01pc3NpbmcpO1xuXHRmb3IgKHZhciBpID0gMTsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0aWYgKHZhbHVlICE9IG51bGwpIHtcblx0XHRcdGlmICgkZ09QRCAmJiAoaSArIDEpID49IHBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgZGVzYyA9ICRnT1BEKHZhbHVlLCBwYXJ0c1tpXSk7XG5cdFx0XHRcdGlmICghYWxsb3dNaXNzaW5nICYmICEocGFydHNbaV0gaW4gdmFsdWUpKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Jhc2UgaW50cmluc2ljIGZvciAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgdGhlIHByb3BlcnR5IGlzIG5vdCBhdmFpbGFibGUuJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFsdWUgPSBkZXNjID8gKGRlc2MuZ2V0IHx8IGRlc2MudmFsdWUpIDogdmFsdWVbcGFydHNbaV1dO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0c1tpXV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKS5zdXBwb3J0c0Rlc2NyaXB0b3JzO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIFR5cGVFcnIgPSBUeXBlRXJyb3I7XG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgcmVnZXggPSAvYS87XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUZsYWdzKCkge1xuXHRpZiAoIXN1cHBvcnRzRGVzY3JpcHRvcnMgfHwgIWdldFByb3RvKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnIoJ1JlZ0V4cC5wcm90b3R5cGUuZmxhZ3MgcmVxdWlyZXMgYSB0cnVlIEVTNSBlbnZpcm9ubWVudCB0aGF0IHN1cHBvcnRzIHByb3BlcnR5IGRlc2NyaXB0b3JzJyk7XG5cdH1cblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0dmFyIHByb3RvID0gZ2V0UHJvdG8ocmVnZXgpO1xuXHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sICdmbGFncycpO1xuXHRpZiAoIWRlc2NyaXB0b3IgfHwgZGVzY3JpcHRvci5nZXQgIT09IHBvbHlmaWxsKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkocHJvdG8sICdmbGFncycsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0Z2V0OiBwb2x5ZmlsbFxuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXREYXkgPSBEYXRlLnByb3RvdHlwZS5nZXREYXk7XG52YXIgdHJ5RGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHRyeURhdGVHZXREYXlDYWxsKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0Z2V0RGF5LmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRhdGVDbGFzcyA9ICdbb2JqZWN0IERhdGVdJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNEYXRlT2JqZWN0KHZhbHVlKSB7XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBoYXNUb1N0cmluZ1RhZyA/IHRyeURhdGVPYmplY3QodmFsdWUpIDogdG9TdHIuY2FsbCh2YWx1ZSkgPT09IGRhdGVDbGFzcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfZ3VkID0gcmVxdWlyZSgnZ3VkJyk7XG5cbnZhciBfZ3VkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2d1ZCk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xuXG4vLyBJbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbC5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgKDAsIF9ndWQyLmRlZmF1bHQpKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzID0gdm9pZCAwO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwOyAvLyBObyBjaGFuZ2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICVzJywgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KF9yZWFjdC5Db21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHMoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90ZW1wMiwgX3RoaXMyLCBfcmV0MjtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnN1bWVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldDIgPSAoX3RlbXAyID0gKF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQyLmNhbGwuYXBwbHkoX0NvbXBvbmVudDIsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMyKSwgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH0sIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7IHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKSB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgX3RlbXAyKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMyLCBfcmV0Mik7XG4gICAgfVxuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG5cbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIC8vIFN1YnNjcmliZSB0byBhbGwgY2hhbmdlcyBieSBkZWZhdWx0XG4gICAgICA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuXG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCAvLyBTdWJzY3JpYmUgdG8gYWxsIGNoYW5nZXMgYnkgZGVmYXVsdFxuICAgICAgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KF9yZWFjdC5Db21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuXG5cbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVJlYWN0Q29udGV4dDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8vIEBmbG93XG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2xvYmFsW2tleV0gPSAoZ2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDEgPyBsZW4gLSAxIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMTsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAxXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpLFxuICAgIHRvTnVtYmVyID0gcmVxdWlyZSgnLi90b051bWJlcicpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNGaW5pdGUgPSByb290LmlzRmluaXRlLFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gIHJldHVybiBmdW5jdGlvbihudW1iZXIsIHByZWNpc2lvbikge1xuICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgIGlmIChwcmVjaXNpb24gJiYgbmF0aXZlSXNGaW5pdGUobnVtYmVyKSkge1xuICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICB2YXIgcGFpciA9ICh0b1N0cmluZyhudW1iZXIpICsgJ2UnKS5zcGxpdCgnZScpLFxuICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgcmV0dXJuICsocGFpclswXSArICdlJyArICgrcGFpclsxXSAtIHByZWNpc2lvbikpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJvdW5kO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCIuLi8uLi9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2ZcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5cbi8qKlxuICogVGhlIGZ1bmN0aW9uIHRoYXQgY29ycmVjdGx5IGhhbmRsZXMgcGFzc2luZyByZWZzLlxuICpcbiAqIEBwYXJhbSByZWYgQW4gcmVmIG9iamVjdCBvciBmdW5jdGlvblxuICogQHBhcmFtIG5vZGUgQSBub2RlIHRoYXQgc2hvdWxkIGJlIHBhc3NlZCBieSByZWZcbiAqL1xudmFyIGhhbmRsZVJlZiA9IGZ1bmN0aW9uIGhhbmRsZVJlZihyZWYsIG5vZGUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHJlZiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignV2UgZG8gbm90IHN1cHBvcnQgcmVmcyBhcyBzdHJpbmcsIHRoaXMgaXMgYSBsZWdhY3kgQVBJIGFuZCB3aWxsIGJlIGxpa2VseSB0byBiZSByZW1vdmVkIGluIG9uZSBvZiB0aGUgZnV0dXJlIHJlbGVhc2VzIG9mIFJlYWN0LicpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKG5vZGUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChyZWYgIT09IG51bGwgJiYgX3R5cGVvZihyZWYpID09PSAnb2JqZWN0Jykge1xuICAgIC8vIFRoZSBgY3VycmVudGAgcHJvcGVydHkgaXMgZGVmaW5lZCBhcyByZWFkb25seSwgaG93ZXZlciBpdCdzIGEgdmFsaWQgd2F5IGJlY2F1c2VcbiAgICAvLyBgcmVmYCBpcyBhIG11dGFibGUgb2JqZWN0XG4gICAgO1xuICAgIHJlZi5jdXJyZW50ID0gbm9kZTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgaGFuZGxlUmVmOyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgKiBhcyBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGhhbmRsZVJlZiBmcm9tICcuL2hhbmRsZVJlZic7XG5pbXBvcnQgeyByZWZQcm9wVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG52YXIgUmVmRmluZE5vZGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlZkZpbmROb2RlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWZGaW5kTm9kZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWZGaW5kTm9kZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihSZWZGaW5kTm9kZSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInByZXZOb2RlXCIsIG51bGwpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlZkZpbmROb2RlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMucHJldk5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICAgIGhhbmRsZVJlZih0aGlzLnByb3BzLmlubmVyUmVmLCB0aGlzLnByZXZOb2RlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciBjdXJyZW50Tm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuXG4gICAgICBpZiAodGhpcy5wcmV2Tm9kZSAhPT0gY3VycmVudE5vZGUpIHtcbiAgICAgICAgdGhpcy5wcmV2Tm9kZSA9IGN1cnJlbnROb2RlO1xuICAgICAgICBoYW5kbGVSZWYodGhpcy5wcm9wcy5pbm5lclJlZiwgY3VycmVudE5vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldlByb3BzLmlubmVyUmVmICE9PSB0aGlzLnByb3BzLmlubmVyUmVmKSB7XG4gICAgICAgIGhhbmRsZVJlZih0aGlzLnByb3BzLmlubmVyUmVmLCBjdXJyZW50Tm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaGFuZGxlUmVmKHRoaXMucHJvcHMuaW5uZXJSZWYsIG51bGwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVmRmluZE5vZGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShSZWZGaW5kTm9kZSwgXCJkaXNwbGF5TmFtZVwiLCAnUmVmRmluZE5vZGUnKTtcblxuX2RlZmluZVByb3BlcnR5KFJlZkZpbmROb2RlLCBcInByb3BUeXBlc1wiLCBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgaW5uZXJSZWY6IHJlZlByb3BUeXBlLmlzUmVxdWlyZWRcbn0gOiB7fSk7XG5cbmV4cG9ydCB7IFJlZkZpbmROb2RlIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0ICogYXMgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGhhbmRsZVJlZiBmcm9tICcuL2hhbmRsZVJlZic7XG5pbXBvcnQgeyByZWZQcm9wVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG52YXIgUmVmRm9yd2FyZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVmRm9yd2FyZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVmRm9yd2FyZCgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWZGb3J3YXJkKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFJlZkZvcndhcmQpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVSZWZPdmVycmlkZVwiLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzLmlubmVyUmVmO1xuICAgICAgaGFuZGxlUmVmKGNoaWxkcmVuLnJlZiwgbm9kZSk7XG4gICAgICBoYW5kbGVSZWYoaW5uZXJSZWYsIG5vZGUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlZkZvcndhcmQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICByZWY6IHRoaXMuaGFuZGxlUmVmT3ZlcnJpZGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZWZGb3J3YXJkO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoUmVmRm9yd2FyZCwgXCJkaXNwbGF5TmFtZVwiLCAnUmVmRm9yd2FyZCcpO1xuXG5fZGVmaW5lUHJvcGVydHkoUmVmRm9yd2FyZCwgXCJwcm9wVHlwZXNcIiwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXG4gIGlubmVyUmVmOiByZWZQcm9wVHlwZS5pc1JlcXVpcmVkXG59IDoge30pO1xuXG5leHBvcnQgeyBSZWZGb3J3YXJkIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgKiBhcyBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdElzIGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBSZWZGaW5kTm9kZSBmcm9tICcuL1JlZkZpbmROb2RlJztcbmltcG9ydCBSZWZGb3J3YXJkIGZyb20gJy4vUmVmRm9yd2FyZCc7XG5pbXBvcnQgeyByZWZQcm9wVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG52YXIgUmVmID0gZnVuY3Rpb24gUmVmKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZjtcbiAgdmFyIGNoaWxkID0gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gIHZhciBFbGVtZW50VHlwZSA9IFJlYWN0SXMuaXNGb3J3YXJkUmVmKGNoaWxkKSA/IFJlZkZvcndhcmQgOiBSZWZGaW5kTm9kZTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIHtcbiAgICBpbm5lclJlZjogaW5uZXJSZWZcbiAgfSwgY2hpbGQpO1xufTtcblxuUmVmLmRpc3BsYXlOYW1lID0gJ1JlZic7IC8vIFRPRE86IHVzZSBCYWJlbCBwbHVnaW4gZm9yIHRoaXNcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVmLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgICBpbm5lclJlZjogcmVmUHJvcFR5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWY7IiwiLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBjb25zaXN0aW5nIG9mIHByb3BzIGJleW9uZCB0aGUgc2NvcGUgb2YgdGhlIENvbXBvbmVudC5cbiAqIFVzZWZ1bCBmb3IgZ2V0dGluZyBhbmQgc3ByZWFkaW5nIHVua25vd24gcHJvcHMgZnJvbSB0aGUgdXNlci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IENvbXBvbmVudCBBIGZ1bmN0aW9uIG9yIFJlYWN0Q2xhc3MuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgQSBSZWFjdEVsZW1lbnQgcHJvcHMgb2JqZWN0XG4gKiBAcmV0dXJucyB7e319IEEgc2hhbGxvdyBjb3B5IG9mIHRoZSBwcm9wIG9iamVjdFxuICovXG52YXIgZ2V0VW5oYW5kbGVkUHJvcHMgPSBmdW5jdGlvbiBnZXRVbmhhbmRsZWRQcm9wcyhDb21wb25lbnQsIHByb3BzKSB7XG4gIC8vIE5vdGUgdGhhdCBgaGFuZGxlZFByb3BzYCBhcmUgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkgZHVyaW5nIGJ1aWxkIHdpdGggYGJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tcmVhY3QtaGFuZGxlZC1wcm9wc2BcbiAgdmFyIF9Db21wb25lbnQkaGFuZGxlZFBybyA9IENvbXBvbmVudC5oYW5kbGVkUHJvcHMsXG4gICAgICBoYW5kbGVkUHJvcHMgPSBfQ29tcG9uZW50JGhhbmRsZWRQcm8gPT09IHZvaWQgMCA/IFtdIDogX0NvbXBvbmVudCRoYW5kbGVkUHJvO1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgPT09ICdjaGlsZEtleScpIHJldHVybiBhY2M7XG4gICAgaWYgKGhhbmRsZWRQcm9wcy5pbmRleE9mKHByb3ApID09PSAtMSkgYWNjW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0VW5oYW5kbGVkUHJvcHM7IiwiaW1wb3J0IF9maW5kIGZyb20gXCJsb2Rhc2gvZmluZFwiO1xuaW1wb3J0IF9zb21lIGZyb20gXCJsb2Rhc2gvc29tZVwiO1xuaW1wb3J0IHsgQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIERldGVybWluZSBpZiBjaGlsZCBieSB0eXBlIGV4aXN0cyBpbiBjaGlsZHJlbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjaGlsZHJlbiBUaGUgY2hpbGRyZW4gcHJvcCBvZiBhIGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfEZ1bmN0aW9ufSB0eXBlIEFuIGh0bWwgdGFnIG5hbWUgc3RyaW5nIG9yIFJlYWN0IGNvbXBvbmVudC5cbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5cbmV4cG9ydCB2YXIgc29tZUJ5VHlwZSA9IGZ1bmN0aW9uIHNvbWVCeVR5cGUoY2hpbGRyZW4sIHR5cGUpIHtcbiAgcmV0dXJuIF9zb21lKENoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLCB7XG4gICAgdHlwZTogdHlwZVxuICB9KTtcbn07XG4vKipcbiAqIEZpbmQgY2hpbGQgYnkgdHlwZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjaGlsZHJlbiBUaGUgY2hpbGRyZW4gcHJvcCBvZiBhIGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfEZ1bmN0aW9ufSB0eXBlIEFuIGh0bWwgdGFnIG5hbWUgc3RyaW5nIG9yIFJlYWN0IGNvbXBvbmVudC5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR8T2JqZWN0fVxuICovXG5cbmV4cG9ydCB2YXIgZmluZEJ5VHlwZSA9IGZ1bmN0aW9uIGZpbmRCeVR5cGUoY2hpbGRyZW4sIHR5cGUpIHtcbiAgcmV0dXJuIF9maW5kKENoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLCB7XG4gICAgdHlwZTogdHlwZVxuICB9KTtcbn07XG4vKipcbiAqIFRlc3RzIGlmIGNoaWxkcmVuIGFyZSBuaWwgaW4gUmVhY3QgYW5kIFByZWFjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjaGlsZHJlbiBUaGUgY2hpbGRyZW4gcHJvcCBvZiBhIGNvbXBvbmVudC5cbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5cbmV4cG9ydCB2YXIgaXNOaWwgPSBmdW5jdGlvbiBpc05pbChjaGlsZHJlbikge1xuICByZXR1cm4gY2hpbGRyZW4gPT09IG51bGwgfHwgY2hpbGRyZW4gPT09IHVuZGVmaW5lZCB8fCBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDA7XG59OyIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiO1xuZXhwb3J0IHZhciBudW1iZXJUb1dvcmRNYXAgPSB7XG4gIDE6ICdvbmUnLFxuICAyOiAndHdvJyxcbiAgMzogJ3RocmVlJyxcbiAgNDogJ2ZvdXInLFxuICA1OiAnZml2ZScsXG4gIDY6ICdzaXgnLFxuICA3OiAnc2V2ZW4nLFxuICA4OiAnZWlnaHQnLFxuICA5OiAnbmluZScsXG4gIDEwOiAndGVuJyxcbiAgMTE6ICdlbGV2ZW4nLFxuICAxMjogJ3R3ZWx2ZScsXG4gIDEzOiAndGhpcnRlZW4nLFxuICAxNDogJ2ZvdXJ0ZWVuJyxcbiAgMTU6ICdmaWZ0ZWVuJyxcbiAgMTY6ICdzaXh0ZWVuJ1xuICAvKipcbiAgICogUmV0dXJuIHRoZSBudW1iZXIgd29yZCBmb3IgbnVtYmVycyAxLTE2LlxuICAgKiBSZXR1cm5zIHN0cmluZ3Mgb3IgbnVtYmVycyBhcyBpcyBpZiB0aGVyZSBpcyBubyBjb3JyZXNwb25kaW5nIHdvcmQuXG4gICAqIFJldHVybnMgYW4gZW1wdHkgc3RyaW5nIGlmIHZhbHVlIGlzIG5vdCBhIHN0cmluZyBvciBudW1iZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSB3b3JkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cblxufTtcbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJUb1dvcmQodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSBfdHlwZW9mKHZhbHVlKTtcblxuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbnVtYmVyVG9Xb3JkTWFwW3ZhbHVlXSB8fCB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiAnJztcbn0iLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX3VuaXEgZnJvbSBcImxvZGFzaC91bmlxXCI7XG5pbXBvcnQgX3ZhbHVlcyBmcm9tIFwibG9kYXNoL3ZhbHVlc1wiO1xuaW1wb3J0IF9rZXlzIGZyb20gXCJsb2Rhc2gva2V5c1wiO1xuaW1wb3J0IHsgbnVtYmVyVG9Xb3JkTWFwIH0gZnJvbSAnLi9udW1iZXJUb1dvcmQnO1xuZXhwb3J0IHZhciBDT0xPUlMgPSBbJ3JlZCcsICdvcmFuZ2UnLCAneWVsbG93JywgJ29saXZlJywgJ2dyZWVuJywgJ3RlYWwnLCAnYmx1ZScsICd2aW9sZXQnLCAncHVycGxlJywgJ3BpbmsnLCAnYnJvd24nLCAnZ3JleScsICdibGFjayddO1xuZXhwb3J0IHZhciBGTE9BVFMgPSBbJ2xlZnQnLCAncmlnaHQnXTtcbmV4cG9ydCB2YXIgU0laRVMgPSBbJ21pbmknLCAndGlueScsICdzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnLCAnYmlnJywgJ2h1Z2UnLCAnbWFzc2l2ZSddO1xuZXhwb3J0IHZhciBURVhUX0FMSUdOTUVOVFMgPSBbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0JywgJ2p1c3RpZmllZCddO1xuZXhwb3J0IHZhciBWRVJUSUNBTF9BTElHTk1FTlRTID0gWydib3R0b20nLCAnbWlkZGxlJywgJ3RvcCddO1xuZXhwb3J0IHZhciBWSVNJQklMSVRZID0gWydtb2JpbGUnLCAndGFibGV0JywgJ2NvbXB1dGVyJywgJ2xhcmdlIHNjcmVlbicsICd3aWRlc2NyZWVuJ107XG5leHBvcnQgdmFyIFdJRFRIUyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoX2tleXMobnVtYmVyVG9Xb3JkTWFwKSksIF90b0NvbnN1bWFibGVBcnJheShfa2V5cyhudW1iZXJUb1dvcmRNYXApLm1hcChOdW1iZXIpKSwgX3RvQ29uc3VtYWJsZUFycmF5KF92YWx1ZXMobnVtYmVyVG9Xb3JkTWFwKSkpO1xuZXhwb3J0IHZhciBESVJFQ1RJT05BTF9UUkFOU0lUSU9OUyA9IFsnYnJvd3NlJywgJ2Jyb3dzZSByaWdodCcsICdkcm9wJywgJ2ZhZGUnLCAnZmFkZSB1cCcsICdmYWRlIGRvd24nLCAnZmFkZSBsZWZ0JywgJ2ZhZGUgcmlnaHQnLCAnZmx5IHVwJywgJ2ZseSBkb3duJywgJ2ZseSBsZWZ0JywgJ2ZseSByaWdodCcsICdob3Jpem9udGFsIGZsaXAnLCAndmVydGljYWwgZmxpcCcsICdzY2FsZScsICdzbGlkZSB1cCcsICdzbGlkZSBkb3duJywgJ3NsaWRlIGxlZnQnLCAnc2xpZGUgcmlnaHQnLCAnc3dpbmcgdXAnLCAnc3dpbmcgZG93bicsICdzd2luZyBsZWZ0JywgJ3N3aW5nIHJpZ2h0JywgJ3pvb20nXTtcbmV4cG9ydCB2YXIgU1RBVElDX1RSQU5TSVRJT05TID0gWydqaWdnbGUnLCAnZmxhc2gnLCAnc2hha2UnLCAncHVsc2UnLCAndGFkYScsICdib3VuY2UnLCAnZ2xvdyddO1xuZXhwb3J0IHZhciBUUkFOU0lUSU9OUyA9IFtdLmNvbmNhdChESVJFQ1RJT05BTF9UUkFOU0lUSU9OUywgU1RBVElDX1RSQU5TSVRJT05TKTsgLy8gR2VuZXJhdGVkIGZyb206XG4vLyBodHRwczovL2dpdGh1Yi5jb20vU2VtYW50aWMtT3JnL1NlbWFudGljLVVJL2Jsb2IvbWFzdGVyL2Rpc3QvY29tcG9uZW50cy9pY29uLmNzc1xuXG5leHBvcnQgdmFyIEFDQ0VTU0lCSUxJVFkgPSBbJ2FtZXJpY2FuIHNpZ24gbGFuZ3VhZ2UgaW50ZXJwcmV0aW5nJywgJ2Fzc2lzdGl2ZSBsaXN0ZW5pbmcgc3lzdGVtcycsICdhdWRpbyBkZXNjcmlwdGlvbicsICdibGluZCcsICdicmFpbGxlJywgJ2Nsb3NlZCBjYXB0aW9uaW5nJywgJ2Nsb3NlZCBjYXB0aW9uaW5nIG91dGxpbmUnLCAnZGVhZicsICdsb3cgdmlzaW9uJywgJ3Bob25lIHZvbHVtZScsICdxdWVzdGlvbiBjaXJjbGUnLCAncXVlc3Rpb24gY2lyY2xlIG91dGxpbmUnLCAnc2lnbiBsYW5ndWFnZScsICd0dHknLCAndW5pdmVyc2FsIGFjY2VzcycsICd3aGVlbGNoYWlyJ107XG5leHBvcnQgdmFyIEFSUk9XUyA9IFsnYW5nbGUgZG91YmxlIGRvd24nLCAnYW5nbGUgZG91YmxlIGxlZnQnLCAnYW5nbGUgZG91YmxlIHJpZ2h0JywgJ2FuZ2xlIGRvdWJsZSB1cCcsICdhbmdsZSBkb3duJywgJ2FuZ2xlIGxlZnQnLCAnYW5nbGUgcmlnaHQnLCAnYW5nbGUgdXAnLCAnYXJyb3cgYWx0ZXJuYXRlIGNpcmNsZSBkb3duJywgJ2Fycm93IGFsdGVybmF0ZSBjaXJjbGUgZG93biBvdXRsaW5lJywgJ2Fycm93IGFsdGVybmF0ZSBjaXJjbGUgbGVmdCcsICdhcnJvdyBhbHRlcm5hdGUgY2lyY2xlIGxlZnQgb3V0bGluZScsICdhcnJvdyBhbHRlcm5hdGUgY2lyY2xlIHJpZ2h0JywgJ2Fycm93IGFsdGVybmF0ZSBjaXJjbGUgcmlnaHQgb3V0bGluZScsICdhcnJvdyBhbHRlcm5hdGUgY2lyY2xlIHVwJywgJ2Fycm93IGFsdGVybmF0ZSBjaXJjbGUgdXAgb3V0bGluZScsICdhcnJvdyBjaXJjbGUgZG93bicsICdhcnJvdyBjaXJjbGUgbGVmdCcsICdhcnJvdyBjaXJjbGUgcmlnaHQnLCAnYXJyb3cgY2lyY2xlIHVwJywgJ2Fycm93IGRvd24nLCAnYXJyb3cgbGVmdCcsICdhcnJvdyByaWdodCcsICdhcnJvdyB1cCcsICdhcnJvd3MgYWx0ZXJuYXRlJywgJ2Fycm93cyBhbHRlcm5hdGUgaG9yaXpvbnRhbCcsICdhcnJvd3MgYWx0ZXJuYXRlIHZlcnRpY2FsJywgJ2NhcmV0IGRvd24nLCAnY2FyZXQgbGVmdCcsICdjYXJldCByaWdodCcsICdjYXJldCBzcXVhcmUgZG93bicsICdjYXJldCBzcXVhcmUgZG93biBvdXRsaW5lJywgJ2NhcmV0IHNxdWFyZSBsZWZ0JywgJ2NhcmV0IHNxdWFyZSBsZWZ0IG91dGxpbmUnLCAnY2FyZXQgc3F1YXJlIHJpZ2h0JywgJ2NhcmV0IHNxdWFyZSByaWdodCBvdXRsaW5lJywgJ2NhcmV0IHNxdWFyZSB1cCcsICdjYXJldCBzcXVhcmUgdXAgb3V0bGluZScsICdjYXJldCB1cCcsICdjYXJ0IGFycm93IGRvd24nLCAnY2hhcnQgbGluZScsICdjaGV2cm9uIGNpcmNsZSBkb3duJywgJ2NoZXZyb24gY2lyY2xlIGxlZnQnLCAnY2hldnJvbiBjaXJjbGUgcmlnaHQnLCAnY2hldnJvbiBjaXJjbGUgdXAnLCAnY2hldnJvbiBkb3duJywgJ2NoZXZyb24gbGVmdCcsICdjaGV2cm9uIHJpZ2h0JywgJ2NoZXZyb24gdXAnLCAnY2xvdWQgZG93bmxvYWQnLCAnY2xvdWQgdXBsb2FkJywgJ2Rvd25sb2FkJywgJ2V4Y2hhbmdlJywgJ2V4cGFuZCBhcnJvd3MgYWx0ZXJuYXRlJywgJ2V4dGVybmFsIGFsdGVybmF0ZScsICdleHRlcm5hbCBzcXVhcmUgYWx0ZXJuYXRlJywgJ2hhbmQgcG9pbnQgZG93bicsICdoYW5kIHBvaW50IGRvd24gb3V0bGluZScsICdoYW5kIHBvaW50IGxlZnQnLCAnaGFuZCBwb2ludCBsZWZ0IG91dGxpbmUnLCAnaGFuZCBwb2ludCByaWdodCcsICdoYW5kIHBvaW50IHJpZ2h0IG91dGxpbmUnLCAnaGFuZCBwb2ludCB1cCcsICdoYW5kIHBvaW50IHVwIG91dGxpbmUnLCAnaGFuZCBwb2ludGVyJywgJ2hhbmQgcG9pbnRlciBvdXRsaW5lJywgJ2hpc3RvcnknLCAnbGV2ZWwgZG93biBhbHRlcm5hdGUnLCAnbGV2ZWwgdXAgYWx0ZXJuYXRlJywgJ2xvY2F0aW9uIGFycm93JywgJ2xvbmcgYXJyb3cgYWx0ZXJuYXRlIGRvd24nLCAnbG9uZyBhcnJvdyBhbHRlcm5hdGUgbGVmdCcsICdsb25nIGFycm93IGFsdGVybmF0ZSByaWdodCcsICdsb25nIGFycm93IGFsdGVybmF0ZSB1cCcsICdtb3VzZSBwb2ludGVyJywgJ3BsYXknLCAncmFuZG9tJywgJ3JlY3ljbGUnLCAncmVkbycsICdyZWRvIGFsdGVybmF0ZScsICdyZXBseScsICdyZXBseSBhbGwnLCAncmV0d2VldCcsICdzaGFyZScsICdzaGFyZSBzcXVhcmUnLCAnc2hhcmUgc3F1YXJlIG91dGxpbmUnLCAnc2lnbi1pbicsICdzaWduLW91dCcsICdzaWduLWluIGFsdGVybmF0ZScsICdzaWduLW91dCBhbHRlcm5hdGUnLCAnc29ydCcsICdzb3J0IGFscGhhYmV0IGRvd24nLCAnc29ydCBhbHBoYWJldCB1cCcsICdzb3J0IGFtb3VudCBkb3duJywgJ3NvcnQgYW1vdW50IHVwJywgJ3NvcnQgZG93bicsICdzb3J0IG51bWVyaWMgZG93bicsICdzb3J0IG51bWVyaWMgdXAnLCAnc29ydCB1cCcsICdzeW5jJywgJ3N5bmMgYWx0ZXJuYXRlJywgJ3RleHQgaGVpZ2h0JywgJ3RleHQgd2lkdGgnLCAndW5kbycsICd1bmRvIGFsdGVybmF0ZScsICd1cGxvYWQnLCAnem9vbS1pbicsICd6b29tLW91dCddO1xuZXhwb3J0IHZhciBBVURJT19WSURFTyA9IFsnYXVkaW8gZGVzY3JpcHRpb24nLCAnYmFja3dhcmQnLCAnY2lyY2xlJywgJ2NpcmNsZSBvdXRsaW5lJywgJ2Nsb3NlZCBjYXB0aW9uaW5nJywgJ2Nsb3NlZCBjYXB0aW9uaW5nIG91dGxpbmUnLCAnY29tcHJlc3MnLCAnZWplY3QnLCAnZXhwYW5kJywgJ2V4cGFuZCBhcnJvd3MgYWx0ZXJuYXRlJywgJ2Zhc3QgYmFja3dhcmQnLCAnZmFzdCBmb3J3YXJkJywgJ2ZpbGUgYXVkaW8nLCAnZmlsZSBhdWRpbyBvdXRsaW5lJywgJ2ZpbGUgdmlkZW8nLCAnZmlsZSB2aWRlbyBvdXRsaW5lJywgJ2ZpbG0nLCAnZm9yd2FyZCcsICdoZWFkcGhvbmVzJywgJ21pY3JvcGhvbmUnLCAnbWljcm9waG9uZSBzbGFzaCcsICdtdXNpYycsICdwYXVzZScsICdwYXVzZSBjaXJjbGUnLCAncGF1c2UgY2lyY2xlIG91dGxpbmUnLCAncGhvbmUgdm9sdW1lJywgJ3BsYXknLCAncGxheSBjaXJjbGUnLCAncGxheSBjaXJjbGUgb3V0bGluZScsICdwb2RjYXN0JywgJ3JhbmRvbScsICdyZWRvJywgJ3JlZG8gYWx0ZXJuYXRlJywgJ3JzcycsICdyc3Mgc3F1YXJlJywgJ3N0ZXAgYmFja3dhcmQnLCAnc3RlcCBmb3J3YXJkJywgJ3N0b3AnLCAnc3RvcCBjaXJjbGUnLCAnc3RvcCBjaXJjbGUgb3V0bGluZScsICdzeW5jJywgJ3N5bmMgYWx0ZXJuYXRlJywgJ3VuZG8nLCAndW5kbyBhbHRlcm5hdGUnLCAndmlkZW8nLCAndm9sdW1lIGRvd24nLCAndm9sdW1lIG9mZicsICd2b2x1bWUgdXAnXTtcbmV4cG9ydCB2YXIgQlVTSU5FU1MgPSBbJ2FkZHJlc3MgYm9vaycsICdhZGRyZXNzIGJvb2sgb3V0bGluZScsICdhZGRyZXNzIGNhcmQnLCAnYWRkcmVzcyBjYXJkIG91dGxpbmUnLCAnYXJjaGl2ZScsICdiYWxhbmNlIHNjYWxlJywgJ2JpcnRoZGF5IGNha2UnLCAnYm9vaycsICdicmllZmNhc2UnLCAnYnVpbGRpbmcnLCAnYnVpbGRpbmcgb3V0bGluZScsICdidWxsaG9ybicsICdidWxsc2V5ZScsICdjYWxjdWxhdG9yJywgJ2NhbGVuZGFyJywgJ2NhbGVuZGFyIG91dGxpbmUnLCAnY2FsZW5kYXIgYWx0ZXJuYXRlJywgJ2NhbGVuZGFyIGFsdGVybmF0ZSBvdXRsaW5lJywgJ2NlcnRpZmljYXRlJywgJ2NoYXJ0IGFyZWEnLCAnY2hhcnQgYmFyJywgJ2NoYXJ0IGJhciBvdXRsaW5lJywgJ2NoYXJ0IGxpbmUnLCAnY2hhcnQgcGllJywgJ2NsaXBib2FyZCcsICdjbGlwYm9hcmQgb3V0bGluZScsICdjb2ZmZWUnLCAnY29sdW1ucycsICdjb21wYXNzJywgJ2NvbXBhc3Mgb3V0bGluZScsICdjb3B5JywgJ2NvcHkgb3V0bGluZScsICdjb3B5cmlnaHQnLCAnY29weXJpZ2h0IG91dGxpbmUnLCAnY3V0JywgJ2VkaXQnLCAnZWRpdCBvdXRsaW5lJywgJ2VudmVsb3BlJywgJ2VudmVsb3BlIG91dGxpbmUnLCAnZW52ZWxvcGUgb3BlbicsICdlbnZlbG9wZSBvcGVuIG91dGxpbmUnLCAnZW52ZWxvcGUgc3F1YXJlJywgJ2VyYXNlcicsICdmYXgnLCAnZmlsZScsICdmaWxlIG91dGxpbmUnLCAnZmlsZSBhbHRlcm5hdGUnLCAnZmlsZSBhbHRlcm5hdGUgb3V0bGluZScsICdmb2xkZXInLCAnZm9sZGVyIG91dGxpbmUnLCAnZm9sZGVyIG9wZW4nLCAnZm9sZGVyIG9wZW4gb3V0bGluZScsICdnbG9iZScsICdpbmR1c3RyeScsICdwYXBlcmNsaXAnLCAncGFzdGUnLCAncGVuIHNxdWFyZScsICdwZW5jaWwgYWx0ZXJuYXRlJywgJ3BlcmNlbnQnLCAncGhvbmUnLCAncGhvbmUgc3F1YXJlJywgJ3Bob25lIHZvbHVtZScsICdyZWdpc3RlcmVkJywgJ3JlZ2lzdGVyZWQgb3V0bGluZScsICdzYXZlJywgJ3NhdmUgb3V0bGluZScsICdzaXRlbWFwJywgJ3N0aWNreSBub3RlJywgJ3N0aWNreSBub3RlIG91dGxpbmUnLCAnc3VpdGNhc2UnLCAndGFibGUnLCAndGFnJywgJ3RhZ3MnLCAndGFza3MnLCAndGh1bWJ0YWNrJywgJ3RyYWRlbWFyayddO1xuZXhwb3J0IHZhciBDSEVTUyA9IFsnY2hlc3MnLCAnY2hlc3MgYmlzaG9wJywgJ2NoZXNzIGJvYXJkJywgJ2NoZXNzIGtpbmcnLCAnY2hlc3Mga25pZ2h0JywgJ2NoZXNzIHBhd24nLCAnY2hlc3MgcXVlZW4nLCAnY2hlc3Mgcm9vaycsICdzcXVhcmUgZnVsbCddO1xuZXhwb3J0IHZhciBDT0RFID0gWydhcmNoaXZlJywgJ2JhcmNvZGUnLCAnYmF0aCcsICdidWcnLCAnY29kZScsICdjb2RlIGJyYW5jaCcsICdjb2ZmZWUnLCAnZmlsZScsICdmaWxlIG91dGxpbmUnLCAnZmlsZSBhbHRlcm5hdGUnLCAnZmlsZSBhbHRlcm5hdGUgb3V0bGluZScsICdmaWxlIGNvZGUnLCAnZmlsZSBjb2RlIG91dGxpbmUnLCAnZmlsdGVyJywgJ2ZpcmUgZXh0aW5ndWlzaGVyJywgJ2ZvbGRlcicsICdmb2xkZXIgb3V0bGluZScsICdmb2xkZXIgb3BlbicsICdmb2xkZXIgb3BlbiBvdXRsaW5lJywgJ2tleWJvYXJkJywgJ2tleWJvYXJkIG91dGxpbmUnLCAnbWljcm9jaGlwJywgJ3FyY29kZScsICdzaGllbGQgYWx0ZXJuYXRlJywgJ3NpdGVtYXAnLCAndGVybWluYWwnLCAndXNlciBzZWNyZXQnLCAnd2luZG93IGNsb3NlJywgJ3dpbmRvdyBjbG9zZSBvdXRsaW5lJywgJ3dpbmRvdyBtYXhpbWl6ZScsICd3aW5kb3cgbWF4aW1pemUgb3V0bGluZScsICd3aW5kb3cgbWluaW1pemUnLCAnd2luZG93IG1pbmltaXplIG91dGxpbmUnLCAnd2luZG93IHJlc3RvcmUnLCAnd2luZG93IHJlc3RvcmUgb3V0bGluZSddO1xuZXhwb3J0IHZhciBDT01NVU5JQ0FUSU9OID0gWydhZGRyZXNzIGJvb2snLCAnYWRkcmVzcyBib29rIG91dGxpbmUnLCAnYWRkcmVzcyBjYXJkJywgJ2FkZHJlc3MgY2FyZCBvdXRsaW5lJywgJ2FtZXJpY2FuIHNpZ24gbGFuZ3VhZ2UgaW50ZXJwcmV0aW5nJywgJ2Fzc2lzdGl2ZSBsaXN0ZW5pbmcgc3lzdGVtcycsICdhdCcsICdiZWxsJywgJ2JlbGwgb3V0bGluZScsICdiZWxsIHNsYXNoJywgJ2JlbGwgc2xhc2ggb3V0bGluZScsICdidWxsaG9ybicsICdjb21tZW50JywgJ2NvbW1lbnQgb3V0bGluZScsICdjb21tZW50IGFsdGVybmF0ZScsICdjb21tZW50IGFsdGVybmF0ZSBvdXRsaW5lJywgJ2NvbW1lbnRzJywgJ2NvbW1lbnRzIG91dGxpbmUnLCAnZW52ZWxvcGUnLCAnZW52ZWxvcGUgb3V0bGluZScsICdlbnZlbG9wZSBvcGVuJywgJ2VudmVsb3BlIG9wZW4gb3V0bGluZScsICdlbnZlbG9wZSBzcXVhcmUnLCAnZmF4JywgJ2luYm94JywgJ2xhbmd1YWdlJywgJ21pY3JvcGhvbmUnLCAnbWljcm9waG9uZSBzbGFzaCcsICdtb2JpbGUnLCAnbW9iaWxlIGFsdGVybmF0ZScsICdwYXBlciBwbGFuZScsICdwYXBlciBwbGFuZSBvdXRsaW5lJywgJ3Bob25lJywgJ3Bob25lIHNxdWFyZScsICdwaG9uZSB2b2x1bWUnLCAncnNzJywgJ3JzcyBzcXVhcmUnLCAndHR5JywgJ3dpZmknXTtcbmV4cG9ydCB2YXIgQ09NUFVURVJTID0gWydkZXNrdG9wJywgJ2Rvd25sb2FkJywgJ2hkZCcsICdoZGQgb3V0bGluZScsICdoZWFkcGhvbmVzJywgJ2tleWJvYXJkJywgJ2tleWJvYXJkIG91dGxpbmUnLCAnbGFwdG9wJywgJ21pY3JvY2hpcCcsICdtb2JpbGUnLCAnbW9iaWxlIGFsdGVybmF0ZScsICdwbHVnJywgJ3Bvd2VyIG9mZicsICdwcmludCcsICdzYXZlJywgJ3NhdmUgb3V0bGluZScsICdzZXJ2ZXInLCAndGFibGV0JywgJ3RhYmxldCBhbHRlcm5hdGUnLCAndHYnLCAndXBsb2FkJ107XG5leHBvcnQgdmFyIENVUlJFTkNZID0gWydkb2xsYXIgc2lnbicsICdldXJvIHNpZ24nLCAnbGlyYSBzaWduJywgJ21vbmV5IGJpbGwgYWx0ZXJuYXRlJywgJ21vbmV5IGJpbGwgYWx0ZXJuYXRlIG91dGxpbmUnLCAncG91bmQgc2lnbicsICdydWJsZSBzaWduJywgJ3J1cGVlIHNpZ24nLCAnc2hla2VsIHNpZ24nLCAnd29uIHNpZ24nLCAneWVuIHNpZ24nXTtcbmV4cG9ydCB2YXIgREFURV9USU1FID0gWydiZWxsJywgJ2JlbGwgb3V0bGluZScsICdiZWxsIHNsYXNoJywgJ2JlbGwgc2xhc2ggb3V0bGluZScsICdjYWxlbmRhcicsICdjYWxlbmRhciBvdXRsaW5lJywgJ2NhbGVuZGFyIGFsdGVybmF0ZScsICdjYWxlbmRhciBhbHRlcm5hdGUgb3V0bGluZScsICdjYWxlbmRhciBjaGVjaycsICdjYWxlbmRhciBjaGVjayBvdXRsaW5lJywgJ2NhbGVuZGFyIG1pbnVzJywgJ2NhbGVuZGFyIG1pbnVzIG91dGxpbmUnLCAnY2FsZW5kYXIgcGx1cycsICdjYWxlbmRhciBwbHVzIG91dGxpbmUnLCAnY2FsZW5kYXIgdGltZXMnLCAnY2FsZW5kYXIgdGltZXMgb3V0bGluZScsICdjbG9jaycsICdjbG9jayBvdXRsaW5lJywgJ2hvdXJnbGFzcycsICdob3VyZ2xhc3Mgb3V0bGluZScsICdob3VyZ2xhc3MgZW5kJywgJ2hvdXJnbGFzcyBoYWxmJywgJ2hvdXJnbGFzcyBzdGFydCcsICdzdG9wd2F0Y2gnXTtcbmV4cG9ydCB2YXIgREVTSUdOID0gWydhZGp1c3QnLCAnY2xvbmUnLCAnY2xvbmUgb3V0bGluZScsICdjb3B5JywgJ2NvcHkgb3V0bGluZScsICdjcm9wJywgJ2Nyb3NzaGFpcnMnLCAnY3V0JywgJ2VkaXQnLCAnZWRpdCBvdXRsaW5lJywgJ2VyYXNlcicsICdleWUnLCAnZXllIGRyb3BwZXInLCAnZXllIHNsYXNoJywgJ2V5ZSBzbGFzaCBvdXRsaW5lJywgJ29iamVjdCBncm91cCcsICdvYmplY3QgZ3JvdXAgb3V0bGluZScsICdvYmplY3QgdW5ncm91cCcsICdvYmplY3QgdW5ncm91cCBvdXRsaW5lJywgJ3BhaW50IGJydXNoJywgJ3Bhc3RlJywgJ3BlbmNpbCBhbHRlcm5hdGUnLCAnc2F2ZScsICdzYXZlIG91dGxpbmUnLCAndGludCddO1xuZXhwb3J0IHZhciBFRElUT1JTID0gWydhbGlnbiBjZW50ZXInLCAnYWxpZ24ganVzdGlmeScsICdhbGlnbiBsZWZ0JywgJ2FsaWduIHJpZ2h0JywgJ2JvbGQnLCAnY2xpcGJvYXJkJywgJ2NsaXBib2FyZCBvdXRsaW5lJywgJ2Nsb25lJywgJ2Nsb25lIG91dGxpbmUnLCAnY29sdW1ucycsICdjb3B5JywgJ2NvcHkgb3V0bGluZScsICdjdXQnLCAnZWRpdCcsICdlZGl0IG91dGxpbmUnLCAnZXJhc2VyJywgJ2ZpbGUnLCAnZmlsZSBvdXRsaW5lJywgJ2ZpbGUgYWx0ZXJuYXRlJywgJ2ZpbGUgYWx0ZXJuYXRlIG91dGxpbmUnLCAnZm9udCcsICdoZWFkaW5nJywgJ2kgY3Vyc29yJywgJ2luZGVudCcsICdpdGFsaWMnLCAnbGlua2lmeScsICdsaXN0JywgJ2xpc3QgYWx0ZXJuYXRlJywgJ2xpc3QgYWx0ZXJuYXRlIG91dGxpbmUnLCAnbGlzdCBvbCcsICdsaXN0IHVsJywgJ291dGRlbnQnLCAncGFwZXIgcGxhbmUnLCAncGFwZXIgcGxhbmUgb3V0bGluZScsICdwYXBlcmNsaXAnLCAncGFyYWdyYXBoJywgJ3Bhc3RlJywgJ3BlbmNpbCBhbHRlcm5hdGUnLCAncHJpbnQnLCAncXVvdGUgbGVmdCcsICdxdW90ZSByaWdodCcsICdyZWRvJywgJ3JlZG8gYWx0ZXJuYXRlJywgJ3JlcGx5JywgJ3JlcGx5IGFsbCcsICdzaGFyZScsICdzdHJpa2V0aHJvdWdoJywgJ3N1YnNjcmlwdCcsICdzdXBlcnNjcmlwdCcsICdzeW5jJywgJ3N5bmMgYWx0ZXJuYXRlJywgJ3RhYmxlJywgJ3Rhc2tzJywgJ3RleHQgaGVpZ2h0JywgJ3RleHQgd2lkdGgnLCAndGgnLCAndGggbGFyZ2UnLCAndGggbGlzdCcsICd0cmFzaCcsICd0cmFzaCBhbHRlcm5hdGUnLCAndHJhc2ggYWx0ZXJuYXRlIG91dGxpbmUnLCAndW5kZXJsaW5lJywgJ3VuZG8nLCAndW5kbyBhbHRlcm5hdGUnLCAndW5saW5rJ107XG5leHBvcnQgdmFyIEZJTEVTID0gWydhcmNoaXZlJywgJ2Nsb25lJywgJ2Nsb25lIG91dGxpbmUnLCAnY29weScsICdjb3B5IG91dGxpbmUnLCAnY3V0JywgJ2ZpbGUnLCAnZmlsZSBvdXRsaW5lJywgJ2ZpbGUgYWx0ZXJuYXRlJywgJ2ZpbGUgYWx0ZXJuYXRlIG91dGxpbmUnLCAnZmlsZSBhcmNoaXZlJywgJ2ZpbGUgYXJjaGl2ZSBvdXRsaW5lJywgJ2ZpbGUgYXVkaW8nLCAnZmlsZSBhdWRpbyBvdXRsaW5lJywgJ2ZpbGUgY29kZScsICdmaWxlIGNvZGUgb3V0bGluZScsICdmaWxlIGV4Y2VsJywgJ2ZpbGUgZXhjZWwgb3V0bGluZScsICdmaWxlIGltYWdlJywgJ2ZpbGUgaW1hZ2Ugb3V0bGluZScsICdmaWxlIHBkZicsICdmaWxlIHBkZiBvdXRsaW5lJywgJ2ZpbGUgcG93ZXJwb2ludCcsICdmaWxlIHBvd2VycG9pbnQgb3V0bGluZScsICdmaWxlIHZpZGVvJywgJ2ZpbGUgdmlkZW8gb3V0bGluZScsICdmaWxlIHdvcmQnLCAnZmlsZSB3b3JkIG91dGxpbmUnLCAnZm9sZGVyJywgJ2ZvbGRlciBvdXRsaW5lJywgJ2ZvbGRlciBvcGVuJywgJ2ZvbGRlciBvcGVuIG91dGxpbmUnLCAncGFzdGUnLCAnc2F2ZScsICdzYXZlIG91dGxpbmUnLCAnc3RpY2t5IG5vdGUnLCAnc3RpY2t5IG5vdGUgb3V0bGluZSddO1xuZXhwb3J0IHZhciBHRU5ERVJTID0gWydnZW5kZXJsZXNzJywgJ21hcnMnLCAnbWFycyBkb3VibGUnLCAnbWFycyBzdHJva2UnLCAnbWFycyBzdHJva2UgaG9yaXpvbnRhbCcsICdtYXJzIHN0cm9rZSB2ZXJ0aWNhbCcsICdtZXJjdXJ5JywgJ25ldXRlcicsICd0cmFuc2dlbmRlcicsICd0cmFuc2dlbmRlciBhbHRlcm5hdGUnLCAndmVudXMnLCAndmVudXMgZG91YmxlJywgJ3ZlbnVzIG1hcnMnXTtcbmV4cG9ydCB2YXIgSEFORFNfR0VTVFVSRVMgPSBbJ2hhbmQgbGl6YXJkJywgJ2hhbmQgbGl6YXJkIG91dGxpbmUnLCAnaGFuZCBwYXBlcicsICdoYW5kIHBhcGVyIG91dGxpbmUnLCAnaGFuZCBwZWFjZScsICdoYW5kIHBlYWNlIG91dGxpbmUnLCAnaGFuZCBwb2ludCBkb3duJywgJ2hhbmQgcG9pbnQgZG93biBvdXRsaW5lJywgJ2hhbmQgcG9pbnQgbGVmdCcsICdoYW5kIHBvaW50IGxlZnQgb3V0bGluZScsICdoYW5kIHBvaW50IHJpZ2h0JywgJ2hhbmQgcG9pbnQgcmlnaHQgb3V0bGluZScsICdoYW5kIHBvaW50IHVwJywgJ2hhbmQgcG9pbnQgdXAgb3V0bGluZScsICdoYW5kIHBvaW50ZXInLCAnaGFuZCBwb2ludGVyIG91dGxpbmUnLCAnaGFuZCByb2NrJywgJ2hhbmQgcm9jayBvdXRsaW5lJywgJ2hhbmQgc2Npc3NvcnMnLCAnaGFuZCBzY2lzc29ycyBvdXRsaW5lJywgJ2hhbmQgc3BvY2snLCAnaGFuZCBzcG9jayBvdXRsaW5lJywgJ2hhbmRzaGFrZScsICdoYW5kc2hha2Ugb3V0bGluZScsICd0aHVtYnMgZG93bicsICd0aHVtYnMgZG93biBvdXRsaW5lJywgJ3RodW1icyB1cCcsICd0aHVtYnMgdXAgb3V0bGluZSddO1xuZXhwb3J0IHZhciBIRUFMVEggPSBbJ2FtYnVsYW5jZScsICdoIHNxdWFyZScsICdoZWFydCcsICdoZWFydCBvdXRsaW5lJywgJ2hlYXJ0YmVhdCcsICdob3NwaXRhbCcsICdob3NwaXRhbCBvdXRsaW5lJywgJ21lZGtpdCcsICdwbHVzIHNxdWFyZScsICdwbHVzIHNxdWFyZSBvdXRsaW5lJywgJ3N0ZXRob3Njb3BlJywgJ3VzZXIgbWQnLCAnd2hlZWxjaGFpciddO1xuZXhwb3J0IHZhciBJTUFHRVMgPSBbJ2FkanVzdCcsICdib2x0JywgJ2NhbWVyYScsICdjYW1lcmEgcmV0cm8nLCAnY2xvbmUnLCAnY2xvbmUgb3V0bGluZScsICdjb21wcmVzcycsICdleHBhbmQnLCAnZXllJywgJ2V5ZSBkcm9wcGVyJywgJ2V5ZSBzbGFzaCcsICdleWUgc2xhc2ggb3V0bGluZScsICdmaWxlIGltYWdlJywgJ2ZpbGUgaW1hZ2Ugb3V0bGluZScsICdmaWxtJywgJ2lkIGJhZGdlJywgJ2lkIGJhZGdlIG91dGxpbmUnLCAnaWQgY2FyZCcsICdpZCBjYXJkIG91dGxpbmUnLCAnaW1hZ2UnLCAnaW1hZ2Ugb3V0bGluZScsICdpbWFnZXMnLCAnaW1hZ2VzIG91dGxpbmUnLCAnc2xpZGVycyBob3Jpem9udGFsJywgJ3RpbnQnXTtcbmV4cG9ydCB2YXIgSU5URVJGQUNFUyA9IFsnYmFuJywgJ2JhcmNvZGUnLCAnYmFycycsICdiZWVyJywgJ2JlbGwnLCAnYmVsbCBvdXRsaW5lJywgJ2JlbGwgc2xhc2gnLCAnYmVsbCBzbGFzaCBvdXRsaW5lJywgJ2J1ZycsICdidWxsaG9ybicsICdidWxsc2V5ZScsICdjYWxjdWxhdG9yJywgJ2NhbGVuZGFyJywgJ2NhbGVuZGFyIG91dGxpbmUnLCAnY2FsZW5kYXIgYWx0ZXJuYXRlJywgJ2NhbGVuZGFyIGFsdGVybmF0ZSBvdXRsaW5lJywgJ2NhbGVuZGFyIGNoZWNrJywgJ2NhbGVuZGFyIGNoZWNrIG91dGxpbmUnLCAnY2FsZW5kYXIgbWludXMnLCAnY2FsZW5kYXIgbWludXMgb3V0bGluZScsICdjYWxlbmRhciBwbHVzJywgJ2NhbGVuZGFyIHBsdXMgb3V0bGluZScsICdjYWxlbmRhciB0aW1lcycsICdjYWxlbmRhciB0aW1lcyBvdXRsaW5lJywgJ2NlcnRpZmljYXRlJywgJ2NoZWNrJywgJ2NoZWNrIGNpcmNsZScsICdjaGVjayBjaXJjbGUgb3V0bGluZScsICdjaGVjayBzcXVhcmUnLCAnY2hlY2sgc3F1YXJlIG91dGxpbmUnLCAnY2lyY2xlJywgJ2NpcmNsZSBvdXRsaW5lJywgJ2NsaXBib2FyZCcsICdjbGlwYm9hcmQgb3V0bGluZScsICdjbG9uZScsICdjbG9uZSBvdXRsaW5lJywgJ2Nsb3VkJywgJ2Nsb3VkIGRvd25sb2FkJywgJ2Nsb3VkIHVwbG9hZCcsICdjb2ZmZWUnLCAnY29nJywgJ2NvZ3MnLCAnY29weScsICdjb3B5IG91dGxpbmUnLCAnY3V0JywgJ2RhdGFiYXNlJywgJ2RvdCBjaXJjbGUnLCAnZG90IGNpcmNsZSBvdXRsaW5lJywgJ2Rvd25sb2FkJywgJ2VkaXQnLCAnZWRpdCBvdXRsaW5lJywgJ2VsbGlwc2lzIGhvcml6b250YWwnLCAnZWxsaXBzaXMgdmVydGljYWwnLCAnZW52ZWxvcGUnLCAnZW52ZWxvcGUgb3V0bGluZScsICdlbnZlbG9wZSBvcGVuJywgJ2VudmVsb3BlIG9wZW4gb3V0bGluZScsICdlcmFzZXInLCAnZXhjbGFtYXRpb24nLCAnZXhjbGFtYXRpb24gY2lyY2xlJywgJ2V4Y2xhbWF0aW9uIHRyaWFuZ2xlJywgJ2V4dGVybmFsIGFsdGVybmF0ZScsICdleHRlcm5hbCBzcXVhcmUgYWx0ZXJuYXRlJywgJ2V5ZScsICdleWUgc2xhc2gnLCAnZXllIHNsYXNoIG91dGxpbmUnLCAnZmlsZScsICdmaWxlIG91dGxpbmUnLCAnZmlsZSBhbHRlcm5hdGUnLCAnZmlsZSBhbHRlcm5hdGUgb3V0bGluZScsICdmaWx0ZXInLCAnZmxhZycsICdmbGFnIG91dGxpbmUnLCAnZmxhZyBjaGVja2VyZWQnLCAnZm9sZGVyJywgJ2ZvbGRlciBvdXRsaW5lJywgJ2ZvbGRlciBvcGVuJywgJ2ZvbGRlciBvcGVuIG91dGxpbmUnLCAnZnJvd24nLCAnZnJvd24gb3V0bGluZScsICdoYXNodGFnJywgJ2hlYXJ0JywgJ2hlYXJ0IG91dGxpbmUnLCAnaGlzdG9yeScsICdob21lJywgJ2kgY3Vyc29yJywgJ2luZm8nLCAnaW5mbyBjaXJjbGUnLCAnbGFuZ3VhZ2UnLCAnbWFnaWMnLCAnbWVoJywgJ21laCBvdXRsaW5lJywgJ21pY3JvcGhvbmUnLCAnbWljcm9waG9uZSBzbGFzaCcsICdtaW51cycsICdtaW51cyBjaXJjbGUnLCAnbWludXMgc3F1YXJlJywgJ21pbnVzIHNxdWFyZSBvdXRsaW5lJywgJ3Bhc3RlJywgJ3BlbmNpbCBhbHRlcm5hdGUnLCAncGx1cycsICdwbHVzIGNpcmNsZScsICdwbHVzIHNxdWFyZScsICdwbHVzIHNxdWFyZSBvdXRsaW5lJywgJ3FyY29kZScsICdxdWVzdGlvbicsICdxdWVzdGlvbiBjaXJjbGUnLCAncXVlc3Rpb24gY2lyY2xlIG91dGxpbmUnLCAncXVvdGUgbGVmdCcsICdxdW90ZSByaWdodCcsICdyZWRvJywgJ3JlZG8gYWx0ZXJuYXRlJywgJ3JlcGx5JywgJ3JlcGx5IGFsbCcsICdyc3MnLCAncnNzIHNxdWFyZScsICdzYXZlJywgJ3NhdmUgb3V0bGluZScsICdzZWFyY2gnLCAnc2VhcmNoIG1pbnVzJywgJ3NlYXJjaCBwbHVzJywgJ3NoYXJlJywgJ3NoYXJlIGFsdGVybmF0ZScsICdzaGFyZSBhbHRlcm5hdGUgc3F1YXJlJywgJ3NoYXJlIHNxdWFyZScsICdzaGFyZSBzcXVhcmUgb3V0bGluZScsICdzaGllbGQgYWx0ZXJuYXRlJywgJ3NpZ24taW4nLCAnc2lnbi1vdXQnLCAnc2lnbmFsJywgJ3NpdGVtYXAnLCAnc2xpZGVycyBob3Jpem9udGFsJywgJ3NtaWxlJywgJ3NtaWxlIG91dGxpbmUnLCAnc29ydCcsICdzb3J0IGFscGhhYmV0IGRvd24nLCAnc29ydCBhbHBoYWJldCB1cCcsICdzb3J0IGFtb3VudCBkb3duJywgJ3NvcnQgYW1vdW50IHVwJywgJ3NvcnQgZG93bicsICdzb3J0IG51bWVyaWMgZG93bicsICdzb3J0IG51bWVyaWMgdXAnLCAnc29ydCB1cCcsICdzdGFyJywgJ3N0YXIgb3V0bGluZScsICdzdGFyIGhhbGYnLCAnc3RhciBoYWxmIG91dGxpbmUnLCAnc3luYycsICdzeW5jIGFsdGVybmF0ZScsICd0aHVtYnMgZG93bicsICd0aHVtYnMgZG93biBvdXRsaW5lJywgJ3RodW1icyB1cCcsICd0aHVtYnMgdXAgb3V0bGluZScsICd0aW1lcycsICd0aW1lcyBjaXJjbGUnLCAndGltZXMgY2lyY2xlIG91dGxpbmUnLCAndG9nZ2xlIG9mZicsICd0b2dnbGUgb24nLCAndHJhc2gnLCAndHJhc2ggYWx0ZXJuYXRlJywgJ3RyYXNoIGFsdGVybmF0ZSBvdXRsaW5lJywgJ3Ryb3BoeScsICd1bmRvJywgJ3VuZG8gYWx0ZXJuYXRlJywgJ3VwbG9hZCcsICd1c2VyJywgJ3VzZXIgb3V0bGluZScsICd1c2VyIGNpcmNsZScsICd1c2VyIGNpcmNsZSBvdXRsaW5lJywgJ3dpZmknXTtcbmV4cG9ydCB2YXIgTE9HSVNUSUNTID0gWydib3gnLCAnYm94ZXMnLCAnY2xpcGJvYXJkIGNoZWNrJywgJ2NsaXBib2FyZCBsaXN0JywgJ2RvbGx5JywgJ2RvbGx5IGZsYXRiZWQnLCAncGFsbGV0JywgJ3NoaXBwaW5nIGZhc3QnLCAndHJ1Y2snLCAnd2FyZWhvdXNlJ107XG5leHBvcnQgdmFyIE1BUFMgPSBbJ2FtYnVsYW5jZScsICdhbmNob3InLCAnYmFsYW5jZSBzY2FsZScsICdiYXRoJywgJ2JlZCcsICdiZWVyJywgJ2JlbGwnLCAnYmVsbCBvdXRsaW5lJywgJ2JlbGwgc2xhc2gnLCAnYmVsbCBzbGFzaCBvdXRsaW5lJywgJ2JpY3ljbGUnLCAnYmlub2N1bGFycycsICdiaXJ0aGRheSBjYWtlJywgJ2JsaW5kJywgJ2JvbWInLCAnYm9vaycsICdib29rbWFyaycsICdib29rbWFyayBvdXRsaW5lJywgJ2JyaWVmY2FzZScsICdidWlsZGluZycsICdidWlsZGluZyBvdXRsaW5lJywgJ2NhcicsICdjb2ZmZWUnLCAnY3Jvc3NoYWlycycsICdkb2xsYXIgc2lnbicsICdleWUnLCAnZXllIHNsYXNoJywgJ2V5ZSBzbGFzaCBvdXRsaW5lJywgJ2ZpZ2h0ZXIgamV0JywgJ2ZpcmUnLCAnZmlyZSBleHRpbmd1aXNoZXInLCAnZmxhZycsICdmbGFnIG91dGxpbmUnLCAnZmxhZyBjaGVja2VyZWQnLCAnZmxhc2snLCAnZ2FtZXBhZCcsICdnYXZlbCcsICdnaWZ0JywgJ2dsYXNzIG1hcnRpbmknLCAnZ2xvYmUnLCAnZ3JhZHVhdGlvbiBjYXAnLCAnaCBzcXVhcmUnLCAnaGVhcnQnLCAnaGVhcnQgb3V0bGluZScsICdoZWFydGJlYXQnLCAnaG9tZScsICdob3NwaXRhbCcsICdob3NwaXRhbCBvdXRsaW5lJywgJ2ltYWdlJywgJ2ltYWdlIG91dGxpbmUnLCAnaW1hZ2VzJywgJ2ltYWdlcyBvdXRsaW5lJywgJ2luZHVzdHJ5JywgJ2luZm8nLCAnaW5mbyBjaXJjbGUnLCAna2V5JywgJ2xlYWYnLCAnbGVtb24nLCAnbGVtb24gb3V0bGluZScsICdsaWZlIHJpbmcnLCAnbGlmZSByaW5nIG91dGxpbmUnLCAnbGlnaHRidWxiJywgJ2xpZ2h0YnVsYiBvdXRsaW5lJywgJ2xvY2F0aW9uIGFycm93JywgJ2xvdyB2aXNpb24nLCAnbWFnbmV0JywgJ21hbGUnLCAnbWFwJywgJ21hcCBvdXRsaW5lJywgJ21hcCBtYXJrZXInLCAnbWFwIG1hcmtlciBhbHRlcm5hdGUnLCAnbWFwIHBpbicsICdtYXAgc2lnbnMnLCAnbWVka2l0JywgJ21vbmV5IGJpbGwgYWx0ZXJuYXRlJywgJ21vbmV5IGJpbGwgYWx0ZXJuYXRlIG91dGxpbmUnLCAnbW90b3JjeWNsZScsICdtdXNpYycsICduZXdzcGFwZXInLCAnbmV3c3BhcGVyIG91dGxpbmUnLCAncGF3JywgJ3Bob25lJywgJ3Bob25lIHNxdWFyZScsICdwaG9uZSB2b2x1bWUnLCAncGxhbmUnLCAncGx1ZycsICdwbHVzJywgJ3BsdXMgc3F1YXJlJywgJ3BsdXMgc3F1YXJlIG91dGxpbmUnLCAncHJpbnQnLCAncmVjeWNsZScsICdyb2FkJywgJ3JvY2tldCcsICdzZWFyY2gnLCAnc2VhcmNoIG1pbnVzJywgJ3NlYXJjaCBwbHVzJywgJ3NoaXAnLCAnc2hvcHBpbmcgYmFnJywgJ3Nob3BwaW5nIGJhc2tldCcsICdzaG9wcGluZyBjYXJ0JywgJ3Nob3dlcicsICdzdHJlZXQgdmlldycsICdzdWJ3YXknLCAnc3VpdGNhc2UnLCAndGFnJywgJ3RhZ3MnLCAndGF4aScsICd0aHVtYnRhY2snLCAndGlja2V0IGFsdGVybmF0ZScsICd0aW50JywgJ3RyYWluJywgJ3RyZWUnLCAndHJvcGh5JywgJ3RydWNrJywgJ3R0eScsICd1bWJyZWxsYScsICd1bml2ZXJzaXR5JywgJ3V0ZW5zaWwgc3Bvb24nLCAndXRlbnNpbHMnLCAnd2hlZWxjaGFpcicsICd3aWZpJywgJ3dyZW5jaCddO1xuZXhwb3J0IHZhciBNRURJQ0FMID0gWydhbWJ1bGFuY2UnLCAnYmFuZCBhaWQnLCAnZG5hJywgJ2ZpcnN0IGFpZCcsICdoZWFydCcsICdoZWFydCBvdXRsaW5lJywgJ2hlYXJ0YmVhdCcsICdob3NwaXRhbCcsICdob3NwaXRhbCBvdXRsaW5lJywgJ2hvc3BpdGFsIHN5bWJvbCcsICdwaWxscycsICdwbHVzJywgJ3N0ZXRob3Njb3BlJywgJ3N5cmluZ2UnLCAndGhlcm1vbWV0ZXInLCAndXNlciBtZCcsICd3ZWlnaHQnXTtcbmV4cG9ydCB2YXIgT0JKRUNUUyA9IFsnYW1idWxhbmNlJywgJ2FuY2hvcicsICdhcmNoaXZlJywgJ2JhbGFuY2Ugc2NhbGUnLCAnYmF0aCcsICdiZWQnLCAnYmVlcicsICdiZWxsJywgJ2JlbGwgb3V0bGluZScsICdiaWN5Y2xlJywgJ2Jpbm9jdWxhcnMnLCAnYmlydGhkYXkgY2FrZScsICdib21iJywgJ2Jvb2snLCAnYm9va21hcmsnLCAnYm9va21hcmsgb3V0bGluZScsICdicmllZmNhc2UnLCAnYnVnJywgJ2J1aWxkaW5nJywgJ2J1aWxkaW5nIG91dGxpbmUnLCAnYnVsbGhvcm4nLCAnYnVsbHNleWUnLCAnYnVzJywgJ2NhbGN1bGF0b3InLCAnY2FsZW5kYXInLCAnY2FsZW5kYXIgb3V0bGluZScsICdjYWxlbmRhciBhbHRlcm5hdGUnLCAnY2FsZW5kYXIgYWx0ZXJuYXRlIG91dGxpbmUnLCAnY2FtZXJhJywgJ2NhbWVyYSByZXRybycsICdjYXInLCAnY2xpcGJvYXJkJywgJ2NsaXBib2FyZCBvdXRsaW5lJywgJ2Nsb3VkJywgJ2NvZmZlZScsICdjb2cnLCAnY29ncycsICdjb21wYXNzJywgJ2NvbXBhc3Mgb3V0bGluZScsICdjb3B5JywgJ2NvcHkgb3V0bGluZScsICdjdWJlJywgJ2N1YmVzJywgJ2N1dCcsICdlbnZlbG9wZScsICdlbnZlbG9wZSBvdXRsaW5lJywgJ2VudmVsb3BlIG9wZW4nLCAnZW52ZWxvcGUgb3BlbiBvdXRsaW5lJywgJ2VyYXNlcicsICdleWUnLCAnZXllIGRyb3BwZXInLCAnZmF4JywgJ2ZpZ2h0ZXIgamV0JywgJ2ZpbGUnLCAnZmlsZSBvdXRsaW5lJywgJ2ZpbGUgYWx0ZXJuYXRlJywgJ2ZpbGUgYWx0ZXJuYXRlIG91dGxpbmUnLCAnZmlsbScsICdmaXJlJywgJ2ZpcmUgZXh0aW5ndWlzaGVyJywgJ2ZsYWcnLCAnZmxhZyBvdXRsaW5lJywgJ2ZsYWcgY2hlY2tlcmVkJywgJ2ZsYXNrJywgJ2Z1dGJvbCcsICdmdXRib2wgb3V0bGluZScsICdnYW1lcGFkJywgJ2dhdmVsJywgJ2dlbScsICdnZW0gb3V0bGluZScsICdnaWZ0JywgJ2dsYXNzIG1hcnRpbmknLCAnZ2xvYmUnLCAnZ3JhZHVhdGlvbiBjYXAnLCAnaGRkJywgJ2hkZCBvdXRsaW5lJywgJ2hlYWRwaG9uZXMnLCAnaGVhcnQnLCAnaGVhcnQgb3V0bGluZScsICdob21lJywgJ2hvc3BpdGFsJywgJ2hvc3BpdGFsIG91dGxpbmUnLCAnaG91cmdsYXNzJywgJ2hvdXJnbGFzcyBvdXRsaW5lJywgJ2ltYWdlJywgJ2ltYWdlIG91dGxpbmUnLCAnaW1hZ2VzJywgJ2ltYWdlcyBvdXRsaW5lJywgJ2luZHVzdHJ5JywgJ2tleScsICdrZXlib2FyZCcsICdrZXlib2FyZCBvdXRsaW5lJywgJ2xhcHRvcCcsICdsZWFmJywgJ2xlbW9uJywgJ2xlbW9uIG91dGxpbmUnLCAnbGlmZSByaW5nJywgJ2xpZmUgcmluZyBvdXRsaW5lJywgJ2xpZ2h0YnVsYicsICdsaWdodGJ1bGIgb3V0bGluZScsICdsb2NrJywgJ2xvY2sgb3BlbicsICdtYWdpYycsICdtYWduZXQnLCAnbWFwJywgJ21hcCBvdXRsaW5lJywgJ21hcCBtYXJrZXInLCAnbWFwIG1hcmtlciBhbHRlcm5hdGUnLCAnbWFwIHBpbicsICdtYXAgc2lnbnMnLCAnbWVka2l0JywgJ21pY3JvY2hpcCcsICdtaWNyb3Bob25lJywgJ21vYmlsZScsICdtb2JpbGUgYWx0ZXJuYXRlJywgJ21vbmV5IGJpbGwgYWx0ZXJuYXRlJywgJ21vbmV5IGJpbGwgYWx0ZXJuYXRlIG91dGxpbmUnLCAnbW9vbicsICdtb29uIG91dGxpbmUnLCAnbW90b3JjeWNsZScsICduZXdzcGFwZXInLCAnbmV3c3BhcGVyIG91dGxpbmUnLCAncGFpbnQgYnJ1c2gnLCAncGFwZXIgcGxhbmUnLCAncGFwZXIgcGxhbmUgb3V0bGluZScsICdwYXBlcmNsaXAnLCAncGFzdGUnLCAncGF3JywgJ3BlbmNpbCBhbHRlcm5hdGUnLCAncGhvbmUnLCAncGxhbmUnLCAncGx1ZycsICdwcmludCcsICdwdXp6bGUgcGllY2UnLCAncm9hZCcsICdyb2NrZXQnLCAnc2F2ZScsICdzYXZlIG91dGxpbmUnLCAnc2VhcmNoJywgJ3NoaWVsZCBhbHRlcm5hdGUnLCAnc2hvcHBpbmcgYmFnJywgJ3Nob3BwaW5nIGJhc2tldCcsICdzaG9wcGluZyBjYXJ0JywgJ3Nob3dlcicsICdzbm93Zmxha2UnLCAnc25vd2ZsYWtlIG91dGxpbmUnLCAnc3BhY2Ugc2h1dHRsZScsICdzdGFyJywgJ3N0YXIgb3V0bGluZScsICdzdGlja3kgbm90ZScsICdzdGlja3kgbm90ZSBvdXRsaW5lJywgJ3N0b3B3YXRjaCcsICdzdWJ3YXknLCAnc3VpdGNhc2UnLCAnc3VuJywgJ3N1biBvdXRsaW5lJywgJ3RhYmxldCcsICd0YWJsZXQgYWx0ZXJuYXRlJywgJ3RhY2hvbWV0ZXIgYWx0ZXJuYXRlJywgJ3RhZycsICd0YWdzJywgJ3RheGknLCAndGh1bWJ0YWNrJywgJ3RpY2tldCBhbHRlcm5hdGUnLCAndHJhaW4nLCAndHJhc2gnLCAndHJhc2ggYWx0ZXJuYXRlJywgJ3RyYXNoIGFsdGVybmF0ZSBvdXRsaW5lJywgJ3RyZWUnLCAndHJvcGh5JywgJ3RydWNrJywgJ3R2JywgJ3VtYnJlbGxhJywgJ3VuaXZlcnNpdHknLCAndW5sb2NrJywgJ3VubG9jayBhbHRlcm5hdGUnLCAndXRlbnNpbCBzcG9vbicsICd1dGVuc2lscycsICd3aGVlbGNoYWlyJywgJ3dyZW5jaCddO1xuZXhwb3J0IHZhciBQQVlNRU5UU19TSE9QUElORyA9IFsnYmVsbCcsICdiZWxsIG91dGxpbmUnLCAnYm9va21hcmsnLCAnYm9va21hcmsgb3V0bGluZScsICdidWxsaG9ybicsICdjYW1lcmEnLCAnY2FtZXJhIHJldHJvJywgJ2NhcnQgYXJyb3cgZG93bicsICdjYXJ0IHBsdXMnLCAnY2VydGlmaWNhdGUnLCAnY3JlZGl0IGNhcmQnLCAnY3JlZGl0IGNhcmQgb3V0bGluZScsICdnZW0nLCAnZ2VtIG91dGxpbmUnLCAnZ2lmdCcsICdoYW5kc2hha2UnLCAnaGFuZHNoYWtlIG91dGxpbmUnLCAnaGVhcnQnLCAnaGVhcnQgb3V0bGluZScsICdrZXknLCAnc2hvcHBpbmcgYmFnJywgJ3Nob3BwaW5nIGJhc2tldCcsICdzaG9wcGluZyBjYXJ0JywgJ3N0YXInLCAnc3RhciBvdXRsaW5lJywgJ3RhZycsICd0YWdzJywgJ3RodW1icyBkb3duJywgJ3RodW1icyBkb3duIG91dGxpbmUnLCAndGh1bWJzIHVwJywgJ3RodW1icyB1cCBvdXRsaW5lJywgJ3Ryb3BoeSddO1xuZXhwb3J0IHZhciBTSEFQRVMgPSBbJ2Jvb2ttYXJrJywgJ2Jvb2ttYXJrIG91dGxpbmUnLCAnY2FsZW5kYXInLCAnY2FsZW5kYXIgb3V0bGluZScsICdjZXJ0aWZpY2F0ZScsICdjaXJjbGUnLCAnY2lyY2xlIG91dGxpbmUnLCAnY2xvdWQnLCAnY29tbWVudCcsICdjb21tZW50IG91dGxpbmUnLCAnZmlsZScsICdmaWxlIG91dGxpbmUnLCAnZm9sZGVyJywgJ2ZvbGRlciBvdXRsaW5lJywgJ2hlYXJ0JywgJ2hlYXJ0IG91dGxpbmUnLCAnbWFwIG1hcmtlcicsICdwbGF5JywgJ3NxdWFyZScsICdzcXVhcmUgb3V0bGluZScsICdzdGFyJywgJ3N0YXIgb3V0bGluZSddO1xuZXhwb3J0IHZhciBTUElOTkVSUyA9IFsnYXN0ZXJpc2snLCAnY2VydGlmaWNhdGUnLCAnY2lyY2xlIG5vdGNoJywgJ2NvZycsICdjb21wYXNzJywgJ2NvbXBhc3Mgb3V0bGluZScsICdjcm9zc2hhaXJzJywgJ2xpZmUgcmluZycsICdsaWZlIHJpbmcgb3V0bGluZScsICdzbm93Zmxha2UnLCAnc25vd2ZsYWtlIG91dGxpbmUnLCAnc3Bpbm5lcicsICdzdW4nLCAnc3VuIG91dGxpbmUnLCAnc3luYyddO1xuZXhwb3J0IHZhciBTUE9SVFMgPSBbJ2Jhc2ViYWxsIGJhbGwnLCAnYmFza2V0YmFsbCBiYWxsJywgJ2Jvd2xpbmcgYmFsbCcsICdmb290YmFsbCBiYWxsJywgJ2Z1dGJvbCcsICdmdXRib2wgb3V0bGluZScsICdnb2xmIGJhbGwnLCAnaG9ja2V5IHB1Y2snLCAncXVpZGRpdGNoJywgJ3RhYmxlIHRlbm5pcycsICd2b2xsZXliYWxsIGJhbGwnXTtcbmV4cG9ydCB2YXIgU1RBVFVTID0gWydiYW4nLCAnYmF0dGVyeSBlbXB0eScsICdiYXR0ZXJ5IGZ1bGwnLCAnYmF0dGVyeSBoYWxmJywgJ2JhdHRlcnkgcXVhcnRlcicsICdiYXR0ZXJ5IHRocmVlIHF1YXJ0ZXJzJywgJ2JlbGwnLCAnYmVsbCBvdXRsaW5lJywgJ2JlbGwgc2xhc2gnLCAnYmVsbCBzbGFzaCBvdXRsaW5lJywgJ2NhbGVuZGFyJywgJ2NhbGVuZGFyIG91dGxpbmUnLCAnY2FsZW5kYXIgYWx0ZXJuYXRlJywgJ2NhbGVuZGFyIGFsdGVybmF0ZSBvdXRsaW5lJywgJ2NhbGVuZGFyIGNoZWNrJywgJ2NhbGVuZGFyIGNoZWNrIG91dGxpbmUnLCAnY2FsZW5kYXIgbWludXMnLCAnY2FsZW5kYXIgbWludXMgb3V0bGluZScsICdjYWxlbmRhciBwbHVzJywgJ2NhbGVuZGFyIHBsdXMgb3V0bGluZScsICdjYWxlbmRhciB0aW1lcycsICdjYWxlbmRhciB0aW1lcyBvdXRsaW5lJywgJ2NhcnQgYXJyb3cgZG93bicsICdjYXJ0IHBsdXMnLCAnZXhjbGFtYXRpb24nLCAnZXhjbGFtYXRpb24gY2lyY2xlJywgJ2V4Y2xhbWF0aW9uIHRyaWFuZ2xlJywgJ2V5ZScsICdleWUgc2xhc2gnLCAnZXllIHNsYXNoIG91dGxpbmUnLCAnZmlsZScsICdmaWxlIG91dGxpbmUnLCAnZmlsZSBhbHRlcm5hdGUnLCAnZmlsZSBhbHRlcm5hdGUgb3V0bGluZScsICdmb2xkZXInLCAnZm9sZGVyIG91dGxpbmUnLCAnZm9sZGVyIG9wZW4nLCAnZm9sZGVyIG9wZW4gb3V0bGluZScsICdpbmZvJywgJ2luZm8gY2lyY2xlJywgJ2xvY2snLCAnbG9jayBvcGVuJywgJ21pbnVzJywgJ21pbnVzIGNpcmNsZScsICdtaW51cyBzcXVhcmUnLCAnbWludXMgc3F1YXJlIG91dGxpbmUnLCAncGx1cycsICdwbHVzIGNpcmNsZScsICdwbHVzIHNxdWFyZScsICdwbHVzIHNxdWFyZSBvdXRsaW5lJywgJ3F1ZXN0aW9uJywgJ3F1ZXN0aW9uIGNpcmNsZScsICdxdWVzdGlvbiBjaXJjbGUgb3V0bGluZScsICdzaGllbGQgYWx0ZXJuYXRlJywgJ3Nob3BwaW5nIGNhcnQnLCAnc2lnbiBpbiBhbHRlcm5hdGUnLCAnc2lnbiBvdXQgYWx0ZXJuYXRlJywgJ3RoZXJtb21ldGVyIGVtcHR5JywgJ3RoZXJtb21ldGVyIGZ1bGwnLCAndGhlcm1vbWV0ZXIgaGFsZicsICd0aGVybW9tZXRlciBxdWFydGVyJywgJ3RoZXJtb21ldGVyIHRocmVlIHF1YXJ0ZXJzJywgJ3RodW1icyBkb3duJywgJ3RodW1icyBkb3duIG91dGxpbmUnLCAndGh1bWJzIHVwJywgJ3RodW1icyB1cCBvdXRsaW5lJywgJ3RvZ2dsZSBvZmYnLCAndG9nZ2xlIG9uJywgJ3VubG9jaycsICd1bmxvY2sgYWx0ZXJuYXRlJ107XG5leHBvcnQgdmFyIFVTRVJTX1BFT1BMRSA9IFsnYWRkcmVzcyBib29rJywgJ2FkZHJlc3MgYm9vayBvdXRsaW5lJywgJ2FkZHJlc3MgY2FyZCcsICdhZGRyZXNzIGNhcmQgb3V0bGluZScsICdiZWQnLCAnYmxpbmQnLCAnY2hpbGQnLCAnZmVtYWxlJywgJ2Zyb3duJywgJ2Zyb3duIG91dGxpbmUnLCAnaWQgYmFkZ2UnLCAnaWQgYmFkZ2Ugb3V0bGluZScsICdpZCBjYXJkJywgJ2lkIGNhcmQgb3V0bGluZScsICdtYWxlJywgJ21laCcsICdtZWggb3V0bGluZScsICdwb3dlciBvZmYnLCAnc21pbGUnLCAnc21pbGUgb3V0bGluZScsICdzdHJlZXQgdmlldycsICd1c2VyJywgJ3VzZXIgb3V0bGluZScsICd1c2VyIGNpcmNsZScsICd1c2VyIGNpcmNsZSBvdXRsaW5lJywgJ3VzZXIgbWQnLCAndXNlciBwbHVzJywgJ3VzZXIgc2VjcmV0JywgJ3VzZXIgdGltZXMnLCAndXNlcnMnLCAnd2hlZWxjaGFpciddO1xuZXhwb3J0IHZhciBWRUhJQ0xFUyA9IFsnYW1idWxhbmNlJywgJ2JpY3ljbGUnLCAnYnVzJywgJ2NhcicsICdmaWdodGVyIGpldCcsICdtb3RvcmN5Y2xlJywgJ3BhcGVyIHBsYW5lJywgJ3BhcGVyIHBsYW5lIG91dGxpbmUnLCAncGxhbmUnLCAncm9ja2V0JywgJ3NoaXAnLCAnc2hvcHBpbmcgY2FydCcsICdzcGFjZSBzaHV0dGxlJywgJ3N1YndheScsICd0YXhpJywgJ3RyYWluJywgJ3RydWNrJywgJ3doZWVsY2hhaXInXTtcbmV4cG9ydCB2YXIgV1JJVElORyA9IFsnYXJjaGl2ZScsICdib29rJywgJ2Jvb2ttYXJrJywgJ2Jvb2ttYXJrIG91dGxpbmUnLCAnZWRpdCcsICdlZGl0IG91dGxpbmUnLCAnZW52ZWxvcGUnLCAnZW52ZWxvcGUgb3V0bGluZScsICdlbnZlbG9wZSBvcGVuJywgJ2VudmVsb3BlIG9wZW4gb3V0bGluZScsICdlcmFzZXInLCAnZmlsZScsICdmaWxlIG91dGxpbmUnLCAnZmlsZSBhbHRlcm5hdGUnLCAnZmlsZSBhbHRlcm5hdGUgb3V0bGluZScsICdmb2xkZXInLCAnZm9sZGVyIG91dGxpbmUnLCAnZm9sZGVyIG9wZW4nLCAnZm9sZGVyIG9wZW4gb3V0bGluZScsICdrZXlib2FyZCcsICdrZXlib2FyZCBvdXRsaW5lJywgJ25ld3NwYXBlcicsICduZXdzcGFwZXIgb3V0bGluZScsICdwYXBlciBwbGFuZScsICdwYXBlciBwbGFuZSBvdXRsaW5lJywgJ3BhcGVyY2xpcCcsICdwYXJhZ3JhcGgnLCAncGVuIHNxdWFyZScsICdwZW5jaWwgYWx0ZXJuYXRlJywgJ3F1b3RlIGxlZnQnLCAncXVvdGUgcmlnaHQnLCAnc3RpY2t5IG5vdGUnLCAnc3RpY2t5IG5vdGUgb3V0bGluZScsICd0aHVtYnRhY2snXTtcbmV4cG9ydCB2YXIgQlJBTkRTID0gWyc1MDBweCcsICdhY2Nlc3NpYmxlJywgJ2FjY3Vzb2Z0JywgJ2FkbicsICdhZHZlcnNhbCcsICdhZmZpbGlhdGV0aGVtZScsICdhbGdvbGlhJywgJ2FtYXpvbicsICdhbWF6b24gcGF5JywgJ2FtaWxpYScsICdhbmRyb2lkJywgJ2FuZ2VsbGlzdCcsICdhbmdyeWNyZWF0aXZlJywgJ2FuZ3VsYXInLCAnYXBwIHN0b3JlJywgJ2FwcCBzdG9yZSBpb3MnLCAnYXBwZXInLCAnYXBwbGUnLCAnYXBwbGUgcGF5JywgJ2FzeW1tZXRyaWsnLCAnYXVkaWJsZScsICdhdXRvcHJlZml4ZXInLCAnYXZpYW5leCcsICdhdmlhdG8nLCAnYXdzJywgJ2JhbmRjYW1wJywgJ2JlaGFuY2UnLCAnYmVoYW5jZSBzcXVhcmUnLCAnYmltb2JqZWN0JywgJ2JpdGJ1Y2tldCcsICdiaXRjb2luJywgJ2JpdHknLCAnYmxhY2sgdGllJywgJ2JsYWNrYmVycnknLCAnYmxvZ2dlcicsICdibG9nZ2VyIGInLCAnYmx1ZXRvb3RoJywgJ2JsdWV0b290aCBiJywgJ2J0YycsICdidXJvbW9iZWxleHBlcnRlJywgJ2J1eXNlbGxhZHMnLCAnY2MgYW1hem9uIHBheScsICdjYyBhbWV4JywgJ2NjIGFwcGxlIHBheScsICdjYyBkaW5lcnMgY2x1YicsICdjYyBkaXNjb3ZlcicsICdjYyBqY2InLCAnY2MgbWFzdGVyY2FyZCcsICdjYyBwYXlwYWwnLCAnY2Mgc3RyaXBlJywgJ2NjIHZpc2EnLCAnY2VudGVyY29kZScsICdjaHJvbWUnLCAnY2xvdWRzY2FsZScsICdjbG91ZHNtaXRoJywgJ2Nsb3VkdmVyc2lmeScsICdjb2RlcGVuJywgJ2NvZGllcGllJywgJ2Nvbm5lY3RkZXZlbG9wJywgJ2NvbnRhbycsICdjcGFuZWwnLCAnY3JlYXRpdmUgY29tbW9ucycsICdjc3MzJywgJ2NzczMgYWx0ZXJuYXRlJywgJ2N1dHRsZWZpc2gnLCAnZCBhbmQgZCcsICdkYXNoY3ViZScsICdkZWxpY2lvdXMnLCAnZGVwbG95ZG9nJywgJ2Rlc2twcm8nLCAnZGV2aWFudGFydCcsICdkaWdnJywgJ2RpZ2l0YWwgb2NlYW4nLCAnZGlzY29yZCcsICdkaXNjb3Vyc2UnLCAnZG9jaHViJywgJ2RvY2tlcicsICdkcmFmdDJkaWdpdGFsJywgJ2RyaWJiYmxlJywgJ2RyaWJiYmxlIHNxdWFyZScsICdkcm9wYm94JywgJ2RydXBhbCcsICdkeWFsb2cnLCAnZWFybHliaXJkcycsICdlZGdlJywgJ2VsZW1lbnRvcicsICdlbWJlcicsICdlbXBpcmUnLCAnZW52aXJhJywgJ2VybGFuZycsICdldGhlcmV1bScsICdldHN5JywgJ2V4cGVkaXRlZHNzbCcsICdmYWNlYm9vaycsICdmYWNlYm9vayBmJywgJ2ZhY2Vib29rIG1lc3NlbmdlcicsICdmYWNlYm9vayBzcXVhcmUnLCAnZmlyZWZveCcsICdmaXJzdCBvcmRlcicsICdmaXJzdGRyYWZ0JywgJ2ZsaWNrcicsICdmbGlwYm9hcmQnLCAnZmx5JywgJ2ZvbnQgYXdlc29tZScsICdmb250IGF3ZXNvbWUgYWx0ZXJuYXRlJywgJ2ZvbnQgYXdlc29tZSBmbGFnJywgJ2ZvbnRpY29ucycsICdmb250aWNvbnMgZmknLCAnZm9ydCBhd2Vzb21lJywgJ2ZvcnQgYXdlc29tZSBhbHRlcm5hdGUnLCAnZm9ydW1iZWUnLCAnZm91cnNxdWFyZScsICdmcmVlIGNvZGUgY2FtcCcsICdmcmVlYnNkJywgJ2dldCBwb2NrZXQnLCAnZ2cnLCAnZ2cgY2lyY2xlJywgJ2dpdCcsICdnaXQgc3F1YXJlJywgJ2dpdGh1YicsICdnaXRodWIgYWx0ZXJuYXRlJywgJ2dpdGh1YiBzcXVhcmUnLCAnZ2l0a3Jha2VuJywgJ2dpdGxhYicsICdnaXR0ZXInLCAnZ2xpZGUnLCAnZ2xpZGUgZycsICdnb2ZvcmUnLCAnZ29vZHJlYWRzJywgJ2dvb2RyZWFkcyBnJywgJ2dvb2dsZScsICdnb29nbGUgZHJpdmUnLCAnZ29vZ2xlIHBsYXknLCAnZ29vZ2xlIHBsdXMnLCAnZ29vZ2xlIHBsdXMgZycsICdnb29nbGUgcGx1cyBzcXVhcmUnLCAnZ29vZ2xlIHdhbGxldCcsICdncmF0aXBheScsICdncmF2JywgJ2dyaXBmaXJlJywgJ2dydW50JywgJ2d1bHAnLCAnaGFja2VyIG5ld3MnLCAnaGFja2VyIG5ld3Mgc3F1YXJlJywgJ2hpcHMnLCAnaGlyZSBhIGhlbHBlcicsICdob29saScsICdob3RqYXInLCAnaG91enonLCAnaHRtbDUnLCAnaHVic3BvdCcsICdpbWRiJywgJ2luc3RhZ3JhbScsICdpbnRlcm5ldCBleHBsb3JlcicsICdpb3hob3N0JywgJ2l0dW5lcycsICdpdHVuZXMgbm90ZScsICdqZW5raW5zJywgJ2pvZ2V0JywgJ2pvb21sYScsICdqcycsICdqcyBzcXVhcmUnLCAnanNmaWRkbGUnLCAna2V5Y2RuJywgJ2tpY2tzdGFydGVyJywgJ2tpY2tzdGFydGVyIGsnLCAna29ydnVlJywgJ2xhcmF2ZWwnLCAnbGFzdGZtJywgJ2xhc3RmbSBzcXVhcmUnLCAnbGVhbnB1YicsICdsZXNzJywgJ2xpbmVjaGF0JywgJ2xpbmtlZGluJywgJ2xpbmtlZGluIGFsdGVybmF0ZScsICdsaW5vZGUnLCAnbGludXgnLCAnbHlmdCcsICdtYWdlbnRvJywgJ21heGNkbicsICdtZWRhcHBzJywgJ21lZGl1bScsICdtZWRpdW0gbScsICdtZWRydCcsICdtZWV0dXAnLCAnbWljcm9zb2Z0JywgJ21peCcsICdtaXhjbG91ZCcsICdtaXp1bmknLCAnbW9keCcsICdtb25lcm8nLCAnbmFwc3RlcicsICduaW50ZW5kbyBzd2l0Y2gnLCAnbm9kZScsICdub2RlIGpzJywgJ25wbScsICduczgnLCAnbnV0cml0aW9uaXgnLCAnb2Rub2tsYXNzbmlraScsICdvZG5va2xhc3NuaWtpIHNxdWFyZScsICdvcGVuY2FydCcsICdvcGVuaWQnLCAnb3BlcmEnLCAnb3B0aW4gbW9uc3RlcicsICdvc2knLCAncGFnZTQnLCAncGFnZWxpbmVzJywgJ3BhbGZlZCcsICdwYXRyZW9uJywgJ3BheXBhbCcsICdwZXJpc2NvcGUnLCAncGhhYnJpY2F0b3InLCAncGhvZW5peCBmcmFtZXdvcmsnLCAncGhwJywgJ3BpZWQgcGlwZXInLCAncGllZCBwaXBlciBhbHRlcm5hdGUnLCAncGllZCBwaXBlciBwcCcsICdwaW50ZXJlc3QnLCAncGludGVyZXN0IHAnLCAncGludGVyZXN0IHNxdWFyZScsICdwbGF5c3RhdGlvbicsICdwcm9kdWN0IGh1bnQnLCAncHVzaGVkJywgJ3B5dGhvbicsICdxcScsICdxdWluc2NhcGUnLCAncXVvcmEnLCAncmF2ZWxyeScsICdyZWFjdCcsICdyZWJlbCcsICdyZWRyaXZlcicsICdyZWRkaXQnLCAncmVkZGl0IGFsaWVuJywgJ3JlZGRpdCBzcXVhcmUnLCAncmVuZGFjdCcsICdyZW5yZW4nLCAncmVwbHlkJywgJ3Jlc29sdmluZycsICdyb2NrZXRjaGF0JywgJ3JvY2tybXMnLCAnc2FmYXJpJywgJ3Nhc3MnLCAnc2NobGl4JywgJ3NjcmliZCcsICdzZWFyY2hlbmdpbicsICdzZWxsY2FzdCcsICdzZWxsc3knLCAnc2VydmljZXN0YWNrJywgJ3NoaXJ0c2luYnVsaycsICdzaW1wbHlidWlsdCcsICdzaXN0cml4JywgJ3NreWF0bGFzJywgJ3NreXBlJywgJ3NsYWNrJywgJ3NsYWNrIGhhc2gnLCAnc2xpZGVzaGFyZScsICdzbmFwY2hhdCcsICdzbmFwY2hhdCBnaG9zdCcsICdzbmFwY2hhdCBzcXVhcmUnLCAnc291bmRjbG91ZCcsICdzcGVha2FwJywgJ3Nwb3RpZnknLCAnc3RhY2sgZXhjaGFuZ2UnLCAnc3RhY2sgb3ZlcmZsb3cnLCAnc3RheWxpbmtlZCcsICdzdGVhbScsICdzdGVhbSBzcXVhcmUnLCAnc3RlYW0gc3ltYm9sJywgJ3N0aWNrZXIgbXVsZScsICdzdHJhdmEnLCAnc3RyaXBlJywgJ3N0cmlwZSBzJywgJ3N0dWRpb3ZpbmFyaScsICdzdHVtYmxldXBvbicsICdzdHVtYmxldXBvbiBjaXJjbGUnLCAnc3VwZXJwb3dlcnMnLCAnc3VwcGxlJywgJ3RlbGVncmFtJywgJ3RlbGVncmFtIHBsYW5lJywgJ3RlbmNlbnQgd2VpYm8nLCAndGhlbWVpc2xlJywgJ3RyZWxsbycsICd0cmlwYWR2aXNvcicsICd0dW1ibHInLCAndHVtYmxyIHNxdWFyZScsICd0d2l0Y2gnLCAndHdpdHRlcicsICd0d2l0dGVyIHNxdWFyZScsICd0eXBvMycsICd1YmVyJywgJ3Vpa2l0JywgJ3VuaXJlZ2lzdHJ5JywgJ3VudGFwcGQnLCAndXNiJywgJ3Vzc3VubmFoJywgJ3ZhYWRpbicsICd2aWFjb2luJywgJ3ZpYWRlbycsICd2aWFkZW8gc3F1YXJlJywgJ3ZpYmVyJywgJ3ZpbWVvJywgJ3ZpbWVvIHNxdWFyZScsICd2aW1lbyB2JywgJ3ZpbmUnLCAndmsnLCAndm52JywgJ3Z1ZWpzJywgJ3dlY2hhdCcsICd3ZWlibycsICd3ZWl4aW4nLCAnd2hhdHNhcHAnLCAnd2hhdHNhcHAgc3F1YXJlJywgJ3dobWNzJywgJ3dpa2lwZWRpYSB3JywgJ3dpbmRvd3MnLCAnd29yZHByZXNzJywgJ3dvcmRwcmVzcyBzaW1wbGUnLCAnd3BiZWdpbm5lcicsICd3cGV4cGxvcmVyJywgJ3dwZm9ybXMnLCAneGJveCcsICd4aW5nJywgJ3hpbmcgc3F1YXJlJywgJ3kgY29tYmluYXRvcicsICd5YWhvbycsICd5YW5kZXgnLCAneWFuZGV4IGludGVybmF0aW9uYWwnLCAneWVscCcsICd5b2FzdCcsICd5b3V0dWJlJywgJ3lvdXR1YmUgc3F1YXJlJ107XG5leHBvcnQgdmFyIElDT05TID0gX3VuaXEoW10uY29uY2F0KEFDQ0VTU0lCSUxJVFksIEFSUk9XUywgQVVESU9fVklERU8sIEJVU0lORVNTLCBDSEVTUywgQ09ERSwgQ09NTVVOSUNBVElPTiwgQ09NUFVURVJTLCBDVVJSRU5DWSwgREFURV9USU1FLCBERVNJR04sIEVESVRPUlMsIEZJTEVTLCBHRU5ERVJTLCBIQU5EU19HRVNUVVJFUywgSEVBTFRILCBJTUFHRVMsIElOVEVSRkFDRVMsIExPR0lTVElDUywgTUFQUywgTUVESUNBTCwgT0JKRUNUUywgUEFZTUVOVFNfU0hPUFBJTkcsIFNIQVBFUywgU1BJTk5FUlMsIFNQT1JUUywgU1RBVFVTLCBVU0VSU19QRU9QTEUsIFZFSElDTEVTLCBXUklUSU5HLCBCUkFORFMpKTtcbmV4cG9ydCB2YXIgSUNPTl9BTElBU0VTID0gWydjaGVzcyByb2NrJywgJ29yZGVyZWQgbGlzdCcsICd1bm9yZGVyZWQgbGlzdCcsICd1c2VyIGRvY3RvcicsICdzaGllbGQnLCAncHV6emxlJywgJ2FkZCBjaXJjbGUnLCAnYWRkIHNxdWFyZScsICdhZGQgdG8gY2FsZW5kYXInLCAnYWRkIHRvIGNhcnQnLCAnYWRkIHVzZXInLCAnYWRkJywgJ2FsYXJtIG11dGUnLCAnYWxhcm0nLCAnYWxkJywgJ2FscycsICdhbm5vdW5jZW1lbnQnLCAnYXJlYSBjaGFydCcsICdhcmVhIGdyYXBoJywgJ2Fycm93IGRvd24gY2FydCcsICdhc2V4dWFsJywgJ2FzbCBpbnRlcnByZXRpbmcnLCAnYXNsJywgJ2Fzc2lzdGl2ZSBsaXN0ZW5pbmcgZGV2aWNlcycsICdhdHRhY2gnLCAnYXR0ZW50aW9uJywgJ2JhbGFuY2UnLCAnYmFyJywgJ2JhdGh0dWInLCAnYmF0dGVyeSBmb3VyJywgJ2JhdHRlcnkgaGlnaCcsICdiYXR0ZXJ5IGxvdycsICdiYXR0ZXJ5IG9uZScsICdiYXR0ZXJ5IHRocmVlJywgJ2JhdHRlcnkgdHdvJywgJ2JhdHRlcnkgemVybycsICdiaXJ0aGRheScsICdibG9jayBsYXlvdXQnLCAnYmx1ZXRvb3RoIGFsdGVybmF0aXZlJywgJ2Jyb2tlbiBjaGFpbicsICdicm93c2VyJywgJ2NhbGwgc3F1YXJlJywgJ2NhbGwnLCAnY2FuY2VsJywgJ2NhcnQnLCAnY2MnLCAnY2hhaW4nLCAnY2hhdCcsICdjaGVja2VkIGNhbGVuZGFyJywgJ2NoZWNrbWFyaycsICdjaXJjbGUgbm90Y2hlZCcsICdjbG9zZScsICdjbnknLCAnY29ja3RhaWwnLCAnY29tbWVudGluZycsICdjb21wdXRlcicsICdjb25maWd1cmUnLCAnY29udGVudCcsICdkZWFmbmVzcycsICdkZWxldGUgY2FsZW5kYXInLCAnZGVsZXRlJywgJ2RldGVjdGl2ZScsICdkaXNjdXNzaW9ucycsICdkb2N0b3InLCAnZG9sbGFyJywgJ2RvbnQnLCAnZHJpdmVycyBsaWNlbnNlJywgJ2Ryb3Bkb3duJywgJ2VtZXJnZW5jeScsICdlbnZpcmEgZ2FsbGVyeScsICdlcmFzZScsICdldXInLCAnZXVybycsICdleWVkcm9wcGVyJywgJ2ZhY3RvcnknLCAnZmF2b3JpdGUnLCAnZmVlZCcsICdmZW1hbGUgaG9tb3NleHVhbCcsICdmaWxlIHRleHQnLCAnZmlsZSB0ZXh0IG91dGxpbmUnLCAnZmluZCcsICdmaXJzdCBhaWQnLCAnZm9yaycsICdnYW1lJywgJ2dheScsICdnYnAnLCAnZ29vZ2xlIHBsdXMgY2lyY2xlJywgJ2dvb2dsZSBwbHVzIG9mZmljaWFsJywgJ2dyYWInLCAnZ3JhZHVhdGlvbicsICdncmlkIGxheW91dCcsICdncm91cCcsICdoJywgJ2hhbmQgdmljdG9yeScsICdoYW5kaWNhcCcsICdoYXJkIG9mIGhlYXJpbmcnLCAnaGVhZGVyJywgJ2hlbHAgY2lyY2xlJywgJ2hlbHAnLCAnaGV0ZXJvc2V4dWFsJywgJ2hpZGUnLCAnaG90ZWwnLCAnaG91cmdsYXNzIGZvdXInLCAnaG91cmdsYXNzIGZ1bGwnLCAnaG91cmdsYXNzIG9uZScsICdob3VyZ2xhc3MgdGhyZWUnLCAnaG91cmdsYXNzIHR3bycsICdpZGVhJywgJ2lscycsICdpbiBjYXJ0JywgJ2lucicsICdpbnRlcmdlbmRlcicsICdpbnRlcnNleCcsICdqcHknLCAna3J3JywgJ2xhYicsICdsYXcnLCAnbGVnYWwnLCAnbGVzYmlhbicsICdsaWdodG5pbmcnLCAnbGlrZScsICdsaW5lIGdyYXBoJywgJ2xpbmtlZGluIHNxdWFyZScsICdsaW5raWZ5JywgJ2xpcmEnLCAnbGlzdCBsYXlvdXQnLCAnbWFnbmlmeScsICdtYWlsIGZvcndhcmQnLCAnbWFpbCBvdXRsaW5lJywgJ21haWwgc3F1YXJlJywgJ21haWwnLCAnbWFsZSBob21vc2V4dWFsJywgJ21hbicsICdtYXJrZXInLCAnbWFycyBhbHRlcm5hdGUnLCAnbWFycyBob3Jpem9udGFsJywgJ21hcnMgdmVydGljYWwnLCAnbWljcm9zb2Z0IGVkZ2UnLCAnbWlsaXRhcnknLCAnbXMgZWRnZScsICdtdXRlJywgJ25ldyBwaWVkIHBpcGVyJywgJ25vbiBiaW5hcnkgdHJhbnNnZW5kZXInLCAnbnVtYmVyZWQgbGlzdCcsICdvcHRpb25zJywgJ290aGVyIGdlbmRlciBob3Jpem9udGFsJywgJ290aGVyIGdlbmRlciB2ZXJ0aWNhbCcsICdvdGhlciBnZW5kZXInLCAncGF5bWVudCcsICdwYXlwYWwgY2FyZCcsICdwZW5jaWwgc3F1YXJlJywgJ3Bob3RvJywgJ3BpY3R1cmUnLCAncGllIGNoYXJ0JywgJ3BpZSBncmFwaCcsICdwaWVkIHBpcGVyIGhhdCcsICdwaW4nLCAncGx1cyBjYXJ0JywgJ3BvaW50JywgJ3BvaW50aW5nIGRvd24nLCAncG9pbnRpbmcgbGVmdCcsICdwb2ludGluZyByaWdodCcsICdwb2ludGluZyB1cCcsICdwb3VuZCcsICdwb3dlciBjb3JkJywgJ3Bvd2VyJywgJ3ByaXZhY3knLCAnciBjaXJjbGUnLCAncmFpbicsICdyZWNvcmQnLCAncmVmcmVzaCcsICdyZW1vdmUgY2lyY2xlJywgJ3JlbW92ZSBmcm9tIGNhbGVuZGFyJywgJ3JlbW92ZSB1c2VyJywgJ3JlbW92ZScsICdyZXBlYXQnLCAncm1iJywgJ3JvdWJsZScsICdydWInLCAncnVibGUnLCAncnVwZWUnLCAnczE1JywgJ3NlbGVjdGVkIHJhZGlvJywgJ3NlbmQnLCAnc2V0dGluZycsICdzZXR0aW5ncycsICdzaGVrZWwnLCAnc2hlcWVsJywgJ3NoaXBwaW5nJywgJ3Nob3AnLCAnc2h1ZmZsZScsICdzaHV0ZG93bicsICdzaWRlYmFyJywgJ3NpZ25pbmcnLCAnc2lnbnVwJywgJ3NsaWRlcnMnLCAnc29jY2VyJywgJ3NvcnQgYWxwaGFiZXQgYXNjZW5kaW5nJywgJ3NvcnQgYWxwaGFiZXQgZGVzY2VuZGluZycsICdzb3J0IGFzY2VuZGluZycsICdzb3J0IGNvbnRlbnQgYXNjZW5kaW5nJywgJ3NvcnQgY29udGVudCBkZXNjZW5kaW5nJywgJ3NvcnQgZGVzY2VuZGluZycsICdzb3J0IG51bWVyaWMgYXNjZW5kaW5nJywgJ3NvcnQgbnVtZXJpYyBkZXNjZW5kaW5nJywgJ3NvdW5kJywgJ3NweScsICdzdHJpcGUgY2FyZCcsICdzdHVkZW50JywgJ3RhbGsnLCAndGFyZ2V0JywgJ3RlbGV0eXBlJywgJ3RlbGV2aXNpb24nLCAndGV4dCBjdXJzb3InLCAndGV4dCB0ZWxlcGhvbmUnLCAndGhlbWUnLCAndGhlcm1vbWV0ZXInLCAndGh1bWIgdGFjaycsICd0aW1lJywgJ3RtJywgJ3RvZ2dsZSBkb3duJywgJ3RvZ2dsZSBsZWZ0JywgJ3RvZ2dsZSByaWdodCcsICd0b2dnbGUgdXAnLCAndHJhbnNsYXRlJywgJ3RyYXZlbCcsICd0cmVhdG1lbnQnLCAndHJpYW5nbGUgZG93bicsICd0cmlhbmdsZSBsZWZ0JywgJ3RyaWFuZ2xlIHJpZ2h0JywgJ3RyaWFuZ2xlIHVwJywgJ3RyeScsICd1bmhpZGUnLCAndW5saW5raWZ5JywgJ3VubXV0ZScsICd1c2QnLCAndXNlciBjYW5jZWwnLCAndXNlciBjbG9zZScsICd1c2VyIGRlbGV0ZScsICd1c2VyIHgnLCAndmNhcmQnLCAndmlkZW8gY2FtZXJhJywgJ3ZpZGVvIHBsYXknLCAndm9sdW1lIGNvbnRyb2wgcGhvbmUnLCAnd2FpdCcsICd3YXJuaW5nIGNpcmNsZScsICd3YXJuaW5nIHNpZ24nLCAnd2FybmluZycsICd3aS1maScsICd3aW5uZXInLCAnd2l6YXJkJywgJ3dvbWFuJywgJ3dvbicsICd3b3JkcHJlc3MgYmVnaW5uZXInLCAnd29yZHByZXNzIGZvcm1zJywgJ3dvcmxkJywgJ3dyaXRlIHNxdWFyZScsICd4JywgJ3llbicsICd6aXAnLCAnem9vbSBpbicsICd6b29tIG91dCcsICd6b29tJywgJ2JpdGJ1Y2tldCBzcXVhcmUnLCAnY2hlY2ttYXJrIGJveCcsICdjaXJjbGUgdGhpbicsICdjbG91ZCBkb3dubG9hZCcsICdjbG91ZCB1cGxvYWQnLCAnY29tcG9zZScsICdjb252ZXJzYXRpb24nLCAnY3JlZGl0IGNhcmQgYWx0ZXJuYXRpdmUnLCAnY3VycmVuY3knLCAnZGFzaGJvYXJkJywgJ2RpYW1vbmQnLCAnZGlzaycsICdleGNoYW5nZScsICdleHRlcm5hbCBzaGFyZScsICdleHRlcm5hbCBzcXVhcmUnLCAnZXh0ZXJuYWwnLCAnZmFjZWJvb2sgb2ZmaWNpYWwnLCAnZm9vZCcsICdob3VyZ2xhc3MgemVybycsICdsZXZlbCBkb3duJywgJ2xldmVsIHVwJywgJ2xvZyBvdXQnLCAnbWVhbnBhdGgnLCAnbW9uZXknLCAnbW92ZScsICdwZW5jaWwnLCAncHJvdGVjdCcsICdyYWRpbycsICdyZW1vdmUgYm9va21hcmsnLCAncmVzaXplIGhvcml6b250YWwnLCAncmVzaXplIHZlcnRpY2FsJywgJ3NpZ24gaW4nLCAnc2lnbiBvdXQnLCAnc3Bvb24nLCAnc3RhciBoYWxmIGVtcHR5JywgJ3N0YXIgaGFsZiBmdWxsJywgJ3RpY2tldCcsICd0aW1lcyByZWN0YW5nbGUnLCAnd3JpdGUnLCAneW91dHViZSBwbGF5J107XG5leHBvcnQgdmFyIElDT05TX0FORF9BTElBU0VTID0gX3VuaXEoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShJQ09OUyksIElDT05fQUxJQVNFUykpOyAvLyBTb21lIGljb24gbmFtZXMgYXJlIG5vdCBwYXJ0IG9mIGljb25zLmNzcy5cbi8vIFRoZXNlIGFyZSBvbmx5IHZhbGlkIGFzIGNoaWxkcmVuIG9mIG90aGVyIGNvbXBvbmVudHMuXG4vLyBUaGVpciBDU1MgcnVsZXMgYXJlIGRlZmluZWQgYnkgYSBzcGVjaWZpYyBjb21wb25lbnQncyBDU1MuXG4vLyBXZSBkb24ndCB3YW50IHRvIHNob3cgbmFtZSB3YXJuaW5ncyBmb3IgdGhvc2UgdXNhZ2VzIHNvIHdlIGFkZCB0aGVtIGFzIHZhbGlkIG5hbWVzIGhlcmUuXG5cbmV4cG9ydCB2YXIgQ09NUE9ORU5UX0NPTlRFWFRfU1BFQ0lGSUNfSUNPTlMgPSBbJ2xlZnQgZHJvcGRvd24nXTtcbmV4cG9ydCB2YXIgQUxMX0lDT05TX0lOX0FMTF9DT05URVhUUyA9IF91bmlxKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoSUNPTlNfQU5EX0FMSUFTRVMpLCBDT01QT05FTlRfQ09OVEVYVF9TUEVDSUZJQ19JQ09OUykpOyIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiO1xuaW1wb3J0IHsgbnVtYmVyVG9Xb3JkIH0gZnJvbSAnLi9udW1iZXJUb1dvcmQnO1xuLypcbiAqIFRoZXJlIGFyZSAzIHByb3AgcGF0dGVybnMgdXNlZCB0byBidWlsZCB1cCB0aGUgY2xhc3NOYW1lIGZvciBhIGNvbXBvbmVudC5cbiAqIEVhY2ggdXRpbGl0eSBoZXJlIGlzIG1lYW50IGZvciB1c2UgaW4gYSBjbGFzc25hbWVzKCkgYXJndW1lbnQuXG4gKlxuICogVGhlcmUgaXMgbm8gdXRpbCBmb3IgdmFsdWVPbmx5KCkgYmVjYXVzZSBpdCB3b3VsZCBzaW1wbHkgcmV0dXJuIHZhbC5cbiAqIFVzZSB0aGUgcHJvcCB2YWx1ZSBpbmxpbmUgaW5zdGVhZC5cbiAqICAgPExhYmVsIHNpemU9J2JpZycgLz5cbiAqICAgPGRpdiBjbGFzcz1cInVpIGJpZyBsYWJlbFwiPjwvZGl2PlxuICovXG5cbi8qKlxuICogUHJvcHMgd2hlcmUgb25seSB0aGUgcHJvcCBrZXkgaXMgdXNlZCBpbiB0aGUgY2xhc3NOYW1lLlxuICogQHBhcmFtIHsqfSB2YWwgQSBwcm9wcyB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBBIHByb3BzIGtleVxuICpcbiAqIEBleGFtcGxlXG4gKiA8TGFiZWwgdGFnIC8+XG4gKiA8ZGl2IGNsYXNzPVwidWkgdGFnIGxhYmVsXCI+PC9kaXY+XG4gKi9cblxuZXhwb3J0IHZhciB1c2VLZXlPbmx5ID0gZnVuY3Rpb24gdXNlS2V5T25seSh2YWwsIGtleSkge1xuICByZXR1cm4gdmFsICYmIGtleTtcbn07XG4vKipcbiAqIFByb3BzIHRoYXQgcmVxdWlyZSBib3RoIGEga2V5IGFuZCB2YWx1ZSB0byBjcmVhdGUgYSBjbGFzc05hbWUuXG4gKiBAcGFyYW0geyp9IHZhbCBBIHByb3BzIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IEEgcHJvcHMga2V5XG4gKlxuICogQGV4YW1wbGVcbiAqIDxMYWJlbCBjb3JuZXI9J2xlZnQnIC8+XG4gKiA8ZGl2IGNsYXNzPVwidWkgbGVmdCBjb3JuZXIgbGFiZWxcIj48L2Rpdj5cbiAqL1xuXG5leHBvcnQgdmFyIHVzZVZhbHVlQW5kS2V5ID0gZnVuY3Rpb24gdXNlVmFsdWVBbmRLZXkodmFsLCBrZXkpIHtcbiAgcmV0dXJuIHZhbCAmJiB2YWwgIT09IHRydWUgJiYgXCJcIi5jb25jYXQodmFsLCBcIiBcIikuY29uY2F0KGtleSk7XG59O1xuLyoqXG4gKiBQcm9wcyB3aG9zZSBrZXkgd2lsbCBiZSB1c2VkIGluIGNsYXNzTmFtZSwgb3IgdmFsdWUgYW5kIGtleS5cbiAqIEBwYXJhbSB7Kn0gdmFsIEEgcHJvcHMgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgQSBwcm9wcyBrZXlcbiAqXG4gKiBAZXhhbXBsZSBLZXkgT25seVxuICogPExhYmVsIHBvaW50aW5nIC8+XG4gKiA8ZGl2IGNsYXNzPVwidWkgcG9pbnRpbmcgbGFiZWxcIj48L2Rpdj5cbiAqXG4gKiBAZXhhbXBsZSBLZXkgYW5kIFZhbHVlXG4gKiA8TGFiZWwgcG9pbnRpbmc9J2xlZnQnIC8+XG4gKiA8ZGl2IGNsYXNzPVwidWkgbGVmdCBwb2ludGluZyBsYWJlbFwiPjwvZGl2PlxuICovXG5cbmV4cG9ydCB2YXIgdXNlS2V5T3JWYWx1ZUFuZEtleSA9IGZ1bmN0aW9uIHVzZUtleU9yVmFsdWVBbmRLZXkodmFsLCBrZXkpIHtcbiAgcmV0dXJuIHZhbCAmJiAodmFsID09PSB0cnVlID8ga2V5IDogXCJcIi5jb25jYXQodmFsLCBcIiBcIikuY29uY2F0KGtleSkpO1xufTsgLy9cbi8vIFByb3AgdG8gY2xhc3NOYW1lIGV4Y2VwdGlvbnNcbi8vXG5cbi8qKlxuICogVGhlIFwibXVsdGlwbGVcIiBwcm9wIGltcGxlbWVudHMgY29udHJvbCBvZiB2aXNpYmlsaXR5IGFuZCByZXNlcnZlZCBjbGFzc2VzIGZvciBHcmlkIHN1YmNvbXBvbmVudHMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIG9mIHRoZSBcIm11bHRpcGxlXCIgcHJvcFxuICogQHBhcmFtIHsqfSBrZXkgQSBwcm9wcyBrZXlcbiAqXG4gKiBAZXhhbXBsZVxuICogPEdyaWQuUm93IG9ubHk9J21vYmlsZScgLz5cbiAqIDxHcmlkLlJvdyBvbmx5PSdtb2JpbGUgdGFibGV0JyAvPlxuICogPGRpdiBjbGFzcz1cIm1vYmlsZSBvbmx5IHJvd1wiPjwvZGl2PlxuICogPGRpdiBjbGFzcz1cIm1vYmlsZSBvbmx5IHRhYmxldCBvbmx5IHJvd1wiPjwvZGl2PlxuICovXG5cbmV4cG9ydCB2YXIgdXNlTXVsdGlwbGVQcm9wID0gZnVuY3Rpb24gdXNlTXVsdGlwbGVQcm9wKHZhbCwga2V5KSB7XG4gIGlmICghdmFsIHx8IHZhbCA9PT0gdHJ1ZSkgcmV0dXJuIG51bGw7XG4gIHJldHVybiB2YWwucmVwbGFjZSgnbGFyZ2Ugc2NyZWVuJywgJ2xhcmdlLXNjcmVlbicpLnJlcGxhY2UoLyB2ZXJ0aWNhbGx5L2csICctdmVydGljYWxseScpLnNwbGl0KCcgJykubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHByb3AucmVwbGFjZSgnLScsICcgJyksIFwiIFwiKS5jb25jYXQoa2V5KTtcbiAgfSkuam9pbignICcpO1xufTtcbi8qKlxuICogVGhlIFwidGV4dEFsaWduXCIgcHJvcCBmb2xsb3dzIHRoZSB1c2VWYWx1ZUFuZEtleSBleGNlcHQgd2hlbiB0aGUgdmFsdWUgaXMgXCJqdXN0aWZpZWQnLlxuICogSW4gdGhpcyBjYXNlLCBvbmx5IHRoZSBjbGFzcyBcImp1c3RpZmllZFwiIGlzIHVzZWQsIGlnbm9yaW5nIHRoZSBcImFsaWduZWRcIiBjbGFzcy5cbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSBvZiB0aGUgXCJ0ZXh0QWxpZ25cIiBwcm9wXG4gKlxuICogQGV4YW1wbGVcbiAqIDxDb250YWluZXIgdGV4dEFsaWduPSdqdXN0aWZpZWQnIC8+XG4gKiA8ZGl2IGNsYXNzPVwidWkganVzdGlmaWVkIGNvbnRhaW5lclwiPjwvZGl2PlxuICpcbiAqIEBleGFtcGxlXG4gKiA8Q29udGFpbmVyIHRleHRBbGlnbj0nbGVmdCcgLz5cbiAqIDxkaXYgY2xhc3M9XCJ1aSBsZWZ0IGFsaWduZWQgY29udGFpbmVyXCI+PC9kaXY+XG4gKi9cblxuZXhwb3J0IHZhciB1c2VUZXh0QWxpZ25Qcm9wID0gZnVuY3Rpb24gdXNlVGV4dEFsaWduUHJvcCh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PT0gJ2p1c3RpZmllZCcgPyAnanVzdGlmaWVkJyA6IHVzZVZhbHVlQW5kS2V5KHZhbCwgJ2FsaWduZWQnKTtcbn07XG4vKipcbiAqIFRoZSBcInZlcnRpY2FsQWxpZ25cIiBwcm9wIGZvbGxvd3MgdGhlIHVzZVZhbHVlQW5kS2V5LlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSBvZiB0aGUgXCJ2ZXJ0aWNhbEFsaWduXCIgcHJvcFxuICpcbiAqIEBleGFtcGxlXG4gKiA8R3JpZCB2ZXJ0aWNhbEFsaWduPSdtaWRkbGUnIC8+XG4gKiA8ZGl2IGNsYXNzPVwidWkgbWlkZGxlIGFsaWduZWQgZ3JpZFwiPjwvZGl2PlxuICovXG5cbmV4cG9ydCB2YXIgdXNlVmVydGljYWxBbGlnblByb3AgPSBmdW5jdGlvbiB1c2VWZXJ0aWNhbEFsaWduUHJvcCh2YWwpIHtcbiAgcmV0dXJuIHVzZVZhbHVlQW5kS2V5KHZhbCwgJ2FsaWduZWQnKTtcbn07XG4vKipcbiAqIENyZWF0ZSBcIlhcIiwgXCJYIHdpZGVcIiBhbmQgXCJlcXVhbCB3aWR0aFwiIGNsYXNzTmFtZXMuXG4gKiBcIlhcIiBpcyBhIG51bWJlclRvV29yZCB2YWx1ZSBhbmQgXCJ3aWRlXCIgaXMgY29uZmlndXJhYmxlLlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHByb3AgdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbd2lkdGhDbGFzcz0nJ10gVGhlIGNsYXNzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtjYW5FcXVhbD1mYWxzZV0gRmxhZyB0aGF0IGluZGljYXRlcyBwb3NzaWJpbGl0eSBvZiBcImVxdWFsXCIgdmFsdWVcbiAqXG4gKiBAZXhhbXBsZVxuICogPEdyaWQgY29sdW1ucz0nZXF1YWwnIC8+XG4gKiA8ZGl2IGNsYXNzPVwidWkgZXF1YWwgd2lkdGggZ3JpZFwiPjwvZGl2PlxuICpcbiAqIDxGb3JtIHdpZHRocz0nZXF1YWwnIC8+XG4gKiA8ZGl2IGNsYXNzPVwidWkgZXF1YWwgd2lkdGggZm9ybVwiPjwvZGl2PlxuICpcbiAqIDxGaWVsZEdyb3VwIHdpZHRocz0nZXF1YWwnIC8+XG4gKiA8ZGl2IGNsYXNzPVwiZXF1YWwgd2lkdGggZmllbGRzXCI+PC9kaXY+XG4gKlxuICogQGV4YW1wbGVcbiAqIDxHcmlkIGNvbHVtbnM9ezR9IC8+XG4gKiA8ZGl2IGNsYXNzPVwidWkgZm91ciBjb2x1bW4gZ3JpZFwiPjwvZGl2PlxuICovXG5cbmV4cG9ydCB2YXIgdXNlV2lkdGhQcm9wID0gZnVuY3Rpb24gdXNlV2lkdGhQcm9wKHZhbCkge1xuICB2YXIgd2lkdGhDbGFzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gIHZhciBjYW5FcXVhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgaWYgKGNhbkVxdWFsICYmIHZhbCA9PT0gJ2VxdWFsJykge1xuICAgIHJldHVybiAnZXF1YWwgd2lkdGgnO1xuICB9XG5cbiAgdmFyIHZhbFR5cGUgPSBfdHlwZW9mKHZhbCk7XG5cbiAgaWYgKCh2YWxUeXBlID09PSAnc3RyaW5nJyB8fCB2YWxUeXBlID09PSAnbnVtYmVyJykgJiYgd2lkdGhDbGFzcykge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChudW1iZXJUb1dvcmQodmFsKSwgXCIgXCIpLmNvbmNhdCh3aWR0aENsYXNzKTtcbiAgfVxuXG4gIHJldHVybiBudW1iZXJUb1dvcmQodmFsKTtcbn07IiwiLyoqXG4gKiBSZXR1cm5zIGEgY3JlYXRlRWxlbWVudCgpIHR5cGUgYmFzZWQgb24gdGhlIHByb3BzIG9mIHRoZSBDb21wb25lbnQuXG4gKiBVc2VmdWwgZm9yIGNhbGN1bGF0aW5nIHdoYXQgdHlwZSBhIGNvbXBvbmVudCBzaG91bGQgcmVuZGVyIGFzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IENvbXBvbmVudCBBIGZ1bmN0aW9uIG9yIFJlYWN0Q2xhc3MuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgQSBSZWFjdEVsZW1lbnQgcHJvcHMgb2JqZWN0XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZ2V0RGVmYXVsdF0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBkZWZhdWx0IGVsZW1lbnQgdHlwZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd8ZnVuY3Rpb259IEEgUmVhY3RFbGVtZW50IHR5cGVcbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbWVudFR5cGUoQ29tcG9uZW50LCBwcm9wcywgZ2V0RGVmYXVsdCkge1xuICB2YXIgX0NvbXBvbmVudCRkZWZhdWx0UHJvID0gQ29tcG9uZW50LmRlZmF1bHRQcm9wcyxcbiAgICAgIGRlZmF1bHRQcm9wcyA9IF9Db21wb25lbnQkZGVmYXVsdFBybyA9PT0gdm9pZCAwID8ge30gOiBfQ29tcG9uZW50JGRlZmF1bHRQcm87IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gdXNlciBkZWZpbmVkIFwiYXNcIiBlbGVtZW50IHR5cGVcblxuICBpZiAocHJvcHMuYXMgJiYgcHJvcHMuYXMgIT09IGRlZmF1bHRQcm9wcy5hcykgcmV0dXJuIHByb3BzLmFzOyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIGNvbXB1dGVkIGRlZmF1bHQgZWxlbWVudCB0eXBlXG5cbiAgaWYgKGdldERlZmF1bHQpIHtcbiAgICB2YXIgY29tcHV0ZWREZWZhdWx0ID0gZ2V0RGVmYXVsdCgpO1xuICAgIGlmIChjb21wdXRlZERlZmF1bHQpIHJldHVybiBjb21wdXRlZERlZmF1bHQ7XG4gIH0gLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBpbmZlciBhbmNob3IgbGlua3NcblxuXG4gIGlmIChwcm9wcy5ocmVmKSByZXR1cm4gJ2EnOyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHVzZSBkZWZhdWx0UHJvcCBvciAnZGl2J1xuXG4gIHJldHVybiBkZWZhdWx0UHJvcHMuYXMgfHwgJ2Rpdic7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEVsZW1lbnRUeXBlOyIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCI7XG5pbXBvcnQgX3VuaXEgZnJvbSBcImxvZGFzaC91bmlxXCI7XG5pbXBvcnQgX2lzQXJyYXkgZnJvbSBcImxvZGFzaC9pc0FycmF5XCI7XG5pbXBvcnQgX2lzUGxhaW5PYmplY3QgZnJvbSBcImxvZGFzaC9pc1BsYWluT2JqZWN0XCI7XG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSBcImxvZGFzaC9pc0Z1bmN0aW9uXCI7XG5pbXBvcnQgX2lzTnVtYmVyIGZyb20gXCJsb2Rhc2gvaXNOdW1iZXJcIjtcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSBcImxvZGFzaC9pc1N0cmluZ1wiO1xuaW1wb3J0IF9pc0Jvb2xlYW4gZnJvbSBcImxvZGFzaC9pc0Jvb2xlYW5cIjtcbmltcG9ydCBfaXNOaWwgZnJvbSBcImxvZGFzaC9pc05pbFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRmFjdG9yaWVzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLyoqXG4gKiBBIG1vcmUgcm9idXN0IFJlYWN0LmNyZWF0ZUVsZW1lbnQuIEl0IGNhbiBjcmVhdGUgZWxlbWVudHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb258c3RyaW5nfSBDb21wb25lbnQgQSBSZWFjdENsYXNzIG9yIHN0cmluZ1xuICogQHBhcmFtIHtmdW5jdGlvbn0gbWFwVmFsdWVUb1Byb3BzIEEgZnVuY3Rpb24gdGhhdCBtYXBzIGEgcHJpbWl0aXZlIHZhbHVlIHRvIHRoZSBDb21wb25lbnQgcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdHxmdW5jdGlvbn0gdmFsIFRoZSB2YWx1ZSB0byBjcmVhdGUgYSBSZWFjdEVsZW1lbnQgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmRlZmF1bHRQcm9wcz17fV0gRGVmYXVsdCBwcm9wcyBvYmplY3RcbiAqIEBwYXJhbSB7b2JqZWN0fGZ1bmN0aW9ufSBbb3B0aW9ucy5vdmVycmlkZVByb3BzPXt9XSBPdmVycmlkZSBwcm9wcyBvYmplY3Qgb3IgZnVuY3Rpb24gKGNhbGxlZCB3aXRoIHJlZ3VsYXIgcHJvcHMpXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmF1dG9HZW5lcmF0ZUtleT10cnVlXSBXaGV0aGVyIG9yIG5vdCBhdXRvbWF0aWMga2V5IGdlbmVyYXRpb24gaXMgYWxsb3dlZFxuICogQHJldHVybnMge29iamVjdHxudWxsfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaG9ydGhhbmQoQ29tcG9uZW50LCBtYXBWYWx1ZVRvUHJvcHMsIHZhbCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG5cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIENvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZVNob3J0aGFuZCgpIENvbXBvbmVudCBtdXN0IGJlIGEgc3RyaW5nIG9yIGZ1bmN0aW9uLicpO1xuICB9IC8vIHNob3J0IGNpcmN1aXQgbm9vcCB2YWx1ZXNcblxuXG4gIGlmIChfaXNOaWwodmFsKSB8fCBfaXNCb29sZWFuKHZhbCkpIHJldHVybiBudWxsO1xuXG4gIHZhciB2YWxJc1N0cmluZyA9IF9pc1N0cmluZyh2YWwpO1xuXG4gIHZhciB2YWxJc051bWJlciA9IF9pc051bWJlcih2YWwpO1xuXG4gIHZhciB2YWxJc0Z1bmN0aW9uID0gX2lzRnVuY3Rpb24odmFsKTtcblxuICB2YXIgdmFsSXNSZWFjdEVsZW1lbnQgPSBpc1ZhbGlkRWxlbWVudCh2YWwpO1xuXG4gIHZhciB2YWxJc1Byb3BzT2JqZWN0ID0gX2lzUGxhaW5PYmplY3QodmFsKTtcblxuICB2YXIgdmFsSXNQcmltaXRpdmVWYWx1ZSA9IHZhbElzU3RyaW5nIHx8IHZhbElzTnVtYmVyIHx8IF9pc0FycmF5KHZhbCk7IC8vIHVuaGFuZGxlZCB0eXBlIHJldHVybiBudWxsXG5cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgaWYgKCF2YWxJc0Z1bmN0aW9uICYmICF2YWxJc1JlYWN0RWxlbWVudCAmJiAhdmFsSXNQcm9wc09iamVjdCAmJiAhdmFsSXNQcmltaXRpdmVWYWx1ZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnU2hvcnRoYW5kIHZhbHVlIG11c3QgYmUgYSBzdHJpbmd8bnVtYmVyfGFycmF5fG9iamVjdHxSZWFjdEVsZW1lbnR8ZnVuY3Rpb24uJywgJyBVc2UgbnVsbHx1bmRlZmluZWR8Ym9vbGVhbiBmb3Igbm9uZScsIFwiIFJlY2VpdmVkIFwiLmNvbmNhdChfdHlwZW9mKHZhbCksIFwiLlwiKV0uam9pbignJykpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEJ1aWxkIHVwIHByb3BzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG4gIHZhciBfb3B0aW9ucyRkZWZhdWx0UHJvcHMgPSBvcHRpb25zLmRlZmF1bHRQcm9wcyxcbiAgICAgIGRlZmF1bHRQcm9wcyA9IF9vcHRpb25zJGRlZmF1bHRQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRkZWZhdWx0UHJvcHM7IC8vIFVzZXIncyBwcm9wc1xuXG4gIHZhciB1c2Vyc1Byb3BzID0gdmFsSXNSZWFjdEVsZW1lbnQgJiYgdmFsLnByb3BzIHx8IHZhbElzUHJvcHNPYmplY3QgJiYgdmFsIHx8IHZhbElzUHJpbWl0aXZlVmFsdWUgJiYgbWFwVmFsdWVUb1Byb3BzKHZhbCk7IC8vIE92ZXJyaWRlIHByb3BzXG5cbiAgdmFyIF9vcHRpb25zJG92ZXJyaWRlUHJvcCA9IG9wdGlvbnMub3ZlcnJpZGVQcm9wcyxcbiAgICAgIG92ZXJyaWRlUHJvcHMgPSBfb3B0aW9ucyRvdmVycmlkZVByb3AgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkb3ZlcnJpZGVQcm9wO1xuICBvdmVycmlkZVByb3BzID0gX2lzRnVuY3Rpb24ob3ZlcnJpZGVQcm9wcykgPyBvdmVycmlkZVByb3BzKF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRQcm9wcywgdXNlcnNQcm9wcykpIDogb3ZlcnJpZGVQcm9wczsgLy8gTWVyZ2UgcHJvcHNcblxuICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG5cbiAgdmFyIHByb3BzID0gX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdFByb3BzLCB1c2Vyc1Byb3BzLCBvdmVycmlkZVByb3BzKTsgLy8gTWVyZ2UgY2xhc3NOYW1lXG5cblxuICBpZiAoZGVmYXVsdFByb3BzLmNsYXNzTmFtZSB8fCBvdmVycmlkZVByb3BzLmNsYXNzTmFtZSB8fCB1c2Vyc1Byb3BzLmNsYXNzTmFtZSkge1xuICAgIHZhciBtZXJnZWRDbGFzc2VzTmFtZXMgPSBjeChkZWZhdWx0UHJvcHMuY2xhc3NOYW1lLCBvdmVycmlkZVByb3BzLmNsYXNzTmFtZSwgdXNlcnNQcm9wcy5jbGFzc05hbWUpO1xuICAgIHByb3BzLmNsYXNzTmFtZSA9IF91bmlxKG1lcmdlZENsYXNzZXNOYW1lcy5zcGxpdCgnICcpKS5qb2luKCcgJyk7XG4gIH0gLy8gTWVyZ2Ugc3R5bGVcblxuXG4gIGlmIChkZWZhdWx0UHJvcHMuc3R5bGUgfHwgb3ZlcnJpZGVQcm9wcy5zdHlsZSB8fCB1c2Vyc1Byb3BzLnN0eWxlKSB7XG4gICAgcHJvcHMuc3R5bGUgPSBfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0UHJvcHMuc3R5bGUsIHVzZXJzUHJvcHMuc3R5bGUsIG92ZXJyaWRlUHJvcHMuc3R5bGUpO1xuICB9IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gR2V0IGtleVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFVzZSBrZXksIGNoaWxkS2V5LCBvciBnZW5lcmF0ZSBrZXlcblxuXG4gIGlmIChfaXNOaWwocHJvcHMua2V5KSkge1xuICAgIHZhciBjaGlsZEtleSA9IHByb3BzLmNoaWxkS2V5O1xuICAgIHZhciBfb3B0aW9ucyRhdXRvR2VuZXJhdGUgPSBvcHRpb25zLmF1dG9HZW5lcmF0ZUtleSxcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5ID0gX29wdGlvbnMkYXV0b0dlbmVyYXRlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYXV0b0dlbmVyYXRlO1xuXG4gICAgaWYgKCFfaXNOaWwoY2hpbGRLZXkpKSB7XG4gICAgICAvLyBhcHBseSBhbmQgY29uc3VtZSB0aGUgY2hpbGRLZXlcbiAgICAgIHByb3BzLmtleSA9IHR5cGVvZiBjaGlsZEtleSA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkS2V5KHByb3BzKSA6IGNoaWxkS2V5O1xuICAgICAgZGVsZXRlIHByb3BzLmNoaWxkS2V5O1xuICAgIH0gZWxzZSBpZiAoYXV0b0dlbmVyYXRlS2V5ICYmICh2YWxJc1N0cmluZyB8fCB2YWxJc051bWJlcikpIHtcbiAgICAgIC8vIHVzZSBzdHJpbmcvbnVtYmVyIHNob3J0aGFuZCB2YWx1ZXMgYXMgdGhlIGtleVxuICAgICAgcHJvcHMua2V5ID0gdmFsO1xuICAgIH1cbiAgfSAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIENyZWF0ZSBFbGVtZW50XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQ2xvbmUgUmVhY3RFbGVtZW50c1xuXG5cbiAgaWYgKHZhbElzUmVhY3RFbGVtZW50KSByZXR1cm4gY2xvbmVFbGVtZW50KHZhbCwgcHJvcHMpOyAvLyBDcmVhdGUgUmVhY3RFbGVtZW50cyBmcm9tIGJ1aWx0IHVwIHByb3BzXG5cbiAgaWYgKHZhbElzUHJpbWl0aXZlVmFsdWUgfHwgdmFsSXNQcm9wc09iamVjdCkgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcyk7IC8vIENhbGwgZnVuY3Rpb25zIHdpdGggYXJncyBzaW1pbGFyIHRvIGNyZWF0ZUVsZW1lbnQoKVxuXG4gIGlmICh2YWxJc0Z1bmN0aW9uKSByZXR1cm4gdmFsKENvbXBvbmVudCwgcHJvcHMsIHByb3BzLmNoaWxkcmVuKTtcbiAgLyogZXNsaW50LWVuYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG59IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRmFjdG9yeSBDcmVhdG9yc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogQ3JlYXRlcyBhIGBjcmVhdGVTaG9ydGhhbmRgIGZ1bmN0aW9uIHRoYXQgaXMgd2FpdGluZyBmb3IgYSB2YWx1ZSBhbmQgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufHN0cmluZ30gQ29tcG9uZW50IEEgUmVhY3RDbGFzcyBvciBzdHJpbmdcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG1hcFZhbHVlVG9Qcm9wcyBBIGZ1bmN0aW9uIHRoYXQgbWFwcyBhIHByaW1pdGl2ZSB2YWx1ZSB0byB0aGUgQ29tcG9uZW50IHByb3BzXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IEEgc2hvcnRoYW5kIGZhY3RvcnkgZnVuY3Rpb24gd2FpdGluZyBmb3IgYHZhbGAgYW5kIGBkZWZhdWx0UHJvcHNgLlxuICovXG5cbmNyZWF0ZVNob3J0aGFuZC5oYW5kbGVkUHJvcHMgPSBbXTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KENvbXBvbmVudCwgbWFwVmFsdWVUb1Byb3BzKSB7XG4gIGlmICh0eXBlb2YgQ29tcG9uZW50ICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KCkgQ29tcG9uZW50IG11c3QgYmUgYSBzdHJpbmcgb3IgZnVuY3Rpb24uJyk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgb3B0aW9ucykge1xuICAgIHJldHVybiBjcmVhdGVTaG9ydGhhbmQoQ29tcG9uZW50LCBtYXBWYWx1ZVRvUHJvcHMsIHZhbCwgb3B0aW9ucyk7XG4gIH07XG59IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gSFRNTCBGYWN0b3JpZXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgdmFyIGNyZWF0ZUhUTUxEaXZpc2lvbiA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoJ2RpdicsIGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHtcbiAgICBjaGlsZHJlbjogdmFsXG4gIH07XG59KTtcbmV4cG9ydCB2YXIgY3JlYXRlSFRNTElmcmFtZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoJ2lmcmFtZScsIGZ1bmN0aW9uIChzcmMpIHtcbiAgcmV0dXJuIHtcbiAgICBzcmM6IHNyY1xuICB9O1xufSk7XG5leHBvcnQgdmFyIGNyZWF0ZUhUTUxJbWFnZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoJ2ltZycsIGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHtcbiAgICBzcmM6IHZhbFxuICB9O1xufSk7XG5leHBvcnQgdmFyIGNyZWF0ZUhUTUxJbnB1dCA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoJ2lucHV0JywgZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHZhbFxuICB9O1xufSk7XG5leHBvcnQgdmFyIGNyZWF0ZUhUTUxMYWJlbCA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoJ2xhYmVsJywgZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4ge1xuICAgIGNoaWxkcmVuOiB2YWxcbiAgfTtcbn0pO1xuZXhwb3J0IHZhciBjcmVhdGVIVE1MUGFyYWdyYXBoID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSgncCcsIGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHtcbiAgICBjaGlsZHJlbjogdmFsXG4gIH07XG59KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF93aXRob3V0IGZyb20gXCJsb2Rhc2gvd2l0aG91dFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogU2V2ZXJhbCBpY29ucyBjYW4gYmUgdXNlZCB0b2dldGhlciBhcyBhIGdyb3VwLlxuICovXG5cbmZ1bmN0aW9uIEljb25Hcm91cChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemU7XG4gIHZhciBjbGFzc2VzID0gY3goc2l6ZSwgJ2ljb25zJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhJY29uR3JvdXAsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoSWNvbkdyb3VwLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5JY29uR3JvdXAuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJzaXplXCJdO1xuSWNvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBTaXplIG9mIHRoZSBpY29uIGdyb3VwLiAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoX3dpdGhvdXQoU1VJLlNJWkVTLCAnbWVkaXVtJykpXG59IDoge307XG5JY29uR3JvdXAuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2knXG59O1xuZXhwb3J0IGRlZmF1bHQgSWNvbkdyb3VwOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2ludm9rZSBmcm9tIFwibG9kYXNoL2ludm9rZVwiO1xuaW1wb3J0IF9pc05pbCBmcm9tIFwibG9kYXNoL2lzTmlsXCI7XG5pbXBvcnQgX3dpdGhvdXQgZnJvbSBcImxvZGFzaC93aXRob3V0XCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VLZXlPclZhbHVlQW5kS2V5LCB1c2VWYWx1ZUFuZEtleSB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgSWNvbkdyb3VwIGZyb20gJy4vSWNvbkdyb3VwJztcbi8qKlxuICogQW4gaWNvbiBpcyBhIGdseXBoIHVzZWQgdG8gcmVwcmVzZW50IHNvbWV0aGluZyBlbHNlLlxuICogQHNlZSBJbWFnZVxuICovXG5cbnZhciBJY29uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSWNvbiwgX1B1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEljb24oKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSWNvbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihJY29uKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQ2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBkaXNhYmxlZCA9IF90aGlzLnByb3BzLmRpc2FibGVkO1xuXG4gICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkNsaWNrJywgZSwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEljb24sIFt7XG4gICAga2V5OiBcImdldEljb25BcmlhT3B0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJY29uQXJpYU9wdGlvbnMoKSB7XG4gICAgICB2YXIgYXJpYU9wdGlvbnMgPSB7fTtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYXJpYUxhYmVsID0gX3RoaXMkcHJvcHNbJ2FyaWEtbGFiZWwnXSxcbiAgICAgICAgICBhcmlhSGlkZGVuID0gX3RoaXMkcHJvcHNbJ2FyaWEtaGlkZGVuJ107XG5cbiAgICAgIGlmIChfaXNOaWwoYXJpYUxhYmVsKSkge1xuICAgICAgICBhcmlhT3B0aW9uc1snYXJpYS1oaWRkZW4nXSA9ICd0cnVlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyaWFPcHRpb25zWydhcmlhLWxhYmVsJ10gPSBhcmlhTGFiZWw7XG4gICAgICB9XG5cbiAgICAgIGlmICghX2lzTmlsKGFyaWFIaWRkZW4pKSB7XG4gICAgICAgIGFyaWFPcHRpb25zWydhcmlhLWhpZGRlbiddID0gYXJpYUhpZGRlbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFyaWFPcHRpb25zO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYm9yZGVyZWQgPSBfdGhpcyRwcm9wczIuYm9yZGVyZWQsXG4gICAgICAgICAgY2lyY3VsYXIgPSBfdGhpcyRwcm9wczIuY2lyY3VsYXIsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBjb2xvciA9IF90aGlzJHByb3BzMi5jb2xvcixcbiAgICAgICAgICBjb3JuZXIgPSBfdGhpcyRwcm9wczIuY29ybmVyLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICAgIGZpdHRlZCA9IF90aGlzJHByb3BzMi5maXR0ZWQsXG4gICAgICAgICAgZmxpcHBlZCA9IF90aGlzJHByb3BzMi5mbGlwcGVkLFxuICAgICAgICAgIGludmVydGVkID0gX3RoaXMkcHJvcHMyLmludmVydGVkLFxuICAgICAgICAgIGxpbmsgPSBfdGhpcyRwcm9wczIubGluayxcbiAgICAgICAgICBsb2FkaW5nID0gX3RoaXMkcHJvcHMyLmxvYWRpbmcsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzMi5uYW1lLFxuICAgICAgICAgIHJvdGF0ZWQgPSBfdGhpcyRwcm9wczIucm90YXRlZCxcbiAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMyLnNpemU7XG4gICAgICB2YXIgY2xhc3NlcyA9IGN4KGNvbG9yLCBuYW1lLCBzaXplLCB1c2VLZXlPbmx5KGJvcmRlcmVkLCAnYm9yZGVyZWQnKSwgdXNlS2V5T25seShjaXJjdWxhciwgJ2NpcmN1bGFyJyksIHVzZUtleU9ubHkoZGlzYWJsZWQsICdkaXNhYmxlZCcpLCB1c2VLZXlPbmx5KGZpdHRlZCwgJ2ZpdHRlZCcpLCB1c2VLZXlPbmx5KGludmVydGVkLCAnaW52ZXJ0ZWQnKSwgdXNlS2V5T25seShsaW5rLCAnbGluaycpLCB1c2VLZXlPbmx5KGxvYWRpbmcsICdsb2FkaW5nJyksIHVzZUtleU9yVmFsdWVBbmRLZXkoY29ybmVyLCAnY29ybmVyJyksIHVzZVZhbHVlQW5kS2V5KGZsaXBwZWQsICdmbGlwcGVkJyksIHVzZVZhbHVlQW5kS2V5KHJvdGF0ZWQsICdyb3RhdGVkJyksICdpY29uJywgY2xhc3NOYW1lKTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoSWNvbiwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShJY29uLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBhcmlhT3B0aW9ucyA9IHRoaXMuZ2V0SWNvbkFyaWFPcHRpb25zKCk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIGFyaWFPcHRpb25zLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJY29uO1xufShQdXJlQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KEljb24sIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgYXM6ICdpJ1xufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShJY29uLCBcIkdyb3VwXCIsIEljb25Hcm91cCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShJY29uLCBcImhhbmRsZWRQcm9wc1wiLCBbXCJhcmlhLWhpZGRlblwiLCBcImFyaWEtbGFiZWxcIiwgXCJhc1wiLCBcImJvcmRlcmVkXCIsIFwiY2lyY3VsYXJcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvcm5lclwiLCBcImRpc2FibGVkXCIsIFwiZml0dGVkXCIsIFwiZmxpcHBlZFwiLCBcImludmVydGVkXCIsIFwibGlua1wiLCBcImxvYWRpbmdcIiwgXCJuYW1lXCIsIFwicm90YXRlZFwiLCBcInNpemVcIl0pO1xuXG5JY29uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEZvcm1hdHRlZCB0byBhcHBlYXIgYm9yZGVyZWQuICovXG4gIGJvcmRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogSWNvbiBjYW4gZm9ybWF0dGVkIHRvIGFwcGVhciBjaXJjdWxhci4gKi9cbiAgY2lyY3VsYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQ29sb3Igb2YgdGhlIGljb24uICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoU1VJLkNPTE9SUyksXG5cbiAgLyoqIEljb25zIGNhbiBkaXNwbGF5IGEgc21hbGxlciBjb3JuZXIgaWNvbi4gKi9cbiAgY29ybmVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9uZU9mKFsndG9wIGxlZnQnLCAndG9wIHJpZ2h0JywgJ2JvdHRvbSBsZWZ0JywgJ2JvdHRvbSByaWdodCddKV0pLFxuXG4gIC8qKiBTaG93IHRoYXQgdGhlIGljb24gaXMgaW5hY3RpdmUuICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogRml0dGVkLCB3aXRob3V0IHNwYWNlIHRvIGxlZnQgb3IgcmlnaHQgb2YgSWNvbi4gKi9cbiAgZml0dGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogSWNvbiBjYW4gYmUgZmxpcHBlZC4gKi9cbiAgZmxpcHBlZDogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbGx5JywgJ3ZlcnRpY2FsbHknXSksXG5cbiAgLyoqIEZvcm1hdHRlZCB0byBoYXZlIGl0cyBjb2xvcnMgaW52ZXJ0ZWQgZm9yIGNvbnRyYXN0LiAqL1xuICBpbnZlcnRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEljb24gY2FuIGJlIGZvcm1hdHRlZCBhcyBhIGxpbmsuICovXG4gIGxpbms6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBJY29uIGNhbiBiZSB1c2VkIGFzIGEgc2ltcGxlIGxvYWRlci4gKi9cbiAgbG9hZGluZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIE5hbWUgb2YgdGhlIGljb24uICovXG4gIG5hbWU6IGN1c3RvbVByb3BUeXBlcy5zdWdnZXN0KFNVSS5BTExfSUNPTlNfSU5fQUxMX0NPTlRFWFRTKSxcblxuICAvKiogSWNvbiBjYW4gcm90YXRlZC4gKi9cbiAgcm90YXRlZDogUHJvcFR5cGVzLm9uZU9mKFsnY2xvY2t3aXNlJywgJ2NvdW50ZXJjbG9ja3dpc2UnXSksXG5cbiAgLyoqIFNpemUgb2YgdGhlIGljb24uICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihfd2l0aG91dChTVUkuU0laRVMsICdtZWRpdW0nKSksXG5cbiAgLyoqIEljb24gY2FuIGhhdmUgYW4gYXJpYSBsYWJlbC4gKi9cbiAgJ2FyaWEtaGlkZGVuJzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogSWNvbiBjYW4gaGF2ZSBhbiBhcmlhIGxhYmVsLiAqL1xuICAnYXJpYS1sYWJlbCc6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB7fTtcbkljb24uY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShJY29uLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiB2YWx1ZVxuICB9O1xufSk7XG5leHBvcnQgZGVmYXVsdCBJY29uOyIsImltcG9ydCBfaW5jbHVkZXMgZnJvbSBcImxvZGFzaC9pbmNsdWRlc1wiO1xuaW1wb3J0IF9mb3JFYWNoIGZyb20gXCJsb2Rhc2gvZm9yRWFjaFwiO1xuZXhwb3J0IHZhciBodG1sSW5wdXRBdHRycyA9IFsvLyBSRUFDVFxuJ3NlbGVjdGVkJywgJ2RlZmF1bHRWYWx1ZScsICdkZWZhdWx0Q2hlY2tlZCcsIC8vIExJTUlURUQgSFRNTCBQUk9QU1xuJ2FjY2VwdCcsICdhdXRvQ2FwaXRhbGl6ZScsICdhdXRvQ29tcGxldGUnLCAnYXV0b0NvcnJlY3QnLCAnYXV0b0ZvY3VzJywgJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnZm9ybScsICdpZCcsICdsYW5nJywgJ2xpc3QnLCAnbWF4JywgJ21heExlbmd0aCcsICdtaW4nLCAnbWluTGVuZ3RoJywgJ211bHRpcGxlJywgJ25hbWUnLCAncGF0dGVybicsICdwbGFjZWhvbGRlcicsICdyZWFkT25seScsICdyZXF1aXJlZCcsICdzdGVwJywgJ3RpdGxlJywgJ3R5cGUnLCAndmFsdWUnXTtcbmV4cG9ydCB2YXIgaHRtbElucHV0RXZlbnRzID0gWy8vIEVWRU5UU1xuLy8ga2V5Ym9hcmRcbidvbktleURvd24nLCAnb25LZXlQcmVzcycsICdvbktleVVwJywgLy8gZm9jdXNcbidvbkZvY3VzJywgJ29uQmx1cicsIC8vIGZvcm1cbidvbkNoYW5nZScsICdvbklucHV0JywgLy8gbW91c2VcbidvbkNsaWNrJywgJ29uQ29udGV4dE1lbnUnLCAnb25EcmFnJywgJ29uRHJhZ0VuZCcsICdvbkRyYWdFbnRlcicsICdvbkRyYWdFeGl0JywgJ29uRHJhZ0xlYXZlJywgJ29uRHJhZ092ZXInLCAnb25EcmFnU3RhcnQnLCAnb25Ecm9wJywgJ29uTW91c2VEb3duJywgJ29uTW91c2VFbnRlcicsICdvbk1vdXNlTGVhdmUnLCAnb25Nb3VzZU1vdmUnLCAnb25Nb3VzZU91dCcsICdvbk1vdXNlT3ZlcicsICdvbk1vdXNlVXAnLCAvLyBzZWxlY3Rpb25cbidvblNlbGVjdCcsIC8vIHRvdWNoXG4nb25Ub3VjaENhbmNlbCcsICdvblRvdWNoRW5kJywgJ29uVG91Y2hNb3ZlJywgJ29uVG91Y2hTdGFydCddO1xuZXhwb3J0IHZhciBodG1sSW5wdXRQcm9wcyA9IFtdLmNvbmNhdChodG1sSW5wdXRBdHRycywgaHRtbElucHV0RXZlbnRzKTtcbmV4cG9ydCB2YXIgaHRtbEltYWdlUHJvcHMgPSBbJ2FsdCcsICdoZWlnaHQnLCAnc3JjJywgJ3NyY1NldCcsICd3aWR0aCddO1xuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIG9iamVjdHMgY29uc2lzdGluZyBvZjogcHJvcHMgb2YgaHRtbCBpbnB1dCBlbGVtZW50IGFuZCByZXN0LlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIEEgUmVhY3RFbGVtZW50IHByb3BzIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMuaHRtbFByb3BzXSBBbiBhcnJheSBvZiBodG1sIGlucHV0IHByb3BzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmluY2x1ZGVBcmlhXSBJbmNsdWRlcyBhbGwgaW5wdXQgcHJvcHMgdGhhdCBzdGFydHMgd2l0aCBcImFyaWEtXCJcbiAqIEByZXR1cm5zIHtbe30sIHt9XX0gQW4gYXJyYXkgb2Ygb2JqZWN0c1xuICovXG5cbmV4cG9ydCB2YXIgcGFydGl0aW9uSFRNTFByb3BzID0gZnVuY3Rpb24gcGFydGl0aW9uSFRNTFByb3BzKHByb3BzKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIF9vcHRpb25zJGh0bWxQcm9wcyA9IG9wdGlvbnMuaHRtbFByb3BzLFxuICAgICAgaHRtbFByb3BzID0gX29wdGlvbnMkaHRtbFByb3BzID09PSB2b2lkIDAgPyBodG1sSW5wdXRQcm9wcyA6IF9vcHRpb25zJGh0bWxQcm9wcyxcbiAgICAgIF9vcHRpb25zJGluY2x1ZGVBcmlhID0gb3B0aW9ucy5pbmNsdWRlQXJpYSxcbiAgICAgIGluY2x1ZGVBcmlhID0gX29wdGlvbnMkaW5jbHVkZUFyaWEgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRpbmNsdWRlQXJpYTtcbiAgdmFyIGlucHV0UHJvcHMgPSB7fTtcbiAgdmFyIHJlc3QgPSB7fTtcblxuICBfZm9yRWFjaChwcm9wcywgZnVuY3Rpb24gKHZhbCwgcHJvcCkge1xuICAgIHZhciBwb3NzaWJsZUFyaWEgPSBpbmNsdWRlQXJpYSAmJiAoL15hcmlhLS4qJC8udGVzdChwcm9wKSB8fCBwcm9wID09PSAncm9sZScpO1xuICAgIHZhciB0YXJnZXQgPSBfaW5jbHVkZXMoaHRtbFByb3BzLCBwcm9wKSB8fCBwb3NzaWJsZUFyaWEgPyBpbnB1dFByb3BzIDogcmVzdDtcbiAgICB0YXJnZXRbcHJvcF0gPSB2YWw7XG4gIH0pO1xuXG4gIHJldHVybiBbaW5wdXRQcm9wcywgcmVzdF07XG59OyIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiO1xuaW1wb3J0IF9pc05pbCBmcm9tIFwibG9kYXNoL2lzTmlsXCI7XG52YXIgaGFzRG9jdW1lbnQgPSAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZG9jdW1lbnQpKSA9PT0gJ29iamVjdCcgJiYgZG9jdW1lbnQgIT09IG51bGw7XG52YXIgaGFzV2luZG93ID0gKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih3aW5kb3cpKSA9PT0gJ29iamVjdCcgJiYgd2luZG93ICE9PSBudWxsICYmIHdpbmRvdy5zZWxmID09PSB3aW5kb3c7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25mdXNpbmctYXJyb3dcblxudmFyIGlzQnJvd3NlciA9IGZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgcmV0dXJuICFfaXNOaWwoaXNCcm93c2VyLm92ZXJyaWRlKSA/IGlzQnJvd3Nlci5vdmVycmlkZSA6IGhhc0RvY3VtZW50ICYmIGhhc1dpbmRvdztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnJvd3NlcjsiLCJpbXBvcnQgX2luUmFuZ2UgZnJvbSBcImxvZGFzaC9pblJhbmdlXCI7XG5pbXBvcnQgX2ZpcnN0IGZyb20gXCJsb2Rhc2gvZmlyc3RcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgX2lzTmlsIGZyb20gXCJsb2Rhc2gvaXNOaWxcIjtcbmltcG9ydCBfc29tZSBmcm9tIFwibG9kYXNoL3NvbWVcIjtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgY2xpY2sncyBjb29yZGluYXRlcyBhcmUgd2l0aGluIHRoZSBib3VuZHMgb2YgYSBub2RlLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL1NlbWFudGljLU9yZy9TZW1hbnRpYy1VSS1SZWFjdC9wdWxsLzIzODRcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbm9kZSAtIEEgRE9NIG5vZGUuXG4gKiBAcGFyYW0ge29iamVjdH0gZSAtIEEgU3ludGhldGljRXZlbnQgb3IgRE9NIEV2ZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbnZhciBkb2VzTm9kZUNvbnRhaW5DbGljayA9IGZ1bmN0aW9uIGRvZXNOb2RlQ29udGFpbkNsaWNrKG5vZGUsIGUpIHtcbiAgaWYgKF9zb21lKFtlLCBub2RlXSwgX2lzTmlsKSkgcmV0dXJuIGZhbHNlOyAvLyBpZiB0aGVyZSBpcyBhbiBlLnRhcmdldCBhbmQgaXQgaXMgaW4gdGhlIGRvY3VtZW50LCB1c2UgYSBzaW1wbGUgbm9kZS5jb250YWlucygpIGNoZWNrXG5cbiAgaWYgKGUudGFyZ2V0KSB7XG4gICAgX2ludm9rZShlLnRhcmdldCwgJ3NldEF0dHJpYnV0ZScsICdkYXRhLXN1aXItY2xpY2stdGFyZ2V0JywgdHJ1ZSk7XG5cbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtc3Vpci1jbGljay10YXJnZXQ9dHJ1ZV0nKSkge1xuICAgICAgX2ludm9rZShlLnRhcmdldCwgJ3JlbW92ZUF0dHJpYnV0ZScsICdkYXRhLXN1aXItY2xpY2stdGFyZ2V0Jyk7XG5cbiAgICAgIHJldHVybiBub2RlLmNvbnRhaW5zKGUudGFyZ2V0KTtcbiAgICB9XG4gIH0gLy8gQmVsb3cgbG9naWMgaGFuZGxlcyBjYXNlcyB3aGVyZSB0aGUgZS50YXJnZXQgaXMgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudC5cbiAgLy8gVGhlIHJlc3VsdCBvZiB0aGUgY2xpY2sgbGlrZWx5IGhhcyByZW1vdmVkIHRoZSBlLnRhcmdldCBub2RlLlxuICAvLyBJbnN0ZWFkIG9mIG5vZGUuY29udGFpbnMoKSwgd2UnbGwgaWRlbnRpZnkgdGhlIGNsaWNrIGJ5IFgvWSBwb3NpdGlvbi5cbiAgLy8gcmV0dXJuIGVhcmx5IGlmIHRoZSBldmVudCBwcm9wZXJ0aWVzIGFyZW4ndCBhdmFpbGFibGVcbiAgLy8gcHJldmVudCBtZWFzdXJpbmcgdGhlIG5vZGUgYW5kIHJlcGFpbnRpbmcgaWYgd2UgZG9uJ3QgbmVlZCB0b1xuXG5cbiAgdmFyIGNsaWVudFggPSBlLmNsaWVudFgsXG4gICAgICBjbGllbnRZID0gZS5jbGllbnRZO1xuICBpZiAoX3NvbWUoW2NsaWVudFgsIGNsaWVudFldLCBfaXNOaWwpKSByZXR1cm4gZmFsc2U7IC8vIGZhbHNlIGlmIHRoZSBub2RlIGlzIG5vdCB2aXNpYmxlXG5cbiAgdmFyIGNsaWVudFJlY3RzID0gbm9kZS5nZXRDbGllbnRSZWN0cygpOyAvLyBIZWFkcyBVcCFcbiAgLy8gZ2V0Q2xpZW50UmVjdHMgcmV0dXJucyBhIERPTVJlY3RMaXN0LCBub3QgYW4gYXJyYXkgbm9yIGEgcGxhaW4gb2JqZWN0XG4gIC8vIFdlIGV4cGxpY2l0bHkgYXZvaWQgXy5pc0VtcHR5IGFuZCBjaGVjayAubGVuZ3RoIHRvIGNvdmVyIGFsbCBwb3NzaWJsZSBzaGFwZXNcblxuICBpZiAoIW5vZGUub2Zmc2V0V2lkdGggfHwgIW5vZGUub2Zmc2V0SGVpZ2h0IHx8ICFjbGllbnRSZWN0cyB8fCAhY2xpZW50UmVjdHMubGVuZ3RoKSByZXR1cm4gZmFsc2U7IC8vIGZhbHNlIGlmIHRoZSBub2RlIGRvZXNuJ3QgaGF2ZSBhIHZhbGlkIGJvdW5kaW5nIHJlY3RcblxuICB2YXIgX2ZpcnN0MiA9IF9maXJzdChjbGllbnRSZWN0cyksXG4gICAgICB0b3AgPSBfZmlyc3QyLnRvcCxcbiAgICAgIGJvdHRvbSA9IF9maXJzdDIuYm90dG9tLFxuICAgICAgbGVmdCA9IF9maXJzdDIubGVmdCxcbiAgICAgIHJpZ2h0ID0gX2ZpcnN0Mi5yaWdodDtcblxuICBpZiAoX3NvbWUoW3RvcCwgYm90dG9tLCBsZWZ0LCByaWdodF0sIF9pc05pbCkpIHJldHVybiBmYWxzZTsgLy8gd2UgYWRkIGEgc21hbGwgZGVjaW1hbCB0byB0aGUgdXBwZXIgYm91bmQganVzdCB0byBtYWtlIGl0IGluY2x1c2l2ZVxuICAvLyBkb24ndCBhZGQgYW4gd2hvbGUgcGl4ZWwgKDEpIGFzIHRoZSBldmVudC9ub2RlIHZhbHVlcyBtYXkgYmUgZGVjaW1hbCBzZW5zaXRpdmVcblxuICByZXR1cm4gX2luUmFuZ2UoY2xpZW50WSwgdG9wLCBib3R0b20gKyAwLjAwMSkgJiYgX2luUmFuZ2UoY2xpZW50WCwgbGVmdCwgcmlnaHQgKyAwLjAwMSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBkb2VzTm9kZUNvbnRhaW5DbGljazsiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSBcImxvZGFzaC9pc1VuZGVmaW5lZFwiO1xuaW1wb3J0IF9zdGFydHNXaXRoIGZyb20gXCJsb2Rhc2gvc3RhcnRzV2l0aFwiO1xuaW1wb3J0IF9maWx0ZXIgZnJvbSBcImxvZGFzaC9maWx0ZXJcIjtcbmltcG9ydCBfaXNFbXB0eSBmcm9tIFwibG9kYXNoL2lzRW1wdHlcIjtcbmltcG9ydCBfa2V5cyBmcm9tIFwibG9kYXNoL2tleXNcIjtcbmltcG9ydCBfaW50ZXJzZWN0aW9uIGZyb20gXCJsb2Rhc2gvaW50ZXJzZWN0aW9uXCI7XG5pbXBvcnQgX2hhcyBmcm9tIFwibG9kYXNoL2hhc1wiO1xuaW1wb3J0IF9lYWNoIGZyb20gXCJsb2Rhc2gvZWFjaFwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgZ2V0RGVmYXVsdFByb3BOYW1lID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BOYW1lKHByb3ApIHtcbiAgcmV0dXJuIFwiZGVmYXVsdFwiLmNvbmNhdChwcm9wWzBdLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpKTtcbn07XG4vKipcbiAqIFJldHVybiB0aGUgYXV0byBjb250cm9sbGVkIHN0YXRlIHZhbHVlIGZvciBhIGdpdmUgcHJvcC4gVGhlIGluaXRpYWwgdmFsdWUgaXMgY2hvc2VuIGluIHRoaXMgb3JkZXI6XG4gKiAgLSByZWd1bGFyIHByb3BzXG4gKiAgLSB0aGVuLCBkZWZhdWx0IHByb3BzXG4gKiAgLSB0aGVuLCBpbml0aWFsIHN0YXRlXG4gKiAgLSB0aGVuLCBgY2hlY2tlZGAgZGVmYXVsdHMgdG8gZmFsc2VcbiAqICAtIHRoZW4sIGB2YWx1ZWAgZGVmYXVsdHMgdG8gJycgb3IgW10gaWYgcHJvcHMubXVsdGlwbGVcbiAqICAtIGVsc2UsIHVuZGVmaW5lZFxuICpcbiAqICBAcGFyYW0ge3N0cmluZ30gcHJvcE5hbWUgQSBwcm9wIG5hbWVcbiAqICBAcGFyYW0ge29iamVjdH0gW3Byb3BzXSBBIHByb3BzIG9iamVjdFxuICogIEBwYXJhbSB7b2JqZWN0fSBbc3RhdGVdIEEgc3RhdGUgb2JqZWN0XG4gKiAgQHBhcmFtIHtib29sZWFufSBbaW5jbHVkZURlZmF1bHRzPWZhbHNlXSBXaGV0aGVyIG9yIG5vdCB0byBoZWVkIHRoZSBkZWZhdWx0IHByb3BzIG9yIGluaXRpYWwgc3RhdGVcbiAqL1xuXG5leHBvcnQgdmFyIGdldEF1dG9Db250cm9sbGVkU3RhdGVWYWx1ZSA9IGZ1bmN0aW9uIGdldEF1dG9Db250cm9sbGVkU3RhdGVWYWx1ZShwcm9wTmFtZSwgcHJvcHMsIHN0YXRlKSB7XG4gIHZhciBpbmNsdWRlRGVmYXVsdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuICAvLyByZWd1bGFyIHByb3BzXG4gIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gIGlmIChwcm9wVmFsdWUgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHByb3BWYWx1ZTtcblxuICBpZiAoaW5jbHVkZURlZmF1bHRzKSB7XG4gICAgLy8gZGVmYXVsdFByb3BzXG4gICAgdmFyIGRlZmF1bHRQcm9wID0gcHJvcHNbZ2V0RGVmYXVsdFByb3BOYW1lKHByb3BOYW1lKV07XG4gICAgaWYgKGRlZmF1bHRQcm9wICE9PSB1bmRlZmluZWQpIHJldHVybiBkZWZhdWx0UHJvcDsgLy8gaW5pdGlhbCBzdGF0ZSAtIHN0YXRlIG1heSBiZSBudWxsIG9yIHVuZGVmaW5lZFxuXG4gICAgaWYgKHN0YXRlKSB7XG4gICAgICB2YXIgaW5pdGlhbFN0YXRlID0gc3RhdGVbcHJvcE5hbWVdO1xuICAgICAgaWYgKGluaXRpYWxTdGF0ZSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gaW5pdGlhbFN0YXRlO1xuICAgIH1cbiAgfSAvLyBSZWFjdCBkb2Vzbid0IGFsbG93IGNoYW5naW5nIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgY29tcG9uZW50cyxcbiAgLy8gZGVmYXVsdCBjaGVja2VkL3ZhbHVlIGlmIHRoZXkgd2VyZSBub3QgcHJlc2VudC5cblxuXG4gIGlmIChwcm9wTmFtZSA9PT0gJ2NoZWNrZWQnKSByZXR1cm4gZmFsc2U7XG4gIGlmIChwcm9wTmFtZSA9PT0gJ3ZhbHVlJykgcmV0dXJuIHByb3BzLm11bHRpcGxlID8gW10gOiAnJzsgLy8gb3RoZXJ3aXNlLCB1bmRlZmluZWRcbn07XG5cbnZhciBBdXRvQ29udHJvbGxlZENvbXBvbmVudCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQXV0b0NvbnRyb2xsZWRDb21wb25lbnQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEF1dG9Db250cm9sbGVkQ29tcG9uZW50KCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEF1dG9Db250cm9sbGVkQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKEF1dG9Db250cm9sbGVkQ29tcG9uZW50KSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwidHJ5U2V0U3RhdGVcIiwgZnVuY3Rpb24gKHN0YXRlLCBjYWxsYmFjaykge1xuICAgICAgdmFyIG5ld1N0YXRlID0gT2JqZWN0LmtleXMoc3RhdGUpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwcm9wKSB7XG4gICAgICAgIC8vIGlnbm9yZSBwcm9wcyBkZWZpbmVkIGJ5IHRoZSBwYXJlbnRcbiAgICAgICAgaWYgKF90aGlzLnByb3BzW3Byb3BdICE9PSB1bmRlZmluZWQpIHJldHVybiBhY2M7XG4gICAgICAgIGFjY1twcm9wXSA9IHN0YXRlW3Byb3BdO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG5ld1N0YXRlKS5sZW5ndGggPiAwKSBfdGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSwgY2FsbGJhY2spO1xuICAgIH0pO1xuXG4gICAgdmFyIGF1dG9Db250cm9sbGVkUHJvcHMgPSBfdGhpcy5jb25zdHJ1Y3Rvci5hdXRvQ29udHJvbGxlZFByb3BzO1xuXG4gICAgdmFyIF9zdGF0ZSA9IF9pbnZva2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICdnZXRJbml0aWFsQXV0b0NvbnRyb2xsZWRTdGF0ZScsIF90aGlzLnByb3BzKSB8fCB7fTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgX3RoaXMkY29uc3RydWN0b3IgPSBfdGhpcy5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBkZWZhdWx0UHJvcHMgPSBfdGhpcyRjb25zdHJ1Y3Rvci5kZWZhdWx0UHJvcHMsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJGNvbnN0cnVjdG9yLm5hbWUsXG4gICAgICAgICAgcHJvcFR5cGVzID0gX3RoaXMkY29uc3RydWN0b3IucHJvcFR5cGVzOyAvLyByZXF1aXJlIHN0YXRpYyBhdXRvQ29udHJvbGxlZFByb3BzXG5cbiAgICAgIGlmICghYXV0b0NvbnRyb2xsZWRQcm9wcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQXV0byBjb250cm9sbGVkIFwiLmNvbmNhdChuYW1lLCBcIiBtdXN0IHNwZWNpZnkgYSBzdGF0aWMgYXV0b0NvbnRyb2xsZWRQcm9wcyBhcnJheS5cIikpO1xuICAgICAgfSAvLyByZXF1aXJlIHByb3BUeXBlc1xuXG5cbiAgICAgIF9lYWNoKGF1dG9Db250cm9sbGVkUHJvcHMsIGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHZhciBkZWZhdWx0UHJvcCA9IGdldERlZmF1bHRQcm9wTmFtZShwcm9wKTsgLy8gcmVndWxhciBwcm9wXG5cbiAgICAgICAgaWYgKCFfaGFzKHByb3BUeXBlcywgZGVmYXVsdFByb3ApKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlwiLmNvbmNhdChuYW1lLCBcIiBpcyBtaXNzaW5nIFxcXCJcIikuY29uY2F0KGRlZmF1bHRQcm9wLCBcIlxcXCIgcHJvcFR5cGVzIHZhbGlkYXRpb24gZm9yIGF1dG8gY29udHJvbGxlZCBwcm9wIFxcXCJcIikuY29uY2F0KHByb3AsIFwiXFxcIi5cIikpO1xuICAgICAgICB9IC8vIGl0cyBkZWZhdWx0IHByb3BcblxuXG4gICAgICAgIGlmICghX2hhcyhwcm9wVHlwZXMsIHByb3ApKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlwiLmNvbmNhdChuYW1lLCBcIiBpcyBtaXNzaW5nIHByb3BUeXBlcyB2YWxpZGF0aW9uIGZvciBhdXRvIGNvbnRyb2xsZWQgcHJvcCBcXFwiXCIpLmNvbmNhdChwcm9wLCBcIlxcXCIuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIHByZXZlbnQgYXV0b0NvbnRyb2xsZWRQcm9wcyBpbiBkZWZhdWx0UHJvcHNcbiAgICAgIC8vXG4gICAgICAvLyBXaGVuIHNldHRpbmcgc3RhdGUsIGF1dG8gY29udHJvbGxlZCBwcm9wcyB2YWx1ZXMgYWx3YXlzIHdpbiAoc28gdGhlIHBhcmVudCBjYW4gbWFuYWdlIHRoZW0pLlxuICAgICAgLy8gSXQgaXMgbm90IHJlYXNvbmFibGUgdG8gZGVjaXBoZXIgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgYW5kIGRlZmF1bHRQcm9wcy5cbiAgICAgIC8vIEFsbG93aW5nIGRlZmF1bHRQcm9wcyByZXN1bHRzIGluIHRyeVNldFN0YXRlIGFsd2F5cyBkZWZlcnJpbmcgdG8gdGhlIGRlZmF1bHRQcm9wIHZhbHVlLlxuICAgICAgLy8gQXV0byBjb250cm9sbGVkIHByb3BzIGFsc28gbGlzdGVkIGluIGRlZmF1bHRQcm9wcyBjYW4gbmV2ZXIgYmUgdXBkYXRlZC5cbiAgICAgIC8vXG4gICAgICAvLyBUbyBzZXQgZGVmYXVsdHMgZm9yIGFuIEF1dG9Db250cm9sbGVkIHByb3AsIHlvdSBjYW4gc2V0IHRoZSBpbml0aWFsIHN0YXRlIGluIHRoZVxuICAgICAgLy8gY29uc3RydWN0b3Igb3IgYnkgdXNpbmcgYW4gRVM3IHByb3BlcnR5IGluaXRpYWxpemVyOlxuICAgICAgLy8gaHR0cHM6Ly9iYWJlbGpzLmlvL2Jsb2cvMjAxNS8wNi8wNy9yZWFjdC1vbi1lczYtcGx1cyNwcm9wZXJ0eS1pbml0aWFsaXplcnNcblxuXG4gICAgICB2YXIgaWxsZWdhbERlZmF1bHRzID0gX2ludGVyc2VjdGlvbihhdXRvQ29udHJvbGxlZFByb3BzLCBfa2V5cyhkZWZhdWx0UHJvcHMpKTtcblxuICAgICAgaWYgKCFfaXNFbXB0eShpbGxlZ2FsRGVmYXVsdHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydEbyBub3Qgc2V0IGRlZmF1bHRQcm9wcyBmb3IgYXV0b0NvbnRyb2xsZWRQcm9wcy4gWW91IGNhbiBzZXQgZGVmYXVsdHMgYnknLCAnc2V0dGluZyBzdGF0ZSBpbiB0aGUgY29uc3RydWN0b3Igb3IgdXNpbmcgYW4gRVM3IHByb3BlcnR5IGluaXRpYWxpemVyJywgJyhodHRwczovL2JhYmVsanMuaW8vYmxvZy8yMDE1LzA2LzA3L3JlYWN0LW9uLWVzNi1wbHVzI3Byb3BlcnR5LWluaXRpYWxpemVycyknLCBcIlNlZSBcIi5jb25jYXQobmFtZSwgXCIgcHJvcHM6IFxcXCJcIikuY29uY2F0KGlsbGVnYWxEZWZhdWx0cywgXCJcXFwiLlwiKV0uam9pbignICcpKTtcbiAgICAgIH0gLy8gcHJldmVudCBsaXN0aW5nIGRlZmF1bHRQcm9wcyBpbiBhdXRvQ29udHJvbGxlZFByb3BzXG4gICAgICAvL1xuICAgICAgLy8gRGVmYXVsdCBwcm9wcyBhcmUgYXV0b21hdGljYWxseSBoYW5kbGVkLlxuICAgICAgLy8gTGlzdGluZyBkZWZhdWx0cyBpbiBhdXRvQ29udHJvbGxlZFByb3BzIHdvdWxkIHJlc3VsdCBpbiBhbGxvd2luZyBkZWZhdWx0RGVmYXVsdFZhbHVlIHByb3BzLlxuXG5cbiAgICAgIHZhciBpbGxlZ2FsQXV0b0NvbnRyb2xsZWQgPSBfZmlsdGVyKGF1dG9Db250cm9sbGVkUHJvcHMsIGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBfc3RhcnRzV2l0aChwcm9wLCAnZGVmYXVsdCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghX2lzRW1wdHkoaWxsZWdhbEF1dG9Db250cm9sbGVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnRG8gbm90IGFkZCBkZWZhdWx0IHByb3BzIHRvIGF1dG9Db250cm9sbGVkUHJvcHMuJywgJ0RlZmF1bHQgcHJvcHMgYXJlIGF1dG9tYXRpY2FsbHkgaGFuZGxlZC4nLCBcIlNlZSBcIi5jb25jYXQobmFtZSwgXCIgYXV0b0NvbnRyb2xsZWRQcm9wczogXFxcIlwiKS5jb25jYXQoaWxsZWdhbEF1dG9Db250cm9sbGVkLCBcIlxcXCIuXCIpXS5qb2luKCcgJykpO1xuICAgICAgfVxuICAgIH0gLy8gQXV0byBjb250cm9sbGVkIHByb3BzIGFyZSBjb3BpZWQgdG8gc3RhdGUuXG4gICAgLy8gU2V0IGluaXRpYWwgc3RhdGUgYnkgY29weWluZyBhdXRvIGNvbnRyb2xsZWQgcHJvcHMgdG8gc3RhdGUuXG4gICAgLy8gQWxzbyBsb29rIGZvciB0aGUgZGVmYXVsdCBwcm9wIGZvciBhbnkgYXV0byBjb250cm9sbGVkIHByb3BzIChmb28gPT4gZGVmYXVsdEZvbylcbiAgICAvLyBzbyB3ZSBjYW4gc2V0IGluaXRpYWwgdmFsdWVzIGZyb20gZGVmYXVsdHMuXG5cblxuICAgIHZhciBpbml0aWFsQXV0b0NvbnRyb2xsZWRTdGF0ZSA9IGF1dG9Db250cm9sbGVkUHJvcHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHByb3ApIHtcbiAgICAgIGFjY1twcm9wXSA9IGdldEF1dG9Db250cm9sbGVkU3RhdGVWYWx1ZShwcm9wLCBfdGhpcy5wcm9wcywgX3N0YXRlLCB0cnVlKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRQcm9wTmFtZSA9IGdldERlZmF1bHRQcm9wTmFtZShwcm9wKTtcbiAgICAgICAgdmFyIF9uYW1lID0gX3RoaXMuY29uc3RydWN0b3IubmFtZTsgLy8gcHJldmVudCBkZWZhdWx0Rm9vPXt9IGFsb25nIHNpZGUgZm9vPXt9XG5cbiAgICAgICAgaWYgKCFfaXNVbmRlZmluZWQoX3RoaXMucHJvcHNbZGVmYXVsdFByb3BOYW1lXSkgJiYgIV9pc1VuZGVmaW5lZChfdGhpcy5wcm9wc1twcm9wXSkpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiXCIuY29uY2F0KF9uYW1lLCBcIiBwcm9wIFxcXCJcIikuY29uY2F0KHByb3AsIFwiXFxcIiBpcyBhdXRvIGNvbnRyb2xsZWQuIFNwZWNpZnkgZWl0aGVyIFwiKS5jb25jYXQoZGVmYXVsdFByb3BOYW1lLCBcIiBvciBcIikuY29uY2F0KHByb3AsIFwiLCBidXQgbm90IGJvdGguXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgICBfdGhpcy5zdGF0ZSA9IF9vYmplY3RTcHJlYWQoe30sIF9zdGF0ZSwgaW5pdGlhbEF1dG9Db250cm9sbGVkU3RhdGUpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG5cblxuICBfY3JlYXRlQ2xhc3MoQXV0b0NvbnRyb2xsZWRDb21wb25lbnQsIFt7XG4gICAga2V5OiBcIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIGF1dG9Db250cm9sbGVkUHJvcHMgPSB0aGlzLmNvbnN0cnVjdG9yLmF1dG9Db250cm9sbGVkUHJvcHM7IC8vIFNvbHZlIHRoZSBuZXh0IHN0YXRlIGZvciBhdXRvQ29udHJvbGxlZFByb3BzXG5cbiAgICAgIHZhciBuZXdTdGF0ZSA9IGF1dG9Db250cm9sbGVkUHJvcHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHByb3ApIHtcbiAgICAgICAgdmFyIGlzTmV4dERlZmluZWQgPSAhX2lzVW5kZWZpbmVkKG5leHRQcm9wc1twcm9wXSk7IC8vIGlmIG5leHQgaXMgZGVmaW5lZCB0aGVuIHVzZSBpdHMgdmFsdWVcblxuICAgICAgICBpZiAoaXNOZXh0RGVmaW5lZCkgYWNjW3Byb3BdID0gbmV4dFByb3BzW3Byb3BdO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG5ld1N0YXRlKS5sZW5ndGggPiAwKSB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2FmZWx5IGF0dGVtcHQgdG8gc2V0IHN0YXRlIGZvciBwcm9wcyB0aGF0IG1pZ2h0IGJlIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIuXG4gICAgICogU2Vjb25kIGFyZ3VtZW50IGlzIGEgc3RhdGUgb2JqZWN0IHRoYXQgaXMgYWx3YXlzIHBhc3NlZCB0byBzZXRTdGF0ZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgU3RhdGUgdGhhdCBjb3JyZXNwb25kcyB0byBjb250cm9sbGVkIHByb3BzLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gQ2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIGFmdGVyIHNldFN0YXRlIGFwcGxpZWQuXG4gICAgICovXG5cbiAgfV0pO1xuXG4gIHJldHVybiBBdXRvQ29udHJvbGxlZENvbXBvbmVudDtcbn0oQ29tcG9uZW50KTtcblxuZXhwb3J0IHsgQXV0b0NvbnRyb2xsZWRDb21wb25lbnQgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgeyBoYW5kbGVSZWYsIFJlZiB9IGZyb20gJ0BzdGFyZHVzdC11aS9yZWFjdC1jb21wb25lbnQtcmVmJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IGN1c3RvbVByb3BUeXBlcywgaXNCcm93c2VyIH0gZnJvbSAnLi4vLi4vbGliJztcblxuLyoqXG4gKiBBbiBpbm5lciBjb21wb25lbnQgdGhhdCBhbGxvd3MgeW91IHRvIHJlbmRlciBjaGlsZHJlbiBvdXRzaWRlIHRoZWlyIHBhcmVudC5cbiAqL1xudmFyIFBvcnRhbElubmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3J0YWxJbm5lciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9ydGFsSW5uZXIoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsSW5uZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoUG9ydGFsSW5uZXIpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVSZWZcIiwgZnVuY3Rpb24gKGMpIHtcbiAgICAgIGhhbmRsZVJlZihfdGhpcy5wcm9wcy5pbm5lclJlZiwgYyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUG9ydGFsSW5uZXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgX2ludm9rZSh0aGlzLnByb3BzLCAnb25Nb3VudCcsIG51bGwsIHRoaXMucHJvcHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIF9pbnZva2UodGhpcy5wcm9wcywgJ29uVW5tb3VudCcsIG51bGwsIHRoaXMucHJvcHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgaWYgKCFpc0Jyb3dzZXIoKSkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgX3RoaXMkcHJvcHMkbW91bnROb2RlID0gX3RoaXMkcHJvcHMubW91bnROb2RlLFxuICAgICAgICAgIG1vdW50Tm9kZSA9IF90aGlzJHByb3BzJG1vdW50Tm9kZSA9PT0gdm9pZCAwID8gZG9jdW1lbnQuYm9keSA6IF90aGlzJHByb3BzJG1vdW50Tm9kZTtcbiAgICAgIHJldHVybiBjcmVhdGVQb3J0YWwoUmVhY3QuY3JlYXRlRWxlbWVudChSZWYsIHtcbiAgICAgICAgaW5uZXJSZWY6IHRoaXMuaGFuZGxlUmVmXG4gICAgICB9LCBjaGlsZHJlbiksIG1vdW50Tm9kZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvcnRhbElubmVyO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoUG9ydGFsSW5uZXIsIFwiaGFuZGxlZFByb3BzXCIsIFtcImNoaWxkcmVuXCIsIFwiaW5uZXJSZWZcIiwgXCJtb3VudE5vZGVcIiwgXCJvbk1vdW50XCIsIFwib25Vbm1vdW50XCJdKTtcblxuUG9ydGFsSW5uZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKiogQ2FsbGVkIHdpdGggYSByZWYgdG8gdGhlIGlubmVyIG5vZGUuICovXG4gIGlubmVyUmVmOiBjdXN0b21Qcm9wVHlwZXMucmVmLFxuXG4gIC8qKiBUaGUgbm9kZSB3aGVyZSB0aGUgcG9ydGFsIHNob3VsZCBtb3VudC4gKi9cbiAgbW91bnROb2RlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgcG9ydGFsIGlzIG1vdW50ZWQgb24gdGhlIERPTVxuICAgKlxuICAgKiBAcGFyYW0ge251bGx9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25Nb3VudDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBwb3J0YWwgaXMgdW5tb3VudGVkIGZyb20gdGhlIERPTVxuICAgKlxuICAgKiBAcGFyYW0ge251bGx9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25Vbm1vdW50OiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgUG9ydGFsSW5uZXI7IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2ludm9rZSBmcm9tIFwibG9kYXNoL2ludm9rZVwiO1xuaW1wb3J0IEV2ZW50U3RhY2sgZnJvbSAnQHNlbWFudGljLXVpLXJlYWN0L2V2ZW50LXN0YWNrJztcbmltcG9ydCB7IGhhbmRsZVJlZiwgUmVmIH0gZnJvbSAnQHN0YXJkdXN0LXVpL3JlYWN0LWNvbXBvbmVudC1yZWYnO1xuaW1wb3J0IGtleWJvYXJkS2V5IGZyb20gJ2tleWJvYXJkLWtleSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCwgY3JlYXRlUmVmLCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEF1dG9Db250cm9sbGVkQ29tcG9uZW50IGFzIENvbXBvbmVudCwgY3VzdG9tUHJvcFR5cGVzLCBkb2VzTm9kZUNvbnRhaW5DbGljayB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgUG9ydGFsSW5uZXIgZnJvbSAnLi9Qb3J0YWxJbm5lcic7XG5cbi8qKlxuICogQSBjb21wb25lbnQgdGhhdCBhbGxvd3MgeW91IHRvIHJlbmRlciBjaGlsZHJlbiBvdXRzaWRlIHRoZWlyIHBhcmVudC5cbiAqIEBzZWUgTW9kYWxcbiAqIEBzZWUgUG9wdXBcbiAqIEBzZWUgRGltbWVyXG4gKiBAc2VlIENvbmZpcm1cbiAqL1xudmFyIFBvcnRhbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9ydGFsLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3J0YWwoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFBvcnRhbCkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNvbnRlbnRSZWZcIiwgY3JlYXRlUmVmKCkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInRyaWdnZXJSZWZcIiwgY3JlYXRlUmVmKCkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImxhdGVzdERvY3VtZW50TW91c2VEb3duRXZlbnRcIiwgbnVsbCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlRG9jdW1lbnRNb3VzZURvd25cIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmxhdGVzdERvY3VtZW50TW91c2VEb3duRXZlbnQgPSBlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZURvY3VtZW50Q2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBjbG9zZU9uRG9jdW1lbnRDbGljayA9IF90aGlzLnByb3BzLmNsb3NlT25Eb2N1bWVudENsaWNrO1xuICAgICAgdmFyIGN1cnJlbnRNb3VzZURvd25FdmVudCA9IF90aGlzLmxhdGVzdERvY3VtZW50TW91c2VEb3duRXZlbnQ7XG4gICAgICBfdGhpcy5sYXRlc3REb2N1bWVudE1vdXNlRG93bkV2ZW50ID0gbnVsbDtcblxuICAgICAgaWYgKCFfdGhpcy5jb250ZW50UmVmLmN1cnJlbnQgfHwgLy8gbm8gcG9ydGFsXG4gICAgICBkb2VzTm9kZUNvbnRhaW5DbGljayhfdGhpcy50cmlnZ2VyUmVmLmN1cnJlbnQsIGUpIHx8IC8vIGV2ZW50IGhhcHBlbmVkIGluIHRyaWdnZXIgKGRlbGVnYXRlIHRvIHRyaWdnZXIgaGFuZGxlcnMpXG4gICAgICBjdXJyZW50TW91c2VEb3duRXZlbnQgJiYgZG9lc05vZGVDb250YWluQ2xpY2soX3RoaXMuY29udGVudFJlZi5jdXJyZW50LCBjdXJyZW50TW91c2VEb3duRXZlbnQpIHx8IC8vIGV2ZW50IG9yaWdpbmF0ZWQgaW4gdGhlIHBvcnRhbCBidXQgd2FzIGVuZGVkIG91dHNpZGVcbiAgICAgIGRvZXNOb2RlQ29udGFpbkNsaWNrKF90aGlzLmNvbnRlbnRSZWYuY3VycmVudCwgZSkgLy8gZXZlbnQgaGFwcGVuZWQgaW4gdGhlIHBvcnRhbFxuICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIGlnbm9yZSB0aGUgY2xpY2tcblxuXG4gICAgICBpZiAoY2xvc2VPbkRvY3VtZW50Q2xpY2spIHtcbiAgICAgICAgX3RoaXMuY2xvc2UoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlRXNjYXBlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIV90aGlzLnByb3BzLmNsb3NlT25Fc2NhcGUpIHJldHVybjtcbiAgICAgIGlmIChrZXlib2FyZEtleS5nZXRDb2RlKGUpICE9PSBrZXlib2FyZEtleS5Fc2NhcGUpIHJldHVybjtcblxuICAgICAgX3RoaXMuY2xvc2UoZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlUG9ydGFsTW91c2VMZWF2ZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2xvc2VPblBvcnRhbE1vdXNlTGVhdmUgPSBfdGhpcyRwcm9wcy5jbG9zZU9uUG9ydGFsTW91c2VMZWF2ZSxcbiAgICAgICAgICBtb3VzZUxlYXZlRGVsYXkgPSBfdGhpcyRwcm9wcy5tb3VzZUxlYXZlRGVsYXk7XG4gICAgICBpZiAoIWNsb3NlT25Qb3J0YWxNb3VzZUxlYXZlKSByZXR1cm47IC8vIERvIG5vdCBjbG9zZSB0aGUgcG9ydGFsIHdoZW4gJ21vdXNlbGVhdmUnIGlzIHRyaWdnZXJlZCBieSBjaGlsZHJlblxuXG4gICAgICBpZiAoZS50YXJnZXQgIT09IF90aGlzLmNvbnRlbnRSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgICAgX3RoaXMubW91c2VMZWF2ZVRpbWVyID0gX3RoaXMuY2xvc2VXaXRoVGltZW91dChlLCBtb3VzZUxlYXZlRGVsYXkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVBvcnRhbE1vdXNlRW50ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gSW4gb3JkZXIgdG8gZW5hYmxlIG1vdXNpbmcgZnJvbSB0aGUgdHJpZ2dlciB0byB0aGUgcG9ydGFsLCB3ZSBuZWVkIHRvXG4gICAgICAvLyBjbGVhciB0aGUgbW91c2VsZWF2ZSB0aW1lciB0aGF0IHdhcyBzZXQgd2hlbiBsZWF2aW5nIHRoZSB0cmlnZ2VyLlxuICAgICAgdmFyIGNsb3NlT25Qb3J0YWxNb3VzZUxlYXZlID0gX3RoaXMucHJvcHMuY2xvc2VPblBvcnRhbE1vdXNlTGVhdmU7XG4gICAgICBpZiAoIWNsb3NlT25Qb3J0YWxNb3VzZUxlYXZlKSByZXR1cm47XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMubW91c2VMZWF2ZVRpbWVyKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVUcmlnZ2VyQmx1clwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRyaWdnZXIgPSBfdGhpcyRwcm9wczIudHJpZ2dlcixcbiAgICAgICAgICBjbG9zZU9uVHJpZ2dlckJsdXIgPSBfdGhpcyRwcm9wczIuY2xvc2VPblRyaWdnZXJCbHVyOyAvLyBDYWxsIG9yaWdpbmFsIGV2ZW50IGhhbmRsZXJcblxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgcmVzdFtfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgX2ludm9rZS5hcHBseSh2b2lkIDAsIFt0cmlnZ2VyLCAncHJvcHMub25CbHVyJywgZV0uY29uY2F0KHJlc3QpKTsgLy8gSUUgMTEgZG9lc24ndCB3b3JrIHdpdGggcmVsYXRlZFRhcmdldCBpbiBibHVyIGV2ZW50c1xuXG5cbiAgICAgIHZhciB0YXJnZXQgPSBlLnJlbGF0ZWRUYXJnZXQgfHwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudDsgLy8gZG8gbm90IGNsb3NlIGlmIGZvY3VzIGlzIGdpdmVuIHRvIHRoZSBwb3J0YWxcblxuICAgICAgdmFyIGRpZEZvY3VzUG9ydGFsID0gX2ludm9rZShfdGhpcy5jb250ZW50UmVmLmN1cnJlbnQsICdjb250YWlucycsIHRhcmdldCk7XG5cbiAgICAgIGlmICghY2xvc2VPblRyaWdnZXJCbHVyIHx8IGRpZEZvY3VzUG9ydGFsKSByZXR1cm47XG5cbiAgICAgIF90aGlzLmNsb3NlKGUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVRyaWdnZXJDbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRyaWdnZXIgPSBfdGhpcyRwcm9wczMudHJpZ2dlcixcbiAgICAgICAgICBjbG9zZU9uVHJpZ2dlckNsaWNrID0gX3RoaXMkcHJvcHMzLmNsb3NlT25UcmlnZ2VyQ2xpY2ssXG4gICAgICAgICAgb3Blbk9uVHJpZ2dlckNsaWNrID0gX3RoaXMkcHJvcHMzLm9wZW5PblRyaWdnZXJDbGljaztcbiAgICAgIHZhciBvcGVuID0gX3RoaXMuc3RhdGUub3BlbjsgLy8gQ2FsbCBvcmlnaW5hbCBldmVudCBoYW5kbGVyXG5cbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgIHJlc3RbX2tleTMgLSAxXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIF9pbnZva2UuYXBwbHkodm9pZCAwLCBbdHJpZ2dlciwgJ3Byb3BzLm9uQ2xpY2snLCBlXS5jb25jYXQocmVzdCkpO1xuXG4gICAgICBpZiAob3BlbiAmJiBjbG9zZU9uVHJpZ2dlckNsaWNrKSB7XG4gICAgICAgIF90aGlzLmNsb3NlKGUpO1xuICAgICAgfSBlbHNlIGlmICghb3BlbiAmJiBvcGVuT25UcmlnZ2VyQ2xpY2spIHtcbiAgICAgICAgX3RoaXMub3BlbihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVUcmlnZ2VyRm9jdXNcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICB0cmlnZ2VyID0gX3RoaXMkcHJvcHM0LnRyaWdnZXIsXG4gICAgICAgICAgb3Blbk9uVHJpZ2dlckZvY3VzID0gX3RoaXMkcHJvcHM0Lm9wZW5PblRyaWdnZXJGb2N1czsgLy8gQ2FsbCBvcmlnaW5hbCBldmVudCBoYW5kbGVyXG5cbiAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuNCA+IDEgPyBfbGVuNCAtIDEgOiAwKSwgX2tleTQgPSAxOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgIHJlc3RbX2tleTQgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICB9XG5cbiAgICAgIF9pbnZva2UuYXBwbHkodm9pZCAwLCBbdHJpZ2dlciwgJ3Byb3BzLm9uRm9jdXMnLCBlXS5jb25jYXQocmVzdCkpO1xuXG4gICAgICBpZiAoIW9wZW5PblRyaWdnZXJGb2N1cykgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5vcGVuKGUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVRyaWdnZXJNb3VzZUxlYXZlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMubW91c2VFbnRlclRpbWVyKTtcbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICB0cmlnZ2VyID0gX3RoaXMkcHJvcHM1LnRyaWdnZXIsXG4gICAgICAgICAgY2xvc2VPblRyaWdnZXJNb3VzZUxlYXZlID0gX3RoaXMkcHJvcHM1LmNsb3NlT25UcmlnZ2VyTW91c2VMZWF2ZSxcbiAgICAgICAgICBtb3VzZUxlYXZlRGVsYXkgPSBfdGhpcyRwcm9wczUubW91c2VMZWF2ZURlbGF5OyAvLyBDYWxsIG9yaWdpbmFsIGV2ZW50IGhhbmRsZXJcblxuICAgICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gbmV3IEFycmF5KF9sZW41ID4gMSA/IF9sZW41IC0gMSA6IDApLCBfa2V5NSA9IDE7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICAgICAgcmVzdFtfa2V5NSAtIDFdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgICAgIH1cblxuICAgICAgX2ludm9rZS5hcHBseSh2b2lkIDAsIFt0cmlnZ2VyLCAncHJvcHMub25Nb3VzZUxlYXZlJywgZV0uY29uY2F0KHJlc3QpKTtcblxuICAgICAgaWYgKCFjbG9zZU9uVHJpZ2dlck1vdXNlTGVhdmUpIHJldHVybjtcbiAgICAgIF90aGlzLm1vdXNlTGVhdmVUaW1lciA9IF90aGlzLmNsb3NlV2l0aFRpbWVvdXQoZSwgbW91c2VMZWF2ZURlbGF5KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVUcmlnZ2VyTW91c2VFbnRlclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLm1vdXNlTGVhdmVUaW1lcik7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM2ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgdHJpZ2dlciA9IF90aGlzJHByb3BzNi50cmlnZ2VyLFxuICAgICAgICAgIG1vdXNlRW50ZXJEZWxheSA9IF90aGlzJHByb3BzNi5tb3VzZUVudGVyRGVsYXksXG4gICAgICAgICAgb3Blbk9uVHJpZ2dlck1vdXNlRW50ZXIgPSBfdGhpcyRwcm9wczYub3Blbk9uVHJpZ2dlck1vdXNlRW50ZXI7IC8vIENhbGwgb3JpZ2luYWwgZXZlbnQgaGFuZGxlclxuXG4gICAgICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBuZXcgQXJyYXkoX2xlbjYgPiAxID8gX2xlbjYgLSAxIDogMCksIF9rZXk2ID0gMTsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgICAgICByZXN0W19rZXk2IC0gMV0gPSBhcmd1bWVudHNbX2tleTZdO1xuICAgICAgfVxuXG4gICAgICBfaW52b2tlLmFwcGx5KHZvaWQgMCwgW3RyaWdnZXIsICdwcm9wcy5vbk1vdXNlRW50ZXInLCBlXS5jb25jYXQocmVzdCkpO1xuXG4gICAgICBpZiAoIW9wZW5PblRyaWdnZXJNb3VzZUVudGVyKSByZXR1cm47XG4gICAgICBfdGhpcy5tb3VzZUVudGVyVGltZXIgPSBfdGhpcy5vcGVuV2l0aFRpbWVvdXQoZSwgbW91c2VFbnRlckRlbGF5KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvcGVuXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgb25PcGVuID0gX3RoaXMucHJvcHMub25PcGVuO1xuICAgICAgaWYgKG9uT3Blbikgb25PcGVuKGUsIF90aGlzLnByb3BzKTtcblxuICAgICAgX3RoaXMudHJ5U2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvcGVuV2l0aFRpbWVvdXRcIiwgZnVuY3Rpb24gKGUsIGRlbGF5KSB7XG4gICAgICAvLyBSZWFjdCB3aXBlcyB0aGUgZW50aXJlIGV2ZW50IG9iamVjdCBhbmQgc3VnZ2VzdHMgdXNpbmcgZS5wZXJzaXN0KCkgaWZcbiAgICAgIC8vIHlvdSBuZWVkIHRoZSBldmVudCBmb3IgYXN5bmMgYWNjZXNzLiBIb3dldmVyLCBldmVuIHdpdGggZS5wZXJzaXN0XG4gICAgICAvLyBjZXJ0YWluIHJlcXVpcmVkIHByb3BzIChlLmcuIGN1cnJlbnRUYXJnZXQpIGFyZSBudWxsIHNvIHdlJ3JlIGZvcmNlZCB0byBjbG9uZS5cbiAgICAgIHZhciBldmVudENsb25lID0gX29iamVjdFNwcmVhZCh7fSwgZSk7XG5cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm9wZW4oZXZlbnRDbG9uZSk7XG4gICAgICB9LCBkZWxheSB8fCAwKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjbG9zZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIG9uQ2xvc2UgPSBfdGhpcy5wcm9wcy5vbkNsb3NlO1xuICAgICAgaWYgKG9uQ2xvc2UpIG9uQ2xvc2UoZSwgX3RoaXMucHJvcHMpO1xuXG4gICAgICBfdGhpcy50cnlTZXRTdGF0ZSh7XG4gICAgICAgIG9wZW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjbG9zZVdpdGhUaW1lb3V0XCIsIGZ1bmN0aW9uIChlLCBkZWxheSkge1xuICAgICAgLy8gUmVhY3Qgd2lwZXMgdGhlIGVudGlyZSBldmVudCBvYmplY3QgYW5kIHN1Z2dlc3RzIHVzaW5nIGUucGVyc2lzdCgpIGlmXG4gICAgICAvLyB5b3UgbmVlZCB0aGUgZXZlbnQgZm9yIGFzeW5jIGFjY2Vzcy4gSG93ZXZlciwgZXZlbiB3aXRoIGUucGVyc2lzdFxuICAgICAgLy8gY2VydGFpbiByZXF1aXJlZCBwcm9wcyAoZS5nLiBjdXJyZW50VGFyZ2V0KSBhcmUgbnVsbCBzbyB3ZSdyZSBmb3JjZWQgdG8gY2xvbmUuXG4gICAgICB2YXIgZXZlbnRDbG9uZSA9IF9vYmplY3RTcHJlYWQoe30sIGUpO1xuXG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5jbG9zZShldmVudENsb25lKTtcbiAgICAgIH0sIGRlbGF5IHx8IDApO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU1vdW50XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbk1vdW50JywgbnVsbCwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVVubW91bnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uVW5tb3VudCcsIG51bGwsIF90aGlzLnByb3BzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVUcmlnZ2VyUmVmXCIsIGZ1bmN0aW9uIChjKSB7XG4gICAgICBfdGhpcy50cmlnZ2VyUmVmLmN1cnJlbnQgPSBjO1xuICAgICAgaGFuZGxlUmVmKF90aGlzLnByb3BzLnRyaWdnZXJSZWYsIGMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvcnRhbCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAvLyBDbGVhbiB1cCB0aW1lcnNcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLm1vdXNlRW50ZXJUaW1lcik7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5tb3VzZUxlYXZlVGltZXIpO1xuICAgIH0gLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIERvY3VtZW50IEV2ZW50IEhhbmRsZXJzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczcgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHM3LmNoaWxkcmVuLFxuICAgICAgICAgIGV2ZW50UG9vbCA9IF90aGlzJHByb3BzNy5ldmVudFBvb2wsXG4gICAgICAgICAgbW91bnROb2RlID0gX3RoaXMkcHJvcHM3Lm1vdW50Tm9kZSxcbiAgICAgICAgICB0cmlnZ2VyID0gX3RoaXMkcHJvcHM3LnRyaWdnZXI7XG4gICAgICB2YXIgb3BlbiA9IHRoaXMuc3RhdGUub3BlbjtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBvcGVuICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUG9ydGFsSW5uZXIsIHtcbiAgICAgICAgaW5uZXJSZWY6IHRoaXMuY29udGVudFJlZixcbiAgICAgICAgbW91bnROb2RlOiBtb3VudE5vZGUsXG4gICAgICAgIG9uTW91bnQ6IHRoaXMuaGFuZGxlTW91bnQsXG4gICAgICAgIG9uVW5tb3VudDogdGhpcy5oYW5kbGVVbm1vdW50XG4gICAgICB9LCBjaGlsZHJlbiksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRXZlbnRTdGFjaywge1xuICAgICAgICBuYW1lOiBcIm1vdXNlbGVhdmVcIixcbiAgICAgICAgb246IHRoaXMuaGFuZGxlUG9ydGFsTW91c2VMZWF2ZSxcbiAgICAgICAgcG9vbDogZXZlbnRQb29sLFxuICAgICAgICB0YXJnZXQ6IHRoaXMuY29udGVudFJlZlxuICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRXZlbnRTdGFjaywge1xuICAgICAgICBuYW1lOiBcIm1vdXNlZW50ZXJcIixcbiAgICAgICAgb246IHRoaXMuaGFuZGxlUG9ydGFsTW91c2VFbnRlcixcbiAgICAgICAgcG9vbDogZXZlbnRQb29sLFxuICAgICAgICB0YXJnZXQ6IHRoaXMuY29udGVudFJlZlxuICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRXZlbnRTdGFjaywge1xuICAgICAgICBuYW1lOiBcIm1vdXNlZG93blwiLFxuICAgICAgICBvbjogdGhpcy5oYW5kbGVEb2N1bWVudE1vdXNlRG93bixcbiAgICAgICAgcG9vbDogZXZlbnRQb29sXG4gICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChFdmVudFN0YWNrLCB7XG4gICAgICAgIG5hbWU6IFwiY2xpY2tcIixcbiAgICAgICAgb246IHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljayxcbiAgICAgICAgcG9vbDogZXZlbnRQb29sXG4gICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChFdmVudFN0YWNrLCB7XG4gICAgICAgIG5hbWU6IFwia2V5ZG93blwiLFxuICAgICAgICBvbjogdGhpcy5oYW5kbGVFc2NhcGUsXG4gICAgICAgIHBvb2w6IGV2ZW50UG9vbFxuICAgICAgfSkpLCB0cmlnZ2VyICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVmLCB7XG4gICAgICAgIGlubmVyUmVmOiB0aGlzLmhhbmRsZVRyaWdnZXJSZWZcbiAgICAgIH0sIGNsb25lRWxlbWVudCh0cmlnZ2VyLCB7XG4gICAgICAgIG9uQmx1cjogdGhpcy5oYW5kbGVUcmlnZ2VyQmx1cixcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVUcmlnZ2VyQ2xpY2ssXG4gICAgICAgIG9uRm9jdXM6IHRoaXMuaGFuZGxlVHJpZ2dlckZvY3VzLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlVHJpZ2dlck1vdXNlTGVhdmUsXG4gICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5oYW5kbGVUcmlnZ2VyTW91c2VFbnRlclxuICAgICAgfSkpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9ydGFsO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoUG9ydGFsLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNsb3NlT25Eb2N1bWVudENsaWNrOiB0cnVlLFxuICBjbG9zZU9uRXNjYXBlOiB0cnVlLFxuICBldmVudFBvb2w6ICdkZWZhdWx0JyxcbiAgb3Blbk9uVHJpZ2dlckNsaWNrOiB0cnVlXG59KTtcblxuX2RlZmluZVByb3BlcnR5KFBvcnRhbCwgXCJhdXRvQ29udHJvbGxlZFByb3BzXCIsIFsnb3BlbiddKTtcblxuX2RlZmluZVByb3BlcnR5KFBvcnRhbCwgXCJJbm5lclwiLCBQb3J0YWxJbm5lcik7XG5cbl9kZWZpbmVQcm9wZXJ0eShQb3J0YWwsIFwiaGFuZGxlZFByb3BzXCIsIFtcImNoaWxkcmVuXCIsIFwiY2xvc2VPbkRvY3VtZW50Q2xpY2tcIiwgXCJjbG9zZU9uRXNjYXBlXCIsIFwiY2xvc2VPblBvcnRhbE1vdXNlTGVhdmVcIiwgXCJjbG9zZU9uVHJpZ2dlckJsdXJcIiwgXCJjbG9zZU9uVHJpZ2dlckNsaWNrXCIsIFwiY2xvc2VPblRyaWdnZXJNb3VzZUxlYXZlXCIsIFwiZGVmYXVsdE9wZW5cIiwgXCJldmVudFBvb2xcIiwgXCJtb3VudE5vZGVcIiwgXCJtb3VzZUVudGVyRGVsYXlcIiwgXCJtb3VzZUxlYXZlRGVsYXlcIiwgXCJvbkNsb3NlXCIsIFwib25Nb3VudFwiLCBcIm9uT3BlblwiLCBcIm9uVW5tb3VudFwiLCBcIm9wZW5cIiwgXCJvcGVuT25UcmlnZ2VyQ2xpY2tcIiwgXCJvcGVuT25UcmlnZ2VyRm9jdXNcIiwgXCJvcGVuT25UcmlnZ2VyTW91c2VFbnRlclwiLCBcInRyaWdnZXJcIiwgXCJ0cmlnZ2VyUmVmXCJdKTtcblxuUG9ydGFsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IHRoZSBwb3J0YWwgc2hvdWxkIGNsb3NlIHdoZW4gdGhlIGRvY3VtZW50IGlzIGNsaWNrZWQuICovXG4gIGNsb3NlT25Eb2N1bWVudENsaWNrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQ29udHJvbHMgd2hldGhlciBvciBub3QgdGhlIHBvcnRhbCBzaG91bGQgY2xvc2Ugd2hlbiBlc2NhcGUgaXMgcHJlc3NlZCBpcyBkaXNwbGF5ZWQuICovXG4gIGNsb3NlT25Fc2NhcGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB3aGV0aGVyIG9yIG5vdCB0aGUgcG9ydGFsIHNob3VsZCBjbG9zZSB3aGVuIG1vdXNpbmcgb3V0IG9mIHRoZSBwb3J0YWwuXG4gICAqIE5PVEU6IFRoaXMgd2lsbCBwcmV2ZW50IGBjbG9zZU9uVHJpZ2dlck1vdXNlTGVhdmVgIHdoZW4gbW91c2luZyBvdmVyIHRoZVxuICAgKiBnYXAgZnJvbSB0aGUgdHJpZ2dlciB0byB0aGUgcG9ydGFsLlxuICAgKi9cbiAgY2xvc2VPblBvcnRhbE1vdXNlTGVhdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBDb250cm9scyB3aGV0aGVyIG9yIG5vdCB0aGUgcG9ydGFsIHNob3VsZCBjbG9zZSBvbiBibHVyIG9mIHRoZSB0cmlnZ2VyLiAqL1xuICBjbG9zZU9uVHJpZ2dlckJsdXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBDb250cm9scyB3aGV0aGVyIG9yIG5vdCB0aGUgcG9ydGFsIHNob3VsZCBjbG9zZSBvbiBjbGljayBvZiB0aGUgdHJpZ2dlci4gKi9cbiAgY2xvc2VPblRyaWdnZXJDbGljazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IHRoZSBwb3J0YWwgc2hvdWxkIGNsb3NlIHdoZW4gbW91c2luZyBvdXQgb2YgdGhlIHRyaWdnZXIuICovXG4gIGNsb3NlT25UcmlnZ2VyTW91c2VMZWF2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEluaXRpYWwgdmFsdWUgb2Ygb3Blbi4gKi9cbiAgZGVmYXVsdE9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBFdmVudCBwb29sIG5hbWVzcGFjZSB0aGF0IGlzIHVzZWQgdG8gaGFuZGxlIGNvbXBvbmVudCBldmVudHMgKi9cbiAgZXZlbnRQb29sOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBUaGUgbm9kZSB3aGVyZSB0aGUgcG9ydGFsIHNob3VsZCBtb3VudC4gKi9cbiAgbW91bnROb2RlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKiBNaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgb3BlbmluZyBvbiBtb3VzZSBvdmVyICovXG4gIG1vdXNlRW50ZXJEZWxheTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKiogTWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGNsb3Npbmcgb24gbW91c2UgbGVhdmUgKi9cbiAgbW91c2VMZWF2ZURlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIGNsb3NlIGV2ZW50IGhhcHBlbnNcbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgcG9ydGFsIGlzIG1vdW50ZWQgb24gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtudWxsfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uTW91bnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhbiBvcGVuIGV2ZW50IGhhcHBlbnNcbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBwb3J0YWwgaXMgdW5tb3VudGVkIGZyb20gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtudWxsfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uVW5tb3VudDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IHRoZSBwb3J0YWwgaXMgZGlzcGxheWVkLiAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQ29udHJvbHMgd2hldGhlciBvciBub3QgdGhlIHBvcnRhbCBzaG91bGQgb3BlbiB3aGVuIHRoZSB0cmlnZ2VyIGlzIGNsaWNrZWQuICovXG4gIG9wZW5PblRyaWdnZXJDbGljazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IHRoZSBwb3J0YWwgc2hvdWxkIG9wZW4gb24gZm9jdXMgb2YgdGhlIHRyaWdnZXIuICovXG4gIG9wZW5PblRyaWdnZXJGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IHRoZSBwb3J0YWwgc2hvdWxkIG9wZW4gd2hlbiBtb3VzaW5nIG92ZXIgdGhlIHRyaWdnZXIuICovXG4gIG9wZW5PblRyaWdnZXJNb3VzZUVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogRWxlbWVudCB0byBiZSByZW5kZXJlZCBpbi1wbGFjZSB3aGVyZSB0aGUgcG9ydGFsIGlzIGRlZmluZWQuICovXG4gIHRyaWdnZXI6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBDYWxsZWQgd2l0aCBhIHJlZiB0byB0aGUgdHJpZ2dlciBub2RlLiAqL1xuICB0cmlnZ2VyUmVmOiBjdXN0b21Qcm9wVHlwZXMucmVmXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBQb3J0YWw7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIHVzZUtleU9ubHkgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGRpbW1hYmxlIHN1Yi1jb21wb25lbnQgZm9yIERpbW1lci5cbiAqL1xuXG5mdW5jdGlvbiBEaW1tZXJEaW1tYWJsZShwcm9wcykge1xuICB2YXIgYmx1cnJpbmcgPSBwcm9wcy5ibHVycmluZyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGRpbW1lZCA9IHByb3BzLmRpbW1lZDtcbiAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KGJsdXJyaW5nLCAnYmx1cnJpbmcnKSwgdXNlS2V5T25seShkaW1tZWQsICdkaW1tZWQnKSwgJ2RpbW1hYmxlJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhEaW1tZXJEaW1tYWJsZSwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShEaW1tZXJEaW1tYWJsZSwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuRGltbWVyRGltbWFibGUuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJibHVycmluZ1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiLCBcImRpbW1lZFwiXTtcbkRpbW1lckRpbW1hYmxlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEEgZGltbWFibGUgZWxlbWVudCBjYW4gYmx1ciBpdHMgY29udGVudHMuICovXG4gIGJsdXJyaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IHRoZSBkaW0gaXMgZGlzcGxheWVkLiAqL1xuICBkaW1tZWQ6IFByb3BUeXBlcy5ib29sXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBEaW1tZXJEaW1tYWJsZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCB7IFJlZiB9IGZyb20gJ0BzdGFyZHVzdC11aS9yZWFjdC1jb21wb25lbnQtcmVmJztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBjcmVhdGVSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGRvZXNOb2RlQ29udGFpbkNsaWNrLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIHVzZUtleU9ubHksIHVzZVZlcnRpY2FsQWxpZ25Qcm9wIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQW4gaW5uZXIgZWxlbWVudCBmb3IgYSBEaW1tZXIuXG4gKi9cblxudmFyIERpbW1lcklubmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEaW1tZXJJbm5lciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRGltbWVySW5uZXIoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGltbWVySW5uZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoRGltbWVySW5uZXIpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb250YWluZXJSZWZcIiwgY3JlYXRlUmVmKCkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNvbnRlbnRSZWZcIiwgY3JlYXRlUmVmKCkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgY29udGVudFJlZiA9IF90aGlzLmNvbnRlbnRSZWYuY3VycmVudDtcblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uQ2xpY2snLCBlLCBfdGhpcy5wcm9wcyk7XG5cbiAgICAgIGlmIChjb250ZW50UmVmICYmIGNvbnRlbnRSZWYgIT09IGUudGFyZ2V0ICYmIGRvZXNOb2RlQ29udGFpbkNsaWNrKGNvbnRlbnRSZWYsIGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uQ2xpY2tPdXRzaWRlJywgZSwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERpbW1lcklubmVyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBhY3RpdmUgPSB0aGlzLnByb3BzLmFjdGl2ZTtcbiAgICAgIHRoaXMudG9nZ2xlU3R5bGVzKGFjdGl2ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB2YXIgY3VycmVudEFjdGl2ZSA9IHRoaXMucHJvcHMuYWN0aXZlO1xuICAgICAgdmFyIHByZXZBY3RpdmUgPSBwcmV2UHJvcHMuYWN0aXZlO1xuICAgICAgaWYgKHByZXZBY3RpdmUgIT09IGN1cnJlbnRBY3RpdmUpIHRoaXMudG9nZ2xlU3R5bGVzKGN1cnJlbnRBY3RpdmUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0b2dnbGVTdHlsZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlU3R5bGVzKGFjdGl2ZSkge1xuICAgICAgdmFyIGNvbnRhaW5lclJlZiA9IHRoaXMuY29udGFpbmVyUmVmLmN1cnJlbnQ7XG4gICAgICBpZiAoIWNvbnRhaW5lclJlZiB8fCAhY29udGFpbmVyUmVmLnN0eWxlKSByZXR1cm47XG5cbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgY29udGFpbmVyUmVmLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ2ZsZXgnLCAnaW1wb3J0YW50Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250YWluZXJSZWYuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2Rpc3BsYXknKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbnRlbnQgPSBfdGhpcyRwcm9wcy5jb250ZW50LFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgaW52ZXJ0ZWQgPSBfdGhpcyRwcm9wcy5pbnZlcnRlZCxcbiAgICAgICAgICBwYWdlID0gX3RoaXMkcHJvcHMucGFnZSxcbiAgICAgICAgICBzaW1wbGUgPSBfdGhpcyRwcm9wcy5zaW1wbGUsXG4gICAgICAgICAgdmVydGljYWxBbGlnbiA9IF90aGlzJHByb3BzLnZlcnRpY2FsQWxpZ247XG4gICAgICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIHVzZUtleU9ubHkoYWN0aXZlLCAnYWN0aXZlIHRyYW5zaXRpb24gdmlzaWJsZScpLCB1c2VLZXlPbmx5KGRpc2FibGVkLCAnZGlzYWJsZWQnKSwgdXNlS2V5T25seShpbnZlcnRlZCwgJ2ludmVydGVkJyksIHVzZUtleU9ubHkocGFnZSwgJ3BhZ2UnKSwgdXNlS2V5T25seShzaW1wbGUsICdzaW1wbGUnKSwgdXNlVmVydGljYWxBbGlnblByb3AodmVydGljYWxBbGlnbiksICdkaW1tZXInLCBjbGFzc05hbWUpO1xuICAgICAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhEaW1tZXJJbm5lciwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShEaW1tZXJJbm5lciwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgY2hpbGRyZW5Db250ZW50ID0gY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW47XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWYsIHtcbiAgICAgICAgaW5uZXJSZWY6IHRoaXMuY29udGFpbmVyUmVmXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICAgIH0pLCBjaGlsZHJlbkNvbnRlbnQgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJjb250ZW50XCIsXG4gICAgICAgIHJlZjogdGhpcy5jb250ZW50UmVmXG4gICAgICB9LCBjaGlsZHJlbkNvbnRlbnQpKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERpbW1lcklubmVyO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoRGltbWVySW5uZXIsIFwiaGFuZGxlZFByb3BzXCIsIFtcImFjdGl2ZVwiLCBcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJpbnZlcnRlZFwiLCBcIm9uQ2xpY2tcIiwgXCJvbkNsaWNrT3V0c2lkZVwiLCBcInBhZ2VcIiwgXCJzaW1wbGVcIiwgXCJ2ZXJ0aWNhbEFsaWduXCJdKTtcblxuZXhwb3J0IHsgRGltbWVySW5uZXIgYXMgZGVmYXVsdCB9O1xuRGltbWVySW5uZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQW4gYWN0aXZlIGRpbW1lciB3aWxsIGRpbSBpdHMgcGFyZW50IGNvbnRhaW5lci4gKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIEEgZGlzYWJsZWQgZGltbWVyIGNhbm5vdCBiZSBhY3RpdmF0ZWQgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gY2xpY2suXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSGFuZGxlcyBjbGljayBvdXRzaWRlIERpbW1lcidzIGNvbnRlbnQsIGJ1dCBpbnNpZGUgRGltbWVyIGFyZWEuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbkNsaWNrT3V0c2lkZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqIEEgZGltbWVyIGNhbiBiZSBmb3JtYXR0ZWQgdG8gaGF2ZSBpdHMgY29sb3JzIGludmVydGVkLiAqL1xuICBpbnZlcnRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgZGltbWVyIGNhbiBiZSBmb3JtYXR0ZWQgdG8gYmUgZml4ZWQgdG8gdGhlIHBhZ2UuICovXG4gIHBhZ2U6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGRpbW1lciBjYW4gYmUgY29udHJvbGxlZCB3aXRoIHNpbXBsZSBwcm9wLiAqL1xuICBzaW1wbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGRpbW1lciBjYW4gaGF2ZSBpdHMgY29udGVudCB0b3Agb3IgYm90dG9tIGFsaWduZWQuICovXG4gIHZlcnRpY2FsQWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICd0b3AnXSlcbn0gOiB7fTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBnZXRVbmhhbmRsZWRQcm9wcywgaXNCcm93c2VyIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vLi4vYWRkb25zL1BvcnRhbCc7XG5pbXBvcnQgRGltbWVyRGltbWFibGUgZnJvbSAnLi9EaW1tZXJEaW1tYWJsZSc7XG5pbXBvcnQgRGltbWVySW5uZXIgZnJvbSAnLi9EaW1tZXJJbm5lcic7XG4vKipcbiAqIEEgZGltbWVyIGhpZGVzIGRpc3RyYWN0aW9ucyB0byBmb2N1cyBhdHRlbnRpb24gb24gcGFydGljdWxhciBjb250ZW50LlxuICovXG5cbnZhciBEaW1tZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERpbW1lciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRGltbWVyKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERpbW1lcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihEaW1tZXIpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVQb3J0YWxNb3VudFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWlzQnJvd3NlcigpKSByZXR1cm47IC8vIEhlYWRzIHVwLCBJRSBkb2Vzbid0IHN1cHBvcnQgc2Vjb25kIGFyZ3VtZW50IGluIGFkZCgpXG5cbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnZGltbWVkJyk7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2RpbW1hYmxlJyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlUG9ydGFsVW5tb3VudFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWlzQnJvd3NlcigpKSByZXR1cm47IC8vIEhlYWRzIHVwLCBJRSBkb2Vzbid0IHN1cHBvcnQgc2Vjb25kIGFyZ3VtZW50IGluIGFkZCgpXG5cbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnZGltbWVkJyk7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2RpbW1hYmxlJyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGltbWVyLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhY3RpdmUgPSBfdGhpcyRwcm9wcy5hY3RpdmUsXG4gICAgICAgICAgcGFnZSA9IF90aGlzJHByb3BzLnBhZ2U7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKERpbW1lciwgdGhpcy5wcm9wcyk7XG5cbiAgICAgIGlmIChwYWdlKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBvcnRhbCwge1xuICAgICAgICAgIGNsb3NlT25Fc2NhcGU6IGZhbHNlLFxuICAgICAgICAgIGNsb3NlT25Eb2N1bWVudENsaWNrOiBmYWxzZSxcbiAgICAgICAgICBvbk1vdW50OiB0aGlzLmhhbmRsZVBvcnRhbE1vdW50LFxuICAgICAgICAgIG9uVW5tb3VudDogdGhpcy5oYW5kbGVQb3J0YWxVbm1vdW50LFxuICAgICAgICAgIG9wZW46IGFjdGl2ZSxcbiAgICAgICAgICBvcGVuT25UcmlnZ2VyQ2xpY2s6IGZhbHNlXG4gICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGltbWVySW5uZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgICAgICAgcGFnZTogcGFnZVxuICAgICAgICB9KSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEaW1tZXJJbm5lciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgICAgIHBhZ2U6IHBhZ2VcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGltbWVyO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoRGltbWVyLCBcIkRpbW1hYmxlXCIsIERpbW1lckRpbW1hYmxlKTtcblxuX2RlZmluZVByb3BlcnR5KERpbW1lciwgXCJJbm5lclwiLCBEaW1tZXJJbm5lcik7XG5cbl9kZWZpbmVQcm9wZXJ0eShEaW1tZXIsIFwiaGFuZGxlZFByb3BzXCIsIFtcImFjdGl2ZVwiLCBcInBhZ2VcIl0pO1xuXG5leHBvcnQgeyBEaW1tZXIgYXMgZGVmYXVsdCB9O1xuRGltbWVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGFjdGl2ZSBkaW1tZXIgd2lsbCBkaW0gaXRzIHBhcmVudCBjb250YWluZXIuICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgZGltbWVyIGNhbiBiZSBmb3JtYXR0ZWQgdG8gYmUgZml4ZWQgdG8gdGhlIHBhZ2UuICovXG4gIHBhZ2U6IFByb3BUeXBlcy5ib29sXG59IDoge307XG5EaW1tZXIuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShEaW1tZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGNvbnRlbnQ6IHZhbHVlXG4gIH07XG59KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBncm91cCBvZiBpbWFnZXMuXG4gKi9cblxuZnVuY3Rpb24gSW1hZ2VHcm91cChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemU7XG4gIHZhciBjbGFzc2VzID0gY3goJ3VpJywgc2l6ZSwgY2xhc3NOYW1lLCAnaW1hZ2VzJyk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoSW1hZ2VHcm91cCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShJbWFnZUdyb3VwLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5JbWFnZUdyb3VwLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwic2l6ZVwiXTtcbkltYWdlR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIEEgZ3JvdXAgb2YgaW1hZ2VzIGNhbiBiZSBmb3JtYXR0ZWQgdG8gaGF2ZSB0aGUgc2FtZSBzaXplLiAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoU1VJLlNJWkVTKVxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgSW1hZ2VHcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfaXNOaWwgZnJvbSBcImxvZGFzaC9pc05pbFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgaHRtbEltYWdlUHJvcHMsIHBhcnRpdGlvbkhUTUxQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VLZXlPclZhbHVlQW5kS2V5LCB1c2VWYWx1ZUFuZEtleSwgdXNlVmVydGljYWxBbGlnblByb3AgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IERpbW1lciBmcm9tICcuLi8uLi9tb2R1bGVzL0RpbW1lcic7XG5pbXBvcnQgTGFiZWwgZnJvbSAnLi4vTGFiZWwvTGFiZWwnO1xuaW1wb3J0IEltYWdlR3JvdXAgZnJvbSAnLi9JbWFnZUdyb3VwJztcbi8qKlxuICogQW4gaW1hZ2UgaXMgYSBncmFwaGljIHJlcHJlc2VudGF0aW9uIG9mIHNvbWV0aGluZy5cbiAqIEBzZWUgSWNvblxuICovXG5cbmZ1bmN0aW9uIEltYWdlKHByb3BzKSB7XG4gIHZhciBhdmF0YXIgPSBwcm9wcy5hdmF0YXIsXG4gICAgICBib3JkZXJlZCA9IHByb3BzLmJvcmRlcmVkLFxuICAgICAgY2VudGVyZWQgPSBwcm9wcy5jZW50ZXJlZCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjaXJjdWxhciA9IHByb3BzLmNpcmN1bGFyLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICBkaW1tZXIgPSBwcm9wcy5kaW1tZXIsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZmxvYXRlZCA9IHByb3BzLmZsb2F0ZWQsXG4gICAgICBmbHVpZCA9IHByb3BzLmZsdWlkLFxuICAgICAgaGlkZGVuID0gcHJvcHMuaGlkZGVuLFxuICAgICAgaHJlZiA9IHByb3BzLmhyZWYsXG4gICAgICBpbmxpbmUgPSBwcm9wcy5pbmxpbmUsXG4gICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgcm91bmRlZCA9IHByb3BzLnJvdW5kZWQsXG4gICAgICBzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNwYWNlZCA9IHByb3BzLnNwYWNlZCxcbiAgICAgIHZlcnRpY2FsQWxpZ24gPSBwcm9wcy52ZXJ0aWNhbEFsaWduLFxuICAgICAgd3JhcHBlZCA9IHByb3BzLndyYXBwZWQsXG4gICAgICB1aSA9IHByb3BzLnVpO1xuICB2YXIgY2xhc3NlcyA9IGN4KHVzZUtleU9ubHkodWksICd1aScpLCBzaXplLCB1c2VLZXlPbmx5KGF2YXRhciwgJ2F2YXRhcicpLCB1c2VLZXlPbmx5KGJvcmRlcmVkLCAnYm9yZGVyZWQnKSwgdXNlS2V5T25seShjaXJjdWxhciwgJ2NpcmN1bGFyJyksIHVzZUtleU9ubHkoY2VudGVyZWQsICdjZW50ZXJlZCcpLCB1c2VLZXlPbmx5KGRpc2FibGVkLCAnZGlzYWJsZWQnKSwgdXNlS2V5T25seShmbHVpZCwgJ2ZsdWlkJyksIHVzZUtleU9ubHkoaGlkZGVuLCAnaGlkZGVuJyksIHVzZUtleU9ubHkoaW5saW5lLCAnaW5saW5lJyksIHVzZUtleU9ubHkocm91bmRlZCwgJ3JvdW5kZWQnKSwgdXNlS2V5T3JWYWx1ZUFuZEtleShzcGFjZWQsICdzcGFjZWQnKSwgdXNlVmFsdWVBbmRLZXkoZmxvYXRlZCwgJ2Zsb2F0ZWQnKSwgdXNlVmVydGljYWxBbGlnblByb3AodmVydGljYWxBbGlnbiwgJ2FsaWduZWQnKSwgJ2ltYWdlJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhJbWFnZSwgcHJvcHMpO1xuXG4gIHZhciBfcGFydGl0aW9uSFRNTFByb3BzID0gcGFydGl0aW9uSFRNTFByb3BzKHJlc3QsIHtcbiAgICBodG1sUHJvcHM6IGh0bWxJbWFnZVByb3BzXG4gIH0pLFxuICAgICAgX3BhcnRpdGlvbkhUTUxQcm9wczIgPSBfc2xpY2VkVG9BcnJheShfcGFydGl0aW9uSFRNTFByb3BzLCAyKSxcbiAgICAgIGltZ1RhZ1Byb3BzID0gX3BhcnRpdGlvbkhUTUxQcm9wczJbMF0sXG4gICAgICByb290UHJvcHMgPSBfcGFydGl0aW9uSFRNTFByb3BzMlsxXTtcblxuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShJbWFnZSwgcHJvcHMsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIV9pc05pbChkaW1tZXIpIHx8ICFfaXNOaWwobGFiZWwpIHx8ICFfaXNOaWwod3JhcHBlZCkgfHwgIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgICByZXR1cm4gJ2Rpdic7XG4gICAgfVxuICB9KTtcblxuICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNvbnRlbnQpKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY29udGVudCk7XG4gIH1cblxuICBpZiAoRWxlbWVudFR5cGUgPT09ICdpbWcnKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByb290UHJvcHMsIGltZ1RhZ1Byb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSk7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICBocmVmOiBocmVmXG4gIH0pLCBEaW1tZXIuY3JlYXRlKGRpbW1lciwge1xuICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgfSksIExhYmVsLmNyZWF0ZShsYWJlbCwge1xuICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwgaW1nVGFnUHJvcHMpKTtcbn1cblxuSW1hZ2UuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJhdmF0YXJcIiwgXCJib3JkZXJlZFwiLCBcImNlbnRlcmVkXCIsIFwiY2hpbGRyZW5cIiwgXCJjaXJjdWxhclwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJkaW1tZXJcIiwgXCJkaXNhYmxlZFwiLCBcImZsb2F0ZWRcIiwgXCJmbHVpZFwiLCBcImhpZGRlblwiLCBcImhyZWZcIiwgXCJpbmxpbmVcIiwgXCJsYWJlbFwiLCBcInJvdW5kZWRcIiwgXCJzaXplXCIsIFwic3BhY2VkXCIsIFwidWlcIiwgXCJ2ZXJ0aWNhbEFsaWduXCIsIFwid3JhcHBlZFwiXTtcbkltYWdlLkdyb3VwID0gSW1hZ2VHcm91cDtcbkltYWdlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEFuIGltYWdlIG1heSBiZSBmb3JtYXR0ZWQgdG8gYXBwZWFyIGlubGluZSB3aXRoIHRleHQgYXMgYW4gYXZhdGFyLiAqL1xuICBhdmF0YXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBbiBpbWFnZSBtYXkgaW5jbHVkZSBhIGJvcmRlciB0byBlbXBoYXNpemUgdGhlIGVkZ2VzIG9mIHdoaXRlIG9yIHRyYW5zcGFyZW50IGNvbnRlbnQuICovXG4gIGJvcmRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQW4gaW1hZ2UgY2FuIGFwcGVhciBjZW50ZXJlZCBpbiBhIGNvbnRlbnQgYmxvY2suICovXG4gIGNlbnRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFuIGltYWdlIG1heSBhcHBlYXIgY2lyY3VsYXIuICovXG4gIGNpcmN1bGFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQW4gaW1hZ2UgY2FuIHNob3cgdGhhdCBpdCBpcyBkaXNhYmxlZCBhbmQgY2Fubm90IGJlIHNlbGVjdGVkLiAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgRGltbWVyLiAqL1xuICBkaW1tZXI6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBBbiBpbWFnZSBjYW4gc2l0IHRvIHRoZSBsZWZ0IG9yIHJpZ2h0IG9mIG90aGVyIGNvbnRlbnQuICovXG4gIGZsb2F0ZWQ6IFByb3BUeXBlcy5vbmVPZihTVUkuRkxPQVRTKSxcblxuICAvKiogQW4gaW1hZ2UgY2FuIHRha2UgdXAgdGhlIHdpZHRoIG9mIGl0cyBjb250YWluZXIuICovXG4gIGZsdWlkOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW1Byb3BUeXBlcy5ib29sLCBjdXN0b21Qcm9wVHlwZXMuZGlzYWxsb3coWydzaXplJ10pXSksXG5cbiAgLyoqIEFuIGltYWdlIGNhbiBiZSBoaWRkZW4uICovXG4gIGhpZGRlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFJlbmRlcnMgdGhlIEltYWdlIGFzIGFuIDxhPiB0YWcgd2l0aCB0aGlzIGhyZWYuICovXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEFuIGltYWdlIG1heSBhcHBlYXIgaW5saW5lLiAqL1xuICBpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIExhYmVsLiAqL1xuICBsYWJlbDogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIEFuIGltYWdlIG1heSBhcHBlYXIgcm91bmRlZC4gKi9cbiAgcm91bmRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEFuIGltYWdlIG1heSBhcHBlYXIgYXQgZGlmZmVyZW50IHNpemVzLiAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoU1VJLlNJWkVTKSxcblxuICAvKiogQW4gaW1hZ2UgY2FuIHNwZWNpZnkgdGhhdCBpdCBuZWVkcyBhbiBhZGRpdGlvbmFsIHNwYWNpbmcgdG8gc2VwYXJhdGUgaXQgZnJvbSBuZWFyYnkgY29udGVudC4gKi9cbiAgc3BhY2VkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKV0pLFxuXG4gIC8qKiBXaGV0aGVyIG9yIG5vdCB0byBhZGQgdGhlIHVpIGNsYXNzTmFtZS4gKi9cbiAgdWk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBbiBpbWFnZSBjYW4gc3BlY2lmeSBpdHMgdmVydGljYWwgYWxpZ25tZW50LiAqL1xuICB2ZXJ0aWNhbEFsaWduOiBQcm9wVHlwZXMub25lT2YoU1VJLlZFUlRJQ0FMX0FMSUdOTUVOVFMpLFxuXG4gIC8qKiBBbiBpbWFnZSBjYW4gcmVuZGVyIHdyYXBwZWQgaW4gYSBgZGl2LnVpLmltYWdlYCBhcyBhbHRlcm5hdGl2ZSBIVE1MIG1hcmt1cC4gKi9cbiAgd3JhcHBlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB7fTtcbkltYWdlLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdpbWcnLFxuICB1aTogdHJ1ZVxufTtcbkltYWdlLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoSW1hZ2UsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIHNyYzogdmFsdWVcbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgSW1hZ2U7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuXG5mdW5jdGlvbiBMYWJlbERldGFpbChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdkZXRhaWwnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKExhYmVsRGV0YWlsLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKExhYmVsRGV0YWlsLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5MYWJlbERldGFpbC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiXTtcbkxhYmVsRGV0YWlsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5MYWJlbERldGFpbC5jcmVhdGUgPSBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KExhYmVsRGV0YWlsLCBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB7XG4gICAgY29udGVudDogdmFsXG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IExhYmVsRGV0YWlsOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZUtleU9ubHkgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGxhYmVsIGNhbiBiZSBncm91cGVkLlxuICovXG5cbmZ1bmN0aW9uIExhYmVsR3JvdXAocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjaXJjdWxhciA9IHByb3BzLmNpcmN1bGFyLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICB0YWcgPSBwcm9wcy50YWc7XG4gIHZhciBjbGFzc2VzID0gY3goJ3VpJywgY29sb3IsIHNpemUsIHVzZUtleU9ubHkoY2lyY3VsYXIsICdjaXJjdWxhcicpLCB1c2VLZXlPbmx5KHRhZywgJ3RhZycpLCAnbGFiZWxzJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhMYWJlbEdyb3VwLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKExhYmVsR3JvdXAsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cbkxhYmVsR3JvdXAuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNpcmN1bGFyXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb250ZW50XCIsIFwic2l6ZVwiLCBcInRhZ1wiXTtcbkxhYmVsR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIExhYmVscyBjYW4gc2hhcmUgc2hhcGVzLiAqL1xuICBjaXJjdWxhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBMYWJlbCBncm91cCBjYW4gc2hhcmUgY29sb3JzIHRvZ2V0aGVyLiAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFNVSS5DT0xPUlMpLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIExhYmVsIGdyb3VwIGNhbiBzaGFyZSBzaXplcyB0b2dldGhlci4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFNVSS5TSVpFUyksXG5cbiAgLyoqIExhYmVsIGdyb3VwIGNhbiBzaGFyZSB0YWcgZm9ybWF0dGluZy4gKi9cbiAgdGFnOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgTGFiZWxHcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tIFwibG9kYXNoL2lzVW5kZWZpbmVkXCI7XG5pbXBvcnQgX2ludm9rZSBmcm9tIFwibG9kYXNoL2ludm9rZVwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VLZXlPclZhbHVlQW5kS2V5LCB1c2VWYWx1ZUFuZEtleSB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uL0ljb24nO1xuaW1wb3J0IEltYWdlIGZyb20gJy4uL0ltYWdlL0ltYWdlJztcbmltcG9ydCBMYWJlbERldGFpbCBmcm9tICcuL0xhYmVsRGV0YWlsJztcbmltcG9ydCBMYWJlbEdyb3VwIGZyb20gJy4vTGFiZWxHcm91cCc7XG4vKipcbiAqIEEgbGFiZWwgZGlzcGxheXMgY29udGVudCBjbGFzc2lmaWNhdGlvbi5cbiAqL1xuXG52YXIgTGFiZWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExhYmVsLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMYWJlbCgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMYWJlbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihMYWJlbCkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgb25DbGljayA9IF90aGlzLnByb3BzLm9uQ2xpY2s7XG4gICAgICBpZiAob25DbGljaykgb25DbGljayhlLCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlSWNvbk92ZXJyaWRlc1wiLCBmdW5jdGlvbiAocHJlZGVmaW5lZFByb3BzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICBfaW52b2tlKHByZWRlZmluZWRQcm9wcywgJ29uQ2xpY2snLCBlKTtcblxuICAgICAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvblJlbW92ZScsIGUsIF90aGlzLnByb3BzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMYWJlbCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICAgIGF0dGFjaGVkID0gX3RoaXMkcHJvcHMuYXR0YWNoZWQsXG4gICAgICAgICAgYmFzaWMgPSBfdGhpcyRwcm9wcy5iYXNpYyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNpcmN1bGFyID0gX3RoaXMkcHJvcHMuY2lyY3VsYXIsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMuY29sb3IsXG4gICAgICAgICAgY29udGVudCA9IF90aGlzJHByb3BzLmNvbnRlbnQsXG4gICAgICAgICAgY29ybmVyID0gX3RoaXMkcHJvcHMuY29ybmVyLFxuICAgICAgICAgIGRldGFpbCA9IF90aGlzJHByb3BzLmRldGFpbCxcbiAgICAgICAgICBlbXB0eSA9IF90aGlzJHByb3BzLmVtcHR5LFxuICAgICAgICAgIGZsb2F0aW5nID0gX3RoaXMkcHJvcHMuZmxvYXRpbmcsXG4gICAgICAgICAgaG9yaXpvbnRhbCA9IF90aGlzJHByb3BzLmhvcml6b250YWwsXG4gICAgICAgICAgaWNvbiA9IF90aGlzJHByb3BzLmljb24sXG4gICAgICAgICAgaW1hZ2UgPSBfdGhpcyRwcm9wcy5pbWFnZSxcbiAgICAgICAgICBvblJlbW92ZSA9IF90aGlzJHByb3BzLm9uUmVtb3ZlLFxuICAgICAgICAgIHBvaW50aW5nID0gX3RoaXMkcHJvcHMucG9pbnRpbmcsXG4gICAgICAgICAgcHJvbXB0ID0gX3RoaXMkcHJvcHMucHJvbXB0LFxuICAgICAgICAgIHJlbW92ZUljb24gPSBfdGhpcyRwcm9wcy5yZW1vdmVJY29uLFxuICAgICAgICAgIHJpYmJvbiA9IF90aGlzJHByb3BzLnJpYmJvbixcbiAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICB0YWcgPSBfdGhpcyRwcm9wcy50YWc7XG4gICAgICB2YXIgcG9pbnRpbmdDbGFzcyA9IHBvaW50aW5nID09PSB0cnVlICYmICdwb2ludGluZycgfHwgKHBvaW50aW5nID09PSAnbGVmdCcgfHwgcG9pbnRpbmcgPT09ICdyaWdodCcpICYmIFwiXCIuY29uY2F0KHBvaW50aW5nLCBcIiBwb2ludGluZ1wiKSB8fCAocG9pbnRpbmcgPT09ICdhYm92ZScgfHwgcG9pbnRpbmcgPT09ICdiZWxvdycpICYmIFwicG9pbnRpbmcgXCIuY29uY2F0KHBvaW50aW5nKTtcbiAgICAgIHZhciBjbGFzc2VzID0gY3goJ3VpJywgY29sb3IsIHBvaW50aW5nQ2xhc3MsIHNpemUsIHVzZUtleU9ubHkoYWN0aXZlLCAnYWN0aXZlJyksIHVzZUtleU9ubHkoYmFzaWMsICdiYXNpYycpLCB1c2VLZXlPbmx5KGNpcmN1bGFyLCAnY2lyY3VsYXInKSwgdXNlS2V5T25seShlbXB0eSwgJ2VtcHR5JyksIHVzZUtleU9ubHkoZmxvYXRpbmcsICdmbG9hdGluZycpLCB1c2VLZXlPbmx5KGhvcml6b250YWwsICdob3Jpem9udGFsJyksIHVzZUtleU9ubHkoaW1hZ2UgPT09IHRydWUsICdpbWFnZScpLCB1c2VLZXlPbmx5KHByb21wdCwgJ3Byb21wdCcpLCB1c2VLZXlPbmx5KHRhZywgJ3RhZycpLCB1c2VLZXlPclZhbHVlQW5kS2V5KGNvcm5lciwgJ2Nvcm5lcicpLCB1c2VLZXlPclZhbHVlQW5kS2V5KHJpYmJvbiwgJ3JpYmJvbicpLCB1c2VWYWx1ZUFuZEtleShhdHRhY2hlZCwgJ2F0dGFjaGVkJyksICdsYWJlbCcsIGNsYXNzTmFtZSk7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKExhYmVsLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKExhYmVsLCB0aGlzLnByb3BzKTtcblxuICAgICAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgICB9KSwgY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVtb3ZlSWNvblNob3J0aGFuZCA9IF9pc1VuZGVmaW5lZChyZW1vdmVJY29uKSA/ICdkZWxldGUnIDogcmVtb3ZlSWNvbjtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgfSwgcmVzdCksIEljb24uY3JlYXRlKGljb24sIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSksIHR5cGVvZiBpbWFnZSAhPT0gJ2Jvb2xlYW4nICYmIEltYWdlLmNyZWF0ZShpbWFnZSwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KSwgY29udGVudCwgTGFiZWxEZXRhaWwuY3JlYXRlKGRldGFpbCwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KSwgb25SZW1vdmUgJiYgSWNvbi5jcmVhdGUocmVtb3ZlSWNvblNob3J0aGFuZCwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlLFxuICAgICAgICBvdmVycmlkZVByb3BzOiB0aGlzLmhhbmRsZUljb25PdmVycmlkZXNcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTGFiZWw7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShMYWJlbCwgXCJEZXRhaWxcIiwgTGFiZWxEZXRhaWwpO1xuXG5fZGVmaW5lUHJvcGVydHkoTGFiZWwsIFwiR3JvdXBcIiwgTGFiZWxHcm91cCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShMYWJlbCwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYWN0aXZlXCIsIFwiYXNcIiwgXCJhdHRhY2hlZFwiLCBcImJhc2ljXCIsIFwiY2hpbGRyZW5cIiwgXCJjaXJjdWxhclwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29udGVudFwiLCBcImNvcm5lclwiLCBcImRldGFpbFwiLCBcImVtcHR5XCIsIFwiZmxvYXRpbmdcIiwgXCJob3Jpem9udGFsXCIsIFwiaWNvblwiLCBcImltYWdlXCIsIFwib25DbGlja1wiLCBcIm9uUmVtb3ZlXCIsIFwicG9pbnRpbmdcIiwgXCJwcm9tcHRcIiwgXCJyZW1vdmVJY29uXCIsIFwicmliYm9uXCIsIFwic2l6ZVwiLCBcInRhZ1wiXSk7XG5cbmV4cG9ydCB7IExhYmVsIGFzIGRlZmF1bHQgfTtcbkxhYmVsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEEgbGFiZWwgY2FuIGJlIGFjdGl2ZS4gKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBsYWJlbCBjYW4gYXR0YWNoIHRvIGEgY29udGVudCBzZWdtZW50LiAqL1xuICBhdHRhY2hlZDogUHJvcFR5cGVzLm9uZU9mKFsndG9wJywgJ2JvdHRvbScsICd0b3AgcmlnaHQnLCAndG9wIGxlZnQnLCAnYm90dG9tIGxlZnQnLCAnYm90dG9tIHJpZ2h0J10pLFxuXG4gIC8qKiBBIGxhYmVsIGNhbiByZWR1Y2UgaXRzIGNvbXBsZXhpdHkuICovXG4gIGJhc2ljOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEEgbGFiZWwgY2FuIGJlIGNpcmN1bGFyLiAqL1xuICBjaXJjdWxhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBDb2xvciBvZiB0aGUgbGFiZWwuICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoU1VJLkNPTE9SUyksXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBsYWJlbCBjYW4gcG9zaXRpb24gaXRzZWxmIGluIHRoZSBjb3JuZXIgb2YgYW4gZWxlbWVudC4gKi9cbiAgY29ybmVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKV0pLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIExhYmVsRGV0YWlsLiAqL1xuICBkZXRhaWw6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBGb3JtYXRzIHRoZSBsYWJlbCBhcyBhIGRvdC4gKi9cbiAgZW1wdHk6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbUHJvcFR5cGVzLmJvb2wsIGN1c3RvbVByb3BUeXBlcy5kZW1hbmQoWydjaXJjdWxhciddKV0pLFxuXG4gIC8qKiBGbG9hdCBhYm92ZSBhbm90aGVyIGVsZW1lbnQgaW4gdGhlIHVwcGVyIHJpZ2h0IGNvcm5lci4gKi9cbiAgZmxvYXRpbmc6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGhvcml6b250YWwgbGFiZWwgaXMgZm9ybWF0dGVkIHRvIGxhYmVsIGNvbnRlbnQgYWxvbmctc2lkZSBpdCBob3Jpem9udGFsbHkuICovXG4gIGhvcml6b250YWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEljb24uICovXG4gIGljb246IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBBIGxhYmVsIGNhbiBiZSBmb3JtYXR0ZWQgdG8gZW1waGFzaXplIGFuIGltYWdlIG9yIHByb3AgY2FuIGJlIHVzZWQgYXMgc2hvcnRoYW5kIGZvciBJbWFnZS4gKi9cbiAgaW1hZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZF0pLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gY2xpY2suXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQWRkcyBhbiBcInhcIiBpY29uLCBjYWxsZWQgd2hlbiBcInhcIiBpcyBjbGlja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25SZW1vdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKiBBIGxhYmVsIGNhbiBwb2ludCB0byBjb250ZW50IG5leHQgdG8gaXQuICovXG4gIHBvaW50aW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9uZU9mKFsnYWJvdmUnLCAnYmVsb3cnLCAnbGVmdCcsICdyaWdodCddKV0pLFxuXG4gIC8qKiBBIGxhYmVsIGNhbiBwcm9tcHQgZm9yIGFuIGVycm9yIGluIHlvdXIgZm9ybXMuICovXG4gIHByb21wdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgSWNvbiB0byBhcHBlYXIgYXMgdGhlIGxhc3QgY2hpbGQgYW5kIHRyaWdnZXIgb25SZW1vdmUuICovXG4gIHJlbW92ZUljb246IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBBIGxhYmVsIGNhbiBhcHBlYXIgYXMgYSByaWJib24gYXR0YWNoaW5nIGl0c2VsZiB0byBhbiBlbGVtZW50LiAqL1xuICByaWJib246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub25lT2YoWydyaWdodCddKV0pLFxuXG4gIC8qKiBBIGxhYmVsIGNhbiBoYXZlIGRpZmZlcmVudCBzaXplcy4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFNVSS5TSVpFUyksXG5cbiAgLyoqIEEgbGFiZWwgY2FuIGFwcGVhciBhcyBhIHRhZy4gKi9cbiAgdGFnOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuTGFiZWwuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShMYWJlbCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgY29udGVudDogdmFsdWVcbiAgfTtcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogVXNlZCBpbiBzb21lIEJ1dHRvbiB0eXBlcywgc3VjaCBhcyBgYW5pbWF0ZWRgLlxuICovXG5cbmZ1bmN0aW9uIEJ1dHRvbkNvbnRlbnQocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGhpZGRlbiA9IHByb3BzLmhpZGRlbixcbiAgICAgIHZpc2libGUgPSBwcm9wcy52aXNpYmxlO1xuICB2YXIgY2xhc3NlcyA9IGN4KHVzZUtleU9ubHkodmlzaWJsZSwgJ3Zpc2libGUnKSwgdXNlS2V5T25seShoaWRkZW4sICdoaWRkZW4nKSwgJ2NvbnRlbnQnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEJ1dHRvbkNvbnRlbnQsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoQnV0dG9uQ29udGVudCwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuQnV0dG9uQ29udGVudC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiLCBcImhpZGRlblwiLCBcInZpc2libGVcIl07XG5CdXR0b25Db250ZW50LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBJbml0aWFsbHkgaGlkZGVuLCB2aXNpYmxlIG9uIGhvdmVyLiAqL1xuICBoaWRkZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBJbml0aWFsbHkgdmlzaWJsZSwgaGlkZGVuIG9uIGhvdmVyLiAqL1xuICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgQnV0dG9uQ29udGVudDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9tYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcbmltcG9ydCBfaXNOaWwgZnJvbSBcImxvZGFzaC9pc05pbFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VLZXlPclZhbHVlQW5kS2V5LCB1c2VWYWx1ZUFuZEtleSwgdXNlV2lkdGhQcm9wIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi9CdXR0b24nO1xuLyoqXG4gKiBCdXR0b25zIGNhbiBiZSBncm91cGVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1dHRvbkdyb3VwKHByb3BzKSB7XG4gIHZhciBhdHRhY2hlZCA9IHByb3BzLmF0dGFjaGVkLFxuICAgICAgYmFzaWMgPSBwcm9wcy5iYXNpYyxcbiAgICAgIGJ1dHRvbnMgPSBwcm9wcy5idXR0b25zLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb21wYWN0ID0gcHJvcHMuY29tcGFjdCxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgZmxvYXRlZCA9IHByb3BzLmZsb2F0ZWQsXG4gICAgICBmbHVpZCA9IHByb3BzLmZsdWlkLFxuICAgICAgaWNvbiA9IHByb3BzLmljb24sXG4gICAgICBpbnZlcnRlZCA9IHByb3BzLmludmVydGVkLFxuICAgICAgbGFiZWxlZCA9IHByb3BzLmxhYmVsZWQsXG4gICAgICBuZWdhdGl2ZSA9IHByb3BzLm5lZ2F0aXZlLFxuICAgICAgcG9zaXRpdmUgPSBwcm9wcy5wb3NpdGl2ZSxcbiAgICAgIHByaW1hcnkgPSBwcm9wcy5wcmltYXJ5LFxuICAgICAgc2Vjb25kYXJ5ID0gcHJvcHMuc2Vjb25kYXJ5LFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICB0b2dnbGUgPSBwcm9wcy50b2dnbGUsXG4gICAgICB2ZXJ0aWNhbCA9IHByb3BzLnZlcnRpY2FsLFxuICAgICAgd2lkdGhzID0gcHJvcHMud2lkdGhzO1xuICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIGNvbG9yLCBzaXplLCB1c2VLZXlPbmx5KGJhc2ljLCAnYmFzaWMnKSwgdXNlS2V5T25seShjb21wYWN0LCAnY29tcGFjdCcpLCB1c2VLZXlPbmx5KGZsdWlkLCAnZmx1aWQnKSwgdXNlS2V5T25seShpY29uLCAnaWNvbicpLCB1c2VLZXlPbmx5KGludmVydGVkLCAnaW52ZXJ0ZWQnKSwgdXNlS2V5T25seShsYWJlbGVkLCAnbGFiZWxlZCcpLCB1c2VLZXlPbmx5KG5lZ2F0aXZlLCAnbmVnYXRpdmUnKSwgdXNlS2V5T25seShwb3NpdGl2ZSwgJ3Bvc2l0aXZlJyksIHVzZUtleU9ubHkocHJpbWFyeSwgJ3ByaW1hcnknKSwgdXNlS2V5T25seShzZWNvbmRhcnksICdzZWNvbmRhcnknKSwgdXNlS2V5T25seSh0b2dnbGUsICd0b2dnbGUnKSwgdXNlS2V5T25seSh2ZXJ0aWNhbCwgJ3ZlcnRpY2FsJyksIHVzZUtleU9yVmFsdWVBbmRLZXkoYXR0YWNoZWQsICdhdHRhY2hlZCcpLCB1c2VWYWx1ZUFuZEtleShmbG9hdGVkLCAnZmxvYXRlZCcpLCB1c2VXaWR0aFByb3Aod2lkdGhzKSwgJ2J1dHRvbnMnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEJ1dHRvbkdyb3VwLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEJ1dHRvbkdyb3VwLCBwcm9wcyk7XG5cbiAgaWYgKF9pc05pbChidXR0b25zKSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgX21hcChidXR0b25zLCBmdW5jdGlvbiAoYnV0dG9uKSB7XG4gICAgcmV0dXJuIEJ1dHRvbi5jcmVhdGUoYnV0dG9uKTtcbiAgfSkpO1xufVxuXG5CdXR0b25Hcm91cC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImF0dGFjaGVkXCIsIFwiYmFzaWNcIiwgXCJidXR0b25zXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBhY3RcIiwgXCJjb250ZW50XCIsIFwiZmxvYXRlZFwiLCBcImZsdWlkXCIsIFwiaWNvblwiLCBcImludmVydGVkXCIsIFwibGFiZWxlZFwiLCBcIm5lZ2F0aXZlXCIsIFwicG9zaXRpdmVcIiwgXCJwcmltYXJ5XCIsIFwic2Vjb25kYXJ5XCIsIFwic2l6ZVwiLCBcInRvZ2dsZVwiLCBcInZlcnRpY2FsXCIsIFwid2lkdGhzXCJdO1xuQnV0dG9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogR3JvdXBzIGNhbiBiZSBhdHRhY2hlZCB0byBvdGhlciBjb250ZW50LiAqL1xuICBhdHRhY2hlZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddKV0pLFxuXG4gIC8qKiBHcm91cHMgY2FuIGJlIGxlc3MgcHJvbm91bmNlZC4gKi9cbiAgYmFzaWM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBcnJheSBvZiBzaG9ydGhhbmQgQnV0dG9uIHZhbHVlcy4gKi9cbiAgYnV0dG9uczogY3VzdG9tUHJvcFR5cGVzLmNvbGxlY3Rpb25TaG9ydGhhbmQsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogR3JvdXBzIGNhbiBoYXZlIGEgc2hhcmVkIGNvbG9yLiAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFNVSS5DT0xPUlMpLFxuXG4gIC8qKiBHcm91cHMgY2FuIHJlZHVjZSB0aGVpciBwYWRkaW5nIHRvIGZpdCBpbnRvIHRpZ2h0ZXIgc3BhY2VzLiAqL1xuICBjb21wYWN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBHcm91cHMgY2FuIGJlIGFsaWduZWQgdG8gdGhlIGxlZnQgb3IgcmlnaHQgb2YgaXRzIGNvbnRhaW5lci4gKi9cbiAgZmxvYXRlZDogUHJvcFR5cGVzLm9uZU9mKFNVSS5GTE9BVFMpLFxuXG4gIC8qKiBHcm91cHMgY2FuIHRha2UgdGhlIHdpZHRoIG9mIHRoZWlyIGNvbnRhaW5lci4gKi9cbiAgZmx1aWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBHcm91cHMgY2FuIGJlIGZvcm1hdHRlZCBhcyBpY29ucy4gKi9cbiAgaWNvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEdyb3VwcyBjYW4gYmUgZm9ybWF0dGVkIHRvIGFwcGVhciBvbiBkYXJrIGJhY2tncm91bmRzLiAqL1xuICBpbnZlcnRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEdyb3VwcyBjYW4gYmUgZm9ybWF0dGVkIGFzIGxhYmVsZWQgaWNvbiBidXR0b25zLiAqL1xuICBsYWJlbGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogR3JvdXBzIGNhbiBoaW50IHRvd2FyZHMgYSBuZWdhdGl2ZSBjb25zZXF1ZW5jZS4gKi9cbiAgbmVnYXRpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBHcm91cHMgY2FuIGhpbnQgdG93YXJkcyBhIHBvc2l0aXZlIGNvbnNlcXVlbmNlLiAqL1xuICBwb3NpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEdyb3VwcyBjYW4gYmUgZm9ybWF0dGVkIHRvIHNob3cgZGlmZmVyZW50IGxldmVscyBvZiBlbXBoYXNpcy4gKi9cbiAgcHJpbWFyeTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEdyb3VwcyBjYW4gYmUgZm9ybWF0dGVkIHRvIHNob3cgZGlmZmVyZW50IGxldmVscyBvZiBlbXBoYXNpcy4gKi9cbiAgc2Vjb25kYXJ5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogR3JvdXBzIGNhbiBoYXZlIGRpZmZlcmVudCBzaXplcy4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFNVSS5TSVpFUyksXG5cbiAgLyoqIEdyb3VwcyBjYW4gYmUgZm9ybWF0dGVkIHRvIHRvZ2dsZSBvbiBhbmQgb2ZmLiAqL1xuICB0b2dnbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBHcm91cHMgY2FuIGJlIGZvcm1hdHRlZCB0byBhcHBlYXIgdmVydGljYWxseS4gKi9cbiAgdmVydGljYWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBHcm91cHMgY2FuIGhhdmUgdGhlaXIgd2lkdGhzIGRpdmlkZWQgZXZlbmx5LiAqL1xuICB3aWR0aHM6IFByb3BUeXBlcy5vbmVPZihTVUkuV0lEVEhTKVxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgQnV0dG9uR3JvdXA7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQnV0dG9uIGdyb3VwcyBjYW4gY29udGFpbiBjb25kaXRpb25hbHMuXG4gKi9cblxuZnVuY3Rpb24gQnV0dG9uT3IocHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIHRleHQgPSBwcm9wcy50ZXh0O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdvcicsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoQnV0dG9uT3IsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoQnV0dG9uT3IsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgIFwiZGF0YS10ZXh0XCI6IHRleHRcbiAgfSkpO1xufVxuXG5CdXR0b25Pci5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNsYXNzTmFtZVwiLCBcInRleHRcIl07XG5CdXR0b25Pci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogT3IgYnV0dG9ucyBjYW4gaGF2ZSB0aGVpciB0ZXh0IGxvY2FsaXplZCwgb3IgYWRqdXN0ZWQgYnkgdXNpbmcgdGhlIHRleHQgcHJvcC4gKi9cbiAgdGV4dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBCdXR0b25PcjsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCBfaXNOaWwgZnJvbSBcImxvZGFzaC9pc05pbFwiO1xuaW1wb3J0IHsgUmVmIH0gZnJvbSAnQHN0YXJkdXN0LXVpL3JlYWN0LWNvbXBvbmVudC1yZWYnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIGNyZWF0ZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZUtleU9ubHksIHVzZUtleU9yVmFsdWVBbmRLZXksIHVzZVZhbHVlQW5kS2V5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24vSWNvbic7XG5pbXBvcnQgTGFiZWwgZnJvbSAnLi4vTGFiZWwvTGFiZWwnO1xuaW1wb3J0IEJ1dHRvbkNvbnRlbnQgZnJvbSAnLi9CdXR0b25Db250ZW50JztcbmltcG9ydCBCdXR0b25Hcm91cCBmcm9tICcuL0J1dHRvbkdyb3VwJztcbmltcG9ydCBCdXR0b25PciBmcm9tICcuL0J1dHRvbk9yJztcbi8qKlxuICogQSBCdXR0b24gaW5kaWNhdGVzIGEgcG9zc2libGUgdXNlciBhY3Rpb24uXG4gKiBAc2VlIEZvcm1cbiAqIEBzZWUgSWNvblxuICogQHNlZSBMYWJlbFxuICovXG5cbnZhciBCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJ1dHRvbiwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1dHRvbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihCdXR0b24pKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZWZcIiwgY3JlYXRlUmVmKCkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNvbXB1dGVFbGVtZW50VHlwZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBhdHRhY2hlZCA9IF90aGlzJHByb3BzLmF0dGFjaGVkLFxuICAgICAgICAgIGxhYmVsID0gX3RoaXMkcHJvcHMubGFiZWw7XG4gICAgICBpZiAoIV9pc05pbChhdHRhY2hlZCkgfHwgIV9pc05pbChsYWJlbCkpIHJldHVybiAnZGl2JztcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb21wdXRlVGFiSW5kZXhcIiwgZnVuY3Rpb24gKEVsZW1lbnRUeXBlKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczIuZGlzYWJsZWQsXG4gICAgICAgICAgdGFiSW5kZXggPSBfdGhpcyRwcm9wczIudGFiSW5kZXg7XG4gICAgICBpZiAoIV9pc05pbCh0YWJJbmRleCkpIHJldHVybiB0YWJJbmRleDtcbiAgICAgIGlmIChkaXNhYmxlZCkgcmV0dXJuIC0xO1xuICAgICAgaWYgKEVsZW1lbnRUeXBlID09PSAnZGl2JykgcmV0dXJuIDA7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZm9jdXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9pbnZva2UoX3RoaXMucmVmLmN1cnJlbnQsICdmb2N1cycpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgZGlzYWJsZWQgPSBfdGhpcy5wcm9wcy5kaXNhYmxlZDtcblxuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25DbGljaycsIGUsIF90aGlzLnByb3BzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYXNJY29uQ2xhc3NcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGxhYmVsUG9zaXRpb24gPSBfdGhpcyRwcm9wczMubGFiZWxQb3NpdGlvbixcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMy5jaGlsZHJlbixcbiAgICAgICAgICBjb250ZW50ID0gX3RoaXMkcHJvcHMzLmNvbnRlbnQsXG4gICAgICAgICAgaWNvbiA9IF90aGlzJHByb3BzMy5pY29uO1xuICAgICAgaWYgKGljb24gPT09IHRydWUpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIGljb24gJiYgKGxhYmVsUG9zaXRpb24gfHwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgJiYgX2lzTmlsKGNvbnRlbnQpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCdXR0b24sIFt7XG4gICAga2V5OiBcImNvbXB1dGVCdXR0b25BcmlhUm9sZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wdXRlQnV0dG9uQXJpYVJvbGUoRWxlbWVudFR5cGUpIHtcbiAgICAgIHZhciByb2xlID0gdGhpcy5wcm9wcy5yb2xlO1xuICAgICAgaWYgKCFfaXNOaWwocm9sZSkpIHJldHVybiByb2xlO1xuICAgICAgaWYgKEVsZW1lbnRUeXBlICE9PSAnYnV0dG9uJykgcmV0dXJuICdidXR0b24nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHM0LmFjdGl2ZSxcbiAgICAgICAgICBhbmltYXRlZCA9IF90aGlzJHByb3BzNC5hbmltYXRlZCxcbiAgICAgICAgICBhdHRhY2hlZCA9IF90aGlzJHByb3BzNC5hdHRhY2hlZCxcbiAgICAgICAgICBiYXNpYyA9IF90aGlzJHByb3BzNC5iYXNpYyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNC5jaGlsZHJlbixcbiAgICAgICAgICBjaXJjdWxhciA9IF90aGlzJHByb3BzNC5jaXJjdWxhcixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczQuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHM0LmNvbG9yLFxuICAgICAgICAgIGNvbXBhY3QgPSBfdGhpcyRwcm9wczQuY29tcGFjdCxcbiAgICAgICAgICBjb250ZW50ID0gX3RoaXMkcHJvcHM0LmNvbnRlbnQsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczQuZGlzYWJsZWQsXG4gICAgICAgICAgZmxvYXRlZCA9IF90aGlzJHByb3BzNC5mbG9hdGVkLFxuICAgICAgICAgIGZsdWlkID0gX3RoaXMkcHJvcHM0LmZsdWlkLFxuICAgICAgICAgIGljb24gPSBfdGhpcyRwcm9wczQuaWNvbixcbiAgICAgICAgICBpbnZlcnRlZCA9IF90aGlzJHByb3BzNC5pbnZlcnRlZCxcbiAgICAgICAgICBsYWJlbCA9IF90aGlzJHByb3BzNC5sYWJlbCxcbiAgICAgICAgICBsYWJlbFBvc2l0aW9uID0gX3RoaXMkcHJvcHM0LmxhYmVsUG9zaXRpb24sXG4gICAgICAgICAgbG9hZGluZyA9IF90aGlzJHByb3BzNC5sb2FkaW5nLFxuICAgICAgICAgIG5lZ2F0aXZlID0gX3RoaXMkcHJvcHM0Lm5lZ2F0aXZlLFxuICAgICAgICAgIHBvc2l0aXZlID0gX3RoaXMkcHJvcHM0LnBvc2l0aXZlLFxuICAgICAgICAgIHByaW1hcnkgPSBfdGhpcyRwcm9wczQucHJpbWFyeSxcbiAgICAgICAgICBzZWNvbmRhcnkgPSBfdGhpcyRwcm9wczQuc2Vjb25kYXJ5LFxuICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wczQuc2l6ZSxcbiAgICAgICAgICB0b2dnbGUgPSBfdGhpcyRwcm9wczQudG9nZ2xlO1xuICAgICAgdmFyIGJhc2VDbGFzc2VzID0gY3goY29sb3IsIHNpemUsIHVzZUtleU9ubHkoYWN0aXZlLCAnYWN0aXZlJyksIHVzZUtleU9ubHkoYmFzaWMsICdiYXNpYycpLCB1c2VLZXlPbmx5KGNpcmN1bGFyLCAnY2lyY3VsYXInKSwgdXNlS2V5T25seShjb21wYWN0LCAnY29tcGFjdCcpLCB1c2VLZXlPbmx5KGZsdWlkLCAnZmx1aWQnKSwgdXNlS2V5T25seSh0aGlzLmhhc0ljb25DbGFzcygpLCAnaWNvbicpLCB1c2VLZXlPbmx5KGludmVydGVkLCAnaW52ZXJ0ZWQnKSwgdXNlS2V5T25seShsb2FkaW5nLCAnbG9hZGluZycpLCB1c2VLZXlPbmx5KG5lZ2F0aXZlLCAnbmVnYXRpdmUnKSwgdXNlS2V5T25seShwb3NpdGl2ZSwgJ3Bvc2l0aXZlJyksIHVzZUtleU9ubHkocHJpbWFyeSwgJ3ByaW1hcnknKSwgdXNlS2V5T25seShzZWNvbmRhcnksICdzZWNvbmRhcnknKSwgdXNlS2V5T25seSh0b2dnbGUsICd0b2dnbGUnKSwgdXNlS2V5T3JWYWx1ZUFuZEtleShhbmltYXRlZCwgJ2FuaW1hdGVkJyksIHVzZUtleU9yVmFsdWVBbmRLZXkoYXR0YWNoZWQsICdhdHRhY2hlZCcpKTtcbiAgICAgIHZhciBsYWJlbGVkQ2xhc3NlcyA9IGN4KHVzZUtleU9yVmFsdWVBbmRLZXkobGFiZWxQb3NpdGlvbiB8fCAhIWxhYmVsLCAnbGFiZWxlZCcpKTtcbiAgICAgIHZhciB3cmFwcGVyQ2xhc3NlcyA9IGN4KHVzZUtleU9ubHkoZGlzYWJsZWQsICdkaXNhYmxlZCcpLCB1c2VWYWx1ZUFuZEtleShmbG9hdGVkLCAnZmxvYXRlZCcpKTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoQnV0dG9uLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEJ1dHRvbiwgdGhpcy5wcm9wcywgdGhpcy5jb21wdXRlRWxlbWVudFR5cGUpO1xuICAgICAgdmFyIHRhYkluZGV4ID0gdGhpcy5jb21wdXRlVGFiSW5kZXgoRWxlbWVudFR5cGUpO1xuXG4gICAgICBpZiAoIV9pc05pbChsYWJlbCkpIHtcbiAgICAgICAgdmFyIGJ1dHRvbkNsYXNzZXMgPSBjeCgndWknLCBiYXNlQ2xhc3NlcywgJ2J1dHRvbicsIGNsYXNzTmFtZSk7XG4gICAgICAgIHZhciBjb250YWluZXJDbGFzc2VzID0gY3goJ3VpJywgbGFiZWxlZENsYXNzZXMsICdidXR0b24nLCBjbGFzc05hbWUsIHdyYXBwZXJDbGFzc2VzKTtcbiAgICAgICAgdmFyIGxhYmVsRWxlbWVudCA9IExhYmVsLmNyZWF0ZShsYWJlbCwge1xuICAgICAgICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICAgICAgYmFzaWM6IHRydWUsXG4gICAgICAgICAgICBwb2ludGluZzogbGFiZWxQb3NpdGlvbiA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjb250YWluZXJDbGFzc2VzLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICAgICAgfSksIGxhYmVsUG9zaXRpb24gPT09ICdsZWZ0JyAmJiBsYWJlbEVsZW1lbnQsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVmLCB7XG4gICAgICAgICAgaW5uZXJSZWY6IHRoaXMucmVmXG4gICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogYnV0dG9uQ2xhc3NlcyxcbiAgICAgICAgICBcImFyaWEtcHJlc3NlZFwiOiB0b2dnbGUgPyAhIWFjdGl2ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgdGFiSW5kZXg6IHRhYkluZGV4XG4gICAgICAgIH0sIEljb24uY3JlYXRlKGljb24sIHtcbiAgICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICAgIH0pLCBcIiBcIiwgY29udGVudCkpLCAobGFiZWxQb3NpdGlvbiA9PT0gJ3JpZ2h0JyB8fCAhbGFiZWxQb3NpdGlvbikgJiYgbGFiZWxFbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsYXNzZXMgPSBjeCgndWknLCBiYXNlQ2xhc3Nlcywgd3JhcHBlckNsYXNzZXMsIGxhYmVsZWRDbGFzc2VzLCAnYnV0dG9uJywgY2xhc3NOYW1lKTtcbiAgICAgIHZhciBoYXNDaGlsZHJlbiA9ICFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKTtcbiAgICAgIHZhciByb2xlID0gdGhpcy5jb21wdXRlQnV0dG9uQXJpYVJvbGUoRWxlbWVudFR5cGUpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVmLCB7XG4gICAgICAgIGlubmVyUmVmOiB0aGlzLnJlZlxuICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICBcImFyaWEtcHJlc3NlZFwiOiB0b2dnbGUgPyAhIWFjdGl2ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkICYmIEVsZW1lbnRUeXBlID09PSAnYnV0dG9uJyB8fCB1bmRlZmluZWQsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICAgIHJvbGU6IHJvbGUsXG4gICAgICAgIHRhYkluZGV4OiB0YWJJbmRleFxuICAgICAgfSksIGhhc0NoaWxkcmVuICYmIGNoaWxkcmVuLCAhaGFzQ2hpbGRyZW4gJiYgSWNvbi5jcmVhdGUoaWNvbiwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KSwgIWhhc0NoaWxkcmVuICYmIGNvbnRlbnQpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQnV0dG9uO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoQnV0dG9uLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGFzOiAnYnV0dG9uJ1xufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShCdXR0b24sIFwiQ29udGVudFwiLCBCdXR0b25Db250ZW50KTtcblxuX2RlZmluZVByb3BlcnR5KEJ1dHRvbiwgXCJHcm91cFwiLCBCdXR0b25Hcm91cCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShCdXR0b24sIFwiT3JcIiwgQnV0dG9uT3IpO1xuXG5fZGVmaW5lUHJvcGVydHkoQnV0dG9uLCBcImhhbmRsZWRQcm9wc1wiLCBbXCJhY3RpdmVcIiwgXCJhbmltYXRlZFwiLCBcImFzXCIsIFwiYXR0YWNoZWRcIiwgXCJiYXNpY1wiLCBcImNoaWxkcmVuXCIsIFwiY2lyY3VsYXJcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBhY3RcIiwgXCJjb250ZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJmbG9hdGVkXCIsIFwiZmx1aWRcIiwgXCJpY29uXCIsIFwiaW52ZXJ0ZWRcIiwgXCJsYWJlbFwiLCBcImxhYmVsUG9zaXRpb25cIiwgXCJsb2FkaW5nXCIsIFwibmVnYXRpdmVcIiwgXCJvbkNsaWNrXCIsIFwicG9zaXRpdmVcIiwgXCJwcmltYXJ5XCIsIFwicm9sZVwiLCBcInNlY29uZGFyeVwiLCBcInNpemVcIiwgXCJ0YWJJbmRleFwiLCBcInRvZ2dsZVwiXSk7XG5cbkJ1dHRvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBIGJ1dHRvbiBjYW4gc2hvdyBpdCBpcyBjdXJyZW50bHkgdGhlIGFjdGl2ZSB1c2VyIHNlbGVjdGlvbi4gKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBidXR0b24gY2FuIGFuaW1hdGUgdG8gc2hvdyBoaWRkZW4gY29udGVudC4gKi9cbiAgYW5pbWF0ZWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub25lT2YoWydmYWRlJywgJ3ZlcnRpY2FsJ10pXSksXG5cbiAgLyoqIEEgYnV0dG9uIGNhbiBiZSBhdHRhY2hlZCB0byBvdGhlciBjb250ZW50LiAqL1xuICBhdHRhY2hlZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddKV0pLFxuXG4gIC8qKiBBIGJhc2ljIGJ1dHRvbiBpcyBsZXNzIHByb25vdW5jZWQuICovXG4gIGJhc2ljOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtQcm9wVHlwZXMubm9kZSwgY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsnbGFiZWwnXSksIGN1c3RvbVByb3BUeXBlcy5naXZlblByb3BzKHtcbiAgICBpY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZF0pXG4gIH0sIGN1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2ljb24nXSkpXSksXG5cbiAgLyoqIEEgYnV0dG9uIGNhbiBiZSBjaXJjdWxhci4gKi9cbiAgY2lyY3VsYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQSBidXR0b24gY2FuIGhhdmUgZGlmZmVyZW50IGNvbG9ycyAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoU1VJLkNPTE9SUyksIFsnZmFjZWJvb2snLCAnZ29vZ2xlIHBsdXMnLCAnaW5zdGFncmFtJywgJ2xpbmtlZGluJywgJ3R3aXR0ZXInLCAndmsnLCAneW91dHViZSddKSksXG5cbiAgLyoqIEEgYnV0dG9uIGNhbiByZWR1Y2UgaXRzIHBhZGRpbmcgdG8gZml0IGludG8gdGlnaHRlciBzcGFjZXMuICovXG4gIGNvbXBhY3Q6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIEEgYnV0dG9uIGNhbiBzaG93IGl0IGlzIGN1cnJlbnRseSB1bmFibGUgdG8gYmUgaW50ZXJhY3RlZCB3aXRoLiAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgYnV0dG9uIGNhbiBiZSBhbGlnbmVkIHRvIHRoZSBsZWZ0IG9yIHJpZ2h0IG9mIGl0cyBjb250YWluZXIuICovXG4gIGZsb2F0ZWQ6IFByb3BUeXBlcy5vbmVPZihTVUkuRkxPQVRTKSxcblxuICAvKiogQSBidXR0b24gY2FuIHRha2UgdGhlIHdpZHRoIG9mIGl0cyBjb250YWluZXIuICovXG4gIGZsdWlkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQWRkIGFuIEljb24gYnkgbmFtZSwgcHJvcHMgb2JqZWN0LCBvciBwYXNzIGFuIDxJY29uIC8+LiAqL1xuICBpY29uOiBjdXN0b21Qcm9wVHlwZXMuc29tZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5lbGVtZW50XSksXG5cbiAgLyoqIEEgYnV0dG9uIGNhbiBiZSBmb3JtYXR0ZWQgdG8gYXBwZWFyIG9uIGRhcmsgYmFja2dyb3VuZHMuICovXG4gIGludmVydGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQWRkIGEgTGFiZWwgYnkgdGV4dCwgcHJvcHMgb2JqZWN0LCBvciBwYXNzIGEgPExhYmVsIC8+LiAqL1xuICBsYWJlbDogY3VzdG9tUHJvcFR5cGVzLnNvbWUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5lbGVtZW50XSksXG5cbiAgLyoqIEEgbGFiZWxlZCBidXR0b24gY2FuIGZvcm1hdCBhIExhYmVsIG9yIEljb24gdG8gYXBwZWFyIG9uIHRoZSBsZWZ0IG9yIHJpZ2h0LiAqL1xuICBsYWJlbFBvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoWydyaWdodCcsICdsZWZ0J10pLFxuXG4gIC8qKiBBIGJ1dHRvbiBjYW4gc2hvdyBhIGxvYWRpbmcgaW5kaWNhdG9yLiAqL1xuICBsb2FkaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBidXR0b24gY2FuIGhpbnQgdG93YXJkcyBhIG5lZ2F0aXZlIGNvbnNlcXVlbmNlLiAqL1xuICBuZWdhdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxlZCBhZnRlciB1c2VyJ3MgY2xpY2suXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogQSBidXR0b24gY2FuIGhpbnQgdG93YXJkcyBhIHBvc2l0aXZlIGNvbnNlcXVlbmNlLiAqL1xuICBwb3NpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgYnV0dG9uIGNhbiBiZSBmb3JtYXR0ZWQgdG8gc2hvdyBkaWZmZXJlbnQgbGV2ZWxzIG9mIGVtcGhhc2lzLiAqL1xuICBwcmltYXJ5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogVGhlIHJvbGUgb2YgdGhlIEhUTUwgZWxlbWVudC4gKi9cbiAgcm9sZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQSBidXR0b24gY2FuIGJlIGZvcm1hdHRlZCB0byBzaG93IGRpZmZlcmVudCBsZXZlbHMgb2YgZW1waGFzaXMuICovXG4gIHNlY29uZGFyeTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgYnV0dG9uIGNhbiBoYXZlIGRpZmZlcmVudCBzaXplcy4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFNVSS5TSVpFUyksXG5cbiAgLyoqIEEgYnV0dG9uIGNhbiByZWNlaXZlIGZvY3VzLiAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKiBBIGJ1dHRvbiBjYW4gYmUgZm9ybWF0dGVkIHRvIHRvZ2dsZSBvbiBhbmQgb2ZmLiAqL1xuICB0b2dnbGU6IFByb3BUeXBlcy5ib29sXG59IDoge307XG5CdXR0b24uY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShCdXR0b24sIGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGNvbnRlbnQ6IHZhbHVlXG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjsiLCJpbXBvcnQgeyBpbnN0YW5jZSB9IGZyb20gJ0BzZW1hbnRpYy11aS1yZWFjdC9ldmVudC1zdGFjayc7XG5leHBvcnQgZGVmYXVsdCBpbnN0YW5jZTsiLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5cbi8qKiBDaGVja3MgdGhhdCB0aGUgcGFzc2VkIG9iamVjdCBpcyBhIHZhbGlkIFJlYWN0IHJlZiBvYmplY3QuICovXG52YXIgaXNSZWZPYmplY3QgPSBmdW5jdGlvbiBpc1JlZk9iamVjdChyZWYpIHtcbiAgcmV0dXJuICgvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi92MTYuOC4yL3BhY2thZ2VzL3JlYWN0LXJlY29uY2lsZXIvc3JjL1JlYWN0RmliZXJDb21taXRXb3JrLmpzI0w2NjVcbiAgICByZWYgIT09IG51bGwgJiYgX3R5cGVvZihyZWYpID09PSAnb2JqZWN0JyAmJiByZWYuaGFzT3duUHJvcGVydHkoJ2N1cnJlbnQnKVxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNSZWZPYmplY3Q7IiwidmFyIG51bGxSZWZPYmplY3QgPSB7XG4gIGN1cnJlbnQ6IG51bGwgLy8gQSBtYXAgb2YgY3JlYXRlZCByZWYgb2JqZWN0cyB0byBwcm92aWRlIG1lbW9pemF0aW9uLlxuXG59O1xudmFyIHJlZk9iamVjdHMgPSBuZXcgV2Vha01hcCgpO1xuLyoqIENyZWF0ZXMgYSBSZWFjdCByZWYgb2JqZWN0IGZyb20gZXhpc3RpbmcgRE9NIG5vZGUuICovXG5cbnZhciB0b1JlZk9iamVjdCA9IGZ1bmN0aW9uIHRvUmVmT2JqZWN0KG5vZGUpIHtcbiAgLy8gQSBcIm51bGxcIiBpcyBub3QgdmFsaWQga2V5IGZvciBhIFdlYWtNYXBcbiAgaWYgKG5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbFJlZk9iamVjdDtcbiAgfVxuXG4gIGlmIChyZWZPYmplY3RzLmhhcyhub2RlKSkge1xuICAgIHJldHVybiByZWZPYmplY3RzLmdldChub2RlKTtcbiAgfVxuXG4gIHZhciByZWZPYmplY3QgPSB7XG4gICAgY3VycmVudDogbm9kZVxuICB9O1xuICByZWZPYmplY3RzLnNldChub2RlLCByZWZPYmplY3QpO1xuICByZXR1cm4gcmVmT2JqZWN0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZWZPYmplY3Q7IiwiaW1wb3J0IF9pc05pbCBmcm9tIFwibG9kYXNoL2lzTmlsXCI7XG5pbXBvcnQgeyBpc1JlZk9iamVjdCwgdG9SZWZPYmplY3QgfSBmcm9tICdAc3RhcmR1c3QtdWkvcmVhY3QtY29tcG9uZW50LXJlZic7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuLi8uLi8uLi9saWInO1xuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wc2AsIHJldHVybiBhIGBub2RlYCB2YWx1ZSBvciB1bmRlZmluZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R8UmVhY3QuUmVmT2JqZWN0fSBwcm9wcyBDb21wb25lbnQncyBwcm9wc1xuICogQHJldHVybiB7UmVhY3QuUmVmT2JqZWN0fHVuZGVmaW5lZH1cbiAqL1xuXG52YXIgZ2V0Tm9kZVJlZkZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldE5vZGVSZWZGcm9tUHJvcHMocHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBwcm9wcy5ub2RlO1xuXG4gIGlmIChpc0Jyb3dzZXIoKSkge1xuICAgIGlmIChpc1JlZk9iamVjdChub2RlKSkgcmV0dXJuIG5vZGU7XG4gICAgcmV0dXJuIF9pc05pbChub2RlKSA/IHRvUmVmT2JqZWN0KGRvY3VtZW50LmJvZHkpIDogdG9SZWZPYmplY3Qobm9kZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdldE5vZGVSZWZGcm9tUHJvcHM7IiwiaW1wb3J0IF91bmlxIGZyb20gXCJsb2Rhc2gvZnAvdW5pcVwiO1xuaW1wb3J0IF9pZGVudGl0eSBmcm9tIFwibG9kYXNoL2ZwL2lkZW50aXR5XCI7XG5pbXBvcnQgX2ZpbHRlciBmcm9tIFwibG9kYXNoL2ZwL2ZpbHRlclwiO1xuaW1wb3J0IF9zcGxpdCBmcm9tIFwibG9kYXNoL2ZwL3NwbGl0XCI7XG5pbXBvcnQgX2ZsYXRNYXAgZnJvbSBcImxvZGFzaC9mcC9mbGF0TWFwXCI7XG5pbXBvcnQgX21hcCBmcm9tIFwibG9kYXNoL2ZwL21hcFwiO1xuaW1wb3J0IF90b0FycmF5IGZyb20gXCJsb2Rhc2gvZnAvdG9BcnJheVwiO1xuaW1wb3J0IF9mbG93IGZyb20gXCJsb2Rhc2gvZnAvZmxvd1wiO1xuXG52YXIgY29tcHV0ZUNsYXNzTmFtZXMgPSBfZmxvdyhfdG9BcnJheSwgX21hcCgncHJvcHMuY2xhc3NOYW1lJyksIF9mbGF0TWFwKF9zcGxpdCgvXFxzKy8pKSwgX2ZpbHRlcihfaWRlbnRpdHkpLCBfdW5pcSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXB1dGVDbGFzc05hbWVzOyIsImltcG9ydCBfZGlmZmVyZW5jZSBmcm9tIFwibG9kYXNoL2RpZmZlcmVuY2VcIjtcblxudmFyIGNvbXB1dGVDbGFzc05hbWVzRGlmZmVyZW5jZSA9IGZ1bmN0aW9uIGNvbXB1dGVDbGFzc05hbWVzRGlmZmVyZW5jZShwcmV2Q2xhc3NOYW1lcywgY3VycmVudENsYXNzTmFtZXMpIHtcbiAgcmV0dXJuIFtfZGlmZmVyZW5jZShjdXJyZW50Q2xhc3NOYW1lcywgcHJldkNsYXNzTmFtZXMpLCBfZGlmZmVyZW5jZShwcmV2Q2xhc3NOYW1lcywgY3VycmVudENsYXNzTmFtZXMpXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXB1dGVDbGFzc05hbWVzRGlmZmVyZW5jZTsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9mb3JFYWNoIGZyb20gXCJsb2Rhc2gvZm9yRWFjaFwiO1xuaW1wb3J0IGNvbXB1dGVDbGFzc05hbWVzIGZyb20gJy4vY29tcHV0ZUNsYXNzTmFtZXMnO1xuaW1wb3J0IGNvbXB1dGVDbGFzc05hbWVzRGlmZmVyZW5jZSBmcm9tICcuL2NvbXB1dGVDbGFzc05hbWVzRGlmZmVyZW5jZSc7XG52YXIgcHJldkNsYXNzTmFtZXMgPSBuZXcgTWFwKCk7XG4vKipcbiAqIEBwYXJhbSB7UmVhY3QuUmVmT2JqZWN0fSBub2RlUmVmXG4gKiBAcGFyYW0ge09iamVjdFtdfSBjb21wb25lbnRzXG4gKi9cblxudmFyIGhhbmRsZUNsYXNzTmFtZXNDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDbGFzc05hbWVzQ2hhbmdlKG5vZGVSZWYsIGNvbXBvbmVudHMpIHtcbiAgdmFyIGN1cnJlbnRDbGFzc05hbWVzID0gY29tcHV0ZUNsYXNzTmFtZXMoY29tcG9uZW50cyk7XG5cbiAgdmFyIF9jb21wdXRlQ2xhc3NOYW1lc0RpZiA9IGNvbXB1dGVDbGFzc05hbWVzRGlmZmVyZW5jZShwcmV2Q2xhc3NOYW1lcy5nZXQobm9kZVJlZiksIGN1cnJlbnRDbGFzc05hbWVzKSxcbiAgICAgIF9jb21wdXRlQ2xhc3NOYW1lc0RpZjIgPSBfc2xpY2VkVG9BcnJheShfY29tcHV0ZUNsYXNzTmFtZXNEaWYsIDIpLFxuICAgICAgZm9yQWRkID0gX2NvbXB1dGVDbGFzc05hbWVzRGlmMlswXSxcbiAgICAgIGZvclJlbW92YWwgPSBfY29tcHV0ZUNsYXNzTmFtZXNEaWYyWzFdO1xuXG4gIGlmIChub2RlUmVmLmN1cnJlbnQpIHtcbiAgICBfZm9yRWFjaChmb3JBZGQsIGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBub2RlUmVmLmN1cnJlbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgIH0pO1xuXG4gICAgX2ZvckVhY2goZm9yUmVtb3ZhbCwgZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuIG5vZGVSZWYuY3VycmVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgfSk7XG4gIH1cblxuICBwcmV2Q2xhc3NOYW1lcy5zZXQobm9kZVJlZiwgY3VycmVudENsYXNzTmFtZXMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaGFuZGxlQ2xhc3NOYW1lc0NoYW5nZTsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGN1c3RvbVByb3BUeXBlcyB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgZ2V0Tm9kZVJlZkZyb21Qcm9wcyBmcm9tICcuL2xpYi9nZXROb2RlUmVmRnJvbVByb3BzJztcbmltcG9ydCBoYW5kbGVDbGFzc05hbWVzQ2hhbmdlIGZyb20gJy4vbGliL2hhbmRsZUNsYXNzTmFtZXNDaGFuZ2UnO1xuaW1wb3J0IE5vZGVSZWdpc3RyeSBmcm9tICcuL2xpYi9Ob2RlUmVnaXN0cnknO1xudmFyIG5vZGVSZWdpc3RyeSA9IG5ldyBOb2RlUmVnaXN0cnkoKTtcbi8qKlxuICogQSBjb21wb25lbnQgdGhhdCBhbGxvd3MgdG8gbWFuYWdlIGNsYXNzTmFtZXMgb24gYSBET00gbm9kZSBpbiBkZWNsYXJhdGl2ZSBtYW5uZXIuXG4gKi9cblxudmFyIE1vdW50Tm9kZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTW91bnROb2RlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb3VudE5vZGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vdW50Tm9kZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE1vdW50Tm9kZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTW91bnROb2RlLCBbe1xuICAgIGtleTogXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKF9yZWYpIHtcbiAgICAgIHZhciBuZXh0Q2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWU7XG4gICAgICB2YXIgY3VycmVudENsYXNzTmFtZSA9IHRoaXMucHJvcHMuY2xhc3NOYW1lO1xuICAgICAgcmV0dXJuIG5leHRDbGFzc05hbWUgIT09IGN1cnJlbnRDbGFzc05hbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIG5vZGVSZWYgPSBnZXROb2RlUmVmRnJvbVByb3BzKHRoaXMucHJvcHMpO1xuICAgICAgbm9kZVJlZ2lzdHJ5LmFkZChub2RlUmVmLCB0aGlzKTtcbiAgICAgIG5vZGVSZWdpc3RyeS5lbWl0KG5vZGVSZWYsIGhhbmRsZUNsYXNzTmFtZXNDaGFuZ2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgbm9kZVJlZ2lzdHJ5LmVtaXQoZ2V0Tm9kZVJlZkZyb21Qcm9wcyh0aGlzLnByb3BzKSwgaGFuZGxlQ2xhc3NOYW1lc0NoYW5nZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdmFyIG5vZGVSZWYgPSBnZXROb2RlUmVmRnJvbVByb3BzKHRoaXMucHJvcHMpO1xuICAgICAgbm9kZVJlZ2lzdHJ5LmRlbChub2RlUmVmLCB0aGlzKTtcbiAgICAgIG5vZGVSZWdpc3RyeS5lbWl0KG5vZGVSZWYsIGhhbmRsZUNsYXNzTmFtZXNDaGFuZ2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1vdW50Tm9kZTtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KE1vdW50Tm9kZSwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiY2xhc3NOYW1lXCIsIFwibm9kZVwiXSk7XG5cbmV4cG9ydCB7IE1vdW50Tm9kZSBhcyBkZWZhdWx0IH07XG5Nb3VudE5vZGUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFRoZSBET00gbm9kZSB3aGVyZSB3ZSB3aWxsIGFwcGx5IGNsYXNzIG5hbWVzLiBEZWZhdWx0cyB0byBkb2N1bWVudC5ib2R5LiAqL1xuICBub2RlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtjdXN0b21Qcm9wVHlwZXMuZG9tTm9kZSwgY3VzdG9tUHJvcFR5cGVzLnJlZk9iamVjdF0pXG59IDoge307IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuXG52YXIgTm9kZVJlZ2lzdHJ5ID0gZnVuY3Rpb24gTm9kZVJlZ2lzdHJ5KCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb2RlUmVnaXN0cnkpO1xuXG4gIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFkZFwiLCBmdW5jdGlvbiAobm9kZVJlZiwgY29tcG9uZW50KSB7XG4gICAgaWYgKF90aGlzLm5vZGVzLmhhcyhub2RlUmVmKSkge1xuICAgICAgdmFyIHNldCA9IF90aGlzLm5vZGVzLmdldChub2RlUmVmKTtcblxuICAgICAgc2V0LmFkZChjb21wb25lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF90aGlzLm5vZGVzLnNldChub2RlUmVmLCBuZXcgU2V0KFtjb21wb25lbnRdKSk7XG4gIH0pO1xuXG4gIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImRlbFwiLCBmdW5jdGlvbiAobm9kZVJlZiwgY29tcG9uZW50KSB7XG4gICAgaWYgKCFfdGhpcy5ub2Rlcy5oYXMobm9kZVJlZikpIHJldHVybjtcblxuICAgIHZhciBzZXQgPSBfdGhpcy5ub2Rlcy5nZXQobm9kZVJlZik7XG5cbiAgICBpZiAoc2V0LnNpemUgPT09IDEpIHtcbiAgICAgIF90aGlzLm5vZGVzW1wiZGVsZXRlXCJdKG5vZGVSZWYpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2V0W1wiZGVsZXRlXCJdKGNvbXBvbmVudCk7XG4gIH0pO1xuXG4gIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImVtaXRcIiwgZnVuY3Rpb24gKG5vZGVSZWYsIGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sobm9kZVJlZiwgX3RoaXMubm9kZXMuZ2V0KG5vZGVSZWYpKTtcbiAgfSk7XG5cbiAgdGhpcy5ub2RlcyA9IG5ldyBNYXAoKTtcbn07XG5cbmV4cG9ydCB7IE5vZGVSZWdpc3RyeSBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIG1vZGFsIGNhbiBoYXZlIGEgaGVhZGVyLlxuICovXG5cbmZ1bmN0aW9uIE1vZGFsSGVhZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQ7XG4gIHZhciBjbGFzc2VzID0gY3goY2xhc3NOYW1lLCAnaGVhZGVyJyk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoTW9kYWxIZWFkZXIsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTW9kYWxIZWFkZXIsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cbk1vZGFsSGVhZGVyLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCJdO1xuTW9kYWxIZWFkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmRcbn0gOiB7fTtcbk1vZGFsSGVhZGVyLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoTW9kYWxIZWFkZXIsIGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiB7XG4gICAgY29udGVudDogY29udGVudFxuICB9O1xufSk7XG5leHBvcnQgZGVmYXVsdCBNb2RhbEhlYWRlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgdXNlS2V5T25seSB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgbW9kYWwgY2FuIGNvbnRhaW4gY29udGVudC5cbiAqL1xuXG5mdW5jdGlvbiBNb2RhbENvbnRlbnQocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGltYWdlID0gcHJvcHMuaW1hZ2UsXG4gICAgICBzY3JvbGxpbmcgPSBwcm9wcy5zY3JvbGxpbmc7XG4gIHZhciBjbGFzc2VzID0gY3goY2xhc3NOYW1lLCB1c2VLZXlPbmx5KGltYWdlLCAnaW1hZ2UnKSwgdXNlS2V5T25seShzY3JvbGxpbmcsICdzY3JvbGxpbmcnKSwgJ2NvbnRlbnQnKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhNb2RhbENvbnRlbnQsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTW9kYWxDb250ZW50LCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5Nb2RhbENvbnRlbnQuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJpbWFnZVwiLCBcInNjcm9sbGluZ1wiXTtcbk1vZGFsQ29udGVudC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBtb2RhbCBjYW4gY29udGFpbiBpbWFnZSBjb250ZW50LiAqL1xuICBpbWFnZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgbW9kYWwgY2FuIHVzZSB0aGUgZW50aXJlIHNpemUgb2YgdGhlIHNjcmVlbi4gKi9cbiAgc2Nyb2xsaW5nOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuTW9kYWxDb250ZW50LmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoTW9kYWxDb250ZW50LCBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgTW9kYWxDb250ZW50OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX21hcCBmcm9tIFwibG9kYXNoL21hcFwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi9lbGVtZW50cy9CdXR0b24nO1xuLyoqXG4gKiBBIG1vZGFsIGNhbiBjb250YWluIGEgcm93IG9mIGFjdGlvbnMuXG4gKi9cblxudmFyIE1vZGFsQWN0aW9ucyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTW9kYWxBY3Rpb25zLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbEFjdGlvbnMoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWxBY3Rpb25zKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKE1vZGFsQWN0aW9ucykpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUJ1dHRvbk92ZXJyaWRlc1wiLCBmdW5jdGlvbiAocHJlZGVmaW5lZFByb3BzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUsIGJ1dHRvblByb3BzKSB7XG4gICAgICAgICAgX2ludm9rZShwcmVkZWZpbmVkUHJvcHMsICdvbkNsaWNrJywgZSwgYnV0dG9uUHJvcHMpO1xuXG4gICAgICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uQWN0aW9uQ2xpY2snLCBlLCBidXR0b25Qcm9wcyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTW9kYWxBY3Rpb25zLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aW9ucyA9IF90aGlzJHByb3BzLmFjdGlvbnMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY29udGVudCA9IF90aGlzJHByb3BzLmNvbnRlbnQ7XG4gICAgICB2YXIgY2xhc3NlcyA9IGN4KCdhY3Rpb25zJywgY2xhc3NOYW1lKTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoTW9kYWxBY3Rpb25zLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKE1vZGFsQWN0aW9ucywgdGhpcy5wcm9wcyk7XG5cbiAgICAgIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgICAgIH0pLCBjaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjb250ZW50KSkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICAgICAgfSksIGNvbnRlbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgICB9KSwgX21hcChhY3Rpb25zLCBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBCdXR0b24uY3JlYXRlKGFjdGlvbiwge1xuICAgICAgICAgIG92ZXJyaWRlUHJvcHM6IF90aGlzMi5oYW5kbGVCdXR0b25PdmVycmlkZXNcbiAgICAgICAgfSk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1vZGFsQWN0aW9ucztcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KE1vZGFsQWN0aW9ucywgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYWN0aW9uc1wiLCBcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwib25BY3Rpb25DbGlja1wiXSk7XG5cbmV4cG9ydCB7IE1vZGFsQWN0aW9ucyBhcyBkZWZhdWx0IH07XG5Nb2RhbEFjdGlvbnMucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQXJyYXkgb2Ygc2hvcnRoYW5kIGJ1dHRvbnMuICovXG4gIGFjdGlvbnM6IGN1c3RvbVByb3BUeXBlcy5jb2xsZWN0aW9uU2hvcnRoYW5kLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKipcbiAgICogQWN0aW9uIG9uQ2xpY2sgaGFuZGxlciB3aGVuIHVzaW5nIHNob3J0aGFuZCBgYWN0aW9uc2AuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMgZnJvbSB0aGUgY2xpY2tlZCBhY3Rpb24uXG4gICAqL1xuICBvbkFjdGlvbkNsaWNrOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2NoaWxkcmVuJ10pLCBQcm9wVHlwZXMuZnVuY10pXG59IDoge307XG5Nb2RhbEFjdGlvbnMuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShNb2RhbEFjdGlvbnMsIGZ1bmN0aW9uIChhY3Rpb25zKSB7XG4gIHJldHVybiB7XG4gICAgYWN0aW9uczogYWN0aW9uc1xuICB9O1xufSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIG1vZGFsIGNhbiBjb250YWluIGEgZGVzY3JpcHRpb24gd2l0aCBvbmUgb3IgbW9yZSBwYXJhZ3JhcGhzLlxuICovXG5cbmZ1bmN0aW9uIE1vZGFsRGVzY3JpcHRpb24ocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudDtcbiAgdmFyIGNsYXNzZXMgPSBjeCgnZGVzY3JpcHRpb24nLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKE1vZGFsRGVzY3JpcHRpb24sIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTW9kYWxEZXNjcmlwdGlvbiwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuTW9kYWxEZXNjcmlwdGlvbi5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiXTtcbk1vZGFsRGVzY3JpcHRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmRcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IE1vZGFsRGVzY3JpcHRpb247IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL1NlbWFudGljLU9yZy9TZW1hbnRpYy1VSS9ibG9iLzIuNC4xL3NyYy9kZWZpbml0aW9ucy9tb2R1bGVzL21vZGFsLmpzI0w5NTZcbnZhciBPRkZTRVQgPSAwOyAvLyBodHRwczovL2dpdGh1Yi5jb20vU2VtYW50aWMtT3JnL1NlbWFudGljLVVJL2Jsb2IvMi40LjEvc3JjL2RlZmluaXRpb25zL21vZHVsZXMvbW9kYWwuanMjTDk5MFxuXG52YXIgUEFERElORyA9IDUwO1xuLyoqXG4gKiBFbnN1cmVzIHRoYXQgbW9kYWwgY2FuIGZpdCB2aWV3cG9ydCB3aXRob3V0IHNjcm9sbC5cbiAqXG4gKiBAcGFyYW0gbW9kYWxSZWN0IHtET01SZWN0fVxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL1NlbWFudGljLU9yZy9TZW1hbnRpYy1VSS9ibG9iLzIuNC4xL3NyYy9kZWZpbml0aW9ucy9tb2R1bGVzL21vZGFsLmpzI0w2MDhcbiAqL1xuXG5leHBvcnQgdmFyIGNhbkZpdCA9IGZ1bmN0aW9uIGNhbkZpdChtb2RhbFJlY3QpIHtcbiAgLy8gb3JpZ2luYWw6IHNjcm9sbEhlaWdodCA9ICRtb2R1bGUucHJvcCgnc2Nyb2xsSGVpZ2h0JyksXG4gIC8vIGlzIHJlcGxhY2VkIGJ5IC5oZWlnaHQgYmVjYXVzZSBzY3JvbGxIZWlnaHQgcHJvdmlkZXMgaW50ZWdlciB3aGljaCBwcm9kdWNlcyBnbGl0Y2hlc1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vU2VtYW50aWMtT3JnL1NlbWFudGljLVVJLVJlYWN0L2lzc3Vlcy8yMjIxXG4gIHZhciBzY3JvbGxIZWlnaHQgPSBtb2RhbFJlY3QuaGVpZ2h0ICsgT0ZGU0VUOyAvLyAkbW9kdWxlLm91dGVySGVpZ2h0KCkgKyBzZXR0aW5ncy5vZmZzZXRcblxuICB2YXIgaGVpZ2h0ID0gbW9kYWxSZWN0LmhlaWdodCArIE9GRlNFVDsgLy8gb3JpZ2luYWw6ICQod2luZG93KS5oZWlnaHQoKVxuXG4gIHZhciBjb250ZXh0SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICB2YXIgdmVydGljYWxDZW50ZXIgPSBjb250ZXh0SGVpZ2h0IC8gMjtcbiAgdmFyIHRvcE9mZnNldCA9IC0oaGVpZ2h0IC8gMik7IC8vIHBhZGRpbmcgd2l0aCBlZGdlIG9mIHBhZ2VcblxuICB2YXIgcGFkZGluZ0hlaWdodCA9IFBBRERJTkc7XG4gIHZhciBzdGFydFBvc2l0aW9uID0gdmVydGljYWxDZW50ZXIgKyB0b3BPZmZzZXQ7IC8vIDBcbiAgLy8gb3JpZ2luYWw6IHNjcm9sbEhlaWdodCA+IGhlaWdodFxuICAvLyAgICAgPyBzdGFydFBvc2l0aW9uICsgc2Nyb2xsSGVpZ2h0ICsgcGFkZGluZ0hlaWdodCA8IGNvbnRleHRIZWlnaHRcbiAgLy8gICAgIDogaGVpZ2h0ICsgcGFkZGluZ0hlaWdodCAqIDIgPCBjb250ZXh0SGVpZ2h0XG5cbiAgcmV0dXJuIHN0YXJ0UG9zaXRpb24gKyBzY3JvbGxIZWlnaHQgKyBwYWRkaW5nSGVpZ2h0IDwgY29udGV4dEhlaWdodDtcbn07XG4vKipcbiAqIENyZWF0ZXMgbGVnYWN5IHN0eWxlcyBmb3IgSUUxMS5cbiAqXG4gKiBAcGFyYW0gaXNGaXR0ZWQge0Jvb2xlYW59XG4gKiBAcGFyYW0gY2VudGVyZWQge0Jvb2xlYW59XG4gKiBAcGFyYW0gbW9kYWxSZWN0IHtET01SZWN0fVxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL1NlbWFudGljLU9yZy9TZW1hbnRpYy1VSS9ibG9iLzIuNC4xL3NyYy9kZWZpbml0aW9ucy9tb2R1bGVzL21vZGFsLmpzI0w3MThcbiAqL1xuXG5leHBvcnQgdmFyIGdldExlZ2FjeVN0eWxlcyA9IGZ1bmN0aW9uIGdldExlZ2FjeVN0eWxlcyhpc0ZpdHRlZCwgY2VudGVyZWQsIG1vZGFsUmVjdCkge1xuICB2YXIgbWFyZ2luVG9wID0gY2VudGVyZWQgJiYgaXNGaXR0ZWQgPyAtKG1vZGFsUmVjdC5oZWlnaHQgLyAyKSA6IDA7XG4gIHZhciBtYXJnaW5MZWZ0ID0gLShtb2RhbFJlY3Qud2lkdGggLyAyKTtcbiAgcmV0dXJuIHtcbiAgICBtYXJnaW5MZWZ0OiBtYXJnaW5MZWZ0LFxuICAgIG1hcmdpblRvcDogbWFyZ2luVG9wXG4gIH07XG59OyAvLyBodHRwczovL2dpdGh1Yi5jb20vU2VtYW50aWMtT3JnL1NlbWFudGljLVVJL2Jsb2IvMi40LjEvc3JjL2RlZmluaXRpb25zL21vZHVsZXMvbW9kYWwuanMjTDYzMVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5leHBvcnQgdmFyIGlzTGVnYWN5ID0gZnVuY3Rpb24gaXNMZWdhY3koKSB7XG4gIHJldHVybiAhd2luZG93LkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIHdpbmRvdztcbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9waWNrIGZyb20gXCJsb2Rhc2gvcGlja1wiO1xuaW1wb3J0IF9pbmNsdWRlcyBmcm9tIFwibG9kYXNoL2luY2x1ZGVzXCI7XG5pbXBvcnQgX3JlZHVjZSBmcm9tIFwibG9kYXNoL3JlZHVjZVwiO1xuaW1wb3J0IF9pc0VtcHR5IGZyb20gXCJsb2Rhc2gvaXNFbXB0eVwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCB7IFJlZiB9IGZyb20gJ0BzdGFyZHVzdC11aS9yZWFjdC1jb21wb25lbnQtcmVmJztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlUmVmLCBGcmFnbWVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJ3NoYWxsb3dlcXVhbCc7XG5pbXBvcnQgeyBBdXRvQ29udHJvbGxlZENvbXBvbmVudCBhcyBDb21wb25lbnQsIGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZG9lc05vZGVDb250YWluQ2xpY2ssIGV2ZW50U3RhY2ssIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgaXNCcm93c2VyLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL2VsZW1lbnRzL0ljb24nO1xuaW1wb3J0IE1vdW50Tm9kZSBmcm9tICcuLi8uLi9hZGRvbnMvTW91bnROb2RlJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vLi4vYWRkb25zL1BvcnRhbCc7XG5pbXBvcnQgTW9kYWxIZWFkZXIgZnJvbSAnLi9Nb2RhbEhlYWRlcic7XG5pbXBvcnQgTW9kYWxDb250ZW50IGZyb20gJy4vTW9kYWxDb250ZW50JztcbmltcG9ydCBNb2RhbEFjdGlvbnMgZnJvbSAnLi9Nb2RhbEFjdGlvbnMnO1xuaW1wb3J0IE1vZGFsRGVzY3JpcHRpb24gZnJvbSAnLi9Nb2RhbERlc2NyaXB0aW9uJztcbmltcG9ydCB7IGNhbkZpdCwgZ2V0TGVnYWN5U3R5bGVzLCBpc0xlZ2FjeSB9IGZyb20gJy4vdXRpbHMnO1xuXG4vKipcbiAqIEEgbW9kYWwgZGlzcGxheXMgY29udGVudCB0aGF0IHRlbXBvcmFyaWx5IGJsb2NrcyBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgbWFpbiB2aWV3IG9mIGEgc2l0ZS5cbiAqIEBzZWUgQ29uZmlybVxuICogQHNlZSBQb3J0YWxcbiAqL1xudmFyIE1vZGFsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNb2RhbCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWwoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoTW9kYWwpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJsZWdhY3lcIiwgaXNCcm93c2VyKCkgJiYgaXNMZWdhY3koKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVmXCIsIGNyZWF0ZVJlZigpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJkaW1tZXJSZWZcIiwgY3JlYXRlUmVmKCkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImxhdGVzdERvY3VtZW50TW91c2VEb3duRXZlbnRcIiwgbnVsbCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0TW91bnROb2RlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpc0Jyb3dzZXIoKSA/IF90aGlzLnByb3BzLm1vdW50Tm9kZSB8fCBkb2N1bWVudC5ib2R5IDogbnVsbDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVBY3Rpb25zT3ZlcnJpZGVzXCIsIGZ1bmN0aW9uIChwcmVkZWZpbmVkUHJvcHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9uQWN0aW9uQ2xpY2s6IGZ1bmN0aW9uIG9uQWN0aW9uQ2xpY2soZSwgYWN0aW9uUHJvcHMpIHtcbiAgICAgICAgICBfaW52b2tlKHByZWRlZmluZWRQcm9wcywgJ29uQWN0aW9uQ2xpY2snLCBlLCBhY3Rpb25Qcm9wcyk7XG5cbiAgICAgICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25BY3Rpb25DbGljaycsIGUsIF90aGlzLnByb3BzKTtcblxuICAgICAgICAgIF90aGlzLmhhbmRsZUNsb3NlKGUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsb3NlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25DbG9zZScsIGUsIF90aGlzLnByb3BzKTtcblxuICAgICAgX3RoaXMudHJ5U2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlRG9jdW1lbnRNb3VzZURvd25cIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmxhdGVzdERvY3VtZW50TW91c2VEb3duRXZlbnQgPSBlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZURvY3VtZW50Q2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBjbG9zZU9uRGltbWVyQ2xpY2sgPSBfdGhpcy5wcm9wcy5jbG9zZU9uRGltbWVyQ2xpY2s7XG4gICAgICB2YXIgY3VycmVudERvY3VtZW50TW91c2VEb3duRXZlbnQgPSBfdGhpcy5sYXRlc3REb2N1bWVudE1vdXNlRG93bkV2ZW50O1xuICAgICAgX3RoaXMubGF0ZXN0RG9jdW1lbnRNb3VzZURvd25FdmVudCA9IG51bGw7XG4gICAgICBpZiAoIWNsb3NlT25EaW1tZXJDbGljayB8fCBkb2VzTm9kZUNvbnRhaW5DbGljayhfdGhpcy5yZWYuY3VycmVudCwgY3VycmVudERvY3VtZW50TW91c2VEb3duRXZlbnQpIHx8IGRvZXNOb2RlQ29udGFpbkNsaWNrKF90aGlzLnJlZi5jdXJyZW50LCBlKSkgcmV0dXJuO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25DbG9zZScsIGUsIF90aGlzLnByb3BzKTtcblxuICAgICAgX3RoaXMudHJ5U2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlSWNvbk92ZXJyaWRlc1wiLCBmdW5jdGlvbiAocHJlZGVmaW5lZFByb3BzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICBfaW52b2tlKHByZWRlZmluZWRQcm9wcywgJ29uQ2xpY2snLCBlKTtcblxuICAgICAgICAgIF90aGlzLmhhbmRsZUNsb3NlKGUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU9wZW5cIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbk9wZW4nLCBlLCBfdGhpcy5wcm9wcyk7XG5cbiAgICAgIF90aGlzLnRyeVNldFN0YXRlKHtcbiAgICAgICAgb3BlbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlUG9ydGFsTW91bnRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBldmVudFBvb2wgPSBfdGhpcy5wcm9wcy5ldmVudFBvb2w7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc2Nyb2xsaW5nOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLnNldFBvc2l0aW9uQW5kQ2xhc3NOYW1lcygpO1xuXG4gICAgICBldmVudFN0YWNrLnN1YignbW91c2Vkb3duJywgX3RoaXMuaGFuZGxlRG9jdW1lbnRNb3VzZURvd24sIHtcbiAgICAgICAgcG9vbDogZXZlbnRQb29sLFxuICAgICAgICB0YXJnZXQ6IF90aGlzLmRpbW1lclJlZi5jdXJyZW50XG4gICAgICB9KTtcbiAgICAgIGV2ZW50U3RhY2suc3ViKCdjbGljaycsIF90aGlzLmhhbmRsZURvY3VtZW50Q2xpY2ssIHtcbiAgICAgICAgcG9vbDogZXZlbnRQb29sLFxuICAgICAgICB0YXJnZXQ6IF90aGlzLmRpbW1lclJlZi5jdXJyZW50XG4gICAgICB9KTtcblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uTW91bnQnLCBlLCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlUG9ydGFsVW5tb3VudFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGV2ZW50UG9vbCA9IF90aGlzLnByb3BzLmV2ZW50UG9vbDtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKF90aGlzLmFuaW1hdGlvblJlcXVlc3RJZCk7XG4gICAgICBldmVudFN0YWNrLnVuc3ViKCdtb3VzZWRvd24nLCBfdGhpcy5oYW5kbGVEb2N1bWVudE1vdXNlRG93biwge1xuICAgICAgICBwb29sOiBldmVudFBvb2wsXG4gICAgICAgIHRhcmdldDogX3RoaXMuZGltbWVyUmVmLmN1cnJlbnRcbiAgICAgIH0pO1xuICAgICAgZXZlbnRTdGFjay51bnN1YignY2xpY2snLCBfdGhpcy5oYW5kbGVEb2N1bWVudENsaWNrLCB7XG4gICAgICAgIHBvb2w6IGV2ZW50UG9vbCxcbiAgICAgICAgdGFyZ2V0OiBfdGhpcy5kaW1tZXJSZWYuY3VycmVudFxuICAgICAgfSk7XG5cbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvblVubW91bnQnLCBlLCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0RGltbWVyTm9kZVN0eWxlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gX3RoaXMuZGltbWVyUmVmLmN1cnJlbnQ7XG5cbiAgICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnQuc3R5bGUgJiYgY3VycmVudC5zdHlsZS5kaXNwbGF5ICE9PSAnZmxleCcpIHtcbiAgICAgICAgY3VycmVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdmbGV4JywgJ2ltcG9ydGFudCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNldFBvc2l0aW9uQW5kQ2xhc3NOYW1lc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjZW50ZXJlZCA9IF90aGlzJHByb3BzLmNlbnRlcmVkLFxuICAgICAgICAgIGRpbW1lciA9IF90aGlzJHByb3BzLmRpbW1lcjtcbiAgICAgIHZhciBzY3JvbGxpbmc7XG4gICAgICB2YXIgbmV3U3RhdGUgPSB7fTtcblxuICAgICAgaWYgKF90aGlzLnJlZi5jdXJyZW50KSB7XG4gICAgICAgIHZhciByZWN0ID0gX3RoaXMucmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgdmFyIGlzRml0dGVkID0gY2FuRml0KHJlY3QpO1xuICAgICAgICBzY3JvbGxpbmcgPSAhaXNGaXR0ZWQ7IC8vIFN0eWxlcyBzaG91bGQgYmUgY29tcHV0ZWQgZm9yIElFMTFcblxuICAgICAgICB2YXIgbGVnYWN5U3R5bGVzID0gX3RoaXMubGVnYWN5ID8gZ2V0TGVnYWN5U3R5bGVzKGlzRml0dGVkLCBjZW50ZXJlZCwgcmVjdCkgOiB7fTtcblxuICAgICAgICBpZiAoIXNoYWxsb3dFcXVhbChfdGhpcy5zdGF0ZS5sZWdhY3lTdHlsZXMsIGxlZ2FjeVN0eWxlcykpIHtcbiAgICAgICAgICBuZXdTdGF0ZS5sZWdhY3lTdHlsZXMgPSBsZWdhY3lTdHlsZXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMuc3RhdGUuc2Nyb2xsaW5nICE9PSBzY3JvbGxpbmcpIHtcbiAgICAgICAgICBuZXdTdGF0ZS5zY3JvbGxpbmcgPSBzY3JvbGxpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KGRpbW1lciwgJ2RpbW1hYmxlIGRpbW1lZCcpLCB1c2VLZXlPbmx5KGRpbW1lciA9PT0gJ2JsdXJyaW5nJywgJyBibHVycmluZycpLCB1c2VLZXlPbmx5KHNjcm9sbGluZywgJyBzY3JvbGxpbmcnKSk7XG4gICAgICBpZiAoX3RoaXMuc3RhdGUubW91bnRDbGFzc2VzICE9PSBjbGFzc2VzKSBuZXdTdGF0ZS5tb3VudENsYXNzZXMgPSBjbGFzc2VzO1xuICAgICAgaWYgKCFfaXNFbXB0eShuZXdTdGF0ZSkpIF90aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICAgIF90aGlzLmFuaW1hdGlvblJlcXVlc3RJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShfdGhpcy5zZXRQb3NpdGlvbkFuZENsYXNzTmFtZXMpO1xuXG4gICAgICBfdGhpcy5zZXREaW1tZXJOb2RlU3R5bGUoKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZW5kZXJDb250ZW50XCIsIGZ1bmN0aW9uIChyZXN0KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aW9ucyA9IF90aGlzJHByb3BzMi5hY3Rpb25zLFxuICAgICAgICAgIGJhc2ljID0gX3RoaXMkcHJvcHMyLmJhc2ljLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWUsXG4gICAgICAgICAgY2xvc2VJY29uID0gX3RoaXMkcHJvcHMyLmNsb3NlSWNvbixcbiAgICAgICAgICBjb250ZW50ID0gX3RoaXMkcHJvcHMyLmNvbnRlbnQsXG4gICAgICAgICAgaGVhZGVyID0gX3RoaXMkcHJvcHMyLmhlYWRlcixcbiAgICAgICAgICBtb3VudE5vZGUgPSBfdGhpcyRwcm9wczIubW91bnROb2RlLFxuICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wczIuc2l6ZSxcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzMi5zdHlsZTtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIGxlZ2FjeVN0eWxlcyA9IF90aGlzJHN0YXRlLmxlZ2FjeVN0eWxlcyxcbiAgICAgICAgICBtb3VudENsYXNzZXMgPSBfdGhpcyRzdGF0ZS5tb3VudENsYXNzZXMsXG4gICAgICAgICAgc2Nyb2xsaW5nID0gX3RoaXMkc3RhdGUuc2Nyb2xsaW5nO1xuICAgICAgdmFyIGNsYXNzZXMgPSBjeCgndWknLCBzaXplLCB1c2VLZXlPbmx5KGJhc2ljLCAnYmFzaWMnKSwgdXNlS2V5T25seShfdGhpcy5sZWdhY3ksICdsZWdhY3knKSwgdXNlS2V5T25seShzY3JvbGxpbmcsICdzY3JvbGxpbmcnKSwgJ21vZGFsIHRyYW5zaXRpb24gdmlzaWJsZSBhY3RpdmUnLCBjbGFzc05hbWUpO1xuICAgICAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTW9kYWwsIF90aGlzLnByb3BzKTtcbiAgICAgIHZhciBjbG9zZUljb25OYW1lID0gY2xvc2VJY29uID09PSB0cnVlID8gJ2Nsb3NlJyA6IGNsb3NlSWNvbjtcbiAgICAgIHZhciBjbG9zZUljb25KU1ggPSBJY29uLmNyZWF0ZShjbG9zZUljb25OYW1lLCB7XG4gICAgICAgIG92ZXJyaWRlUHJvcHM6IF90aGlzLmhhbmRsZUljb25PdmVycmlkZXNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVmLCB7XG4gICAgICAgIGlubmVyUmVmOiBfdGhpcy5yZWZcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoe30sIGxlZ2FjeVN0eWxlcywgc3R5bGUpXG4gICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChNb3VudE5vZGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBtb3VudENsYXNzZXMsXG4gICAgICAgIG5vZGU6IG1vdW50Tm9kZVxuICAgICAgfSksIGNsb3NlSWNvbkpTWCwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBSZWFjdC5jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBNb2RhbEhlYWRlci5jcmVhdGUoaGVhZGVyLCB7XG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pLCBNb2RhbENvbnRlbnQuY3JlYXRlKGNvbnRlbnQsIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSksIE1vZGFsQWN0aW9ucy5jcmVhdGUoYWN0aW9ucywge1xuICAgICAgICBvdmVycmlkZVByb3BzOiBfdGhpcy5oYW5kbGVBY3Rpb25zT3ZlcnJpZGVzXG4gICAgICB9KSkgOiBjaGlsZHJlbikpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1vZGFsLCBbe1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuaGFuZGxlUG9ydGFsVW5tb3VudCgpO1xuICAgIH0gLy8gRG8gbm90IGFjY2VzcyBkb2N1bWVudCB3aGVuIHNlcnZlciBzaWRlIHJlbmRlcmluZ1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBvcGVuID0gdGhpcy5zdGF0ZS5vcGVuO1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2VudGVyZWQgPSBfdGhpcyRwcm9wczMuY2VudGVyZWQsXG4gICAgICAgICAgY2xvc2VPbkRvY3VtZW50Q2xpY2sgPSBfdGhpcyRwcm9wczMuY2xvc2VPbkRvY3VtZW50Q2xpY2ssXG4gICAgICAgICAgZGltbWVyID0gX3RoaXMkcHJvcHMzLmRpbW1lcixcbiAgICAgICAgICBldmVudFBvb2wgPSBfdGhpcyRwcm9wczMuZXZlbnRQb29sLFxuICAgICAgICAgIHRyaWdnZXIgPSBfdGhpcyRwcm9wczMudHJpZ2dlcjtcbiAgICAgIHZhciBtb3VudE5vZGUgPSB0aGlzLmdldE1vdW50Tm9kZSgpOyAvLyBTaG9ydCBjaXJjdWl0IHdoZW4gc2VydmVyIHNpZGUgcmVuZGVyaW5nXG5cbiAgICAgIGlmICghaXNCcm93c2VyKCkpIHtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWRFbGVtZW50KHRyaWdnZXIpID8gdHJpZ2dlciA6IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciB1bmhhbmRsZWQgPSBnZXRVbmhhbmRsZWRQcm9wcyhNb2RhbCwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgcG9ydGFsUHJvcE5hbWVzID0gUG9ydGFsLmhhbmRsZWRQcm9wcztcblxuICAgICAgdmFyIHJlc3QgPSBfcmVkdWNlKHVuaGFuZGxlZCwgZnVuY3Rpb24gKGFjYywgdmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKCFfaW5jbHVkZXMocG9ydGFsUHJvcE5hbWVzLCBrZXkpKSBhY2Nba2V5XSA9IHZhbDtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9KTtcblxuICAgICAgdmFyIHBvcnRhbFByb3BzID0gX3BpY2sodW5oYW5kbGVkLCBwb3J0YWxQcm9wTmFtZXMpOyAvLyB3cmFwIGRpbW1lciBtb2RhbHNcblxuXG4gICAgICB2YXIgZGltbWVyQ2xhc3NlcyA9IGN4KCd1aScsIGRpbW1lciA9PT0gJ2ludmVydGVkJyAmJiAnaW52ZXJ0ZWQnLCAhY2VudGVyZWQgJiYgJ3RvcCBhbGlnbmVkJywgJ3BhZ2UgbW9kYWxzIGRpbW1lciB0cmFuc2l0aW9uIHZpc2libGUgYWN0aXZlJyk7IC8vIEhlYWRzIHVwIVxuICAgICAgLy9cbiAgICAgIC8vIFRoZSBTVUkgQ1NTIHNlbGVjdG9yIHRvIHByZXZlbnQgdGhlIG1vZGFsIGl0c2VsZiBmcm9tIGJsdXJyaW5nIHJlcXVpcmVzIGFuIGltbWVkaWF0ZSAuZGltbWVyIGNoaWxkOlxuICAgICAgLy8gLmJsdXJyaW5nLmRpbW1lZC5kaW1tYWJsZT46bm90KC5kaW1tZXIpIHsgLi4uIH1cbiAgICAgIC8vXG4gICAgICAvLyBUaGUgLmJsdXJyaW5nLmRpbW1lZC5kaW1tYWJsZSBpcyB0aGUgYm9keSwgc28gdGhhdCBhbGwgYm9keSBjb250ZW50IGluc2lkZSBpcyBibHVycmVkLlxuICAgICAgLy8gV2UgbmVlZCB0aGUgaW1tZWRpYXRlIGNoaWxkIHRvIGJlIHRoZSBkaW1tZXIgdG8gOm5vdCgpIGJsdXIgdGhlIG1vZGFsIGl0c2VsZiFcbiAgICAgIC8vIE90aGVyd2lzZSwgdGhlIHBvcnRhbCBkaXYgaXMgYWxzbyBibHVycmVkLCBibHVycmluZyB0aGUgbW9kYWwuXG4gICAgICAvL1xuICAgICAgLy8gV2UgY2Fubm90IHRoZW0gd3JhcCB0aGUgbW9kYWxKU1ggaW4gYW4gYWN0dWFsIDxEaW1tZXIgLz4gaW5zdGVhZCwgd2UgYXBwbHkgdGhlIGRpbW1lciBjbGFzc2VzIHRvIHRoZSA8UG9ydGFsIC8+LlxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQb3J0YWwsIF9leHRlbmRzKHtcbiAgICAgICAgY2xvc2VPbkRvY3VtZW50Q2xpY2s6IGNsb3NlT25Eb2N1bWVudENsaWNrXG4gICAgICB9LCBwb3J0YWxQcm9wcywge1xuICAgICAgICB0cmlnZ2VyOiB0cmlnZ2VyLFxuICAgICAgICBldmVudFBvb2w6IGV2ZW50UG9vbCxcbiAgICAgICAgbW91bnROb2RlOiBtb3VudE5vZGUsXG4gICAgICAgIG9wZW46IG9wZW4sXG4gICAgICAgIG9uQ2xvc2U6IHRoaXMuaGFuZGxlQ2xvc2UsXG4gICAgICAgIG9uTW91bnQ6IHRoaXMuaGFuZGxlUG9ydGFsTW91bnQsXG4gICAgICAgIG9uT3BlbjogdGhpcy5oYW5kbGVPcGVuLFxuICAgICAgICBvblVubW91bnQ6IHRoaXMuaGFuZGxlUG9ydGFsVW5tb3VudFxuICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGRpbW1lckNsYXNzZXMsXG4gICAgICAgIHJlZjogdGhpcy5kaW1tZXJSZWZcbiAgICAgIH0sIHRoaXMucmVuZGVyQ29udGVudChyZXN0KSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNb2RhbDtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KE1vZGFsLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNlbnRlcmVkOiB0cnVlLFxuICBkaW1tZXI6IHRydWUsXG4gIGNsb3NlT25EaW1tZXJDbGljazogdHJ1ZSxcbiAgY2xvc2VPbkRvY3VtZW50Q2xpY2s6IGZhbHNlLFxuICBldmVudFBvb2w6ICdNb2RhbCdcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoTW9kYWwsIFwiYXV0b0NvbnRyb2xsZWRQcm9wc1wiLCBbJ29wZW4nXSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNb2RhbCwgXCJIZWFkZXJcIiwgTW9kYWxIZWFkZXIpO1xuXG5fZGVmaW5lUHJvcGVydHkoTW9kYWwsIFwiQ29udGVudFwiLCBNb2RhbENvbnRlbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoTW9kYWwsIFwiRGVzY3JpcHRpb25cIiwgTW9kYWxEZXNjcmlwdGlvbik7XG5cbl9kZWZpbmVQcm9wZXJ0eShNb2RhbCwgXCJBY3Rpb25zXCIsIE1vZGFsQWN0aW9ucyk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNb2RhbCwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYWN0aW9uc1wiLCBcImFzXCIsIFwiYmFzaWNcIiwgXCJjZW50ZXJlZFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xvc2VJY29uXCIsIFwiY2xvc2VPbkRpbW1lckNsaWNrXCIsIFwiY2xvc2VPbkRvY3VtZW50Q2xpY2tcIiwgXCJjb250ZW50XCIsIFwiZGVmYXVsdE9wZW5cIiwgXCJkaW1tZXJcIiwgXCJldmVudFBvb2xcIiwgXCJoZWFkZXJcIiwgXCJtb3VudE5vZGVcIiwgXCJvbkFjdGlvbkNsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uTW91bnRcIiwgXCJvbk9wZW5cIiwgXCJvblVubW91bnRcIiwgXCJvcGVuXCIsIFwic2l6ZVwiLCBcInN0eWxlXCIsIFwidHJpZ2dlclwiXSk7XG5cbk1vZGFsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgTW9kYWwuQWN0aW9ucy4gVHlwaWNhbGx5IGFuIGFycmF5IG9mIGJ1dHRvbiBzaG9ydGhhbmQuICovXG4gIGFjdGlvbnM6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBBIG1vZGFsIGNhbiByZWR1Y2UgaXRzIGNvbXBsZXhpdHkgKi9cbiAgYmFzaWM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIG1vZGFsIGNhbiBiZSB2ZXJ0aWNhbGx5IGNlbnRlcmVkIGluIHRoZSB2aWV3cG9ydCAqL1xuICBjZW50ZXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciB0aGUgY2xvc2UgaWNvbi4gQ2xvc2VzIHRoZSBtb2RhbCBvbiBjbGljay4gKi9cbiAgY2xvc2VJY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSxcblxuICAvKiogV2hldGhlciBvciBub3QgdGhlIE1vZGFsIHNob3VsZCBjbG9zZSB3aGVuIHRoZSBkaW1tZXIgaXMgY2xpY2tlZC4gKi9cbiAgY2xvc2VPbkRpbW1lckNsaWNrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogV2hldGhlciBvciBub3QgdGhlIE1vZGFsIHNob3VsZCBjbG9zZSB3aGVuIHRoZSBkb2N1bWVudCBpcyBjbGlja2VkLiAqL1xuICBjbG9zZU9uRG9jdW1lbnRDbGljazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNpbXBsZSB0ZXh0IGNvbnRlbnQgZm9yIHRoZSBNb2RhbC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIEluaXRpYWwgdmFsdWUgb2Ygb3Blbi4gKi9cbiAgZGVmYXVsdE9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIE1vZGFsIGNhbiBhcHBlYXIgaW4gYSBkaW1tZXIuICovXG4gIGRpbW1lcjogUHJvcFR5cGVzLm9uZU9mKFt0cnVlLCAnaW52ZXJ0ZWQnLCAnYmx1cnJpbmcnXSksXG5cbiAgLyoqIEV2ZW50IHBvb2wgbmFtZXNwYWNlIHRoYXQgaXMgdXNlZCB0byBoYW5kbGUgY29tcG9uZW50IGV2ZW50cyAqL1xuICBldmVudFBvb2w6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIE1vZGFsIGRpc3BsYXllZCBhYm92ZSB0aGUgY29udGVudCBpbiBib2xkLiAqL1xuICBoZWFkZXI6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBUaGUgbm9kZSB3aGVyZSB0aGUgbW9kYWwgc2hvdWxkIG1vdW50LiBEZWZhdWx0cyB0byBkb2N1bWVudC5ib2R5LiAqL1xuICBtb3VudE5vZGU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEFjdGlvbiBvbkNsaWNrIGhhbmRsZXIgd2hlbiB1c2luZyBzaG9ydGhhbmQgYGFjdGlvbnNgLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25BY3Rpb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgY2xvc2UgZXZlbnQgaGFwcGVucy5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgcG9ydGFsIGlzIG1vdW50ZWQgb24gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtudWxsfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uTW91bnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhbiBvcGVuIGV2ZW50IGhhcHBlbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgcG9ydGFsIGlzIHVubW91bnRlZCBmcm9tIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVsbH1cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvblVubW91bnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKiBDb250cm9scyB3aGV0aGVyIG9yIG5vdCB0aGUgTW9kYWwgaXMgZGlzcGxheWVkLiAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBtb2RhbCBjYW4gdmFyeSBpbiBzaXplICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ21pbmknLCAndGlueScsICdzbWFsbCcsICdsYXJnZScsICdmdWxsc2NyZWVuJ10pLFxuXG4gIC8qKiBDdXN0b20gc3R5bGVzLiAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKiogRWxlbWVudCB0byBiZSByZW5kZXJlZCBpbi1wbGFjZSB3aGVyZSB0aGUgcG9ydGFsIGlzIGRlZmluZWQuICovXG4gIHRyaWdnZXI6IFByb3BUeXBlcy5ub2RlXG4gIC8qKlxuICAgKiBOT1RFOiBBbnkgdW5oYW5kbGVkIHByb3BzIHRoYXQgYXJlIGRlZmluZWQgaW4gUG9ydGFsIGFyZSBwYXNzZWQtdGhyb3VnaFxuICAgKiB0byB0aGUgd3JhcHBpbmcgUG9ydGFsLlxuICAgKi9cblxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgTW9kYWw7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaGFzIGZyb20gXCJsb2Rhc2gvaGFzXCI7XG5pbXBvcnQgX2ludm9rZSBmcm9tIFwibG9kYXNoL2ludm9rZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjdXN0b21Qcm9wVHlwZXMsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vZWxlbWVudHMvQnV0dG9uJztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi9tb2R1bGVzL01vZGFsJztcbi8qKlxuICogQSBDb25maXJtIG1vZGFsIGdpdmVzIHRoZSB1c2VyIGEgY2hvaWNlIHRvIGNvbmZpcm0gb3IgY2FuY2VsIGFuIGFjdGlvbi9cbiAqIEBzZWUgTW9kYWxcbiAqL1xuXG52YXIgQ29uZmlybSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ29uZmlybSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ29uZmlybSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25maXJtKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKENvbmZpcm0pKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDYW5jZWxcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkNhbmNlbCcsIGUsIF90aGlzLnByb3BzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDYW5jZWxPdmVycmlkZXNcIiwgZnVuY3Rpb24gKHByZWRlZmluZWRQcm9wcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlLCBidXR0b25Qcm9wcykge1xuICAgICAgICAgIF9pbnZva2UocHJlZGVmaW5lZFByb3BzLCAnb25DbGljaycsIGUsIGJ1dHRvblByb3BzKTtcblxuICAgICAgICAgIF90aGlzLmhhbmRsZUNhbmNlbChlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDb25maXJtT3ZlcnJpZGVzXCIsIGZ1bmN0aW9uIChwcmVkZWZpbmVkUHJvcHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSwgYnV0dG9uUHJvcHMpIHtcbiAgICAgICAgICBfaW52b2tlKHByZWRlZmluZWRQcm9wcywgJ29uQ2xpY2snLCBlLCBidXR0b25Qcm9wcyk7XG5cbiAgICAgICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25Db25maXJtJywgZSwgX3RoaXMucHJvcHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbmZpcm0sIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNhbmNlbEJ1dHRvbiA9IF90aGlzJHByb3BzLmNhbmNlbEJ1dHRvbixcbiAgICAgICAgICBjb25maXJtQnV0dG9uID0gX3RoaXMkcHJvcHMuY29uZmlybUJ1dHRvbixcbiAgICAgICAgICBjb250ZW50ID0gX3RoaXMkcHJvcHMuY29udGVudCxcbiAgICAgICAgICBoZWFkZXIgPSBfdGhpcyRwcm9wcy5oZWFkZXIsXG4gICAgICAgICAgb3BlbiA9IF90aGlzJHByb3BzLm9wZW4sXG4gICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzLnNpemU7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKENvbmZpcm0sIHRoaXMucHJvcHMpOyAvLyBgb3BlbmAgaXMgYXV0byBjb250cm9sbGVkIGJ5IHRoZSBNb2RhbFxuICAgICAgLy8gSXQgY2Fubm90IGJlIHByZXNlbnQgKGV2ZW4gdW5kZWZpbmVkKSB3aXRoIGBkZWZhdWx0T3BlbmBcbiAgICAgIC8vIG9ubHkgYXBwbHkgaXQgaWYgdGhlIHVzZXIgcHJvdmlkZWQgYW4gb3BlbiBwcm9wXG5cbiAgICAgIHZhciBvcGVuUHJvcCA9IHt9O1xuICAgICAgaWYgKF9oYXModGhpcy5wcm9wcywgJ29wZW4nKSkgb3BlblByb3Aub3BlbiA9IG9wZW47XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbCwgX2V4dGVuZHMoe30sIHJlc3QsIG9wZW5Qcm9wLCB7XG4gICAgICAgIHNpemU6IHNpemUsXG4gICAgICAgIG9uQ2xvc2U6IHRoaXMuaGFuZGxlQ2FuY2VsXG4gICAgICB9KSwgTW9kYWwuSGVhZGVyLmNyZWF0ZShoZWFkZXIsIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSksIE1vZGFsLkNvbnRlbnQuY3JlYXRlKGNvbnRlbnQsIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9kYWwuQWN0aW9ucywgbnVsbCwgQnV0dG9uLmNyZWF0ZShjYW5jZWxCdXR0b24sIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZSxcbiAgICAgICAgb3ZlcnJpZGVQcm9wczogdGhpcy5oYW5kbGVDYW5jZWxPdmVycmlkZXNcbiAgICAgIH0pLCBCdXR0b24uY3JlYXRlKGNvbmZpcm1CdXR0b24sIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZSxcbiAgICAgICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICAgICAgcHJpbWFyeTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBvdmVycmlkZVByb3BzOiB0aGlzLmhhbmRsZUNvbmZpcm1PdmVycmlkZXNcbiAgICAgIH0pKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbmZpcm07XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShDb25maXJtLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNhbmNlbEJ1dHRvbjogJ0NhbmNlbCcsXG4gIGNvbmZpcm1CdXR0b246ICdPSycsXG4gIGNvbnRlbnQ6ICdBcmUgeW91IHN1cmU/JyxcbiAgc2l6ZTogJ3NtYWxsJ1xufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShDb25maXJtLCBcImhhbmRsZWRQcm9wc1wiLCBbXCJjYW5jZWxCdXR0b25cIiwgXCJjb25maXJtQnV0dG9uXCIsIFwiY29udGVudFwiLCBcImhlYWRlclwiLCBcIm9uQ2FuY2VsXCIsIFwib25Db25maXJtXCIsIFwib3BlblwiLCBcInNpemVcIl0pO1xuXG5Db25maXJtLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIFRoZSBjYW5jZWwgYnV0dG9uIHRleHQuICovXG4gIGNhbmNlbEJ1dHRvbjogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFRoZSBPSyBidXR0b24gdGV4dC4gKi9cbiAgY29uZmlybUJ1dHRvbjogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFRoZSBNb2RhbENvbnRlbnQgdGV4dC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFRoZSBNb2RhbEhlYWRlciB0ZXh0LiAqL1xuICBoZWFkZXI6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgTW9kYWwgaXMgY2xvc2VkIHdpdGhvdXQgY2xpY2tpbmcgY29uZmlybS5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIE9LIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25Db25maXJtOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogV2hldGhlciBvciBub3QgdGhlIG1vZGFsIGlzIHZpc2libGUuICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIENvbmZpcm0gY2FuIHZhcnkgaW4gc2l6ZSAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydtaW5pJywgJ3RpbnknLCAnc21hbGwnLCAnbGFyZ2UnLCAnZnVsbHNjcmVlbiddKVxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgQ29uZmlybTsiLCIvKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlTnVtYmVyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmV4cG9ydCB2YXIgY3JlYXRlRWxsaXBzaXNJdGVtID0gZnVuY3Rpb24gY3JlYXRlRWxsaXBzaXNJdGVtKHBhZ2VOdW1iZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBhY3RpdmU6IGZhbHNlLFxuICAgIHR5cGU6ICdlbGxpcHNpc0l0ZW0nLFxuICAgIHZhbHVlOiBwYWdlTnVtYmVyXG4gIH07XG59O1xuLyoqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZXhwb3J0IHZhciBjcmVhdGVGaXJzdFBhZ2UgPSBmdW5jdGlvbiBjcmVhdGVGaXJzdFBhZ2UoKSB7XG4gIHJldHVybiB7XG4gICAgYWN0aXZlOiBmYWxzZSxcbiAgICB0eXBlOiAnZmlyc3RJdGVtJyxcbiAgICB2YWx1ZTogMVxuICB9O1xufTtcbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGFjdGl2ZVBhZ2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5leHBvcnQgdmFyIGNyZWF0ZVByZXZJdGVtID0gZnVuY3Rpb24gY3JlYXRlUHJldkl0ZW0oYWN0aXZlUGFnZSkge1xuICByZXR1cm4ge1xuICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgdHlwZTogJ3ByZXZJdGVtJyxcbiAgICB2YWx1ZTogTWF0aC5tYXgoMSwgYWN0aXZlUGFnZSAtIDEpXG4gIH07XG59O1xuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gYWN0aXZlUGFnZVxuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cblxuZXhwb3J0IHZhciBjcmVhdGVQYWdlRmFjdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZVBhZ2VGYWN0b3J5KGFjdGl2ZVBhZ2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwYWdlTnVtYmVyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGl2ZTogYWN0aXZlUGFnZSA9PT0gcGFnZU51bWJlcixcbiAgICAgIHR5cGU6ICdwYWdlSXRlbScsXG4gICAgICB2YWx1ZTogcGFnZU51bWJlclxuICAgIH07XG4gIH07XG59O1xuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gYWN0aXZlUGFnZVxuICogQHBhcmFtIHtudW1iZXJ9IHRvdGFsUGFnZXNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5leHBvcnQgdmFyIGNyZWF0ZU5leHRJdGVtID0gZnVuY3Rpb24gY3JlYXRlTmV4dEl0ZW0oYWN0aXZlUGFnZSwgdG90YWxQYWdlcykge1xuICByZXR1cm4ge1xuICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgdHlwZTogJ25leHRJdGVtJyxcbiAgICB2YWx1ZTogTWF0aC5taW4oYWN0aXZlUGFnZSArIDEsIHRvdGFsUGFnZXMpXG4gIH07XG59O1xuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdG90YWxQYWdlc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmV4cG9ydCB2YXIgY3JlYXRlTGFzdEl0ZW0gPSBmdW5jdGlvbiBjcmVhdGVMYXN0SXRlbSh0b3RhbFBhZ2VzKSB7XG4gIHJldHVybiB7XG4gICAgYWN0aXZlOiBmYWxzZSxcbiAgICB0eXBlOiAnbGFzdEl0ZW0nLFxuICAgIHZhbHVlOiB0b3RhbFBhZ2VzXG4gIH07XG59OyIsImltcG9ydCB7IGNyZWF0ZUVsbGlwc2lzSXRlbSB9IGZyb20gJy4vaXRlbUZhY3Rvcmllcyc7XG5leHBvcnQgdmFyIGNyZWF0ZUlubmVyUHJlZml4ID0gZnVuY3Rpb24gY3JlYXRlSW5uZXJQcmVmaXgoZmlyc3RHcm91cEVuZCwgaW5uZXJHcm91cFN0YXJ0LCBwYWdlRmFjdG9yeSkge1xuICB2YXIgcHJlZml4UGFnZSA9IGlubmVyR3JvdXBTdGFydCAtIDE7XG4gIHZhciBzaG93RWxsaXBzaXMgPSBwcmVmaXhQYWdlICE9PSBmaXJzdEdyb3VwRW5kICsgMTtcbiAgdmFyIHByZWZpeEZhY3RvcnkgPSBzaG93RWxsaXBzaXMgPyBjcmVhdGVFbGxpcHNpc0l0ZW0gOiBwYWdlRmFjdG9yeTtcbiAgcmV0dXJuIHByZWZpeEZhY3RvcnkocHJlZml4UGFnZSk7XG59O1xuZXhwb3J0IHZhciBjcmVhdGVJbm5lclN1ZmZpeCA9IGZ1bmN0aW9uIGNyZWF0ZUlubmVyU3VmZml4KGlubmVyR3JvdXBFbmQsIGxhc3RHcm91cFN0YXJ0LCBwYWdlRmFjdG9yeSkge1xuICB2YXIgc3VmZml4UGFnZSA9IGlubmVyR3JvdXBFbmQgKyAxO1xuICB2YXIgc2hvd0VsbGlwc2lzID0gc3VmZml4UGFnZSAhPT0gbGFzdEdyb3VwU3RhcnQgLSAxO1xuICB2YXIgc3VmZml4RmFjdG9yeSA9IHNob3dFbGxpcHNpcyA/IGNyZWF0ZUVsbGlwc2lzSXRlbSA6IHBhZ2VGYWN0b3J5O1xuICByZXR1cm4gc3VmZml4RmFjdG9yeShzdWZmaXhQYWdlKTtcbn07IiwiaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9yYW5nZSBmcm9tIFwibG9kYXNoL3JhbmdlXCI7XG5pbXBvcnQgX21hcCBmcm9tIFwibG9kYXNoL21hcFwiO1xuaW1wb3J0IHsgY3JlYXRlSW5uZXJQcmVmaXgsIGNyZWF0ZUlubmVyU3VmZml4IH0gZnJvbSAnLi9zdWZmaXhGYWN0b3JpZXMnO1xuZXhwb3J0IHZhciBjcmVhdGVTaW1wbGVSYW5nZSA9IGZ1bmN0aW9uIGNyZWF0ZVNpbXBsZVJhbmdlKHN0YXJ0LCBlbmQsIHBhZ2VGYWN0b3J5KSB7XG4gIHJldHVybiBfbWFwKF9yYW5nZShzdGFydCwgZW5kICsgMSksIHBhZ2VGYWN0b3J5KTtcbn07XG5leHBvcnQgdmFyIGNyZWF0ZUNvbXBsZXhSYW5nZSA9IGZ1bmN0aW9uIGNyZWF0ZUNvbXBsZXhSYW5nZShvcHRpb25zLCBwYWdlRmFjdG9yeSkge1xuICB2YXIgYWN0aXZlUGFnZSA9IG9wdGlvbnMuYWN0aXZlUGFnZSxcbiAgICAgIGJvdW5kYXJ5UmFuZ2UgPSBvcHRpb25zLmJvdW5kYXJ5UmFuZ2UsXG4gICAgICBoaWRlRWxsaXBzaXMgPSBvcHRpb25zLmhpZGVFbGxpcHNpcyxcbiAgICAgIHNpYmxpbmdSYW5nZSA9IG9wdGlvbnMuc2libGluZ1JhbmdlLFxuICAgICAgdG90YWxQYWdlcyA9IG9wdGlvbnMudG90YWxQYWdlcztcbiAgdmFyIGVsbGlwc2lzU2l6ZSA9IGhpZGVFbGxpcHNpcyA/IDAgOiAxO1xuICB2YXIgZmlyc3RHcm91cEVuZCA9IGJvdW5kYXJ5UmFuZ2U7XG4gIHZhciBmaXJzdEdyb3VwID0gY3JlYXRlU2ltcGxlUmFuZ2UoMSwgZmlyc3RHcm91cEVuZCwgcGFnZUZhY3RvcnkpO1xuICB2YXIgbGFzdEdyb3VwU3RhcnQgPSB0b3RhbFBhZ2VzICsgMSAtIGJvdW5kYXJ5UmFuZ2U7XG4gIHZhciBsYXN0R3JvdXAgPSBjcmVhdGVTaW1wbGVSYW5nZShsYXN0R3JvdXBTdGFydCwgdG90YWxQYWdlcywgcGFnZUZhY3RvcnkpO1xuICB2YXIgaW5uZXJHcm91cFN0YXJ0ID0gTWF0aC5taW4oTWF0aC5tYXgoYWN0aXZlUGFnZSAtIHNpYmxpbmdSYW5nZSwgZmlyc3RHcm91cEVuZCArIGVsbGlwc2lzU2l6ZSArIDEpLCBsYXN0R3JvdXBTdGFydCAtIGVsbGlwc2lzU2l6ZSAtIDIgKiBzaWJsaW5nUmFuZ2UgLSAxKTtcbiAgdmFyIGlubmVyR3JvdXBFbmQgPSBpbm5lckdyb3VwU3RhcnQgKyAyICogc2libGluZ1JhbmdlO1xuICB2YXIgaW5uZXJHcm91cCA9IGNyZWF0ZVNpbXBsZVJhbmdlKGlubmVyR3JvdXBTdGFydCwgaW5uZXJHcm91cEVuZCwgcGFnZUZhY3RvcnkpO1xuICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShmaXJzdEdyb3VwKSwgWyFoaWRlRWxsaXBzaXMgJiYgY3JlYXRlSW5uZXJQcmVmaXgoZmlyc3RHcm91cEVuZCwgaW5uZXJHcm91cFN0YXJ0LCBwYWdlRmFjdG9yeSldLCBfdG9Db25zdW1hYmxlQXJyYXkoaW5uZXJHcm91cCksIFshaGlkZUVsbGlwc2lzICYmIGNyZWF0ZUlubmVyU3VmZml4KGlubmVyR3JvdXBFbmQsIGxhc3RHcm91cFN0YXJ0LCBwYWdlRmFjdG9yeSldLCBfdG9Db25zdW1hYmxlQXJyYXkobGFzdEdyb3VwKSkuZmlsdGVyKEJvb2xlYW4pO1xufTsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgeyBjcmVhdGVGaXJzdFBhZ2UsIGNyZWF0ZUxhc3RJdGVtLCBjcmVhdGVOZXh0SXRlbSwgY3JlYXRlUGFnZUZhY3RvcnksIGNyZWF0ZVByZXZJdGVtIH0gZnJvbSAnLi9pdGVtRmFjdG9yaWVzJztcbmltcG9ydCB7IGNyZWF0ZUNvbXBsZXhSYW5nZSwgY3JlYXRlU2ltcGxlUmFuZ2UgfSBmcm9tICcuL3JhbmdlRmFjdG9yaWVzJztcbmltcG9ydCB7IGlzU2ltcGxlUGFnaW5hdGlvbiwgdHlwaWZ5T3B0aW9ucyB9IGZyb20gJy4vcGFnaW5hdGlvblV0aWxzJztcbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJhd09wdGlvbnNcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gcmF3T3B0aW9ucy5hY3RpdmVQYWdlXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHJhd09wdGlvbnMuYm91bmRhcnlSYW5nZSBOdW1iZXIgb2YgYWx3YXlzIHZpc2libGUgcGFnZXMgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kLlxuICogQHBhcmFtIHtib29sZWFufSByYXdPcHRpb25zLmhpZGVFbGxpcHNpcyBNYXJrcyBpZiBlbGxpcHNpcyBzaG91bGQgYmUgaGlkZGVuLlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSByYXdPcHRpb25zLnNpYmxpbmdSYW5nZSBOdW1iZXIgb2YgYWx3YXlzIHZpc2libGUgcGFnZXMgYmVmb3JlIGFuZCBhZnRlciB0aGUgY3VycmVudCBvbmUuXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHJhd09wdGlvbnMudG90YWxQYWdlcyBUb3RhbCBudW1iZXIgb2YgcGFnZXMuXG4gKi9cblxudmFyIGNyZWF0ZVBhZ2luYXRpb25JdGVtcyA9IGZ1bmN0aW9uIGNyZWF0ZVBhZ2luYXRpb25JdGVtcyhyYXdPcHRpb25zKSB7XG4gIHZhciBvcHRpb25zID0gdHlwaWZ5T3B0aW9ucyhyYXdPcHRpb25zKTtcbiAgdmFyIGFjdGl2ZVBhZ2UgPSBvcHRpb25zLmFjdGl2ZVBhZ2UsXG4gICAgICB0b3RhbFBhZ2VzID0gb3B0aW9ucy50b3RhbFBhZ2VzO1xuICB2YXIgcGFnZUZhY3RvcnkgPSBjcmVhdGVQYWdlRmFjdG9yeShhY3RpdmVQYWdlKTtcbiAgdmFyIGlubmVyUmFuZ2UgPSBpc1NpbXBsZVBhZ2luYXRpb24ob3B0aW9ucykgPyBjcmVhdGVTaW1wbGVSYW5nZSgxLCB0b3RhbFBhZ2VzLCBwYWdlRmFjdG9yeSkgOiBjcmVhdGVDb21wbGV4UmFuZ2Uob3B0aW9ucywgcGFnZUZhY3RvcnkpO1xuICByZXR1cm4gW2NyZWF0ZUZpcnN0UGFnZSgpLCBjcmVhdGVQcmV2SXRlbShhY3RpdmVQYWdlKV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShpbm5lclJhbmdlKSwgW2NyZWF0ZU5leHRJdGVtKGFjdGl2ZVBhZ2UsIHRvdGFsUGFnZXMpLCBjcmVhdGVMYXN0SXRlbSh0b3RhbFBhZ2VzKV0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUGFnaW5hdGlvbkl0ZW1zOyIsIi8qKlxuICogQ2hlY2tzIHRoZSBwb3NzaWJpbGl0eSBvZiB1c2luZyBzaW1wbGUgcmFuZ2UgZ2VuZXJhdGlvbiwgaWYgbnVtYmVyIG9mIGdlbmVyYXRlZCBwYWdlcyBpcyBlcXVhbFxuICogb3IgZ3JlYXRlciB0aGFuIHRvdGFsIHBhZ2VzIHRvIHNob3cuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLmJvdW5kYXJ5UmFuZ2UgTnVtYmVyIG9mIGFsd2F5cyB2aXNpYmxlIHBhZ2VzIGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLnNpYmxpbmdSYW5nZSBOdW1iZXIgb2YgYWx3YXlzIHZpc2libGUgcGFnZXMgYmVmb3JlIGFuZCBhZnRlciB0aGUgY3VycmVudCBvbmUuXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy50b3RhbFBhZ2VzIFRvdGFsIG51bWJlciBvZiBwYWdlcy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCB2YXIgaXNTaW1wbGVQYWdpbmF0aW9uID0gZnVuY3Rpb24gaXNTaW1wbGVQYWdpbmF0aW9uKF9yZWYpIHtcbiAgdmFyIGJvdW5kYXJ5UmFuZ2UgPSBfcmVmLmJvdW5kYXJ5UmFuZ2UsXG4gICAgICBoaWRlRWxsaXBzaXMgPSBfcmVmLmhpZGVFbGxpcHNpcyxcbiAgICAgIHNpYmxpbmdSYW5nZSA9IF9yZWYuc2libGluZ1JhbmdlLFxuICAgICAgdG90YWxQYWdlcyA9IF9yZWYudG90YWxQYWdlcztcbiAgdmFyIGJvdW5kYXJ5UmFuZ2VTaXplID0gMiAqIGJvdW5kYXJ5UmFuZ2U7XG4gIHZhciBlbGxpcHNpc1NpemUgPSBoaWRlRWxsaXBzaXMgPyAwIDogMjtcbiAgdmFyIHNpYmxpbmdSYW5nZVNpemUgPSAyICogc2libGluZ1JhbmdlO1xuICByZXR1cm4gMSArIGVsbGlwc2lzU2l6ZSArIHNpYmxpbmdSYW5nZVNpemUgKyBib3VuZGFyeVJhbmdlU2l6ZSA+PSB0b3RhbFBhZ2VzO1xufTtcbmV4cG9ydCB2YXIgdHlwaWZ5T3B0aW9ucyA9IGZ1bmN0aW9uIHR5cGlmeU9wdGlvbnMoX3JlZjIpIHtcbiAgdmFyIGFjdGl2ZVBhZ2UgPSBfcmVmMi5hY3RpdmVQYWdlLFxuICAgICAgYm91bmRhcnlSYW5nZSA9IF9yZWYyLmJvdW5kYXJ5UmFuZ2UsXG4gICAgICBoaWRlRWxsaXBzaXMgPSBfcmVmMi5oaWRlRWxsaXBzaXMsXG4gICAgICBzaWJsaW5nUmFuZ2UgPSBfcmVmMi5zaWJsaW5nUmFuZ2UsXG4gICAgICB0b3RhbFBhZ2VzID0gX3JlZjIudG90YWxQYWdlcztcbiAgcmV0dXJuIHtcbiAgICBhY3RpdmVQYWdlOiArYWN0aXZlUGFnZSxcbiAgICBib3VuZGFyeVJhbmdlOiArYm91bmRhcnlSYW5nZSxcbiAgICBoaWRlRWxsaXBzaXM6ICEhaGlkZUVsbGlwc2lzLFxuICAgIHNpYmxpbmdSYW5nZTogK3NpYmxpbmdSYW5nZSxcbiAgICB0b3RhbFBhZ2VzOiArdG90YWxQYWdlc1xuICB9O1xufTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgbWVudSBpdGVtIG1heSBpbmNsdWRlIGEgaGVhZGVyIG9yIG1heSBpdHNlbGYgYmUgYSBoZWFkZXIuXG4gKi9cblxuZnVuY3Rpb24gTWVudUhlYWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdoZWFkZXInLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKE1lbnVIZWFkZXIsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTWVudUhlYWRlciwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuTWVudUhlYWRlci5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiXTtcbk1lbnVIZWFkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmRcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IE1lbnVIZWFkZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfc3RhcnRDYXNlIGZyb20gXCJsb2Rhc2gvc3RhcnRDYXNlXCI7XG5pbXBvcnQgX2ludm9rZSBmcm9tIFwibG9kYXNoL2ludm9rZVwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VLZXlPclZhbHVlQW5kS2V5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL2VsZW1lbnRzL0ljb24nO1xuLyoqXG4gKiBBIG1lbnUgY2FuIGNvbnRhaW4gYW4gaXRlbS5cbiAqL1xuXG52YXIgTWVudUl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbnVJdGVtLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW51SXRlbSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW51SXRlbSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihNZW51SXRlbSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgZGlzYWJsZWQgPSBfdGhpcy5wcm9wcy5kaXNhYmxlZDtcbiAgICAgIGlmICghZGlzYWJsZWQpIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkNsaWNrJywgZSwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1lbnVJdGVtLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhY3RpdmUgPSBfdGhpcyRwcm9wcy5hY3RpdmUsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY29sb3IgPSBfdGhpcyRwcm9wcy5jb2xvcixcbiAgICAgICAgICBjb250ZW50ID0gX3RoaXMkcHJvcHMuY29udGVudCxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGZpdHRlZCA9IF90aGlzJHByb3BzLmZpdHRlZCxcbiAgICAgICAgICBoZWFkZXIgPSBfdGhpcyRwcm9wcy5oZWFkZXIsXG4gICAgICAgICAgaWNvbiA9IF90aGlzJHByb3BzLmljb24sXG4gICAgICAgICAgbGluayA9IF90aGlzJHByb3BzLmxpbmssXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzLm5hbWUsXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2ssXG4gICAgICAgICAgcG9zaXRpb24gPSBfdGhpcyRwcm9wcy5wb3NpdGlvbjtcbiAgICAgIHZhciBjbGFzc2VzID0gY3goY29sb3IsIHBvc2l0aW9uLCB1c2VLZXlPbmx5KGFjdGl2ZSwgJ2FjdGl2ZScpLCB1c2VLZXlPbmx5KGRpc2FibGVkLCAnZGlzYWJsZWQnKSwgdXNlS2V5T25seShpY29uID09PSB0cnVlIHx8IGljb24gJiYgIShuYW1lIHx8IGNvbnRlbnQpLCAnaWNvbicpLCB1c2VLZXlPbmx5KGhlYWRlciwgJ2hlYWRlcicpLCB1c2VLZXlPbmx5KGxpbmssICdsaW5rJyksIHVzZUtleU9yVmFsdWVBbmRLZXkoZml0dGVkLCAnZml0dGVkJyksICdpdGVtJywgY2xhc3NOYW1lKTtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKE1lbnVJdGVtLCB0aGlzLnByb3BzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChvbkNsaWNrKSByZXR1cm4gJ2EnO1xuICAgICAgfSk7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKE1lbnVJdGVtLCB0aGlzLnByb3BzKTtcblxuICAgICAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgICB9KSwgY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrXG4gICAgICB9KSwgSWNvbi5jcmVhdGUoaWNvbiwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjb250ZW50KSA/IF9zdGFydENhc2UobmFtZSkgOiBjb250ZW50KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWVudUl0ZW07XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNZW51SXRlbSwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYWN0aXZlXCIsIFwiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29udGVudFwiLCBcImRpc2FibGVkXCIsIFwiZml0dGVkXCIsIFwiaGVhZGVyXCIsIFwiaWNvblwiLCBcImluZGV4XCIsIFwibGlua1wiLCBcIm5hbWVcIiwgXCJvbkNsaWNrXCIsIFwicG9zaXRpb25cIl0pO1xuXG5leHBvcnQgeyBNZW51SXRlbSBhcyBkZWZhdWx0IH07XG5NZW51SXRlbS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBIG1lbnUgaXRlbSBjYW4gYmUgYWN0aXZlLiAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY29sb3JzIGNhbiBiZSBzcGVjaWZpZWQuICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoU1VJLkNPTE9SUyksXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBtZW51IGl0ZW0gY2FuIGJlIGRpc2FibGVkLiAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgbWVudSBpdGVtIG9yIG1lbnUgY2FuIHJlbW92ZSBlbGVtZW50IHBhZGRpbmcsIHZlcnRpY2FsbHkgb3IgaG9yaXpvbnRhbGx5LiAqL1xuICBmaXR0ZWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsbHknLCAndmVydGljYWxseSddKV0pLFxuXG4gIC8qKiBBIG1lbnUgaXRlbSBtYXkgaW5jbHVkZSBhIGhlYWRlciBvciBtYXkgaXRzZWxmIGJlIGEgaGVhZGVyLiAqL1xuICBoZWFkZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBNZW51SXRlbSBjYW4gYmUgb25seSBpY29uLiAqL1xuICBpY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmRdKSxcblxuICAvKiogTWVudUl0ZW0gaW5kZXggaW5zaWRlIE1lbnUuICovXG4gIGluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKiBBIG1lbnUgaXRlbSBjYW4gYmUgbGluay4gKi9cbiAgbGluazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEludGVybmFsIG5hbWUgb2YgdGhlIE1lbnVJdGVtLiAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gY2xpY2suIFdoZW4gcGFzc2VkLCB0aGUgY29tcG9uZW50IHdpbGwgcmVuZGVyIGFzIGFuIGBhYFxuICAgKiB0YWcgYnkgZGVmYXVsdCBpbnN0ZWFkIG9mIGEgYGRpdmAuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogQSBtZW51IGl0ZW0gY2FuIHRha2UgbGVmdCBvciByaWdodCBwb3NpdGlvbi4gKi9cbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnXSlcbn0gOiB7fTtcbk1lbnVJdGVtLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoTWVudUl0ZW0sIGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiB2YWwsXG4gICAgbmFtZTogdmFsXG4gIH07XG59KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgbWVudSBjYW4gY29udGFpbiBhIHN1YiBtZW51LlxuICovXG5cbmZ1bmN0aW9uIE1lbnVNZW51KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICBwb3NpdGlvbiA9IHByb3BzLnBvc2l0aW9uO1xuICB2YXIgY2xhc3NlcyA9IGN4KHBvc2l0aW9uLCAnbWVudScsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoTWVudU1lbnUsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTWVudU1lbnUsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cbk1lbnVNZW51LmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwicG9zaXRpb25cIl07XG5NZW51TWVudS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBzdWIgbWVudSBjYW4gdGFrZSBsZWZ0IG9yIHJpZ2h0IHBvc2l0aW9uLiAqL1xuICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKVxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgTWVudU1lbnU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfbWFwIGZyb20gXCJsb2Rhc2gvbWFwXCI7XG5pbXBvcnQgX2ludm9rZSBmcm9tIFwibG9kYXNoL2ludm9rZVwiO1xuaW1wb3J0IF93aXRob3V0IGZyb20gXCJsb2Rhc2gvd2l0aG91dFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBdXRvQ29udHJvbGxlZENvbXBvbmVudCBhcyBDb21wb25lbnQsIGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZUtleU9ubHksIHVzZUtleU9yVmFsdWVBbmRLZXksIHVzZVZhbHVlQW5kS2V5LCB1c2VXaWR0aFByb3AgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IE1lbnVIZWFkZXIgZnJvbSAnLi9NZW51SGVhZGVyJztcbmltcG9ydCBNZW51SXRlbSBmcm9tICcuL01lbnVJdGVtJztcbmltcG9ydCBNZW51TWVudSBmcm9tICcuL01lbnVNZW51Jztcbi8qKlxuICogQSBtZW51IGRpc3BsYXlzIGdyb3VwZWQgbmF2aWdhdGlvbiBhY3Rpb25zLlxuICogQHNlZSBEcm9wZG93blxuICovXG5cbnZhciBNZW51ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZW51LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW51KCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbnUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoTWVudSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUl0ZW1PdmVycmlkZXNcIiwgZnVuY3Rpb24gKHByZWRlZmluZWRQcm9wcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlLCBpdGVtUHJvcHMpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBpdGVtUHJvcHMuaW5kZXg7XG5cbiAgICAgICAgICBfdGhpcy50cnlTZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3RpdmVJbmRleDogaW5kZXhcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIF9pbnZva2UocHJlZGVmaW5lZFByb3BzLCAnb25DbGljaycsIGUsIGl0ZW1Qcm9wcyk7XG5cbiAgICAgICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25JdGVtQ2xpY2snLCBlLCBpdGVtUHJvcHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1lbnUsIFt7XG4gICAga2V5OiBcInJlbmRlckl0ZW1zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckl0ZW1zKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBpdGVtcyA9IHRoaXMucHJvcHMuaXRlbXM7XG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLnN0YXRlLmFjdGl2ZUluZGV4O1xuICAgICAgcmV0dXJuIF9tYXAoaXRlbXMsIGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gTWVudUl0ZW0uY3JlYXRlKGl0ZW0sIHtcbiAgICAgICAgICBkZWZhdWx0UHJvcHM6IHtcbiAgICAgICAgICAgIGFjdGl2ZTogcGFyc2VJbnQoYWN0aXZlSW5kZXgsIDEwKSA9PT0gaW5kZXgsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICB9LFxuICAgICAgICAgIG92ZXJyaWRlUHJvcHM6IF90aGlzMi5oYW5kbGVJdGVtT3ZlcnJpZGVzXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGF0dGFjaGVkID0gX3RoaXMkcHJvcHMuYXR0YWNoZWQsXG4gICAgICAgICAgYm9yZGVybGVzcyA9IF90aGlzJHByb3BzLmJvcmRlcmxlc3MsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY29sb3IgPSBfdGhpcyRwcm9wcy5jb2xvcixcbiAgICAgICAgICBjb21wYWN0ID0gX3RoaXMkcHJvcHMuY29tcGFjdCxcbiAgICAgICAgICBmaXhlZCA9IF90aGlzJHByb3BzLmZpeGVkLFxuICAgICAgICAgIGZsb2F0ZWQgPSBfdGhpcyRwcm9wcy5mbG9hdGVkLFxuICAgICAgICAgIGZsdWlkID0gX3RoaXMkcHJvcHMuZmx1aWQsXG4gICAgICAgICAgaWNvbiA9IF90aGlzJHByb3BzLmljb24sXG4gICAgICAgICAgaW52ZXJ0ZWQgPSBfdGhpcyRwcm9wcy5pbnZlcnRlZCxcbiAgICAgICAgICBwYWdpbmF0aW9uID0gX3RoaXMkcHJvcHMucGFnaW5hdGlvbixcbiAgICAgICAgICBwb2ludGluZyA9IF90aGlzJHByb3BzLnBvaW50aW5nLFxuICAgICAgICAgIHNlY29uZGFyeSA9IF90aGlzJHByb3BzLnNlY29uZGFyeSxcbiAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICBzdGFja2FibGUgPSBfdGhpcyRwcm9wcy5zdGFja2FibGUsXG4gICAgICAgICAgdGFidWxhciA9IF90aGlzJHByb3BzLnRhYnVsYXIsXG4gICAgICAgICAgdGV4dCA9IF90aGlzJHByb3BzLnRleHQsXG4gICAgICAgICAgdmVydGljYWwgPSBfdGhpcyRwcm9wcy52ZXJ0aWNhbCxcbiAgICAgICAgICB3aWR0aHMgPSBfdGhpcyRwcm9wcy53aWR0aHM7XG4gICAgICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIGNvbG9yLCBzaXplLCB1c2VLZXlPbmx5KGJvcmRlcmxlc3MsICdib3JkZXJsZXNzJyksIHVzZUtleU9ubHkoY29tcGFjdCwgJ2NvbXBhY3QnKSwgdXNlS2V5T25seShmbHVpZCwgJ2ZsdWlkJyksIHVzZUtleU9ubHkoaW52ZXJ0ZWQsICdpbnZlcnRlZCcpLCB1c2VLZXlPbmx5KHBhZ2luYXRpb24sICdwYWdpbmF0aW9uJyksIHVzZUtleU9ubHkocG9pbnRpbmcsICdwb2ludGluZycpLCB1c2VLZXlPbmx5KHNlY29uZGFyeSwgJ3NlY29uZGFyeScpLCB1c2VLZXlPbmx5KHN0YWNrYWJsZSwgJ3N0YWNrYWJsZScpLCB1c2VLZXlPbmx5KHRleHQsICd0ZXh0JyksIHVzZUtleU9ubHkodmVydGljYWwsICd2ZXJ0aWNhbCcpLCB1c2VLZXlPclZhbHVlQW5kS2V5KGF0dGFjaGVkLCAnYXR0YWNoZWQnKSwgdXNlS2V5T3JWYWx1ZUFuZEtleShmbG9hdGVkLCAnZmxvYXRlZCcpLCB1c2VLZXlPclZhbHVlQW5kS2V5KGljb24sICdpY29uJyksIHVzZUtleU9yVmFsdWVBbmRLZXkodGFidWxhciwgJ3RhYnVsYXInKSwgdXNlVmFsdWVBbmRLZXkoZml4ZWQsICdmaXhlZCcpLCB1c2VXaWR0aFByb3Aod2lkdGhzLCAnaXRlbScpLCBjbGFzc05hbWUsICdtZW51Jyk7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKE1lbnUsIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTWVudSwgdGhpcy5wcm9wcyk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyB0aGlzLnJlbmRlckl0ZW1zKCkgOiBjaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1lbnU7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNZW51LCBcImF1dG9Db250cm9sbGVkUHJvcHNcIiwgWydhY3RpdmVJbmRleCddKTtcblxuX2RlZmluZVByb3BlcnR5KE1lbnUsIFwiSGVhZGVyXCIsIE1lbnVIZWFkZXIpO1xuXG5fZGVmaW5lUHJvcGVydHkoTWVudSwgXCJJdGVtXCIsIE1lbnVJdGVtKTtcblxuX2RlZmluZVByb3BlcnR5KE1lbnUsIFwiTWVudVwiLCBNZW51TWVudSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNZW51LCBcImhhbmRsZWRQcm9wc1wiLCBbXCJhY3RpdmVJbmRleFwiLCBcImFzXCIsIFwiYXR0YWNoZWRcIiwgXCJib3JkZXJsZXNzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBhY3RcIiwgXCJkZWZhdWx0QWN0aXZlSW5kZXhcIiwgXCJmaXhlZFwiLCBcImZsb2F0ZWRcIiwgXCJmbHVpZFwiLCBcImljb25cIiwgXCJpbnZlcnRlZFwiLCBcIml0ZW1zXCIsIFwib25JdGVtQ2xpY2tcIiwgXCJwYWdpbmF0aW9uXCIsIFwicG9pbnRpbmdcIiwgXCJzZWNvbmRhcnlcIiwgXCJzaXplXCIsIFwic3RhY2thYmxlXCIsIFwidGFidWxhclwiLCBcInRleHRcIiwgXCJ2ZXJ0aWNhbFwiLCBcIndpZHRoc1wiXSk7XG5cbk1lbnUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogSW5kZXggb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgaXRlbS4gKi9cbiAgYWN0aXZlSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKiogQSBtZW51IG1heSBiZSBhdHRhY2hlZCB0byBvdGhlciBjb250ZW50IHNlZ21lbnRzLiAqL1xuICBhdHRhY2hlZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5vbmVPZihbJ3RvcCcsICdib3R0b20nXSldKSxcblxuICAvKiogQSBtZW51IGl0ZW0gb3IgbWVudSBjYW4gaGF2ZSBubyBib3JkZXJzLiAqL1xuICBib3JkZXJsZXNzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNvbG9ycyBjYW4gYmUgc3BlY2lmaWVkLiAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFNVSS5DT0xPUlMpLFxuXG4gIC8qKiBBIG1lbnUgY2FuIHRha2UgdXAgb25seSB0aGUgc3BhY2UgbmVjZXNzYXJ5IHRvIGZpdCBpdHMgY29udGVudC4gKi9cbiAgY29tcGFjdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEluaXRpYWwgYWN0aXZlSW5kZXggdmFsdWUuICovXG4gIGRlZmF1bHRBY3RpdmVJbmRleDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKiBBIG1lbnUgY2FuIGJlIGZpeGVkIHRvIGEgc2lkZSBvZiBpdHMgY29udGV4dC4gKi9cbiAgZml4ZWQ6IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnLCAnYm90dG9tJywgJ3RvcCddKSxcblxuICAvKiogQSBtZW51IGNhbiBiZSBmbG9hdGVkLiAqL1xuICBmbG9hdGVkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9uZU9mKFsncmlnaHQnXSldKSxcblxuICAvKiogQSB2ZXJ0aWNhbCBtZW51IG1heSB0YWtlIHRoZSBzaXplIG9mIGl0cyBjb250YWluZXIuICovXG4gIGZsdWlkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBtZW51IG1heSBoYXZlIGp1c3QgaWNvbnMgKGJvb2wpIG9yIGxhYmVsZWQgaWNvbnMuICovXG4gIGljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub25lT2YoWydsYWJlbGVkJ10pXSksXG5cbiAgLyoqIEEgbWVudSBtYXkgaGF2ZSBpdHMgY29sb3JzIGludmVydGVkIHRvIHNob3cgZ3JlYXRlciBjb250cmFzdC4gKi9cbiAgaW52ZXJ0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTaG9ydGhhbmQgYXJyYXkgb2YgcHJvcHMgZm9yIE1lbnUuICovXG4gIGl0ZW1zOiBjdXN0b21Qcm9wVHlwZXMuY29sbGVjdGlvblNob3J0aGFuZCxcblxuICAvKipcbiAgICogb25DbGljayBoYW5kbGVyIGZvciBNZW51SXRlbS4gTXV0dWFsbHkgZXhjbHVzaXZlIHdpdGggY2hpbGRyZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgaXRlbSBwcm9wcy5cbiAgICovXG4gIG9uSXRlbUNsaWNrOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2NoaWxkcmVuJ10pLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKiBBIHBhZ2luYXRpb24gbWVudSBpcyBzcGVjaWFsbHkgZm9ybWF0dGVkIHRvIHByZXNlbnQgbGlua3MgdG8gcGFnZXMgb2YgY29udGVudC4gKi9cbiAgcGFnaW5hdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgbWVudSBjYW4gcG9pbnQgdG8gc2hvdyBpdHMgcmVsYXRpb25zaGlwIHRvIG5lYXJieSBjb250ZW50LiAqL1xuICBwb2ludGluZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgbWVudSBjYW4gYWRqdXN0IGl0cyBhcHBlYXJhbmNlIHRvIGRlLWVtcGhhc2l6ZSBpdHMgY29udGVudHMuICovXG4gIHNlY29uZGFyeTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgbWVudSBjYW4gdmFyeSBpbiBzaXplLiAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoX3dpdGhvdXQoU1VJLlNJWkVTLCAnbWVkaXVtJywgJ2JpZycpKSxcblxuICAvKiogQSBtZW51IGNhbiBzdGFjayBhdCBtb2JpbGUgcmVzb2x1dGlvbnMuICovXG4gIHN0YWNrYWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgbWVudSBjYW4gYmUgZm9ybWF0dGVkIHRvIHNob3cgdGFicyBvZiBpbmZvcm1hdGlvbi4gKi9cbiAgdGFidWxhcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5vbmVPZihbJ3JpZ2h0J10pXSksXG5cbiAgLyoqIEEgbWVudSBjYW4gYmUgZm9ybWF0dGVkIGZvciB0ZXh0IGNvbnRlbnQuICovXG4gIHRleHQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHZlcnRpY2FsIG1lbnUgZGlzcGxheXMgZWxlbWVudHMgdmVydGljYWxseS4gKi9cbiAgdmVydGljYWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIG1lbnUgY2FuIGhhdmUgaXRzIGl0ZW1zIGRpdmlkZWQgZXZlbmx5LiAqL1xuICB3aWR0aHM6IFByb3BUeXBlcy5vbmVPZihTVUkuV0lEVEhTKVxufSA6IHt9O1xuTWVudS5jcmVhdGUgPSBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KE1lbnUsIGZ1bmN0aW9uIChpdGVtcykge1xuICByZXR1cm4ge1xuICAgIGl0ZW1zOiBpdGVtc1xuICB9O1xufSk7XG5leHBvcnQgZGVmYXVsdCBNZW51OyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQga2V5Ym9hcmRLZXkgZnJvbSAna2V5Ym9hcmQta2V5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBNZW51SXRlbSBmcm9tICcuLi8uLi9jb2xsZWN0aW9ucy9NZW51L01lbnVJdGVtJztcbi8qKlxuICogQW4gaXRlbSBvZiBhIHBhZ2luYXRpb24uXG4gKi9cblxudmFyIFBhZ2luYXRpb25JdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQYWdpbmF0aW9uSXRlbSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGFnaW5hdGlvbkl0ZW0oKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFnaW5hdGlvbkl0ZW0pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoUGFnaW5hdGlvbkl0ZW0pKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uQ2xpY2snLCBlLCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlS2V5RG93blwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uS2V5RG93bicsIGUsIF90aGlzLnByb3BzKTtcblxuICAgICAgaWYgKGtleWJvYXJkS2V5LmdldENvZGUoZSkgPT09IGtleWJvYXJkS2V5LkVudGVyKSBfaW52b2tlKF90aGlzLnByb3BzLCAnb25DbGljaycsIGUsIF90aGlzLnByb3BzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVPdmVycmlkZXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb25DbGljazogX3RoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICAgIG9uS2V5RG93bjogX3RoaXMuaGFuZGxlS2V5RG93blxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQYWdpbmF0aW9uSXRlbSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICAgIHR5cGUgPSBfdGhpcyRwcm9wcy50eXBlO1xuICAgICAgdmFyIGRpc2FibGVkID0gdGhpcy5wcm9wcy5kaXNhYmxlZCB8fCB0eXBlID09PSAnZWxsaXBzaXNJdGVtJztcbiAgICAgIHJldHVybiBNZW51SXRlbS5jcmVhdGUodGhpcy5wcm9wcywge1xuICAgICAgICBkZWZhdWx0UHJvcHM6IHtcbiAgICAgICAgICBhY3RpdmU6IGFjdGl2ZSxcbiAgICAgICAgICAnYXJpYS1jdXJyZW50JzogYWN0aXZlLFxuICAgICAgICAgICdhcmlhLWRpc2FibGVkJzogZGlzYWJsZWQsXG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICAgICAgb25LZXlEb3duOiB0aGlzLmhhbmRsZUtleURvd24sXG4gICAgICAgICAgdGFiSW5kZXg6IGRpc2FibGVkID8gLTEgOiAwXG4gICAgICAgIH0sXG4gICAgICAgIG92ZXJyaWRlUHJvcHM6IHRoaXMuaGFuZGxlT3ZlcnJpZGVzXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGFnaW5hdGlvbkl0ZW07XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShQYWdpbmF0aW9uSXRlbSwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYWN0aXZlXCIsIFwiZGlzYWJsZWRcIiwgXCJvbkNsaWNrXCIsIFwib25LZXlEb3duXCIsIFwidHlwZVwiXSk7XG5cblBhZ2luYXRpb25JdGVtLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEEgcGFnaW5hdGlvbiBpdGVtIGNhbiBiZSBhY3RpdmUuICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgcGFnaW5hdGlvbiBpdGVtIGNhbiBiZSBkaXNhYmxlZC4gKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gY2xpY2suXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGtleSBkb3duLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogQSBwYWdpbmF0aW9uIHNob3VsZCBoYXZlIGEgdHlwZS4gKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnZWxsaXBzaXNJdGVtJywgJ2ZpcnN0SXRlbScsICdwcmV2SXRlbScsICdwYWdlSXRlbScsICduZXh0SXRlbScsICdsYXN0SXRlbSddKVxufSA6IHt9O1xuUGFnaW5hdGlvbkl0ZW0uY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShQYWdpbmF0aW9uSXRlbSwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IFBhZ2luYXRpb25JdGVtOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfbWFwIGZyb20gXCJsb2Rhc2gvbWFwXCI7XG5pbXBvcnQgX2lzTmlsIGZyb20gXCJsb2Rhc2gvaXNOaWxcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEF1dG9Db250cm9sbGVkQ29tcG9uZW50IGFzIENvbXBvbmVudCwgY3JlYXRlUGFnaW5hdGlvbkl0ZW1zLCBjdXN0b21Qcm9wVHlwZXMsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBNZW51IGZyb20gJy4uLy4uL2NvbGxlY3Rpb25zL01lbnUnO1xuaW1wb3J0IFBhZ2luYXRpb25JdGVtIGZyb20gJy4vUGFnaW5hdGlvbkl0ZW0nO1xuLyoqXG4gKiBBIGNvbXBvbmVudCB0byByZW5kZXIgYSBwYWdpbmF0aW9uLlxuICovXG5cbnZhciBQYWdpbmF0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQYWdpbmF0aW9uLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQYWdpbmF0aW9uKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2luYXRpb24pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoUGFnaW5hdGlvbikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUl0ZW1DbGlja1wiLCBmdW5jdGlvbiAoZSwgX3JlZikge1xuICAgICAgdmFyIG5leHRBY3RpdmVQYWdlID0gX3JlZi52YWx1ZTtcbiAgICAgIHZhciBwcmV2QWN0aXZlUGFnZSA9IF90aGlzLnN0YXRlLmFjdGl2ZVBhZ2U7IC8vIEhlYWRzIHVwISBXZSBuZWVkIHRoZSBjYXN0IHRvIHRoZSBcIm51bWJlclwiIHR5cGUgdGhlcmUsIGFzIGBhY3RpdmVQYWdlYCBjYW4gYmUgYSBzdHJpbmdcblxuICAgICAgaWYgKCtwcmV2QWN0aXZlUGFnZSA9PT0gK25leHRBY3RpdmVQYWdlKSByZXR1cm47XG5cbiAgICAgIF90aGlzLnRyeVNldFN0YXRlKHtcbiAgICAgICAgYWN0aXZlUGFnZTogbmV4dEFjdGl2ZVBhZ2VcbiAgICAgIH0pO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25QYWdlQ2hhbmdlJywgZSwgX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMsIHtcbiAgICAgICAgYWN0aXZlUGFnZTogbmV4dEFjdGl2ZVBhZ2VcbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVJdGVtT3ZlcnJpZGVzXCIsIGZ1bmN0aW9uIChhY3RpdmUsIHR5cGUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHByZWRlZmluZWRQcm9wcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFjdGl2ZTogYWN0aXZlLFxuICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAga2V5OiBcIlwiLmNvbmNhdCh0eXBlLCBcIi1cIikuY29uY2F0KHZhbHVlKSxcbiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUsIGl0ZW1Qcm9wcykge1xuICAgICAgICAgICAgX2ludm9rZShwcmVkZWZpbmVkUHJvcHMsICdvbkNsaWNrJywgZSwgaXRlbVByb3BzKTtcblxuICAgICAgICAgICAgaWYgKGl0ZW1Qcm9wcy50eXBlICE9PSAnZWxsaXBzaXNJdGVtJykgX3RoaXMuaGFuZGxlSXRlbUNsaWNrKGUsIGl0ZW1Qcm9wcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQYWdpbmF0aW9uLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYXJpYUxhYmVsID0gX3RoaXMkcHJvcHNbJ2FyaWEtbGFiZWwnXSxcbiAgICAgICAgICBib3VuZGFyeVJhbmdlID0gX3RoaXMkcHJvcHMuYm91bmRhcnlSYW5nZSxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGVsbGlwc2lzSXRlbSA9IF90aGlzJHByb3BzLmVsbGlwc2lzSXRlbSxcbiAgICAgICAgICBzaWJsaW5nUmFuZ2UgPSBfdGhpcyRwcm9wcy5zaWJsaW5nUmFuZ2UsXG4gICAgICAgICAgdG90YWxQYWdlcyA9IF90aGlzJHByb3BzLnRvdGFsUGFnZXM7XG4gICAgICB2YXIgYWN0aXZlUGFnZSA9IHRoaXMuc3RhdGUuYWN0aXZlUGFnZTtcbiAgICAgIHZhciBpdGVtcyA9IGNyZWF0ZVBhZ2luYXRpb25JdGVtcyh7XG4gICAgICAgIGFjdGl2ZVBhZ2U6IGFjdGl2ZVBhZ2UsXG4gICAgICAgIGJvdW5kYXJ5UmFuZ2U6IGJvdW5kYXJ5UmFuZ2UsXG4gICAgICAgIGhpZGVFbGxpcHNpczogX2lzTmlsKGVsbGlwc2lzSXRlbSksXG4gICAgICAgIHNpYmxpbmdSYW5nZTogc2libGluZ1JhbmdlLFxuICAgICAgICB0b3RhbFBhZ2VzOiB0b3RhbFBhZ2VzXG4gICAgICB9KTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoUGFnaW5hdGlvbiwgdGhpcy5wcm9wcyk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChNZW51LCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgICAgICBwYWdpbmF0aW9uOiB0cnVlLFxuICAgICAgICByb2xlOiBcIm5hdmlnYXRpb25cIlxuICAgICAgfSksIF9tYXAoaXRlbXMsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICB2YXIgYWN0aXZlID0gX3JlZjIuYWN0aXZlLFxuICAgICAgICAgICAgdHlwZSA9IF9yZWYyLnR5cGUsXG4gICAgICAgICAgICB2YWx1ZSA9IF9yZWYyLnZhbHVlO1xuICAgICAgICByZXR1cm4gUGFnaW5hdGlvbkl0ZW0uY3JlYXRlKF90aGlzMi5wcm9wc1t0eXBlXSwge1xuICAgICAgICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICAgICAgY29udGVudDogdmFsdWUsXG4gICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIG92ZXJyaWRlUHJvcHM6IF90aGlzMi5oYW5kbGVJdGVtT3ZlcnJpZGVzKGFjdGl2ZSwgdHlwZSwgdmFsdWUpXG4gICAgICAgIH0pO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQYWdpbmF0aW9uO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoUGFnaW5hdGlvbiwgXCJhdXRvQ29udHJvbGxlZFByb3BzXCIsIFsnYWN0aXZlUGFnZSddKTtcblxuX2RlZmluZVByb3BlcnR5KFBhZ2luYXRpb24sIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgJ2FyaWEtbGFiZWwnOiAnUGFnaW5hdGlvbiBOYXZpZ2F0aW9uJyxcbiAgYm91bmRhcnlSYW5nZTogMSxcbiAgZWxsaXBzaXNJdGVtOiAnLi4uJyxcbiAgZmlyc3RJdGVtOiB7XG4gICAgJ2FyaWEtbGFiZWwnOiAnRmlyc3QgaXRlbScsXG4gICAgY29udGVudDogJ8KrJ1xuICB9LFxuICBsYXN0SXRlbToge1xuICAgICdhcmlhLWxhYmVsJzogJ0xhc3QgaXRlbScsXG4gICAgY29udGVudDogJ8K7J1xuICB9LFxuICBuZXh0SXRlbToge1xuICAgICdhcmlhLWxhYmVsJzogJ05leHQgaXRlbScsXG4gICAgY29udGVudDogJ+KfqSdcbiAgfSxcbiAgcGFnZUl0ZW06IHt9LFxuICBwcmV2SXRlbToge1xuICAgICdhcmlhLWxhYmVsJzogJ1ByZXZpb3VzIGl0ZW0nLFxuICAgIGNvbnRlbnQ6ICfin6gnXG4gIH0sXG4gIHNpYmxpbmdSYW5nZTogMVxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShQYWdpbmF0aW9uLCBcIkl0ZW1cIiwgUGFnaW5hdGlvbkl0ZW0pO1xuXG5fZGVmaW5lUHJvcGVydHkoUGFnaW5hdGlvbiwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYWN0aXZlUGFnZVwiLCBcImFyaWEtbGFiZWxcIiwgXCJib3VuZGFyeVJhbmdlXCIsIFwiZGVmYXVsdEFjdGl2ZVBhZ2VcIiwgXCJkaXNhYmxlZFwiLCBcImVsbGlwc2lzSXRlbVwiLCBcImZpcnN0SXRlbVwiLCBcImxhc3RJdGVtXCIsIFwibmV4dEl0ZW1cIiwgXCJvblBhZ2VDaGFuZ2VcIiwgXCJwYWdlSXRlbVwiLCBcInByZXZJdGVtXCIsIFwic2libGluZ1JhbmdlXCIsIFwidG90YWxQYWdlc1wiXSk7XG5cbmV4cG9ydCB7IFBhZ2luYXRpb24gYXMgZGVmYXVsdCB9O1xuUGFnaW5hdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBIHBhZ2luYXRpb24gaXRlbSBjYW4gaGF2ZSBhbiBhcmlhIGxhYmVsLiAqL1xuICAnYXJpYS1sYWJlbCc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEluaXRpYWwgYWN0aXZlUGFnZSB2YWx1ZS4gKi9cbiAgZGVmYXVsdEFjdGl2ZVBhZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKiogSW5kZXggb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgcGFnZS4gKi9cbiAgYWN0aXZlUGFnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKiBOdW1iZXIgb2YgYWx3YXlzIHZpc2libGUgcGFnZXMgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kLiAqL1xuICBib3VuZGFyeVJhbmdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqIEEgcGFnaW5hdGlvbiBjYW4gYmUgZGlzYWJsZWQuICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBzaG9ydGhhbmQgZm9yIFBhZ2luYXRpb25JdGVtLiAqL1xuICBlbGxpcHNpc0l0ZW06IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBBIHNob3J0aGFuZCBmb3IgUGFnaW5hdGlvbkl0ZW0uICovXG4gIGZpcnN0SXRlbTogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIEEgc2hvcnRoYW5kIGZvciBQYWdpbmF0aW9uSXRlbS4gKi9cbiAgbGFzdEl0ZW06IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBBIHNob3J0aGFuZCBmb3IgUGFnaW5hdGlvbkl0ZW0uICovXG4gIG5leHRJdGVtOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogQSBzaG9ydGhhbmQgZm9yIFBhZ2luYXRpb25JdGVtLiAqL1xuICBwYWdlSXRlbTogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIEEgc2hvcnRoYW5kIGZvciBQYWdpbmF0aW9uSXRlbS4gKi9cbiAgcHJldkl0ZW06IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gY2hhbmdlIG9mIGFuIGFjdGl2ZSBwYWdlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25QYWdlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogTnVtYmVyIG9mIGFsd2F5cyB2aXNpYmxlIHBhZ2VzIGJlZm9yZSBhbmQgYWZ0ZXIgdGhlIGN1cnJlbnQgb25lLiAqL1xuICBzaWJsaW5nUmFuZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKiogVG90YWwgbnVtYmVyIG9mIHBhZ2VzLiAqL1xuICB0b3RhbFBhZ2VzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZFxufSA6IHt9OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX3NldCBmcm9tIFwibG9kYXNoL3NldFwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCBfZ2V0IGZyb20gXCJsb2Rhc2gvZ2V0XCI7XG5pbXBvcnQgX2lzTmlsIGZyb20gXCJsb2Rhc2gvaXNOaWxcIjtcbmltcG9ydCB7IFJlZiB9IGZyb20gJ0BzdGFyZHVzdC11aS9yZWFjdC1jb21wb25lbnQtcmVmJztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQXV0b0NvbnRyb2xsZWRDb21wb25lbnQgYXMgQ29tcG9uZW50LCBjcmVhdGVIVE1MTGFiZWwsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBodG1sSW5wdXRBdHRycywgcGFydGl0aW9uSFRNTFByb3BzLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcblxuLyoqXG4gKiBBIGNoZWNrYm94IGFsbG93cyBhIHVzZXIgdG8gc2VsZWN0IGEgdmFsdWUgZnJvbSBhIHNtYWxsIHNldCBvZiBvcHRpb25zLCBvZnRlbiBiaW5hcnkuXG4gKiBAc2VlIEZvcm1cbiAqIEBzZWUgUmFkaW9cbiAqL1xudmFyIENoZWNrYm94ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDaGVja2JveCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2hlY2tib3goKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hlY2tib3gpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoQ2hlY2tib3gpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpbnB1dFJlZlwiLCBjcmVhdGVSZWYoKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibGFiZWxSZWZcIiwgY3JlYXRlUmVmKCkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNhblRvZ2dsZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIHJhZGlvID0gX3RoaXMkcHJvcHMucmFkaW8sXG4gICAgICAgICAgcmVhZE9ubHkgPSBfdGhpcyRwcm9wcy5yZWFkT25seTtcbiAgICAgIHZhciBjaGVja2VkID0gX3RoaXMuc3RhdGUuY2hlY2tlZDtcbiAgICAgIHJldHVybiAhZGlzYWJsZWQgJiYgIXJlYWRPbmx5ICYmICEocmFkaW8gJiYgY2hlY2tlZCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY29tcHV0ZVRhYkluZGV4XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzMi5kaXNhYmxlZCxcbiAgICAgICAgICB0YWJJbmRleCA9IF90aGlzJHByb3BzMi50YWJJbmRleDtcbiAgICAgIGlmICghX2lzTmlsKHRhYkluZGV4KSkgcmV0dXJuIHRhYkluZGV4O1xuICAgICAgcmV0dXJuIGRpc2FibGVkID8gLTEgOiAwO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgaWQgPSBfdGhpcy5wcm9wcy5pZDtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIGNoZWNrZWQgPSBfdGhpcyRzdGF0ZS5jaGVja2VkLFxuICAgICAgICAgIGluZGV0ZXJtaW5hdGUgPSBfdGhpcyRzdGF0ZS5pbmRldGVybWluYXRlO1xuXG4gICAgICB2YXIgaXNJbnB1dENsaWNrID0gX2ludm9rZShfdGhpcy5pbnB1dFJlZi5jdXJyZW50LCAnY29udGFpbnMnLCBlLnRhcmdldCk7XG5cbiAgICAgIHZhciBpc0xhYmVsQ2xpY2sgPSBfaW52b2tlKF90aGlzLmxhYmVsUmVmLmN1cnJlbnQsICdjb250YWlucycsIGUudGFyZ2V0KTtcblxuICAgICAgdmFyIGlzUm9vdENsaWNrID0gIWlzTGFiZWxDbGljayAmJiAhaXNJbnB1dENsaWNrO1xuICAgICAgdmFyIGhhc0lkID0gIV9pc05pbChpZCk7XG4gICAgICB2YXIgaXNMYWJlbENsaWNrQW5kRm9yd2FyZGVkVG9JbnB1dCA9IGlzTGFiZWxDbGljayAmJiBoYXNJZDsgLy8gaHR0cHM6Ly9naXRodWIuY29tL1NlbWFudGljLU9yZy9TZW1hbnRpYy1VSS1SZWFjdC9wdWxsLzMzNTFcblxuICAgICAgaWYgKCFpc0xhYmVsQ2xpY2tBbmRGb3J3YXJkZWRUb0lucHV0KSB7XG4gICAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkNsaWNrJywgZSwgX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMsIHtcbiAgICAgICAgICBjaGVja2VkOiAhY2hlY2tlZCxcbiAgICAgICAgICBpbmRldGVybWluYXRlOiAhIWluZGV0ZXJtaW5hdGVcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuaXNDbGlja0Zyb21Nb3VzZSkge1xuICAgICAgICBfdGhpcy5pc0NsaWNrRnJvbU1vdXNlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzTGFiZWxDbGljayAmJiAhaGFzSWQpIHtcbiAgICAgICAgICBfdGhpcy5oYW5kbGVDaGFuZ2UoZSk7XG4gICAgICAgIH0gLy8gQ2hhbmdlcyBzaG91bGQgYmUgdHJpZ2dlcmVkIGZvciB0aGUgc2xpZGVyIHZhcmlhdGlvblxuXG5cbiAgICAgICAgaWYgKGlzUm9vdENsaWNrKSB7XG4gICAgICAgICAgX3RoaXMuaGFuZGxlQ2hhbmdlKGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTGFiZWxDbGljayAmJiBoYXNJZCkge1xuICAgICAgICAgIC8vIFRvIHByZXZlbnQgdHdvIGNsaWNrcyBmcm9tIGJlaW5nIGZpcmVkIGZyb20gdGhlIGNvbXBvbmVudCB3ZSBoYXZlIHRvIHN0b3AgdGhlIHByb3BhZ2F0aW9uXG4gICAgICAgICAgLy8gZnJvbSB0aGUgXCJpbnB1dFwiIGNsaWNrOiBodHRwczovL2dpdGh1Yi5jb20vU2VtYW50aWMtT3JnL1NlbWFudGljLVVJLVJlYWN0L2lzc3Vlcy8zNDMzXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNoYW5nZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGNoZWNrZWQgPSBfdGhpcy5zdGF0ZS5jaGVja2VkO1xuICAgICAgaWYgKCFfdGhpcy5jYW5Ub2dnbGUoKSkgcmV0dXJuO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25DaGFuZ2UnLCBlLCBfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge1xuICAgICAgICBjaGVja2VkOiAhY2hlY2tlZCxcbiAgICAgICAgaW5kZXRlcm1pbmF0ZTogZmFsc2VcbiAgICAgIH0pKTtcblxuICAgICAgX3RoaXMudHJ5U2V0U3RhdGUoe1xuICAgICAgICBjaGVja2VkOiAhY2hlY2tlZCxcbiAgICAgICAgaW5kZXRlcm1pbmF0ZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU1vdXNlRG93blwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIGNoZWNrZWQgPSBfdGhpcyRzdGF0ZTIuY2hlY2tlZCxcbiAgICAgICAgICBpbmRldGVybWluYXRlID0gX3RoaXMkc3RhdGUyLmluZGV0ZXJtaW5hdGU7XG5cbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbk1vdXNlRG93bicsIGUsIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7XG4gICAgICAgIGNoZWNrZWQ6ICEhY2hlY2tlZCxcbiAgICAgICAgaW5kZXRlcm1pbmF0ZTogISFpbmRldGVybWluYXRlXG4gICAgICB9KSk7XG5cbiAgICAgIGlmICghZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIF9pbnZva2UoX3RoaXMuaW5wdXRSZWYuY3VycmVudCwgJ2ZvY3VzJyk7XG4gICAgICB9IC8vIEhlYWRzIHVwIVxuICAgICAgLy8gV2UgbmVlZCB0byBjYWxsIFwicHJldmVudERlZmF1bHRcIiB0byBrZWVwIGVsZW1lbnQgZm9jdXNlZC5cblxuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlTW91c2VVcFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHN0YXRlMyA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIGNoZWNrZWQgPSBfdGhpcyRzdGF0ZTMuY2hlY2tlZCxcbiAgICAgICAgICBpbmRldGVybWluYXRlID0gX3RoaXMkc3RhdGUzLmluZGV0ZXJtaW5hdGU7XG4gICAgICBfdGhpcy5pc0NsaWNrRnJvbU1vdXNlID0gdHJ1ZTtcblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uTW91c2VVcCcsIGUsIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7XG4gICAgICAgIGNoZWNrZWQ6ICEhY2hlY2tlZCxcbiAgICAgICAgaW5kZXRlcm1pbmF0ZTogISFpbmRldGVybWluYXRlXG4gICAgICB9KSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0SW5kZXRlcm1pbmF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW5kZXRlcm1pbmF0ZSA9IF90aGlzLnN0YXRlLmluZGV0ZXJtaW5hdGU7XG5cbiAgICAgIF9zZXQoX3RoaXMuaW5wdXRSZWYsICdjdXJyZW50LmluZGV0ZXJtaW5hdGUnLCAhIWluZGV0ZXJtaW5hdGUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENoZWNrYm94LCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc2V0SW5kZXRlcm1pbmF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdGhpcy5zZXRJbmRldGVybWluYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczMuY2xhc3NOYW1lLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMzLmRpc2FibGVkLFxuICAgICAgICAgIGxhYmVsID0gX3RoaXMkcHJvcHMzLmxhYmVsLFxuICAgICAgICAgIGlkID0gX3RoaXMkcHJvcHMzLmlkLFxuICAgICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wczMubmFtZSxcbiAgICAgICAgICByYWRpbyA9IF90aGlzJHByb3BzMy5yYWRpbyxcbiAgICAgICAgICByZWFkT25seSA9IF90aGlzJHByb3BzMy5yZWFkT25seSxcbiAgICAgICAgICBzbGlkZXIgPSBfdGhpcyRwcm9wczMuc2xpZGVyLFxuICAgICAgICAgIHRvZ2dsZSA9IF90aGlzJHByb3BzMy50b2dnbGUsXG4gICAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzMy50eXBlLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcHJvcHMzLnZhbHVlO1xuICAgICAgdmFyIF90aGlzJHN0YXRlNCA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgY2hlY2tlZCA9IF90aGlzJHN0YXRlNC5jaGVja2VkLFxuICAgICAgICAgIGluZGV0ZXJtaW5hdGUgPSBfdGhpcyRzdGF0ZTQuaW5kZXRlcm1pbmF0ZTtcbiAgICAgIHZhciBjbGFzc2VzID0gY3goJ3VpJywgdXNlS2V5T25seShjaGVja2VkLCAnY2hlY2tlZCcpLCB1c2VLZXlPbmx5KGRpc2FibGVkLCAnZGlzYWJsZWQnKSwgdXNlS2V5T25seShpbmRldGVybWluYXRlLCAnaW5kZXRlcm1pbmF0ZScpLCAvLyBhdXRvIGFwcGx5IGZpdHRlZCBjbGFzcyB0byBjb21wYWN0IHdoaXRlIHNwYWNlIHdoZW4gdGhlcmUgaXMgbm8gbGFiZWxcbiAgICAgIC8vIGh0dHBzOi8vc2VtYW50aWMtdWkuY29tL21vZHVsZXMvY2hlY2tib3guaHRtbCNmaXR0ZWRcbiAgICAgIHVzZUtleU9ubHkoX2lzTmlsKGxhYmVsKSwgJ2ZpdHRlZCcpLCB1c2VLZXlPbmx5KHJhZGlvLCAncmFkaW8nKSwgdXNlS2V5T25seShyZWFkT25seSwgJ3JlYWQtb25seScpLCB1c2VLZXlPbmx5KHNsaWRlciwgJ3NsaWRlcicpLCB1c2VLZXlPbmx5KHRvZ2dsZSwgJ3RvZ2dsZScpLCAnY2hlY2tib3gnLCBjbGFzc05hbWUpO1xuICAgICAgdmFyIHVuaGFuZGxlZCA9IGdldFVuaGFuZGxlZFByb3BzKENoZWNrYm94LCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKENoZWNrYm94LCB0aGlzLnByb3BzKTtcblxuICAgICAgdmFyIF9wYXJ0aXRpb25IVE1MUHJvcHMgPSBwYXJ0aXRpb25IVE1MUHJvcHModW5oYW5kbGVkLCB7XG4gICAgICAgIGh0bWxQcm9wczogaHRtbElucHV0QXR0cnNcbiAgICAgIH0pLFxuICAgICAgICAgIF9wYXJ0aXRpb25IVE1MUHJvcHMyID0gX3NsaWNlZFRvQXJyYXkoX3BhcnRpdGlvbkhUTUxQcm9wcywgMiksXG4gICAgICAgICAgaHRtbElucHV0UHJvcHMgPSBfcGFydGl0aW9uSFRNTFByb3BzMlswXSxcbiAgICAgICAgICByZXN0ID0gX3BhcnRpdGlvbkhUTUxQcm9wczJbMV07IC8vIEhlYWRzIFVwIVxuICAgICAgLy8gRG8gbm90IHJlbW92ZSBlbXB0eSBsYWJlbHMsIHRoZXkgYXJlIHJlcXVpcmVkIGJ5IFNVSSBDU1NcblxuXG4gICAgICB2YXIgbGFiZWxFbGVtZW50ID0gY3JlYXRlSFRNTExhYmVsKGxhYmVsLCB7XG4gICAgICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICAgIGh0bWxGb3I6IGlkXG4gICAgICAgIH0sXG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pIHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7XG4gICAgICAgIGh0bWxGb3I6IGlkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuICAgICAgICBvbk1vdXNlVXA6IHRoaXMuaGFuZGxlTW91c2VVcFxuICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVmLCB7XG4gICAgICAgIGlubmVyUmVmOiB0aGlzLmlucHV0UmVmXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgX2V4dGVuZHMoe30sIGh0bWxJbnB1dFByb3BzLCB7XG4gICAgICAgIGNoZWNrZWQ6IGNoZWNrZWQsXG4gICAgICAgIGNsYXNzTmFtZTogXCJoaWRkZW5cIixcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICBpZDogaWQsXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICB0YWJJbmRleDogdGhpcy5jb21wdXRlVGFiSW5kZXgoKSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFJlZiwge1xuICAgICAgICBpbm5lclJlZjogdGhpcy5sYWJlbFJlZlxuICAgICAgfSwgbGFiZWxFbGVtZW50KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENoZWNrYm94O1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoQ2hlY2tib3gsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgdHlwZTogJ2NoZWNrYm94J1xufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShDaGVja2JveCwgXCJhdXRvQ29udHJvbGxlZFByb3BzXCIsIFsnY2hlY2tlZCcsICdpbmRldGVybWluYXRlJ10pO1xuXG5fZGVmaW5lUHJvcGVydHkoQ2hlY2tib3gsIFwiaGFuZGxlZFByb3BzXCIsIFtcImFzXCIsIFwiY2hlY2tlZFwiLCBcImNsYXNzTmFtZVwiLCBcImRlZmF1bHRDaGVja2VkXCIsIFwiZGVmYXVsdEluZGV0ZXJtaW5hdGVcIiwgXCJkaXNhYmxlZFwiLCBcImZpdHRlZFwiLCBcImlkXCIsIFwiaW5kZXRlcm1pbmF0ZVwiLCBcImxhYmVsXCIsIFwibmFtZVwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcIm9uTW91c2VEb3duXCIsIFwib25Nb3VzZVVwXCIsIFwicmFkaW9cIiwgXCJyZWFkT25seVwiLCBcInNsaWRlclwiLCBcInRhYkluZGV4XCIsIFwidG9nZ2xlXCIsIFwidHlwZVwiLCBcInZhbHVlXCJdKTtcblxuZXhwb3J0IHsgQ2hlY2tib3ggYXMgZGVmYXVsdCB9O1xuQ2hlY2tib3gucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogV2hldGhlciBvciBub3QgY2hlY2tib3ggaXMgY2hlY2tlZC4gKi9cbiAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBUaGUgaW5pdGlhbCB2YWx1ZSBvZiBjaGVja2VkLiAqL1xuICBkZWZhdWx0Q2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFdoZXRoZXIgb3Igbm90IGNoZWNrYm94IGlzIGluZGV0ZXJtaW5hdGUuICovXG4gIGRlZmF1bHRJbmRldGVybWluYXRlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBjaGVja2JveCBjYW4gYXBwZWFyIGRpc2FibGVkIGFuZCBiZSB1bmFibGUgdG8gY2hhbmdlIHN0YXRlcyAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFJlbW92ZXMgcGFkZGluZyBmb3IgYSBsYWJlbC4gQXV0byBhcHBsaWVkIHdoZW4gdGhlcmUgaXMgbm8gbGFiZWwuICovXG4gIGZpdHRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgdW5pcXVlIGlkZW50aWZpZXIuICovXG4gIGlkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqIFdoZXRoZXIgb3Igbm90IGNoZWNrYm94IGlzIGluZGV0ZXJtaW5hdGUuICovXG4gIGluZGV0ZXJtaW5hdGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBUaGUgdGV4dCBvZiB0aGUgYXNzb2NpYXRlZCBsYWJlbCBlbGVtZW50LiAqL1xuICBsYWJlbDogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFRoZSBIVE1MIGlucHV0IG5hbWUuICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSB1c2VyIGF0dGVtcHRzIHRvIGNoYW5nZSB0aGUgY2hlY2tlZCBzdGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcyBhbmQgcHJvcG9zZWQgY2hlY2tlZC9pbmRldGVybWluYXRlIHN0YXRlLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgY2hlY2tib3ggb3IgbGFiZWwgaXMgY2xpY2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcyBhbmQgY3VycmVudCBjaGVja2VkL2luZGV0ZXJtaW5hdGUgc3RhdGUuXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHVzZXIgcHJlc3NlcyBkb3duIG9uIHRoZSBtb3VzZS5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcyBhbmQgY3VycmVudCBjaGVja2VkL2luZGV0ZXJtaW5hdGUgc3RhdGUuXG4gICAqL1xuICBvbk1vdXNlRG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSB1c2VyIHJlbGVhc2VzIHRoZSBtb3VzZS5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcyBhbmQgY3VycmVudCBjaGVja2VkL2luZGV0ZXJtaW5hdGUgc3RhdGUuXG4gICAqL1xuICBvbk1vdXNlVXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKiBGb3JtYXQgYXMgYSByYWRpbyBlbGVtZW50LiBUaGlzIG1lYW5zIGl0IGlzIGFuIGV4Y2x1c2l2ZSBvcHRpb24uICovXG4gIHJhZGlvOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW1Byb3BUeXBlcy5ib29sLCBjdXN0b21Qcm9wVHlwZXMuZGlzYWxsb3coWydzbGlkZXInLCAndG9nZ2xlJ10pXSksXG5cbiAgLyoqIEEgY2hlY2tib3ggY2FuIGJlIHJlYWQtb25seSBhbmQgdW5hYmxlIHRvIGNoYW5nZSBzdGF0ZXMuICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogRm9ybWF0IHRvIGVtcGhhc2l6ZSB0aGUgY3VycmVudCBzZWxlY3Rpb24gc3RhdGUuICovXG4gIHNsaWRlcjogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtQcm9wVHlwZXMuYm9vbCwgY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsncmFkaW8nLCAndG9nZ2xlJ10pXSksXG5cbiAgLyoqIEEgY2hlY2tib3ggY2FuIHJlY2VpdmUgZm9jdXMuICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqIEZvcm1hdCB0byBzaG93IGFuIG9uIG9yIG9mZiBjaG9pY2UuICovXG4gIHRvZ2dsZTogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtQcm9wVHlwZXMuYm9vbCwgY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsncmFkaW8nLCAnc2xpZGVyJ10pXSksXG5cbiAgLyoqIEhUTUwgaW5wdXQgdHlwZSwgZWl0aGVyIGNoZWNrYm94IG9yIHJhZGlvLiAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWydjaGVja2JveCcsICdyYWRpbyddKSxcblxuICAvKiogVGhlIEhUTUwgaW5wdXQgdmFsdWUuICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSlcbn0gOiB7fTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBDaGVja2JveCBmcm9tICcuLi8uLi9tb2R1bGVzL0NoZWNrYm94Jztcbi8qKlxuICogQSBSYWRpbyBpcyBzdWdhciBmb3IgPENoZWNrYm94IHJhZGlvIC8+LlxuICogVXNlZnVsIGZvciBleGNsdXNpdmUgZ3JvdXBzIG9mIHNsaWRlcnMgb3IgdG9nZ2xlcy5cbiAqIEBzZWUgQ2hlY2tib3hcbiAqIEBzZWUgRm9ybVxuICovXG5cbmZ1bmN0aW9uIFJhZGlvKHByb3BzKSB7XG4gIHZhciBzbGlkZXIgPSBwcm9wcy5zbGlkZXIsXG4gICAgICB0b2dnbGUgPSBwcm9wcy50b2dnbGUsXG4gICAgICB0eXBlID0gcHJvcHMudHlwZTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhSYWRpbywgcHJvcHMpOyAvLyBjb25zdCBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFJhZGlvLCBwcm9wcylcbiAgLy8gcmFkaW8sIHNsaWRlciwgdG9nZ2xlIGFyZSBleGNsdXNpdmVcbiAgLy8gdXNlIGFuIHVuZGVmaW5lZCByYWRpbyBpZiBzbGlkZXIgb3IgdG9nZ2xlIGFyZSBwcmVzZW50XG5cbiAgdmFyIHJhZGlvID0gIShzbGlkZXIgfHwgdG9nZ2xlKSB8fCB1bmRlZmluZWQ7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrYm94LCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgcmFkaW86IHJhZGlvLFxuICAgIHNsaWRlcjogc2xpZGVyLFxuICAgIHRvZ2dsZTogdG9nZ2xlXG4gIH0pKTtcbn1cblxuUmFkaW8uaGFuZGxlZFByb3BzID0gW1wic2xpZGVyXCIsIFwidG9nZ2xlXCIsIFwidHlwZVwiXTtcblJhZGlvLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEZvcm1hdCB0byBlbXBoYXNpemUgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHN0YXRlLiAqL1xuICBzbGlkZXI6IENoZWNrYm94LnByb3BUeXBlcy5zbGlkZXIsXG5cbiAgLyoqIEZvcm1hdCB0byBzaG93IGFuIG9uIG9yIG9mZiBjaG9pY2UuICovXG4gIHRvZ2dsZTogQ2hlY2tib3gucHJvcFR5cGVzLnRvZ2dsZSxcblxuICAvKiogSFRNTCBpbnB1dCB0eXBlLCBlaXRoZXIgY2hlY2tib3ggb3IgcmFkaW8uICovXG4gIHR5cGU6IENoZWNrYm94LnByb3BUeXBlcy50eXBlXG59IDoge307XG5SYWRpby5kZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6ICdyYWRpbydcbn07XG5leHBvcnQgZGVmYXVsdCBSYWRpbzsiLCJpbXBvcnQgX2lzTmlsIGZyb20gXCJsb2Rhc2gvaXNOaWxcIjtcblxudmFyIGZpdHNNYXhXaWR0aCA9IGZ1bmN0aW9uIGZpdHNNYXhXaWR0aCh3aWR0aCwgbWF4V2lkdGgpIHtcbiAgcmV0dXJuIF9pc05pbChtYXhXaWR0aCkgPyB0cnVlIDogd2lkdGggPD0gbWF4V2lkdGg7XG59O1xuXG52YXIgZml0c01pbldpZHRoID0gZnVuY3Rpb24gZml0c01pbldpZHRoKHdpZHRoLCBtaW5XaWR0aCkge1xuICByZXR1cm4gX2lzTmlsKG1pbldpZHRoKSA/IHRydWUgOiB3aWR0aCA+PSBtaW5XaWR0aDtcbn07XG5cbnZhciBpc1Zpc2libGUgPSBmdW5jdGlvbiBpc1Zpc2libGUod2lkdGgsIF9yZWYpIHtcbiAgdmFyIG1heFdpZHRoID0gX3JlZi5tYXhXaWR0aCxcbiAgICAgIG1pbldpZHRoID0gX3JlZi5taW5XaWR0aDtcbiAgcmV0dXJuIGZpdHNNaW5XaWR0aCh3aWR0aCwgbWluV2lkdGgpICYmIGZpdHNNYXhXaWR0aCh3aWR0aCwgbWF4V2lkdGgpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNWaXNpYmxlOyIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZXZlbnRTdGFjaywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBpc0Jyb3dzZXIgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IGlzVmlzaWJsZSBmcm9tICcuL2xpYi9pc1Zpc2libGUnO1xuLyoqXG4gKiBSZXNwb25zaXZlIGNhbiBjb250cm9sIHZpc2liaWxpdHkgb2YgY29udGVudC5cbiAqL1xuXG52YXIgUmVzcG9uc2l2ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVzcG9uc2l2ZSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVzcG9uc2l2ZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXNwb25zaXZlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFJlc3BvbnNpdmUpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICB2aXNpYmxlOiB0cnVlXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlUmVzaXplXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMudGlja2luZykgcmV0dXJuO1xuICAgICAgX3RoaXMudGlja2luZyA9IHRydWU7XG4gICAgICBfdGhpcy5mcmFtZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZVVwZGF0ZShlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVVwZGF0ZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMudGlja2luZyA9IGZhbHNlO1xuICAgICAgdmFyIHZpc2libGUgPSBfdGhpcy5zdGF0ZS52aXNpYmxlO1xuXG4gICAgICB2YXIgd2lkdGggPSBfaW52b2tlKF90aGlzLnByb3BzLCAnZ2V0V2lkdGgnKTtcblxuICAgICAgdmFyIG5leHRWaXNpYmxlID0gaXNWaXNpYmxlKHdpZHRoLCBfdGhpcy5wcm9wcyk7XG4gICAgICBpZiAodmlzaWJsZSAhPT0gbmV4dFZpc2libGUpIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdmlzaWJsZTogbmV4dFZpc2libGVcbiAgICAgIH0pO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25VcGRhdGUnLCBlLCBfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge1xuICAgICAgICB3aWR0aDogd2lkdGhcbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZXNwb25zaXZlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBmaXJlT25Nb3VudCA9IHRoaXMucHJvcHMuZmlyZU9uTW91bnQ7XG4gICAgICBldmVudFN0YWNrLnN1YigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUsIHtcbiAgICAgICAgdGFyZ2V0OiAnd2luZG93J1xuICAgICAgfSk7XG4gICAgICBpZiAoZmlyZU9uTW91bnQpIHRoaXMuaGFuZGxlVXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgZXZlbnRTdGFjay51bnN1YigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUsIHtcbiAgICAgICAgdGFyZ2V0OiAnd2luZG93J1xuICAgICAgfSk7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmZyYW1lSWQpO1xuICAgIH0gLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEV2ZW50IGhhbmRsZXJzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFJlbmRlclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciB2aXNpYmxlID0gdGhpcy5zdGF0ZS52aXNpYmxlO1xuICAgICAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoUmVzcG9uc2l2ZSwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFJlc3BvbnNpdmUsIHRoaXMucHJvcHMpO1xuICAgICAgaWYgKHZpc2libGUpIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCByZXN0LCBjaGlsZHJlbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzKSB7XG4gICAgICB2YXIgd2lkdGggPSBfaW52b2tlKHByb3BzLCAnZ2V0V2lkdGgnKTtcblxuICAgICAgdmFyIHZpc2libGUgPSBpc1Zpc2libGUod2lkdGgsIHByb3BzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZpc2libGU6IHZpc2libGVcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlc3BvbnNpdmU7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShSZXNwb25zaXZlLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGdldFdpZHRoOiBmdW5jdGlvbiBnZXRXaWR0aCgpIHtcbiAgICByZXR1cm4gaXNCcm93c2VyKCkgPyB3aW5kb3cuaW5uZXJXaWR0aCA6IDA7XG4gIH1cbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoUmVzcG9uc2l2ZSwgXCJvbmx5TW9iaWxlXCIsIHtcbiAgbWluV2lkdGg6IDMyMCxcbiAgbWF4V2lkdGg6IDc2N1xufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShSZXNwb25zaXZlLCBcIm9ubHlUYWJsZXRcIiwge1xuICBtaW5XaWR0aDogNzY4LFxuICBtYXhXaWR0aDogOTkxXG59KTtcblxuX2RlZmluZVByb3BlcnR5KFJlc3BvbnNpdmUsIFwib25seUNvbXB1dGVyXCIsIHtcbiAgbWluV2lkdGg6IDk5MlxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShSZXNwb25zaXZlLCBcIm9ubHlMYXJnZVNjcmVlblwiLCB7XG4gIG1pbldpZHRoOiAxMjAwLFxuICBtYXhXaWR0aDogMTkxOVxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShSZXNwb25zaXZlLCBcIm9ubHlXaWRlc2NyZWVuXCIsIHtcbiAgbWluV2lkdGg6IDE5MjBcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoUmVzcG9uc2l2ZSwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImZpcmVPbk1vdW50XCIsIFwiZ2V0V2lkdGhcIiwgXCJtYXhXaWR0aFwiLCBcIm1pbldpZHRoXCIsIFwib25VcGRhdGVcIl0pO1xuXG5leHBvcnQgeyBSZXNwb25zaXZlIGFzIGRlZmF1bHQgfTtcblJlc3BvbnNpdmUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEZpcmVzIGNhbGxiYWNrcyBpbW1lZGlhdGVseSBhZnRlciBtb3VudC4gKi9cbiAgZmlyZU9uTW91bnQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdG8gZ2V0IHdpZHRoIG9mIHNjcmVlbi4gRGVmYXVsdHMgdG8gdXNpbmcgYHdpbmRvdy5pbm5lcldpZHRoYCB3aGVuIGluIGEgYnJvd3NlcjtcbiAgICogb3RoZXJ3aXNlLCBhc3N1bWVzIGEgd2lkdGggb2YgMC5cbiAgICovXG4gIGdldFdpZHRoOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogVGhlIG1heGltdW0gd2lkdGggYXQgd2hpY2ggY29udGVudCB3aWxsIGJlIGRpc3BsYXllZC4gKi9cbiAgbWF4V2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKiogVGhlIG1pbmltdW0gd2lkdGggYXQgd2hpY2ggY29udGVudCB3aWxsIGJlIGRpc3BsYXllZC4gKi9cbiAgbWluV2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIHVwZGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBUaGUgUmVhY3QgU3ludGhldGljRXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzIGFuZCB0aGUgZXZlbnQgdmFsdWUuXG4gICAqL1xuICBvblVwZGF0ZTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGRyb3Bkb3duIG1lbnUgY2FuIGNvbnRhaW4gZGl2aWRlcnMgdG8gc2VwYXJhdGUgcmVsYXRlZCBjb250ZW50LlxuICovXG5cbmZ1bmN0aW9uIERyb3Bkb3duRGl2aWRlcihwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lO1xuICB2YXIgY2xhc3NlcyA9IGN4KCdkaXZpZGVyJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhEcm9wZG93bkRpdmlkZXIsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoRHJvcGRvd25EaXZpZGVyLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSk7XG59XG5cbkRyb3Bkb3duRGl2aWRlci5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNsYXNzTmFtZVwiXTtcbkRyb3Bkb3duRGl2aWRlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25EaXZpZGVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuZXhwb3J0IHZhciBuYW1lcyA9IFsnYWQnLCAnYW5kb3JyYScsICdhZScsICd1bml0ZWQgYXJhYiBlbWlyYXRlcycsICd1YWUnLCAnYWYnLCAnYWZnaGFuaXN0YW4nLCAnYWcnLCAnYW50aWd1YScsICdhaScsICdhbmd1aWxsYScsICdhbCcsICdhbGJhbmlhJywgJ2FtJywgJ2FybWVuaWEnLCAnYW4nLCAnbmV0aGVybGFuZHMgYW50aWxsZXMnLCAnYW8nLCAnYW5nb2xhJywgJ2FyJywgJ2FyZ2VudGluYScsICdhcycsICdhbWVyaWNhbiBzYW1vYScsICdhdCcsICdhdXN0cmlhJywgJ2F1JywgJ2F1c3RyYWxpYScsICdhdycsICdhcnViYScsICdheCcsICdhbGFuZCBpc2xhbmRzJywgJ2F6JywgJ2F6ZXJiYWlqYW4nLCAnYmEnLCAnYm9zbmlhJywgJ2JiJywgJ2JhcmJhZG9zJywgJ2JkJywgJ2JhbmdsYWRlc2gnLCAnYmUnLCAnYmVsZ2l1bScsICdiZicsICdidXJraW5hIGZhc28nLCAnYmcnLCAnYnVsZ2FyaWEnLCAnYmgnLCAnYmFocmFpbicsICdiaScsICdidXJ1bmRpJywgJ2JqJywgJ2JlbmluJywgJ2JtJywgJ2Jlcm11ZGEnLCAnYm4nLCAnYnJ1bmVpJywgJ2JvJywgJ2JvbGl2aWEnLCAnYnInLCAnYnJhemlsJywgJ2JzJywgJ2JhaGFtYXMnLCAnYnQnLCAnYmh1dGFuJywgJ2J2JywgJ2JvdXZldCBpc2xhbmQnLCAnYncnLCAnYm90c3dhbmEnLCAnYnknLCAnYmVsYXJ1cycsICdieicsICdiZWxpemUnLCAnY2EnLCAnY2FuYWRhJywgJ2NjJywgJ2NvY29zIGlzbGFuZHMnLCAnY2QnLCAnY29uZ28nLCAnY2YnLCAnY2VudHJhbCBhZnJpY2FuIHJlcHVibGljJywgJ2NnJywgJ2NvbmdvIGJyYXp6YXZpbGxlJywgJ2NoJywgJ3N3aXR6ZXJsYW5kJywgJ2NpJywgJ2NvdGUgZGl2b2lyZScsICdjaycsICdjb29rIGlzbGFuZHMnLCAnY2wnLCAnY2hpbGUnLCAnY20nLCAnY2FtZXJvb24nLCAnY24nLCAnY2hpbmEnLCAnY28nLCAnY29sb21iaWEnLCAnY3InLCAnY29zdGEgcmljYScsICdjcycsICdjdScsICdjdWJhJywgJ2N2JywgJ2NhcGUgdmVyZGUnLCAnY3gnLCAnY2hyaXN0bWFzIGlzbGFuZCcsICdjeScsICdjeXBydXMnLCAnY3onLCAnY3plY2ggcmVwdWJsaWMnLCAnZGUnLCAnZ2VybWFueScsICdkaicsICdkamlib3V0aScsICdkaycsICdkZW5tYXJrJywgJ2RtJywgJ2RvbWluaWNhJywgJ2RvJywgJ2RvbWluaWNhbiByZXB1YmxpYycsICdkeicsICdhbGdlcmlhJywgJ2VjJywgJ2VjdWFkb3InLCAnZWUnLCAnZXN0b25pYScsICdlZycsICdlZ3lwdCcsICdlaCcsICd3ZXN0ZXJuIHNhaGFyYScsICdlcicsICdlcml0cmVhJywgJ2VzJywgJ3NwYWluJywgJ2V0JywgJ2V0aGlvcGlhJywgJ2V1JywgJ2V1cm9wZWFuIHVuaW9uJywgJ2ZpJywgJ2ZpbmxhbmQnLCAnZmonLCAnZmlqaScsICdmaycsICdmYWxrbGFuZCBpc2xhbmRzJywgJ2ZtJywgJ21pY3JvbmVzaWEnLCAnZm8nLCAnZmFyb2UgaXNsYW5kcycsICdmcicsICdmcmFuY2UnLCAnZ2EnLCAnZ2Fib24nLCAnZ2InLCAndWsnLCAndW5pdGVkIGtpbmdkb20nLCAnZ2QnLCAnZ3JlbmFkYScsICdnZScsICdnZW9yZ2lhJywgJ2dmJywgJ2ZyZW5jaCBndWlhbmEnLCAnZ2gnLCAnZ2hhbmEnLCAnZ2knLCAnZ2licmFsdGFyJywgJ2dsJywgJ2dyZWVubGFuZCcsICdnbScsICdnYW1iaWEnLCAnZ24nLCAnZ3VpbmVhJywgJ2dwJywgJ2d1YWRlbG91cGUnLCAnZ3EnLCAnZXF1YXRvcmlhbCBndWluZWEnLCAnZ3InLCAnZ3JlZWNlJywgJ2dzJywgJ3NhbmR3aWNoIGlzbGFuZHMnLCAnZ3QnLCAnZ3VhdGVtYWxhJywgJ2d1JywgJ2d1YW0nLCAnZ3cnLCAnZ3VpbmVhLWJpc3NhdScsICdneScsICdndXlhbmEnLCAnaGsnLCAnaG9uZyBrb25nJywgJ2htJywgJ2hlYXJkIGlzbGFuZCcsICdobicsICdob25kdXJhcycsICdocicsICdjcm9hdGlhJywgJ2h0JywgJ2hhaXRpJywgJ2h1JywgJ2h1bmdhcnknLCAnaWQnLCAnaW5kb25lc2lhJywgJ2llJywgJ2lyZWxhbmQnLCAnaWwnLCAnaXNyYWVsJywgJ2luJywgJ2luZGlhJywgJ2lvJywgJ2luZGlhbiBvY2VhbiB0ZXJyaXRvcnknLCAnaXEnLCAnaXJhcScsICdpcicsICdpcmFuJywgJ2lzJywgJ2ljZWxhbmQnLCAnaXQnLCAnaXRhbHknLCAnam0nLCAnamFtYWljYScsICdqbycsICdqb3JkYW4nLCAnanAnLCAnamFwYW4nLCAna2UnLCAna2VueWEnLCAna2cnLCAna3lyZ3l6c3RhbicsICdraCcsICdjYW1ib2RpYScsICdraScsICdraXJpYmF0aScsICdrbScsICdjb21vcm9zJywgJ2tuJywgJ3NhaW50IGtpdHRzIGFuZCBuZXZpcycsICdrcCcsICdub3J0aCBrb3JlYScsICdrcicsICdzb3V0aCBrb3JlYScsICdrdycsICdrdXdhaXQnLCAna3knLCAnY2F5bWFuIGlzbGFuZHMnLCAna3onLCAna2F6YWtoc3RhbicsICdsYScsICdsYW9zJywgJ2xiJywgJ2xlYmFub24nLCAnbGMnLCAnc2FpbnQgbHVjaWEnLCAnbGknLCAnbGllY2h0ZW5zdGVpbicsICdsaycsICdzcmkgbGFua2EnLCAnbHInLCAnbGliZXJpYScsICdscycsICdsZXNvdGhvJywgJ2x0JywgJ2xpdGh1YW5pYScsICdsdScsICdsdXhlbWJvdXJnJywgJ2x2JywgJ2xhdHZpYScsICdseScsICdsaWJ5YScsICdtYScsICdtb3JvY2NvJywgJ21jJywgJ21vbmFjbycsICdtZCcsICdtb2xkb3ZhJywgJ21lJywgJ21vbnRlbmVncm8nLCAnbWcnLCAnbWFkYWdhc2NhcicsICdtaCcsICdtYXJzaGFsbCBpc2xhbmRzJywgJ21rJywgJ21hY2Vkb25pYScsICdtbCcsICdtYWxpJywgJ21tJywgJ215YW5tYXInLCAnYnVybWEnLCAnbW4nLCAnbW9uZ29saWEnLCAnbW8nLCAnbWFjYXUnLCAnbXAnLCAnbm9ydGhlcm4gbWFyaWFuYSBpc2xhbmRzJywgJ21xJywgJ21hcnRpbmlxdWUnLCAnbXInLCAnbWF1cml0YW5pYScsICdtcycsICdtb250c2VycmF0JywgJ210JywgJ21hbHRhJywgJ211JywgJ21hdXJpdGl1cycsICdtdicsICdtYWxkaXZlcycsICdtdycsICdtYWxhd2knLCAnbXgnLCAnbWV4aWNvJywgJ215JywgJ21hbGF5c2lhJywgJ216JywgJ21vemFtYmlxdWUnLCAnbmEnLCAnbmFtaWJpYScsICduYycsICduZXcgY2FsZWRvbmlhJywgJ25lJywgJ25pZ2VyJywgJ25mJywgJ25vcmZvbGsgaXNsYW5kJywgJ25nJywgJ25pZ2VyaWEnLCAnbmknLCAnbmljYXJhZ3VhJywgJ25sJywgJ25ldGhlcmxhbmRzJywgJ25vJywgJ25vcndheScsICducCcsICduZXBhbCcsICducicsICduYXVydScsICdudScsICduaXVlJywgJ256JywgJ25ldyB6ZWFsYW5kJywgJ29tJywgJ29tYW4nLCAncGEnLCAncGFuYW1hJywgJ3BlJywgJ3BlcnUnLCAncGYnLCAnZnJlbmNoIHBvbHluZXNpYScsICdwZycsICduZXcgZ3VpbmVhJywgJ3BoJywgJ3BoaWxpcHBpbmVzJywgJ3BrJywgJ3Bha2lzdGFuJywgJ3BsJywgJ3BvbGFuZCcsICdwbScsICdzYWludCBwaWVycmUnLCAncG4nLCAncGl0Y2Fpcm4gaXNsYW5kcycsICdwcicsICdwdWVydG8gcmljbycsICdwcycsICdwYWxlc3RpbmUnLCAncHQnLCAncG9ydHVnYWwnLCAncHcnLCAncGFsYXUnLCAncHknLCAncGFyYWd1YXknLCAncWEnLCAncWF0YXInLCAncmUnLCAncmV1bmlvbicsICdybycsICdyb21hbmlhJywgJ3JzJywgJ3NlcmJpYScsICdydScsICdydXNzaWEnLCAncncnLCAncndhbmRhJywgJ3NhJywgJ3NhdWRpIGFyYWJpYScsICdzYicsICdzb2xvbW9uIGlzbGFuZHMnLCAnc2MnLCAnc2V5Y2hlbGxlcycsICdnYiBzY3QnLCAnc2NvdGxhbmQnLCAnc2QnLCAnc3VkYW4nLCAnc2UnLCAnc3dlZGVuJywgJ3NnJywgJ3NpbmdhcG9yZScsICdzaCcsICdzYWludCBoZWxlbmEnLCAnc2knLCAnc2xvdmVuaWEnLCAnc2onLCAnc3ZhbGJhcmQnLCAnamFuIG1heWVuJywgJ3NrJywgJ3Nsb3Zha2lhJywgJ3NsJywgJ3NpZXJyYSBsZW9uZScsICdzbScsICdzYW4gbWFyaW5vJywgJ3NuJywgJ3NlbmVnYWwnLCAnc28nLCAnc29tYWxpYScsICdzcicsICdzdXJpbmFtZScsICdzdCcsICdzYW8gdG9tZScsICdzdicsICdlbCBzYWx2YWRvcicsICdzeScsICdzeXJpYScsICdzeicsICdzd2F6aWxhbmQnLCAndGMnLCAnY2FpY29zIGlzbGFuZHMnLCAndGQnLCAnY2hhZCcsICd0ZicsICdmcmVuY2ggdGVycml0b3JpZXMnLCAndGcnLCAndG9nbycsICd0aCcsICd0aGFpbGFuZCcsICd0aicsICd0YWppa2lzdGFuJywgJ3RrJywgJ3Rva2VsYXUnLCAndGwnLCAndGltb3JsZXN0ZScsICd0bScsICd0dXJrbWVuaXN0YW4nLCAndG4nLCAndHVuaXNpYScsICd0bycsICd0b25nYScsICd0cicsICd0dXJrZXknLCAndHQnLCAndHJpbmlkYWQnLCAndHYnLCAndHV2YWx1JywgJ3R3JywgJ3RhaXdhbicsICd0eicsICd0YW56YW5pYScsICd1YScsICd1a3JhaW5lJywgJ3VnJywgJ3VnYW5kYScsICd1bScsICd1cyBtaW5vciBpc2xhbmRzJywgJ3VzJywgJ2FtZXJpY2EnLCAndW5pdGVkIHN0YXRlcycsICd1eScsICd1cnVndWF5JywgJ3V6JywgJ3V6YmVraXN0YW4nLCAndmEnLCAndmF0aWNhbiBjaXR5JywgJ3ZjJywgJ3NhaW50IHZpbmNlbnQnLCAndmUnLCAndmVuZXp1ZWxhJywgJ3ZnJywgJ2JyaXRpc2ggdmlyZ2luIGlzbGFuZHMnLCAndmknLCAndXMgdmlyZ2luIGlzbGFuZHMnLCAndm4nLCAndmlldG5hbScsICd2dScsICd2YW51YXR1JywgJ2diIHdscycsICd3YWxlcycsICd3ZicsICd3YWxsaXMgYW5kIGZ1dHVuYScsICd3cycsICdzYW1vYScsICd5ZScsICd5ZW1lbicsICd5dCcsICdtYXlvdHRlJywgJ3phJywgJ3NvdXRoIGFmcmljYScsICd6bScsICd6YW1iaWEnLCAnencnLCAnemltYmFid2UnXTtcbi8qKlxuICogQSBmbGFnIGlzIGlzIHVzZWQgdG8gcmVwcmVzZW50IGEgcG9saXRpY2FsIHN0YXRlLlxuICovXG5cbnZhciBGbGFnID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRmxhZywgX1B1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZsYWcoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZsYWcpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihGbGFnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGbGFnLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzLm5hbWU7XG4gICAgICB2YXIgY2xhc3NlcyA9IGN4KG5hbWUsICdmbGFnJywgY2xhc3NOYW1lKTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoRmxhZywgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShGbGFnLCB0aGlzLnByb3BzKTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRmxhZztcbn0oUHVyZUNvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShGbGFnLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGFzOiAnaSdcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoRmxhZywgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYXNcIiwgXCJjbGFzc05hbWVcIiwgXCJuYW1lXCJdKTtcblxuRmxhZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogRmxhZyBuYW1lLCBjYW4gdXNlIHRoZSB0d28gZGlnaXQgY291bnRyeSBjb2RlLCB0aGUgZnVsbCBuYW1lLCBvciBhIGNvbW1vbiBhbGlhcy4gKi9cbiAgbmFtZTogY3VzdG9tUHJvcFR5cGVzLnN1Z2dlc3QobmFtZXMpXG59IDoge307XG5GbGFnLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoRmxhZywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogdmFsdWVcbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgRmxhZzsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9pc05pbCBmcm9tIFwibG9kYXNoL2lzTmlsXCI7XG5pbXBvcnQgX2ludm9rZSBmcm9tIFwibG9kYXNoL2ludm9rZVwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmQsIGNyZWF0ZVNob3J0aGFuZEZhY3RvcnksIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBGbGFnIGZyb20gJy4uLy4uL2VsZW1lbnRzL0ZsYWcnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vLi4vZWxlbWVudHMvSWNvbic7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vLi4vZWxlbWVudHMvSW1hZ2UnO1xuaW1wb3J0IExhYmVsIGZyb20gJy4uLy4uL2VsZW1lbnRzL0xhYmVsJztcbi8qKlxuICogQW4gaXRlbSBzdWItY29tcG9uZW50IGZvciBEcm9wZG93biBjb21wb25lbnQuXG4gKi9cblxudmFyIERyb3Bkb3duSXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRHJvcGRvd25JdGVtLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcm9wZG93bkl0ZW0oKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJvcGRvd25JdGVtKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKERyb3Bkb3duSXRlbSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25DbGljaycsIGUsIF90aGlzLnByb3BzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEcm9wZG93bkl0ZW0sIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzLmFjdGl2ZSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjb250ZW50ID0gX3RoaXMkcHJvcHMuY29udGVudCxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGRlc2NyaXB0aW9uID0gX3RoaXMkcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgZmxhZyA9IF90aGlzJHByb3BzLmZsYWcsXG4gICAgICAgICAgaWNvbiA9IF90aGlzJHByb3BzLmljb24sXG4gICAgICAgICAgaW1hZ2UgPSBfdGhpcyRwcm9wcy5pbWFnZSxcbiAgICAgICAgICBsYWJlbCA9IF90aGlzJHByb3BzLmxhYmVsLFxuICAgICAgICAgIHNlbGVjdGVkID0gX3RoaXMkcHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICAgdGV4dCA9IF90aGlzJHByb3BzLnRleHQ7XG4gICAgICB2YXIgY2xhc3NlcyA9IGN4KHVzZUtleU9ubHkoYWN0aXZlLCAnYWN0aXZlJyksIHVzZUtleU9ubHkoZGlzYWJsZWQsICdkaXNhYmxlZCcpLCB1c2VLZXlPbmx5KHNlbGVjdGVkLCAnc2VsZWN0ZWQnKSwgJ2l0ZW0nLCBjbGFzc05hbWUpOyAvLyBhZGQgZGVmYXVsdCBkcm9wZG93biBpY29uIGlmIGl0ZW0gY29udGFpbnMgYW5vdGhlciBtZW51XG5cbiAgICAgIHZhciBpY29uTmFtZSA9IF9pc05pbChpY29uKSA/IGNoaWxkcmVuVXRpbHMuc29tZUJ5VHlwZShjaGlsZHJlbiwgJ0Ryb3Bkb3duTWVudScpICYmICdkcm9wZG93bicgOiBpY29uO1xuICAgICAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhEcm9wZG93bkl0ZW0sIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoRHJvcGRvd25JdGVtLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBhcmlhT3B0aW9ucyA9IHtcbiAgICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICAgICdhcmlhLWRpc2FibGVkJzogZGlzYWJsZWQsXG4gICAgICAgICdhcmlhLWNoZWNrZWQnOiBhY3RpdmUsXG4gICAgICAgICdhcmlhLXNlbGVjdGVkJzogc2VsZWN0ZWRcbiAgICAgIH07XG5cbiAgICAgIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCBhcmlhT3B0aW9ucywge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrXG4gICAgICAgIH0pLCBjaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIHZhciBmbGFnRWxlbWVudCA9IEZsYWcuY3JlYXRlKGZsYWcsIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSk7XG4gICAgICB2YXIgaWNvbkVsZW1lbnQgPSBJY29uLmNyZWF0ZShpY29uTmFtZSwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHZhciBpbWFnZUVsZW1lbnQgPSBJbWFnZS5jcmVhdGUoaW1hZ2UsIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSk7XG4gICAgICB2YXIgbGFiZWxFbGVtZW50ID0gTGFiZWwuY3JlYXRlKGxhYmVsLCB7XG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgdmFyIGRlc2NyaXB0aW9uRWxlbWVudCA9IGNyZWF0ZVNob3J0aGFuZCgnc3BhbicsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjaGlsZHJlbjogdmFsXG4gICAgICAgIH07XG4gICAgICB9LCBkZXNjcmlwdGlvbiwge1xuICAgICAgICBkZWZhdWx0UHJvcHM6IHtcbiAgICAgICAgICBjbGFzc05hbWU6ICdkZXNjcmlwdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSk7XG4gICAgICB2YXIgdGV4dEVsZW1lbnQgPSBjcmVhdGVTaG9ydGhhbmQoJ3NwYW4nLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hpbGRyZW46IHZhbFxuICAgICAgICB9O1xuICAgICAgfSwgY2hpbGRyZW5VdGlscy5pc05pbChjb250ZW50KSA/IHRleHQgOiBjb250ZW50LCB7XG4gICAgICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ3RleHQnXG4gICAgICAgIH0sXG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCBhcmlhT3B0aW9ucywge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICAgIH0pLCBpbWFnZUVsZW1lbnQsIGljb25FbGVtZW50LCBmbGFnRWxlbWVudCwgbGFiZWxFbGVtZW50LCBkZXNjcmlwdGlvbkVsZW1lbnQsIHRleHRFbGVtZW50KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRHJvcGRvd25JdGVtO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoRHJvcGRvd25JdGVtLCBcImhhbmRsZWRQcm9wc1wiLCBbXCJhY3RpdmVcIiwgXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiLCBcImRlc2NyaXB0aW9uXCIsIFwiZGlzYWJsZWRcIiwgXCJmbGFnXCIsIFwiaWNvblwiLCBcImltYWdlXCIsIFwibGFiZWxcIiwgXCJvbkNsaWNrXCIsIFwic2VsZWN0ZWRcIiwgXCJ0ZXh0XCIsIFwidmFsdWVcIl0pO1xuXG5Ecm9wZG93bkl0ZW0ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogU3R5bGUgYXMgdGhlIGN1cnJlbnRseSBjaG9zZW4gaXRlbS4gKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIEFkZGl0aW9uYWwgdGV4dCB3aXRoIGxlc3MgZW1waGFzaXMuICovXG4gIGRlc2NyaXB0aW9uOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogQSBkcm9wZG93biBpdGVtIGNhbiBiZSBkaXNhYmxlZC4gKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEZsYWcuICovXG4gIGZsYWc6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEljb24uICovXG4gIGljb246IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEltYWdlLiAqL1xuICBpbWFnZTogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgTGFiZWwuICovXG4gIGxhYmVsOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGNsaWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBpdGVtIGN1cnJlbnRseSBzZWxlY3RlZCBieSBrZXlib2FyZCBzaG9ydGN1dC5cbiAgICogVGhpcyBpcyBub3QgdGhlIGFjdGl2ZSBpdGVtLlxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBEaXNwbGF5IHRleHQuICovXG4gIHRleHQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBTdG9yZWQgdmFsdWUuICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDoge307XG5Ecm9wZG93bkl0ZW0uY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShEcm9wZG93bkl0ZW0sIGZ1bmN0aW9uIChvcHRzKSB7XG4gIHJldHVybiBvcHRzO1xufSk7XG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bkl0ZW07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vLi4vZWxlbWVudHMvSWNvbic7XG4vKipcbiAqIEEgZHJvcGRvd24gbWVudSBjYW4gY29udGFpbiBhIGhlYWRlci5cbiAqL1xuXG5mdW5jdGlvbiBEcm9wZG93bkhlYWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgaWNvbiA9IHByb3BzLmljb247XG4gIHZhciBjbGFzc2VzID0gY3goJ2hlYWRlcicsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoRHJvcGRvd25IZWFkZXIsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoRHJvcGRvd25IZWFkZXIsIHByb3BzKTtcblxuICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBJY29uLmNyZWF0ZShpY29uLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSwgY29udGVudCk7XG59XG5cbkRyb3Bkb3duSGVhZGVyLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiaWNvblwiXTtcbkRyb3Bkb3duSGVhZGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikgKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgSWNvbi4gKi9cbiAgaWNvbjogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmRcbn0gOiB7fTtcbkRyb3Bkb3duSGVhZGVyLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoRHJvcGRvd25IZWFkZXIsIGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiB7XG4gICAgY29udGVudDogY29udGVudFxuICB9O1xufSk7XG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bkhlYWRlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgdXNlS2V5T25seSB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgZHJvcGRvd24gbWVudSBjYW4gY29udGFpbiBhIG1lbnUuXG4gKi9cblxuZnVuY3Rpb24gRHJvcGRvd25NZW51KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICBkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIHNjcm9sbGluZyA9IHByb3BzLnNjcm9sbGluZztcbiAgdmFyIGNsYXNzZXMgPSBjeChkaXJlY3Rpb24sIHVzZUtleU9ubHkob3BlbiwgJ3Zpc2libGUnKSwgdXNlS2V5T25seShzY3JvbGxpbmcsICdzY3JvbGxpbmcnKSwgJ21lbnUgdHJhbnNpdGlvbicsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoRHJvcGRvd25NZW51LCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKERyb3Bkb3duTWVudSwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuRHJvcGRvd25NZW51LmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiZGlyZWN0aW9uXCIsIFwib3BlblwiLCBcInNjcm9sbGluZ1wiXTtcbkRyb3Bkb3duTWVudS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBkcm9wZG93biBtZW51IGNhbiBvcGVuIHRvIHRoZSBsZWZ0IG9yIHRvIHRoZSByaWdodC4gKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ3JpZ2h0J10pLFxuXG4gIC8qKiBXaGV0aGVyIG9yIG5vdCB0aGUgZHJvcGRvd24gbWVudSBpcyBkaXNwbGF5ZWQuICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGRyb3Bkb3duIG1lbnUgY2FuIHNjcm9sbC4gKi9cbiAgc2Nyb2xsaW5nOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25NZW51OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgX2dldCBmcm9tIFwibG9kYXNoL2dldFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgc2VhcmNoIGl0ZW0gc3ViLWNvbXBvbmVudCBmb3IgRHJvcGRvd24gY29tcG9uZW50LlxuICovXG5cbnZhciBEcm9wZG93blNlYXJjaElucHV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEcm9wZG93blNlYXJjaElucHV0LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcm9wZG93blNlYXJjaElucHV0KCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyb3Bkb3duU2VhcmNoSW5wdXQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoRHJvcGRvd25TZWFyY2hJbnB1dCkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNoYW5nZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIHZhbHVlID0gX2dldChlLCAndGFyZ2V0LnZhbHVlJyk7XG5cbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkNoYW5nZScsIGUsIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERyb3Bkb3duU2VhcmNoSW5wdXQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGF1dG9Db21wbGV0ZSA9IF90aGlzJHByb3BzLmF1dG9Db21wbGV0ZSxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgdGFiSW5kZXggPSBfdGhpcyRwcm9wcy50YWJJbmRleCxcbiAgICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlO1xuICAgICAgdmFyIGNsYXNzZXMgPSBjeCgnc2VhcmNoJywgY2xhc3NOYW1lKTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoRHJvcGRvd25TZWFyY2hJbnB1dCwgdGhpcy5wcm9wcyk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgIFwiYXJpYS1hdXRvY29tcGxldGVcIjogXCJsaXN0XCIsXG4gICAgICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgdGFiSW5kZXg6IHRhYkluZGV4LFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRHJvcGRvd25TZWFyY2hJbnB1dDtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KERyb3Bkb3duU2VhcmNoSW5wdXQsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgYXV0b0NvbXBsZXRlOiAnb2ZmJyxcbiAgdHlwZTogJ3RleHQnXG59KTtcblxuX2RlZmluZVByb3BlcnR5KERyb3Bkb3duU2VhcmNoSW5wdXQsIFwiaGFuZGxlZFByb3BzXCIsIFtcImFzXCIsIFwiYXV0b0NvbXBsZXRlXCIsIFwiY2xhc3NOYW1lXCIsIFwidGFiSW5kZXhcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIl0pO1xuXG5Ecm9wZG93blNlYXJjaElucHV0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEFuIGlucHV0IGNhbiBoYXZlIHRoZSBhdXRvIGNvbXBsZXRlLiAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBBbiBpbnB1dCBjYW4gcmVjZWl2ZSBmb2N1cy4gKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKiogVGhlIEhUTUwgaW5wdXQgdHlwZS4gKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU3RvcmVkIHZhbHVlLiAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDoge307XG5Ecm9wZG93blNlYXJjaElucHV0LmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoRHJvcGRvd25TZWFyY2hJbnB1dCwgZnVuY3Rpb24gKHR5cGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlXG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duU2VhcmNoSW5wdXQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9nZXQyIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9jb21wYWN0IGZyb20gXCJsb2Rhc2gvY29tcGFjdFwiO1xuaW1wb3J0IF9tYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcbmltcG9ydCBfZXZlcnkgZnJvbSBcImxvZGFzaC9ldmVyeVwiO1xuaW1wb3J0IF93aXRob3V0IGZyb20gXCJsb2Rhc2gvd2l0aG91dFwiO1xuaW1wb3J0IF9maW5kSW5kZXggZnJvbSBcImxvZGFzaC9maW5kSW5kZXhcIjtcbmltcG9ydCBfZmluZCBmcm9tIFwibG9kYXNoL2ZpbmRcIjtcbmltcG9ydCBfcmVkdWNlIGZyb20gXCJsb2Rhc2gvcmVkdWNlXCI7XG5pbXBvcnQgX3NvbWUgZnJvbSBcImxvZGFzaC9zb21lXCI7XG5pbXBvcnQgX2VzY2FwZVJlZ0V4cCBmcm9tIFwibG9kYXNoL2VzY2FwZVJlZ0V4cFwiO1xuaW1wb3J0IF9kZWJ1cnIgZnJvbSBcImxvZGFzaC9kZWJ1cnJcIjtcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tIFwibG9kYXNoL2lzRnVuY3Rpb25cIjtcbmltcG9ydCBfZmlsdGVyIGZyb20gXCJsb2Rhc2gvZmlsdGVyXCI7XG5pbXBvcnQgX3BpY2sgZnJvbSBcImxvZGFzaC9waWNrXCI7XG5pbXBvcnQgX2Ryb3BSaWdodCBmcm9tIFwibG9kYXNoL2Ryb3BSaWdodFwiO1xuaW1wb3J0IF9pc0VtcHR5IGZyb20gXCJsb2Rhc2gvaXNFbXB0eVwiO1xuaW1wb3J0IF9zaXplIGZyb20gXCJsb2Rhc2gvc2l6ZVwiO1xuaW1wb3J0IF9kaWZmZXJlbmNlIGZyb20gXCJsb2Rhc2gvZGlmZmVyZW5jZVwiO1xuaW1wb3J0IF91bmlvbiBmcm9tIFwibG9kYXNoL3VuaW9uXCI7XG5pbXBvcnQgX2dldCBmcm9tIFwibG9kYXNoL2dldFwiO1xuaW1wb3J0IF9pbmNsdWRlcyBmcm9tIFwibG9kYXNoL2luY2x1ZGVzXCI7XG5pbXBvcnQgX25vb3AgZnJvbSBcImxvZGFzaC9ub29wXCI7XG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gXCJsb2Rhc2gvaXNVbmRlZmluZWRcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgX2lzRXF1YWwgZnJvbSBcImxvZGFzaC9pc0VxdWFsXCI7XG5pbXBvcnQgX2hhcyBmcm9tIFwibG9kYXNoL2hhc1wiO1xuaW1wb3J0IF9pc05pbCBmcm9tIFwibG9kYXNoL2lzTmlsXCI7XG5pbXBvcnQgRXZlbnRTdGFjayBmcm9tICdAc2VtYW50aWMtdWktcmVhY3QvZXZlbnQtc3RhY2snO1xuaW1wb3J0IHsgUmVmIH0gZnJvbSAnQHN0YXJkdXN0LXVpL3JlYWN0LWNvbXBvbmVudC1yZWYnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGtleWJvYXJkS2V5IGZyb20gJ2tleWJvYXJkLWtleSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIGNyZWF0ZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnc2hhbGxvd2VxdWFsJztcbmltcG9ydCB7IEF1dG9Db250cm9sbGVkQ29tcG9uZW50IGFzIENvbXBvbmVudCwgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBkb2VzTm9kZUNvbnRhaW5DbGljaywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBvYmplY3REaWZmLCB1c2VLZXlPbmx5LCB1c2VLZXlPclZhbHVlQW5kS2V5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL2VsZW1lbnRzL0ljb24nO1xuaW1wb3J0IExhYmVsIGZyb20gJy4uLy4uL2VsZW1lbnRzL0xhYmVsJztcbmltcG9ydCBEcm9wZG93bkRpdmlkZXIgZnJvbSAnLi9Ecm9wZG93bkRpdmlkZXInO1xuaW1wb3J0IERyb3Bkb3duSXRlbSBmcm9tICcuL0Ryb3Bkb3duSXRlbSc7XG5pbXBvcnQgRHJvcGRvd25IZWFkZXIgZnJvbSAnLi9Ecm9wZG93bkhlYWRlcic7XG5pbXBvcnQgRHJvcGRvd25NZW51IGZyb20gJy4vRHJvcGRvd25NZW51JztcbmltcG9ydCBEcm9wZG93blNlYXJjaElucHV0IGZyb20gJy4vRHJvcGRvd25TZWFyY2hJbnB1dCc7XG5cbnZhciBnZXRLZXlPclZhbHVlID0gZnVuY3Rpb24gZ2V0S2V5T3JWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHJldHVybiBfaXNOaWwoa2V5KSA/IHZhbHVlIDoga2V5O1xufTtcbi8qKlxuICogQSBkcm9wZG93biBhbGxvd3MgYSB1c2VyIHRvIHNlbGVjdCBhIHZhbHVlIGZyb20gYSBzZXJpZXMgb2Ygb3B0aW9ucy5cbiAqIEBzZWUgRm9ybVxuICogQHNlZSBTZWxlY3RcbiAqIEBzZWUgTWVudVxuICovXG5cblxudmFyIERyb3Bkb3duID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEcm9wZG93biwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd24oKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJvcGRvd24pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoRHJvcGRvd24pKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZWFyY2hSZWZcIiwgY3JlYXRlUmVmKCkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNpemVyUmVmXCIsIGNyZWF0ZVJlZigpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZWZcIiwgY3JlYXRlUmVmKCkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNoYW5nZVwiLCBmdW5jdGlvbiAoZSwgdmFsdWUpIHtcbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkNoYW5nZScsIGUsIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNsb3NlT25DaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNsb3NlT25DaGFuZ2UgPSBfdGhpcyRwcm9wcy5jbG9zZU9uQ2hhbmdlLFxuICAgICAgICAgIG11bHRpcGxlID0gX3RoaXMkcHJvcHMubXVsdGlwbGU7XG4gICAgICB2YXIgc2hvdWxkQ2xvc2UgPSBfaXNVbmRlZmluZWQoY2xvc2VPbkNoYW5nZSkgPyAhbXVsdGlwbGUgOiBjbG9zZU9uQ2hhbmdlO1xuICAgICAgaWYgKHNob3VsZENsb3NlKSBfdGhpcy5jbG9zZShlLCBfbm9vcCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2xvc2VPbkVzY2FwZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5jbG9zZU9uRXNjYXBlKSByZXR1cm47XG4gICAgICBpZiAoa2V5Ym9hcmRLZXkuZ2V0Q29kZShlKSAhPT0ga2V5Ym9hcmRLZXkuRXNjYXBlKSByZXR1cm47XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIF90aGlzLmNsb3NlKGUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm1vdmVTZWxlY3Rpb25PbktleURvd25cIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfbW92ZXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBtdWx0aXBsZSA9IF90aGlzJHByb3BzMi5tdWx0aXBsZSxcbiAgICAgICAgICBzZWxlY3RPbk5hdmlnYXRpb24gPSBfdGhpcyRwcm9wczIuc2VsZWN0T25OYXZpZ2F0aW9uO1xuICAgICAgdmFyIG1vdmVzID0gKF9tb3ZlcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX21vdmVzLCBrZXlib2FyZEtleS5BcnJvd0Rvd24sIDEpLCBfZGVmaW5lUHJvcGVydHkoX21vdmVzLCBrZXlib2FyZEtleS5BcnJvd1VwLCAtMSksIF9tb3Zlcyk7XG4gICAgICB2YXIgbW92ZSA9IG1vdmVzW2tleWJvYXJkS2V5LmdldENvZGUoZSldO1xuICAgICAgaWYgKG1vdmUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBfdGhpcy5tb3ZlU2VsZWN0aW9uQnkobW92ZSk7XG5cbiAgICAgIGlmICghbXVsdGlwbGUgJiYgc2VsZWN0T25OYXZpZ2F0aW9uKSBfdGhpcy5tYWtlU2VsZWN0ZWRJdGVtQWN0aXZlKGUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9wZW5PblNwYWNlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoa2V5Ym9hcmRLZXkuZ2V0Q29kZShlKSAhPT0ga2V5Ym9hcmRLZXkuU3BhY2ViYXIpIHJldHVybjtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgX3RoaXMub3BlbihlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvcGVuT25BcnJvd1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGNvZGUgPSBrZXlib2FyZEtleS5nZXRDb2RlKGUpO1xuICAgICAgaWYgKCFfaW5jbHVkZXMoW2tleWJvYXJkS2V5LkFycm93RG93biwga2V5Ym9hcmRLZXkuQXJyb3dVcF0sIGNvZGUpKSByZXR1cm47XG4gICAgICBpZiAoX3RoaXMuc3RhdGUub3BlbikgcmV0dXJuO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBfdGhpcy5vcGVuKGUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm1ha2VTZWxlY3RlZEl0ZW1BY3RpdmVcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIG9wZW4gPSBfdGhpcyRzdGF0ZS5vcGVuLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkc3RhdGUudmFsdWU7XG4gICAgICB2YXIgbXVsdGlwbGUgPSBfdGhpcy5wcm9wcy5tdWx0aXBsZTtcblxuICAgICAgdmFyIGl0ZW0gPSBfdGhpcy5nZXRTZWxlY3RlZEl0ZW0oKTtcblxuICAgICAgdmFyIHNlbGVjdGVkVmFsdWUgPSBfZ2V0KGl0ZW0sICd2YWx1ZScpOyAvLyBwcmV2ZW50IHNlbGVjdGluZyBudWxsIGlmIHRoZXJlIHdhcyBubyBzZWxlY3RlZCBpdGVtIHZhbHVlXG4gICAgICAvLyBwcmV2ZW50IHNlbGVjdGluZyBkdXBsaWNhdGUgaXRlbXMgd2hlbiB0aGUgZHJvcGRvd24gaXMgY2xvc2VkXG5cblxuICAgICAgaWYgKF9pc05pbChzZWxlY3RlZFZhbHVlKSB8fCAhb3BlbikgcmV0dXJuOyAvLyBzdGF0ZSB2YWx1ZSBtYXkgYmUgdW5kZWZpbmVkXG5cbiAgICAgIHZhciBuZXdWYWx1ZSA9IG11bHRpcGxlID8gX3VuaW9uKF90aGlzLnN0YXRlLnZhbHVlLCBbc2VsZWN0ZWRWYWx1ZV0pIDogc2VsZWN0ZWRWYWx1ZTtcbiAgICAgIHZhciB2YWx1ZUhhc0NoYW5nZWQgPSBtdWx0aXBsZSA/ICEhX2RpZmZlcmVuY2UobmV3VmFsdWUsIHZhbHVlKS5sZW5ndGggOiBuZXdWYWx1ZSAhPT0gdmFsdWU7XG5cbiAgICAgIGlmICh2YWx1ZUhhc0NoYW5nZWQpIHtcbiAgICAgICAgLy8gbm90aWZ5IHRoZSBvbkNoYW5nZSBwcm9wIHRoYXQgdGhlIHVzZXIgaXMgdHJ5aW5nIHRvIGNoYW5nZSB2YWx1ZVxuICAgICAgICBfdGhpcy5zZXRWYWx1ZShuZXdWYWx1ZSk7XG5cbiAgICAgICAgX3RoaXMuc2V0U2VsZWN0ZWRJbmRleChuZXdWYWx1ZSk7XG5cbiAgICAgICAgX3RoaXMuaGFuZGxlQ2hhbmdlKGUsIG5ld1ZhbHVlKTsgLy8gSGVhZHMgdXAhIFRoaXMgZXZlbnQgaGFuZGxlciBzaG91bGQgYmUgY2FsbGVkIGFmdGVyIGBvbkNoYW5nZWBcbiAgICAgICAgLy8gTm90aWZ5IHRoZSBvbkFkZEl0ZW0gcHJvcCBpZiB0aGlzIGlzIGEgbmV3IHZhbHVlXG5cblxuICAgICAgICBpZiAoaXRlbVsnZGF0YS1hZGRpdGlvbmFsJ10pIHtcbiAgICAgICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25BZGRJdGVtJywgZSwgX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMsIHtcbiAgICAgICAgICAgIHZhbHVlOiBzZWxlY3RlZFZhbHVlXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2VsZWN0SXRlbU9uRW50ZXJcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBzZWFyY2ggPSBfdGhpcy5wcm9wcy5zZWFyY2g7XG4gICAgICB2YXIgc2hvdWxkU2VsZWN0ID0ga2V5Ym9hcmRLZXkuZ2V0Q29kZShlKSA9PT0ga2V5Ym9hcmRLZXkuRW50ZXIgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL1NlbWFudGljLU9yZy9TZW1hbnRpYy1VSS1SZWFjdC9wdWxsLzM3NjZcbiAgICAgICFzZWFyY2ggJiYga2V5Ym9hcmRLZXkuZ2V0Q29kZShlKSA9PT0ga2V5Ym9hcmRLZXkuU3BhY2ViYXI7XG4gICAgICBpZiAoIXNob3VsZFNlbGVjdCkgcmV0dXJuO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICB2YXIgb3B0aW9uU2l6ZSA9IF9zaXplKF90aGlzLmdldE1lbnVPcHRpb25zKCkpO1xuXG4gICAgICBpZiAoc2VhcmNoICYmIG9wdGlvblNpemUgPT09IDApIHJldHVybjtcblxuICAgICAgX3RoaXMubWFrZVNlbGVjdGVkSXRlbUFjdGl2ZShlKTtcblxuICAgICAgX3RoaXMuY2xvc2VPbkNoYW5nZShlKTtcblxuICAgICAgX3RoaXMuY2xlYXJTZWFyY2hRdWVyeSgpO1xuXG4gICAgICBpZiAoc2VhcmNoKSBfaW52b2tlKF90aGlzLnNlYXJjaFJlZi5jdXJyZW50LCAnZm9jdXMnKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZW1vdmVJdGVtT25CYWNrc3BhY2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBtdWx0aXBsZSA9IF90aGlzJHByb3BzMy5tdWx0aXBsZSxcbiAgICAgICAgICBzZWFyY2ggPSBfdGhpcyRwcm9wczMuc2VhcmNoO1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIHNlYXJjaFF1ZXJ5ID0gX3RoaXMkc3RhdGUyLnNlYXJjaFF1ZXJ5LFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkc3RhdGUyLnZhbHVlO1xuICAgICAgaWYgKGtleWJvYXJkS2V5LmdldENvZGUoZSkgIT09IGtleWJvYXJkS2V5LkJhY2tzcGFjZSkgcmV0dXJuO1xuICAgICAgaWYgKHNlYXJjaFF1ZXJ5IHx8ICFzZWFyY2ggfHwgIW11bHRpcGxlIHx8IF9pc0VtcHR5KHZhbHVlKSkgcmV0dXJuO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyByZW1vdmUgbW9zdCByZWNlbnQgdmFsdWVcblxuICAgICAgdmFyIG5ld1ZhbHVlID0gX2Ryb3BSaWdodCh2YWx1ZSk7XG5cbiAgICAgIF90aGlzLnNldFZhbHVlKG5ld1ZhbHVlKTtcblxuICAgICAgX3RoaXMuc2V0U2VsZWN0ZWRJbmRleChuZXdWYWx1ZSk7XG5cbiAgICAgIF90aGlzLmhhbmRsZUNoYW5nZShlLCBuZXdWYWx1ZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2xvc2VPbkRvY3VtZW50Q2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghX3RoaXMucHJvcHMuY2xvc2VPbkJsdXIpIHJldHVybjsgLy8gSWYgZXZlbnQgaGFwcGVuZWQgaW4gdGhlIGRyb3Bkb3duLCBpZ25vcmUgaXRcblxuICAgICAgaWYgKF90aGlzLnJlZi5jdXJyZW50ICYmIGRvZXNOb2RlQ29udGFpbkNsaWNrKF90aGlzLnJlZi5jdXJyZW50LCBlKSkgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU1vdXNlRG93blwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMuaXNNb3VzZURvd24gPSB0cnVlO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25Nb3VzZURvd24nLCBlLCBfdGhpcy5wcm9wcyk7XG5cbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBfdGhpcy5oYW5kbGVEb2N1bWVudE1vdXNlVXApO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZURvY3VtZW50TW91c2VVcFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5pc01vdXNlRG93biA9IGZhbHNlO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZURvY3VtZW50TW91c2VVcCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQ2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBtaW5DaGFyYWN0ZXJzID0gX3RoaXMkcHJvcHM0Lm1pbkNoYXJhY3RlcnMsXG4gICAgICAgICAgc2VhcmNoID0gX3RoaXMkcHJvcHM0LnNlYXJjaDtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTMgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICBvcGVuID0gX3RoaXMkc3RhdGUzLm9wZW4sXG4gICAgICAgICAgc2VhcmNoUXVlcnkgPSBfdGhpcyRzdGF0ZTMuc2VhcmNoUXVlcnk7XG5cbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkNsaWNrJywgZSwgX3RoaXMucHJvcHMpOyAvLyBwcmV2ZW50IGNsb3NlT25Eb2N1bWVudENsaWNrKClcblxuXG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKCFzZWFyY2gpIHJldHVybiBfdGhpcy50b2dnbGUoZSk7XG5cbiAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgIF9pbnZva2UoX3RoaXMuc2VhcmNoUmVmLmN1cnJlbnQsICdmb2N1cycpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlYXJjaFF1ZXJ5Lmxlbmd0aCA+PSBtaW5DaGFyYWN0ZXJzIHx8IG1pbkNoYXJhY3RlcnMgPT09IDEpIHtcbiAgICAgICAgX3RoaXMub3BlbihlKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF9pbnZva2UoX3RoaXMuc2VhcmNoUmVmLmN1cnJlbnQsICdmb2N1cycpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUljb25DbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGNsZWFyYWJsZSA9IF90aGlzLnByb3BzLmNsZWFyYWJsZTtcblxuICAgICAgdmFyIGhhc1ZhbHVlID0gX3RoaXMuaGFzVmFsdWUoKTtcblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uQ2xpY2snLCBlLCBfdGhpcy5wcm9wcyk7IC8vIHByZXZlbnQgaGFuZGxlQ2xpY2soKVxuXG5cbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmIChjbGVhcmFibGUgJiYgaGFzVmFsdWUpIHtcbiAgICAgICAgX3RoaXMuY2xlYXJWYWx1ZShlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnRvZ2dsZShlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVJdGVtQ2xpY2tcIiwgZnVuY3Rpb24gKGUsIGl0ZW0pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBtdWx0aXBsZSA9IF90aGlzJHByb3BzNS5tdWx0aXBsZSxcbiAgICAgICAgICBzZWFyY2ggPSBfdGhpcyRwcm9wczUuc2VhcmNoO1xuICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IF90aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgdmFyIHZhbHVlID0gaXRlbS52YWx1ZTsgLy8gcHJldmVudCB0b2dnbGUoKSBpbiBoYW5kbGVDbGljaygpXG5cbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIHByZXZlbnQgY2xvc2VPbkRvY3VtZW50Q2xpY2soKSBpZiBtdWx0aXBsZSBvciBpdGVtIGlzIGRpc2FibGVkXG5cbiAgICAgIGlmIChtdWx0aXBsZSB8fCBpdGVtLmRpc2FibGVkKSBlLm5hdGl2ZUV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKGl0ZW0uZGlzYWJsZWQpIHJldHVybjtcbiAgICAgIHZhciBpc0FkZGl0aW9uSXRlbSA9IGl0ZW1bJ2RhdGEtYWRkaXRpb25hbCddO1xuICAgICAgdmFyIG5ld1ZhbHVlID0gbXVsdGlwbGUgPyBfdW5pb24oX3RoaXMuc3RhdGUudmFsdWUsIFt2YWx1ZV0pIDogdmFsdWU7XG4gICAgICB2YXIgdmFsdWVIYXNDaGFuZ2VkID0gbXVsdGlwbGUgPyAhIV9kaWZmZXJlbmNlKG5ld1ZhbHVlLCBjdXJyZW50VmFsdWUpLmxlbmd0aCA6IG5ld1ZhbHVlICE9PSBjdXJyZW50VmFsdWU7IC8vIG5vdGlmeSB0aGUgb25DaGFuZ2UgcHJvcCB0aGF0IHRoZSB1c2VyIGlzIHRyeWluZyB0byBjaGFuZ2UgdmFsdWVcblxuICAgICAgaWYgKHZhbHVlSGFzQ2hhbmdlZCkge1xuICAgICAgICBfdGhpcy5zZXRWYWx1ZShuZXdWYWx1ZSk7XG5cbiAgICAgICAgX3RoaXMuc2V0U2VsZWN0ZWRJbmRleCh2YWx1ZSk7XG5cbiAgICAgICAgX3RoaXMuaGFuZGxlQ2hhbmdlKGUsIG5ld1ZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2xlYXJTZWFyY2hRdWVyeSh2YWx1ZSk7XG5cbiAgICAgIGlmIChzZWFyY2gpIHtcbiAgICAgICAgX2ludm9rZShfdGhpcy5zZWFyY2hSZWYuY3VycmVudCwgJ2ZvY3VzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaW52b2tlKF90aGlzLnJlZi5jdXJyZW50LCAnZm9jdXMnKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2xvc2VPbkNoYW5nZShlKTsgLy8gSGVhZHMgdXAhIFRoaXMgZXZlbnQgaGFuZGxlciBzaG91bGQgYmUgY2FsbGVkIGFmdGVyIGBvbkNoYW5nZWBcbiAgICAgIC8vIE5vdGlmeSB0aGUgb25BZGRJdGVtIHByb3AgaWYgdGhpcyBpcyBhIG5ldyB2YWx1ZVxuXG5cbiAgICAgIGlmIChpc0FkZGl0aW9uSXRlbSkgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uQWRkSXRlbScsIGUsIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUZvY3VzXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgZm9jdXMgPSBfdGhpcy5zdGF0ZS5mb2N1cztcbiAgICAgIGlmIChmb2N1cykgcmV0dXJuO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25Gb2N1cycsIGUsIF90aGlzLnByb3BzKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1czogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQmx1clwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgLy8gSGVhZHMgdXAhIERvbid0IHJlbW92ZSB0aGlzLlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1NlbWFudGljLU9yZy9TZW1hbnRpYy1VSS1SZWFjdC9pc3N1ZXMvMTMxNVxuICAgICAgdmFyIGN1cnJlbnRUYXJnZXQgPSBfZ2V0KGUsICdjdXJyZW50VGFyZ2V0Jyk7XG5cbiAgICAgIGlmIChjdXJyZW50VGFyZ2V0ICYmIGN1cnJlbnRUYXJnZXQuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHJldHVybjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczYgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbG9zZU9uQmx1ciA9IF90aGlzJHByb3BzNi5jbG9zZU9uQmx1cixcbiAgICAgICAgICBtdWx0aXBsZSA9IF90aGlzJHByb3BzNi5tdWx0aXBsZSxcbiAgICAgICAgICBzZWxlY3RPbkJsdXIgPSBfdGhpcyRwcm9wczYuc2VsZWN0T25CbHVyOyAvLyBkbyBub3QgXCJibHVyXCIgd2hlbiB0aGUgbW91c2UgaXMgZG93biBpbnNpZGUgb2YgdGhlIERyb3Bkb3duXG5cbiAgICAgIGlmIChfdGhpcy5pc01vdXNlRG93bikgcmV0dXJuO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25CbHVyJywgZSwgX3RoaXMucHJvcHMpO1xuXG4gICAgICBpZiAoc2VsZWN0T25CbHVyICYmICFtdWx0aXBsZSkge1xuICAgICAgICBfdGhpcy5tYWtlU2VsZWN0ZWRJdGVtQWN0aXZlKGUpO1xuXG4gICAgICAgIGlmIChjbG9zZU9uQmx1cikgX3RoaXMuY2xvc2UoKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1czogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5jbGVhclNlYXJjaFF1ZXJ5KCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlU2VhcmNoQ2hhbmdlXCIsIGZ1bmN0aW9uIChlLCBfcmVmKSB7XG4gICAgICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlO1xuICAgICAgLy8gcHJldmVudCBwcm9wYWdhdGluZyB0byB0aGlzLnByb3BzLm9uQ2hhbmdlKClcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB2YXIgbWluQ2hhcmFjdGVycyA9IF90aGlzLnByb3BzLm1pbkNoYXJhY3RlcnM7XG4gICAgICB2YXIgb3BlbiA9IF90aGlzLnN0YXRlLm9wZW47XG4gICAgICB2YXIgbmV3UXVlcnkgPSB2YWx1ZTtcblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uU2VhcmNoQ2hhbmdlJywgZSwgX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMsIHtcbiAgICAgICAgc2VhcmNoUXVlcnk6IG5ld1F1ZXJ5XG4gICAgICB9KSk7XG5cbiAgICAgIF90aGlzLnRyeVNldFN0YXRlKHtcbiAgICAgICAgc2VhcmNoUXVlcnk6IG5ld1F1ZXJ5LFxuICAgICAgICBzZWxlY3RlZEluZGV4OiAwXG4gICAgICB9KTsgLy8gb3BlbiBzZWFyY2ggZHJvcGRvd24gb24gc2VhcmNoIHF1ZXJ5XG5cblxuICAgICAgaWYgKCFvcGVuICYmIG5ld1F1ZXJ5Lmxlbmd0aCA+PSBtaW5DaGFyYWN0ZXJzKSB7XG4gICAgICAgIF90aGlzLm9wZW4oKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIGNsb3NlIHNlYXJjaCBkcm9wZG93biBpZiBzZWFyY2ggcXVlcnkgaXMgdG9vIHNtYWxsXG5cblxuICAgICAgaWYgKG9wZW4gJiYgbWluQ2hhcmFjdGVycyAhPT0gMSAmJiBuZXdRdWVyeS5sZW5ndGggPCBtaW5DaGFyYWN0ZXJzKSBfdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldEtleUFuZFZhbHVlc1wiLCBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgcmV0dXJuIG9wdGlvbnMgPyBvcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIHJldHVybiBfcGljayhvcHRpb24sIFsna2V5JywgJ3ZhbHVlJ10pO1xuICAgICAgfSkgOiBvcHRpb25zO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldE1lbnVPcHRpb25zXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX3RoaXMuc3RhdGUudmFsdWU7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogX3RoaXMucHJvcHMub3B0aW9ucztcbiAgICAgIHZhciBzZWFyY2hRdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogX3RoaXMuc3RhdGUuc2VhcmNoUXVlcnk7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM3ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYWRkaXRpb25MYWJlbCA9IF90aGlzJHByb3BzNy5hZGRpdGlvbkxhYmVsLFxuICAgICAgICAgIGFkZGl0aW9uUG9zaXRpb24gPSBfdGhpcyRwcm9wczcuYWRkaXRpb25Qb3NpdGlvbixcbiAgICAgICAgICBhbGxvd0FkZGl0aW9ucyA9IF90aGlzJHByb3BzNy5hbGxvd0FkZGl0aW9ucyxcbiAgICAgICAgICBkZWJ1cnIgPSBfdGhpcyRwcm9wczcuZGVidXJyLFxuICAgICAgICAgIG11bHRpcGxlID0gX3RoaXMkcHJvcHM3Lm11bHRpcGxlLFxuICAgICAgICAgIHNlYXJjaCA9IF90aGlzJHByb3BzNy5zZWFyY2g7XG4gICAgICB2YXIgZmlsdGVyZWRPcHRpb25zID0gb3B0aW9uczsgLy8gZmlsdGVyIG91dCBhY3RpdmUgb3B0aW9uc1xuXG4gICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgZmlsdGVyZWRPcHRpb25zID0gX2ZpbHRlcihmaWx0ZXJlZE9wdGlvbnMsIGZ1bmN0aW9uIChvcHQpIHtcbiAgICAgICAgICByZXR1cm4gIV9pbmNsdWRlcyh2YWx1ZSwgb3B0LnZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIGZpbHRlciBieSBzZWFyY2ggcXVlcnlcblxuXG4gICAgICBpZiAoc2VhcmNoICYmIHNlYXJjaFF1ZXJ5KSB7XG4gICAgICAgIGlmIChfaXNGdW5jdGlvbihzZWFyY2gpKSB7XG4gICAgICAgICAgZmlsdGVyZWRPcHRpb25zID0gc2VhcmNoKGZpbHRlcmVkT3B0aW9ucywgc2VhcmNoUXVlcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHJlbW92ZSBkaWFjcml0aWNzIG9uIHNlYXJjaCBpbnB1dCBhbmQgb3B0aW9ucywgaWYgZGVidXJyIHByb3AgaXMgc2V0XG4gICAgICAgICAgdmFyIHN0cmlwcGVkUXVlcnkgPSBkZWJ1cnIgPyBfZGVidXJyKHNlYXJjaFF1ZXJ5KSA6IHNlYXJjaFF1ZXJ5O1xuICAgICAgICAgIHZhciByZSA9IG5ldyBSZWdFeHAoX2VzY2FwZVJlZ0V4cChzdHJpcHBlZFF1ZXJ5KSwgJ2knKTtcbiAgICAgICAgICBmaWx0ZXJlZE9wdGlvbnMgPSBfZmlsdGVyKGZpbHRlcmVkT3B0aW9ucywgZnVuY3Rpb24gKG9wdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlLnRlc3QoZGVidXJyID8gX2RlYnVycihvcHQudGV4dCkgOiBvcHQudGV4dCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gaW5zZXJ0IHRoZSBcImFkZFwiIGl0ZW1cblxuXG4gICAgICBpZiAoYWxsb3dBZGRpdGlvbnMgJiYgc2VhcmNoICYmIHNlYXJjaFF1ZXJ5ICYmICFfc29tZShmaWx0ZXJlZE9wdGlvbnMsIHtcbiAgICAgICAgdGV4dDogc2VhcmNoUXVlcnlcbiAgICAgIH0pKSB7XG4gICAgICAgIHZhciBhZGRpdGlvbkxhYmVsRWxlbWVudCA9IFJlYWN0LmlzVmFsaWRFbGVtZW50KGFkZGl0aW9uTGFiZWwpID8gUmVhY3QuY2xvbmVFbGVtZW50KGFkZGl0aW9uTGFiZWwsIHtcbiAgICAgICAgICBrZXk6ICdhZGRpdGlvbi1sYWJlbCdcbiAgICAgICAgfSkgOiBhZGRpdGlvbkxhYmVsIHx8ICcnO1xuICAgICAgICB2YXIgYWRkSXRlbSA9IHtcbiAgICAgICAgICBrZXk6ICdhZGRpdGlvbicsXG4gICAgICAgICAgLy8gYnkgdXNpbmcgYW4gYXJyYXksIHdlIGNhbiBwYXNzIG11bHRpcGxlIGVsZW1lbnRzLCBidXQgd2hlbiBkb2luZyBzb1xuICAgICAgICAgIC8vIHdlIG11c3Qgc3BlY2lmeSBhIGBrZXlgIGZvciBSZWFjdCB0byBrbm93IHdoaWNoIG9uZSBpcyB3aGljaFxuICAgICAgICAgIHRleHQ6IFthZGRpdGlvbkxhYmVsRWxlbWVudCwgUmVhY3QuY3JlYXRlRWxlbWVudChcImJcIiwge1xuICAgICAgICAgICAga2V5OiBcImFkZGl0aW9uLXF1ZXJ5XCJcbiAgICAgICAgICB9LCBzZWFyY2hRdWVyeSldLFxuICAgICAgICAgIHZhbHVlOiBzZWFyY2hRdWVyeSxcbiAgICAgICAgICBjbGFzc05hbWU6ICdhZGRpdGlvbicsXG4gICAgICAgICAgJ2RhdGEtYWRkaXRpb25hbCc6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGFkZGl0aW9uUG9zaXRpb24gPT09ICd0b3AnKSBmaWx0ZXJlZE9wdGlvbnMudW5zaGlmdChhZGRJdGVtKTtlbHNlIGZpbHRlcmVkT3B0aW9ucy5wdXNoKGFkZEl0ZW0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmlsdGVyZWRPcHRpb25zO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFNlbGVjdGVkSXRlbVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IF90aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXg7XG5cbiAgICAgIHZhciBvcHRpb25zID0gX3RoaXMuZ2V0TWVudU9wdGlvbnMoKTtcblxuICAgICAgcmV0dXJuIF9nZXQob3B0aW9ucywgXCJbXCIuY29uY2F0KHNlbGVjdGVkSW5kZXgsIFwiXVwiKSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0RW5hYmxlZEluZGljZXNcIiwgZnVuY3Rpb24gKGdpdmVuT3B0aW9ucykge1xuICAgICAgdmFyIG9wdGlvbnMgPSBnaXZlbk9wdGlvbnMgfHwgX3RoaXMuZ2V0TWVudU9wdGlvbnMoKTtcblxuICAgICAgcmV0dXJuIF9yZWR1Y2Uob3B0aW9ucywgZnVuY3Rpb24gKG1lbW8sIGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIGlmICghaXRlbS5kaXNhYmxlZCkgbWVtby5wdXNoKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCBbXSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0SXRlbUJ5VmFsdWVcIiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IF90aGlzLnByb3BzLm9wdGlvbnM7XG4gICAgICByZXR1cm4gX2ZpbmQob3B0aW9ucywge1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldE1lbnVJdGVtSW5kZXhCeVZhbHVlXCIsIGZ1bmN0aW9uICh2YWx1ZSwgZ2l2ZW5PcHRpb25zKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGdpdmVuT3B0aW9ucyB8fCBfdGhpcy5nZXRNZW51T3B0aW9ucygpO1xuXG4gICAgICByZXR1cm4gX2ZpbmRJbmRleChvcHRpb25zLCBbJ3ZhbHVlJywgdmFsdWVdKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXREcm9wZG93bkFyaWFPcHRpb25zXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczggPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBsb2FkaW5nID0gX3RoaXMkcHJvcHM4LmxvYWRpbmcsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczguZGlzYWJsZWQsXG4gICAgICAgICAgc2VhcmNoID0gX3RoaXMkcHJvcHM4LnNlYXJjaCxcbiAgICAgICAgICBtdWx0aXBsZSA9IF90aGlzJHByb3BzOC5tdWx0aXBsZTtcbiAgICAgIHZhciBvcGVuID0gX3RoaXMuc3RhdGUub3BlbjtcbiAgICAgIHZhciBhcmlhT3B0aW9ucyA9IHtcbiAgICAgICAgcm9sZTogc2VhcmNoID8gJ2NvbWJvYm94JyA6ICdsaXN0Ym94JyxcbiAgICAgICAgJ2FyaWEtYnVzeSc6IGxvYWRpbmcsXG4gICAgICAgICdhcmlhLWRpc2FibGVkJzogZGlzYWJsZWQsXG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogISFvcGVuXG4gICAgICB9O1xuXG4gICAgICBpZiAoYXJpYU9wdGlvbnMucm9sZSA9PT0gJ2xpc3Rib3gnKSB7XG4gICAgICAgIGFyaWFPcHRpb25zWydhcmlhLW11bHRpc2VsZWN0YWJsZSddID0gbXVsdGlwbGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcmlhT3B0aW9ucztcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjbGVhclNlYXJjaFF1ZXJ5XCIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIHNlYXJjaFF1ZXJ5ID0gX3RoaXMuc3RhdGUuc2VhcmNoUXVlcnk7XG4gICAgICBpZiAoc2VhcmNoUXVlcnkgPT09IHVuZGVmaW5lZCB8fCBzZWFyY2hRdWVyeSA9PT0gJycpIHJldHVybjtcblxuICAgICAgX3RoaXMudHJ5U2V0U3RhdGUoe1xuICAgICAgICBzZWFyY2hRdWVyeTogJydcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5zZXRTZWxlY3RlZEluZGV4KHZhbHVlLCB1bmRlZmluZWQsICcnKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRWYWx1ZVwiLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIF90aGlzLnRyeVNldFN0YXRlKHtcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRTZWxlY3RlZEluZGV4XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX3RoaXMuc3RhdGUudmFsdWU7XG4gICAgICB2YXIgb3B0aW9uc1Byb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBfdGhpcy5wcm9wcy5vcHRpb25zO1xuICAgICAgdmFyIHNlYXJjaFF1ZXJ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBfdGhpcy5zdGF0ZS5zZWFyY2hRdWVyeTtcbiAgICAgIHZhciBtdWx0aXBsZSA9IF90aGlzLnByb3BzLm11bHRpcGxlO1xuICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSBfdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4O1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IF90aGlzLmdldE1lbnVPcHRpb25zKHZhbHVlLCBvcHRpb25zUHJvcHMsIHNlYXJjaFF1ZXJ5KTtcblxuICAgICAgdmFyIGVuYWJsZWRJbmRpY2llcyA9IF90aGlzLmdldEVuYWJsZWRJbmRpY2VzKG9wdGlvbnMpO1xuXG4gICAgICB2YXIgbmV3U2VsZWN0ZWRJbmRleDsgLy8gdXBkYXRlIHRoZSBzZWxlY3RlZCBpbmRleFxuXG4gICAgICBpZiAoIXNlbGVjdGVkSW5kZXggfHwgc2VsZWN0ZWRJbmRleCA8IDApIHtcbiAgICAgICAgdmFyIGZpcnN0SW5kZXggPSBlbmFibGVkSW5kaWNpZXNbMF07IC8vIFNlbGVjdCB0aGUgY3VycmVudGx5IGFjdGl2ZSBpdGVtLCBpZiBub25lLCB1c2UgdGhlIGZpcnN0IGl0ZW0uXG4gICAgICAgIC8vIE11bHRpcGxlIHNlbGVjdHMgcmVtb3ZlIGFjdGl2ZSBpdGVtcyBmcm9tIHRoZSBsaXN0LFxuICAgICAgICAvLyB0aGVpciBpbml0aWFsIHNlbGVjdGVkIGluZGV4IHNob3VsZCBiZSAwLlxuXG4gICAgICAgIG5ld1NlbGVjdGVkSW5kZXggPSBtdWx0aXBsZSA/IGZpcnN0SW5kZXggOiBfdGhpcy5nZXRNZW51SXRlbUluZGV4QnlWYWx1ZSh2YWx1ZSwgb3B0aW9ucykgfHwgZW5hYmxlZEluZGljaWVzWzBdO1xuICAgICAgfSBlbHNlIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAvLyBtdWx0aXBsZSBzZWxlY3RzIHJlbW92ZSBvcHRpb25zIGZyb20gdGhlIG1lbnUgYXMgdGhleSBhcmUgbWFkZSBhY3RpdmVcbiAgICAgICAgLy8ga2VlcCB0aGUgc2VsZWN0ZWQgaW5kZXggd2l0aGluIHJhbmdlIG9mIHRoZSByZW1haW5pbmcgaXRlbXNcbiAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXggPj0gb3B0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgbmV3U2VsZWN0ZWRJbmRleCA9IGVuYWJsZWRJbmRpY2llc1tlbmFibGVkSW5kaWNpZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhY3RpdmVJbmRleCA9IF90aGlzLmdldE1lbnVJdGVtSW5kZXhCeVZhbHVlKHZhbHVlLCBvcHRpb25zKTsgLy8gcmVndWxhciBzZWxlY3RzIGNhbiBvbmx5IGhhdmUgb25lIGFjdGl2ZSBpdGVtXG4gICAgICAgIC8vIHNldCB0aGUgc2VsZWN0ZWQgaW5kZXggdG8gdGhlIGN1cnJlbnRseSBhY3RpdmUgaXRlbVxuXG5cbiAgICAgICAgbmV3U2VsZWN0ZWRJbmRleCA9IF9pbmNsdWRlcyhlbmFibGVkSW5kaWNpZXMsIGFjdGl2ZUluZGV4KSA/IGFjdGl2ZUluZGV4IDogdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW5ld1NlbGVjdGVkSW5kZXggfHwgbmV3U2VsZWN0ZWRJbmRleCA8IDApIHtcbiAgICAgICAgbmV3U2VsZWN0ZWRJbmRleCA9IGVuYWJsZWRJbmRpY2llc1swXTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzZWxlY3RlZEluZGV4OiBuZXdTZWxlY3RlZEluZGV4XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVMYWJlbENsaWNrXCIsIGZ1bmN0aW9uIChlLCBsYWJlbFByb3BzKSB7XG4gICAgICAvLyBwcmV2ZW50IGZvY3VzaW5nIHNlYXJjaCBpbnB1dCBvbiBjbGlja1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzZWxlY3RlZExhYmVsOiBsYWJlbFByb3BzLnZhbHVlXG4gICAgICB9KTtcblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uTGFiZWxDbGljaycsIGUsIGxhYmVsUHJvcHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUxhYmVsUmVtb3ZlXCIsIGZ1bmN0aW9uIChlLCBsYWJlbFByb3BzKSB7XG4gICAgICAvLyBwcmV2ZW50IGZvY3VzaW5nIHNlYXJjaCBpbnB1dCBvbiBjbGlja1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHZhciB2YWx1ZSA9IF90aGlzLnN0YXRlLnZhbHVlO1xuXG4gICAgICB2YXIgbmV3VmFsdWUgPSBfd2l0aG91dCh2YWx1ZSwgbGFiZWxQcm9wcy52YWx1ZSk7XG5cbiAgICAgIF90aGlzLnNldFZhbHVlKG5ld1ZhbHVlKTtcblxuICAgICAgX3RoaXMuc2V0U2VsZWN0ZWRJbmRleChuZXdWYWx1ZSk7XG5cbiAgICAgIF90aGlzLmhhbmRsZUNoYW5nZShlLCBuZXdWYWx1ZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibW92ZVNlbGVjdGlvbkJ5XCIsIGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgIHZhciBzdGFydEluZGV4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBfdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4O1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IF90aGlzLmdldE1lbnVPcHRpb25zKCk7IC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcFxuICAgICAgLy8gVE9ETzogcmVtb3ZlIGxlZnQgcGFydCBvZiBjb25kaXRpb24gYWZ0ZXIgY2hpbGRyZW4gQVBJIHdpbGwgYmUgcmVtb3ZlZFxuXG5cbiAgICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgfHwgX2V2ZXJ5KG9wdGlvbnMsICdkaXNhYmxlZCcpKSByZXR1cm47XG4gICAgICB2YXIgbGFzdEluZGV4ID0gb3B0aW9ucy5sZW5ndGggLSAxO1xuICAgICAgdmFyIHdyYXBTZWxlY3Rpb24gPSBfdGhpcy5wcm9wcy53cmFwU2VsZWN0aW9uOyAvLyBuZXh0IGlzIGFmdGVyIGxhc3QsIHdyYXAgdG8gYmVnaW5uaW5nXG4gICAgICAvLyBuZXh0IGlzIGJlZm9yZSBmaXJzdCwgd3JhcCB0byBlbmRcblxuICAgICAgdmFyIG5leHRJbmRleCA9IHN0YXJ0SW5kZXggKyBvZmZzZXQ7IC8vIGlmICd3cmFwU2VsZWN0aW9uJyBpcyBzZXQgdG8gZmFsc2UgYW5kIHNlbGVjdGlvbiBpcyBhZnRlciBsYXN0IG9yIGJlZm9yZSBmaXJzdCwgaXQganVzdCBkb2VzIG5vdCBjaGFuZ2VcblxuICAgICAgaWYgKCF3cmFwU2VsZWN0aW9uICYmIChuZXh0SW5kZXggPiBsYXN0SW5kZXggfHwgbmV4dEluZGV4IDwgMCkpIHtcbiAgICAgICAgbmV4dEluZGV4ID0gc3RhcnRJbmRleDtcbiAgICAgIH0gZWxzZSBpZiAobmV4dEluZGV4ID4gbGFzdEluZGV4KSBuZXh0SW5kZXggPSAwO2Vsc2UgaWYgKG5leHRJbmRleCA8IDApIG5leHRJbmRleCA9IGxhc3RJbmRleDtcblxuICAgICAgaWYgKG9wdGlvbnNbbmV4dEluZGV4XS5kaXNhYmxlZCkge1xuICAgICAgICBfdGhpcy5tb3ZlU2VsZWN0aW9uQnkob2Zmc2V0LCBuZXh0SW5kZXgpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzZWxlY3RlZEluZGV4OiBuZXh0SW5kZXhcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5zY3JvbGxTZWxlY3RlZEl0ZW1JbnRvVmlldygpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUljb25PdmVycmlkZXNcIiwgZnVuY3Rpb24gKHByZWRlZmluZWRQcm9wcykge1xuICAgICAgdmFyIGNsZWFyYWJsZSA9IF90aGlzLnByb3BzLmNsZWFyYWJsZTtcbiAgICAgIHZhciBjbGFzc2VzID0gY3goY2xlYXJhYmxlICYmIF90aGlzLmhhc1ZhbHVlKCkgJiYgJ2NsZWFyJywgcHJlZGVmaW5lZFByb3BzLmNsYXNzTmFtZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgIF9pbnZva2UocHJlZGVmaW5lZFByb3BzLCAnb25DbGljaycsIGUsIHByZWRlZmluZWRQcm9wcyk7XG5cbiAgICAgICAgICBfdGhpcy5oYW5kbGVJY29uQ2xpY2soZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2xlYXJWYWx1ZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIG11bHRpcGxlID0gX3RoaXMucHJvcHMubXVsdGlwbGU7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBtdWx0aXBsZSA/IFtdIDogJyc7XG5cbiAgICAgIF90aGlzLnNldFZhbHVlKG5ld1ZhbHVlKTtcblxuICAgICAgX3RoaXMuc2V0U2VsZWN0ZWRJbmRleChuZXdWYWx1ZSk7XG5cbiAgICAgIF90aGlzLmhhbmRsZUNoYW5nZShlLCBuZXdWYWx1ZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY29tcHV0ZVNlYXJjaElucHV0VGFiSW5kZXhcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzOSA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHM5LmRpc2FibGVkLFxuICAgICAgICAgIHRhYkluZGV4ID0gX3RoaXMkcHJvcHM5LnRhYkluZGV4O1xuICAgICAgaWYgKCFfaXNOaWwodGFiSW5kZXgpKSByZXR1cm4gdGFiSW5kZXg7XG4gICAgICByZXR1cm4gZGlzYWJsZWQgPyAtMSA6IDA7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY29tcHV0ZVNlYXJjaElucHV0V2lkdGhcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNlYXJjaFF1ZXJ5ID0gX3RoaXMuc3RhdGUuc2VhcmNoUXVlcnk7XG5cbiAgICAgIGlmIChfdGhpcy5zaXplclJlZi5jdXJyZW50ICYmIHNlYXJjaFF1ZXJ5KSB7XG4gICAgICAgIC8vIHJlc2l6ZSB0aGUgc2VhcmNoIGlucHV0LCB0ZW1wb3JhcmlseSBzaG93IHRoZSBzaXplciBzbyB3ZSBjYW4gbWVhc3VyZSBpdFxuICAgICAgICBfdGhpcy5zaXplclJlZi5jdXJyZW50LnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lJztcbiAgICAgICAgX3RoaXMuc2l6ZXJSZWYuY3VycmVudC50ZXh0Q29udGVudCA9IHNlYXJjaFF1ZXJ5O1xuICAgICAgICB2YXIgc2VhcmNoV2lkdGggPSBNYXRoLmNlaWwoX3RoaXMuc2l6ZXJSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XG5cbiAgICAgICAgX3RoaXMuc2l6ZXJSZWYuY3VycmVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnZGlzcGxheScpO1xuXG4gICAgICAgIHJldHVybiBzZWFyY2hXaWR0aDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb21wdXRlVGFiSW5kZXhcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMTAgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzMTAuZGlzYWJsZWQsXG4gICAgICAgICAgc2VhcmNoID0gX3RoaXMkcHJvcHMxMC5zZWFyY2gsXG4gICAgICAgICAgdGFiSW5kZXggPSBfdGhpcyRwcm9wczEwLnRhYkluZGV4OyAvLyBkb24ndCBzZXQgYSByb290IG5vZGUgdGFiSW5kZXggYXMgdGhlIHNlYXJjaCBpbnB1dCBoYXMgaXRzIG93biB0YWJJbmRleFxuXG4gICAgICBpZiAoc2VhcmNoKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgaWYgKGRpc2FibGVkKSByZXR1cm4gLTE7XG4gICAgICByZXR1cm4gX2lzTmlsKHRhYkluZGV4KSA/IDAgOiB0YWJJbmRleDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVTZWFyY2hJbnB1dE92ZXJyaWRlc1wiLCBmdW5jdGlvbiAocHJlZGVmaW5lZFByb3BzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSwgaW5wdXRQcm9wcykge1xuICAgICAgICAgIF9pbnZva2UocHJlZGVmaW5lZFByb3BzLCAnb25DaGFuZ2UnLCBlLCBpbnB1dFByb3BzKTtcblxuICAgICAgICAgIF90aGlzLmhhbmRsZVNlYXJjaENoYW5nZShlLCBpbnB1dFByb3BzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYXNWYWx1ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbXVsdGlwbGUgPSBfdGhpcy5wcm9wcy5tdWx0aXBsZTtcbiAgICAgIHZhciB2YWx1ZSA9IF90aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgcmV0dXJuIG11bHRpcGxlID8gIV9pc0VtcHR5KHZhbHVlKSA6ICFfaXNOaWwodmFsdWUpICYmIHZhbHVlICE9PSAnJztcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzY3JvbGxTZWxlY3RlZEl0ZW1JbnRvVmlld1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgIHZhciBtZW51ID0gX3RoaXMucmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvcignLm1lbnUudmlzaWJsZScpO1xuXG4gICAgICBpZiAoIW1lbnUpIHJldHVybjtcbiAgICAgIHZhciBpdGVtID0gbWVudS5xdWVyeVNlbGVjdG9yKCcuaXRlbS5zZWxlY3RlZCcpO1xuICAgICAgaWYgKCFpdGVtKSByZXR1cm47XG4gICAgICB2YXIgaXNPdXRPZlVwcGVyVmlldyA9IGl0ZW0ub2Zmc2V0VG9wIDwgbWVudS5zY3JvbGxUb3A7XG4gICAgICB2YXIgaXNPdXRPZkxvd2VyVmlldyA9IGl0ZW0ub2Zmc2V0VG9wICsgaXRlbS5jbGllbnRIZWlnaHQgPiBtZW51LnNjcm9sbFRvcCArIG1lbnUuY2xpZW50SGVpZ2h0O1xuXG4gICAgICBpZiAoaXNPdXRPZlVwcGVyVmlldykge1xuICAgICAgICBtZW51LnNjcm9sbFRvcCA9IGl0ZW0ub2Zmc2V0VG9wO1xuICAgICAgfSBlbHNlIGlmIChpc091dE9mTG93ZXJWaWV3KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1taXhlZC1vcGVyYXRvcnNcbiAgICAgICAgbWVudS5zY3JvbGxUb3AgPSBpdGVtLm9mZnNldFRvcCArIGl0ZW0uY2xpZW50SGVpZ2h0IC0gbWVudS5jbGllbnRIZWlnaHQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0T3BlbkRpcmVjdGlvblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgIHZhciBtZW51ID0gX3RoaXMucmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvcignLm1lbnUudmlzaWJsZScpO1xuXG4gICAgICBpZiAoIW1lbnUpIHJldHVybjtcblxuICAgICAgdmFyIGRyb3Bkb3duUmVjdCA9IF90aGlzLnJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICB2YXIgbWVudUhlaWdodCA9IG1lbnUuY2xpZW50SGVpZ2h0O1xuICAgICAgdmFyIHNwYWNlQXRUaGVCb3R0b20gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gZHJvcGRvd25SZWN0LnRvcCAtIGRyb3Bkb3duUmVjdC5oZWlnaHQgLSBtZW51SGVpZ2h0O1xuICAgICAgdmFyIHNwYWNlQXRUaGVUb3AgPSBkcm9wZG93blJlY3QudG9wIC0gbWVudUhlaWdodDtcbiAgICAgIHZhciB1cHdhcmQgPSBzcGFjZUF0VGhlQm90dG9tIDwgMCAmJiBzcGFjZUF0VGhlVG9wID4gc3BhY2VBdFRoZUJvdHRvbTsgLy8gc2V0IHN0YXRlIG9ubHkgaWYgdGhlcmUncyBhIHJlbGV2YW50IGRpZmZlcmVuY2VcblxuICAgICAgaWYgKCF1cHdhcmQgIT09ICFfdGhpcy5zdGF0ZS51cHdhcmQpIHtcbiAgICAgICAgX3RoaXMudHJ5U2V0U3RhdGUoe1xuICAgICAgICAgIHVwd2FyZDogdXB3YXJkXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9wZW5cIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczExID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczExLmRpc2FibGVkLFxuICAgICAgICAgIG9wZW4gPSBfdGhpcyRwcm9wczExLm9wZW4sXG4gICAgICAgICAgc2VhcmNoID0gX3RoaXMkcHJvcHMxMS5zZWFyY2g7XG4gICAgICBpZiAoZGlzYWJsZWQpIHJldHVybjtcbiAgICAgIGlmIChzZWFyY2gpIF9pbnZva2UoX3RoaXMuc2VhcmNoUmVmLmN1cnJlbnQsICdmb2N1cycpO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25PcGVuJywgZSwgX3RoaXMucHJvcHMpO1xuXG4gICAgICBfdGhpcy50cnlTZXRTdGF0ZSh7XG4gICAgICAgIG9wZW46IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5zY3JvbGxTZWxlY3RlZEl0ZW1JbnRvVmlldygpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNsb3NlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IF90aGlzLmhhbmRsZUNsb3NlO1xuICAgICAgdmFyIG9wZW4gPSBfdGhpcy5zdGF0ZS5vcGVuO1xuXG4gICAgICBpZiAob3Blbikge1xuICAgICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25DbG9zZScsIGUsIF90aGlzLnByb3BzKTtcblxuICAgICAgICBfdGhpcy50cnlTZXRTdGF0ZSh7XG4gICAgICAgICAgb3BlbjogZmFsc2VcbiAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsb3NlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBoYXNTZWFyY2hGb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IF90aGlzLnNlYXJjaFJlZi5jdXJyZW50OyAvLyBodHRwczovL2dpdGh1Yi5jb20vU2VtYW50aWMtT3JnL1NlbWFudGljLVVJLVJlYWN0L2lzc3Vlcy82MjdcbiAgICAgIC8vIEJsdXIgdGhlIERyb3Bkb3duIG9uIGNsb3NlIHNvIGl0IGlzIGJsdXJyZWQgYWZ0ZXIgc2VsZWN0aW5nIGFuIGl0ZW0uXG4gICAgICAvLyBUaGlzIGlzIHRvIHByZXZlbnQgaXQgZnJvbSByZS1vcGVuaW5nIHdoZW4gc3dpdGNoaW5nIHRhYnMgYWZ0ZXIgc2VsZWN0aW5nIGFuIGl0ZW0uXG5cbiAgICAgIGlmICghaGFzU2VhcmNoRm9jdXMgJiYgX3RoaXMucmVmLmN1cnJlbnQpIHtcbiAgICAgICAgX3RoaXMucmVmLmN1cnJlbnQuYmx1cigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGFzRHJvcGRvd25Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IF90aGlzLnJlZi5jdXJyZW50O1xuICAgICAgdmFyIGhhc0ZvY3VzID0gaGFzU2VhcmNoRm9jdXMgfHwgaGFzRHJvcGRvd25Gb2N1czsgLy8gV2UgbmVlZCB0byBrZWVwIHRoZSB2aXJ0dWFsIG1vZGVsIGluIHN5bmMgd2l0aCB0aGUgYnJvd3NlciBmb2N1cyBjaGFuZ2VcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZW1hbnRpYy1PcmcvU2VtYW50aWMtVUktUmVhY3QvaXNzdWVzLzY5MlxuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzOiBoYXNGb2N1c1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwidG9nZ2xlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gX3RoaXMuc3RhdGUub3BlbiA/IF90aGlzLmNsb3NlKGUpIDogX3RoaXMub3BlbihlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZW5kZXJUZXh0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczEyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgbXVsdGlwbGUgPSBfdGhpcyRwcm9wczEyLm11bHRpcGxlLFxuICAgICAgICAgIHBsYWNlaG9sZGVyID0gX3RoaXMkcHJvcHMxMi5wbGFjZWhvbGRlcixcbiAgICAgICAgICBzZWFyY2ggPSBfdGhpcyRwcm9wczEyLnNlYXJjaCxcbiAgICAgICAgICB0ZXh0ID0gX3RoaXMkcHJvcHMxMi50ZXh0O1xuICAgICAgdmFyIF90aGlzJHN0YXRlNCA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIHNlYXJjaFF1ZXJ5ID0gX3RoaXMkc3RhdGU0LnNlYXJjaFF1ZXJ5LFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkc3RhdGU0LnZhbHVlLFxuICAgICAgICAgIG9wZW4gPSBfdGhpcyRzdGF0ZTQub3BlbjtcblxuICAgICAgdmFyIGhhc1ZhbHVlID0gX3RoaXMuaGFzVmFsdWUoKTtcblxuICAgICAgdmFyIGNsYXNzZXMgPSBjeChwbGFjZWhvbGRlciAmJiAhaGFzVmFsdWUgJiYgJ2RlZmF1bHQnLCAndGV4dCcsIHNlYXJjaCAmJiBzZWFyY2hRdWVyeSAmJiAnZmlsdGVyZWQnKTtcbiAgICAgIHZhciBfdGV4dCA9IHBsYWNlaG9sZGVyO1xuXG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICBfdGV4dCA9IHRleHQ7XG4gICAgICB9IGVsc2UgaWYgKG9wZW4gJiYgIW11bHRpcGxlKSB7XG4gICAgICAgIF90ZXh0ID0gX2dldChfdGhpcy5nZXRTZWxlY3RlZEl0ZW0oKSwgJ3RleHQnKTtcbiAgICAgIH0gZWxzZSBpZiAoaGFzVmFsdWUpIHtcbiAgICAgICAgX3RleHQgPSBfZ2V0KF90aGlzLmdldEl0ZW1CeVZhbHVlKHZhbHVlKSwgJ3RleHQnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIHJvbGU6IFwiYWxlcnRcIixcbiAgICAgICAgXCJhcmlhLWxpdmVcIjogXCJwb2xpdGVcIixcbiAgICAgICAgXCJhcmlhLWF0b21pY1wiOiB0cnVlXG4gICAgICB9LCBfdGV4dCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVuZGVyU2VhcmNoSW5wdXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMTMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBzZWFyY2ggPSBfdGhpcyRwcm9wczEzLnNlYXJjaCxcbiAgICAgICAgICBzZWFyY2hJbnB1dCA9IF90aGlzJHByb3BzMTMuc2VhcmNoSW5wdXQ7XG4gICAgICB2YXIgc2VhcmNoUXVlcnkgPSBfdGhpcy5zdGF0ZS5zZWFyY2hRdWVyeTtcbiAgICAgIHJldHVybiBzZWFyY2ggJiYgUmVhY3QuY3JlYXRlRWxlbWVudChSZWYsIHtcbiAgICAgICAgaW5uZXJSZWY6IF90aGlzLnNlYXJjaFJlZlxuICAgICAgfSwgRHJvcGRvd25TZWFyY2hJbnB1dC5jcmVhdGUoc2VhcmNoSW5wdXQsIHtcbiAgICAgICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIHdpZHRoOiBfdGhpcy5jb21wdXRlU2VhcmNoSW5wdXRXaWR0aCgpXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0YWJJbmRleDogX3RoaXMuY29tcHV0ZVNlYXJjaElucHV0VGFiSW5kZXgoKSxcbiAgICAgICAgICB2YWx1ZTogc2VhcmNoUXVlcnlcbiAgICAgICAgfSxcbiAgICAgICAgb3ZlcnJpZGVQcm9wczogX3RoaXMuaGFuZGxlU2VhcmNoSW5wdXRPdmVycmlkZXNcbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZW5kZXJTZWFyY2hTaXplclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxNCA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHNlYXJjaCA9IF90aGlzJHByb3BzMTQuc2VhcmNoLFxuICAgICAgICAgIG11bHRpcGxlID0gX3RoaXMkcHJvcHMxNC5tdWx0aXBsZTtcbiAgICAgIHJldHVybiBzZWFyY2ggJiYgbXVsdGlwbGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwic2l6ZXJcIixcbiAgICAgICAgcmVmOiBfdGhpcy5zaXplclJlZlxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVuZGVyTGFiZWxzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczE1ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgbXVsdGlwbGUgPSBfdGhpcyRwcm9wczE1Lm11bHRpcGxlLFxuICAgICAgICAgIHJlbmRlckxhYmVsID0gX3RoaXMkcHJvcHMxNS5yZW5kZXJMYWJlbDtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTUgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICBzZWxlY3RlZExhYmVsID0gX3RoaXMkc3RhdGU1LnNlbGVjdGVkTGFiZWwsXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRzdGF0ZTUudmFsdWU7XG5cbiAgICAgIGlmICghbXVsdGlwbGUgfHwgX2lzRW1wdHkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlbGVjdGVkSXRlbXMgPSBfbWFwKHZhbHVlLCBfdGhpcy5nZXRJdGVtQnlWYWx1ZSk7XG5cbiAgICAgIC8vIGlmIG5vIGl0ZW0gY291bGQgYmUgZm91bmQgZm9yIGEgZ2l2ZW4gc3RhdGUgdmFsdWUgdGhlIHNlbGVjdGVkIGl0ZW0gd2lsbCBiZSB1bmRlZmluZWRcbiAgICAgIC8vIGNvbXBhY3QgdGhlIHNlbGVjdGVkSXRlbXMgc28gd2Ugb25seSBoYXZlIGFjdHVhbCBvYmplY3RzIGxlZnRcbiAgICAgIHJldHVybiBfbWFwKF9jb21wYWN0KHNlbGVjdGVkSXRlbXMpLCBmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgICBhY3RpdmU6IGl0ZW0udmFsdWUgPT09IHNlbGVjdGVkTGFiZWwsXG4gICAgICAgICAgYXM6ICdhJyxcbiAgICAgICAgICBrZXk6IGdldEtleU9yVmFsdWUoaXRlbS5rZXksIGl0ZW0udmFsdWUpLFxuICAgICAgICAgIG9uQ2xpY2s6IF90aGlzLmhhbmRsZUxhYmVsQ2xpY2ssXG4gICAgICAgICAgb25SZW1vdmU6IF90aGlzLmhhbmRsZUxhYmVsUmVtb3ZlLFxuICAgICAgICAgIHZhbHVlOiBpdGVtLnZhbHVlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBMYWJlbC5jcmVhdGUocmVuZGVyTGFiZWwoaXRlbSwgaW5kZXgsIGRlZmF1bHRQcm9wcyksIHtcbiAgICAgICAgICBkZWZhdWx0UHJvcHM6IGRlZmF1bHRQcm9wc1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlbmRlck9wdGlvbnNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMTYgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBsYXp5TG9hZCA9IF90aGlzJHByb3BzMTYubGF6eUxvYWQsXG4gICAgICAgICAgbXVsdGlwbGUgPSBfdGhpcyRwcm9wczE2Lm11bHRpcGxlLFxuICAgICAgICAgIHNlYXJjaCA9IF90aGlzJHByb3BzMTYuc2VhcmNoLFxuICAgICAgICAgIG5vUmVzdWx0c01lc3NhZ2UgPSBfdGhpcyRwcm9wczE2Lm5vUmVzdWx0c01lc3NhZ2U7XG4gICAgICB2YXIgX3RoaXMkc3RhdGU2ID0gX3RoaXMuc3RhdGUsXG4gICAgICAgICAgb3BlbiA9IF90aGlzJHN0YXRlNi5vcGVuLFxuICAgICAgICAgIHNlbGVjdGVkSW5kZXggPSBfdGhpcyRzdGF0ZTYuc2VsZWN0ZWRJbmRleCxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHN0YXRlNi52YWx1ZTsgLy8gbGF6eSBsb2FkLCBvbmx5IHJlbmRlciBvcHRpb25zIHdoZW4gb3BlblxuXG4gICAgICBpZiAobGF6eUxvYWQgJiYgIW9wZW4pIHJldHVybiBudWxsO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IF90aGlzLmdldE1lbnVPcHRpb25zKCk7XG5cbiAgICAgIGlmIChub1Jlc3VsdHNNZXNzYWdlICE9PSBudWxsICYmIHNlYXJjaCAmJiBfaXNFbXB0eShvcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcIm1lc3NhZ2VcIlxuICAgICAgICB9LCBub1Jlc3VsdHNNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzQWN0aXZlID0gbXVsdGlwbGUgPyBmdW5jdGlvbiAob3B0VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF9pbmNsdWRlcyh2YWx1ZSwgb3B0VmFsdWUpO1xuICAgICAgfSA6IGZ1bmN0aW9uIChvcHRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gb3B0VmFsdWUgPT09IHZhbHVlO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfbWFwKG9wdGlvbnMsIGZ1bmN0aW9uIChvcHQsIGkpIHtcbiAgICAgICAgcmV0dXJuIERyb3Bkb3duSXRlbS5jcmVhdGUoX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgYWN0aXZlOiBpc0FjdGl2ZShvcHQudmFsdWUpLFxuICAgICAgICAgIG9uQ2xpY2s6IF90aGlzLmhhbmRsZUl0ZW1DbGljayxcbiAgICAgICAgICBzZWxlY3RlZDogc2VsZWN0ZWRJbmRleCA9PT0gaVxuICAgICAgICB9LCBvcHQsIHtcbiAgICAgICAgICBrZXk6IGdldEtleU9yVmFsdWUob3B0LmtleSwgb3B0LnZhbHVlKSxcbiAgICAgICAgICAvLyBOZWVkZWQgZm9yIGhhbmRsaW5nIGNsaWNrIGV2ZW50cyBvbiBkaXNhYmxlZCBpdGVtc1xuICAgICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKHt9LCBvcHQuc3R5bGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6ICdhbGwnXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVuZGVyTWVudVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxNyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMxNy5jaGlsZHJlbixcbiAgICAgICAgICBkaXJlY3Rpb24gPSBfdGhpcyRwcm9wczE3LmRpcmVjdGlvbixcbiAgICAgICAgICBoZWFkZXIgPSBfdGhpcyRwcm9wczE3LmhlYWRlcjtcbiAgICAgIHZhciBvcGVuID0gX3RoaXMuc3RhdGUub3BlbjtcblxuICAgICAgdmFyIGFyaWFPcHRpb25zID0gX3RoaXMuZ2V0RHJvcGRvd25NZW51QXJpYU9wdGlvbnMoKTsgLy8gc2luZ2xlIG1lbnUgY2hpbGRcblxuXG4gICAgICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgICAgIHZhciBtZW51Q2hpbGQgPSBDaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGN4KGRpcmVjdGlvbiwgdXNlS2V5T25seShvcGVuLCAndmlzaWJsZScpLCBtZW51Q2hpbGQucHJvcHMuY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChtZW51Q2hpbGQsIF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgIH0sIGFyaWFPcHRpb25zKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bkb3duTWVudSwgX2V4dGVuZHMoe30sIGFyaWFPcHRpb25zLCB7XG4gICAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgICAgICBvcGVuOiBvcGVuXG4gICAgICB9KSwgRHJvcGRvd25IZWFkZXIuY3JlYXRlKGhlYWRlciwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KSwgX3RoaXMucmVuZGVyT3B0aW9ucygpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEcm9wZG93biwgW3tcbiAgICBrZXk6IFwiZ2V0SW5pdGlhbEF1dG9Db250cm9sbGVkU3RhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbEF1dG9Db250cm9sbGVkU3RhdGUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb2N1czogZmFsc2UsXG4gICAgICAgIHNlYXJjaFF1ZXJ5OiAnJ1xuICAgICAgfTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcblxuICB9LCB7XG4gICAga2V5OiBcIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTcgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIG9wZW4gPSBfdGhpcyRzdGF0ZTcub3BlbixcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHN0YXRlNy52YWx1ZTtcbiAgICAgIHRoaXMuc2V0VmFsdWUodmFsdWUpO1xuICAgICAgdGhpcy5zZXRTZWxlY3RlZEluZGV4KHZhbHVlKTtcblxuICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICB9XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG5cbiAgfSwge1xuICAgIGtleTogXCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIF9nZXQyKF9nZXRQcm90b3R5cGVPZihEcm9wZG93bi5wcm90b3R5cGUpLCBcIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIsIHRoaXMpLmNhbGwodGhpcywgbmV4dFByb3BzKTtcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgLy8gaW4gZGV2ZWxvcG1lbnQsIHZhbGlkYXRlIHZhbHVlIHR5cGUgbWF0Y2hlcyBkcm9wZG93biB0eXBlXG4gICAgICAgIHZhciBpc05leHRWYWx1ZUFycmF5ID0gQXJyYXkuaXNBcnJheShuZXh0UHJvcHMudmFsdWUpO1xuXG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IF9oYXMobmV4dFByb3BzLCAndmFsdWUnKTtcblxuICAgICAgICBpZiAoaGFzVmFsdWUgJiYgbmV4dFByb3BzLm11bHRpcGxlICYmICFpc05leHRWYWx1ZUFycmF5KSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRHJvcGRvd24gYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IHdoZW4gYG11bHRpcGxlYCBpcyBzZXQuJyArIFwiIFJlY2VpdmVkIHR5cGU6IGBcIi5jb25jYXQoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5leHRQcm9wcy52YWx1ZSksIFwiYC5cIikpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc1ZhbHVlICYmICFuZXh0UHJvcHMubXVsdGlwbGUgJiYgaXNOZXh0VmFsdWVBcnJheSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Ryb3Bkb3duIGB2YWx1ZWAgbXVzdCBub3QgYmUgYW4gYXJyYXkgd2hlbiBgbXVsdGlwbGVgIGlzIG5vdCBzZXQuJyArICcgRWl0aGVyIHNldCBgbXVsdGlwbGU9e3RydWV9YCBvciB1c2UgYSBzdHJpbmcgb3IgbnVtYmVyIHZhbHVlLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gICAgICBpZiAoIXNoYWxsb3dFcXVhbChuZXh0UHJvcHMudmFsdWUsIHRoaXMucHJvcHMudmFsdWUpKSB7XG4gICAgICAgIHRoaXMuc2V0VmFsdWUobmV4dFByb3BzLnZhbHVlKTtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEluZGV4KG5leHRQcm9wcy52YWx1ZSk7XG4gICAgICB9IC8vIFRoZSBzZWxlY3RlZCBpbmRleCBpcyBvbmx5IGRlcGVuZGVudCBvbiBvcHRpb24ga2V5cy92YWx1ZXMuXG4gICAgICAvLyBXZSBvbmx5IGNoZWNrIHRob3NlIHByb3BlcnRpZXMgdG8gYXZvaWQgcmVjdXJzaXZlIHBlcmZvcm1hbmNlIGltcGFjdHMuXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vU2VtYW50aWMtT3JnL1NlbWFudGljLVVJLVJlYWN0L2lzc3Vlcy8zMDAwXG5cblxuICAgICAgaWYgKCFfaXNFcXVhbCh0aGlzLmdldEtleUFuZFZhbHVlcyhuZXh0UHJvcHMub3B0aW9ucyksIHRoaXMuZ2V0S2V5QW5kVmFsdWVzKHRoaXMucHJvcHMub3B0aW9ucykpKSB7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJbmRleCh1bmRlZmluZWQsIG5leHRQcm9wcy5vcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgICAgcmV0dXJuICFzaGFsbG93RXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKSB8fCAhc2hhbGxvd0VxdWFsKG5leHRTdGF0ZSwgdGhpcy5zdGF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29tcGxleGl0eVxuICAgICAgdmFyIF90aGlzJHByb3BzMTggPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNsb3NlT25CbHVyID0gX3RoaXMkcHJvcHMxOC5jbG9zZU9uQmx1cixcbiAgICAgICAgICBtaW5DaGFyYWN0ZXJzID0gX3RoaXMkcHJvcHMxOC5taW5DaGFyYWN0ZXJzLFxuICAgICAgICAgIG9wZW5PbkZvY3VzID0gX3RoaXMkcHJvcHMxOC5vcGVuT25Gb2N1cyxcbiAgICAgICAgICBzZWFyY2ggPSBfdGhpcyRwcm9wczE4LnNlYXJjaDsgLy8gZm9jdXNlZCAvIGJsdXJyZWRcblxuICAgICAgaWYgKCFwcmV2U3RhdGUuZm9jdXMgJiYgdGhpcy5zdGF0ZS5mb2N1cykge1xuICAgICAgICBpZiAoIXRoaXMuaXNNb3VzZURvd24pIHtcbiAgICAgICAgICB2YXIgb3BlbmFibGUgPSAhc2VhcmNoIHx8IHNlYXJjaCAmJiBtaW5DaGFyYWN0ZXJzID09PSAxICYmICF0aGlzLnN0YXRlLm9wZW47XG4gICAgICAgICAgaWYgKG9wZW5PbkZvY3VzICYmIG9wZW5hYmxlKSB0aGlzLm9wZW4oKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwcmV2U3RhdGUuZm9jdXMgJiYgIXRoaXMuc3RhdGUuZm9jdXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzTW91c2VEb3duICYmIGNsb3NlT25CbHVyKSB7XG4gICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9IC8vIG9wZW5lZCAvIGNsb3NlZFxuXG5cbiAgICAgIGlmICghcHJldlN0YXRlLm9wZW4gJiYgdGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICAgIHRoaXMuc2V0T3BlbkRpcmVjdGlvbigpO1xuICAgICAgICB0aGlzLnNjcm9sbFNlbGVjdGVkSXRlbUludG9WaWV3KCk7XG4gICAgICB9IGVsc2UgaWYgKHByZXZTdGF0ZS5vcGVuICYmICF0aGlzLnN0YXRlLm9wZW4pIHt9XG4gICAgfSAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gRG9jdW1lbnQgRXZlbnQgSGFuZGxlcnNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gb25DaGFuZ2UgbmVlZHMgdG8gcmVjZWl2ZSBhIHZhbHVlXG4gICAgLy8gY2FuJ3QgcmVseSBvbiBwcm9wcy52YWx1ZSBpZiB3ZSBhcmUgY29udHJvbGxlZFxuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RHJvcGRvd25NZW51QXJpYU9wdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RHJvcGRvd25NZW51QXJpYU9wdGlvbnMoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMxOSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgc2VhcmNoID0gX3RoaXMkcHJvcHMxOS5zZWFyY2gsXG4gICAgICAgICAgbXVsdGlwbGUgPSBfdGhpcyRwcm9wczE5Lm11bHRpcGxlO1xuICAgICAgdmFyIGFyaWFPcHRpb25zID0ge307XG5cbiAgICAgIGlmIChzZWFyY2gpIHtcbiAgICAgICAgYXJpYU9wdGlvbnNbJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJ10gPSBtdWx0aXBsZTtcbiAgICAgICAgYXJpYU9wdGlvbnMucm9sZSA9ICdsaXN0Ym94JztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFyaWFPcHRpb25zO1xuICAgIH0gLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFNldHRlcnNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMjAgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2ljID0gX3RoaXMkcHJvcHMyMC5iYXNpYyxcbiAgICAgICAgICBidXR0b24gPSBfdGhpcyRwcm9wczIwLmJ1dHRvbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIwLmNsYXNzTmFtZSxcbiAgICAgICAgICBjb21wYWN0ID0gX3RoaXMkcHJvcHMyMC5jb21wYWN0LFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyMC5kaXNhYmxlZCxcbiAgICAgICAgICBlcnJvciA9IF90aGlzJHByb3BzMjAuZXJyb3IsXG4gICAgICAgICAgZmx1aWQgPSBfdGhpcyRwcm9wczIwLmZsdWlkLFxuICAgICAgICAgIGZsb2F0aW5nID0gX3RoaXMkcHJvcHMyMC5mbG9hdGluZyxcbiAgICAgICAgICBpY29uID0gX3RoaXMkcHJvcHMyMC5pY29uLFxuICAgICAgICAgIGlubGluZSA9IF90aGlzJHByb3BzMjAuaW5saW5lLFxuICAgICAgICAgIGl0ZW0gPSBfdGhpcyRwcm9wczIwLml0ZW0sXG4gICAgICAgICAgbGFiZWxlZCA9IF90aGlzJHByb3BzMjAubGFiZWxlZCxcbiAgICAgICAgICBsb2FkaW5nID0gX3RoaXMkcHJvcHMyMC5sb2FkaW5nLFxuICAgICAgICAgIG11bHRpcGxlID0gX3RoaXMkcHJvcHMyMC5tdWx0aXBsZSxcbiAgICAgICAgICBwb2ludGluZyA9IF90aGlzJHByb3BzMjAucG9pbnRpbmcsXG4gICAgICAgICAgc2VhcmNoID0gX3RoaXMkcHJvcHMyMC5zZWFyY2gsXG4gICAgICAgICAgc2VsZWN0aW9uID0gX3RoaXMkcHJvcHMyMC5zZWxlY3Rpb24sXG4gICAgICAgICAgc2Nyb2xsaW5nID0gX3RoaXMkcHJvcHMyMC5zY3JvbGxpbmcsXG4gICAgICAgICAgc2ltcGxlID0gX3RoaXMkcHJvcHMyMC5zaW1wbGUsXG4gICAgICAgICAgdHJpZ2dlciA9IF90aGlzJHByb3BzMjAudHJpZ2dlcjtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTggPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGZvY3VzID0gX3RoaXMkc3RhdGU4LmZvY3VzLFxuICAgICAgICAgIG9wZW4gPSBfdGhpcyRzdGF0ZTgub3BlbixcbiAgICAgICAgICB1cHdhcmQgPSBfdGhpcyRzdGF0ZTgudXB3YXJkOyAvLyBDbGFzc2VzXG5cbiAgICAgIHZhciBjbGFzc2VzID0gY3goJ3VpJywgdXNlS2V5T25seShvcGVuLCAnYWN0aXZlIHZpc2libGUnKSwgdXNlS2V5T25seShkaXNhYmxlZCwgJ2Rpc2FibGVkJyksIHVzZUtleU9ubHkoZXJyb3IsICdlcnJvcicpLCB1c2VLZXlPbmx5KGxvYWRpbmcsICdsb2FkaW5nJyksIHVzZUtleU9ubHkoYmFzaWMsICdiYXNpYycpLCB1c2VLZXlPbmx5KGJ1dHRvbiwgJ2J1dHRvbicpLCB1c2VLZXlPbmx5KGNvbXBhY3QsICdjb21wYWN0JyksIHVzZUtleU9ubHkoZmx1aWQsICdmbHVpZCcpLCB1c2VLZXlPbmx5KGZsb2F0aW5nLCAnZmxvYXRpbmcnKSwgdXNlS2V5T25seShpbmxpbmUsICdpbmxpbmUnKSwgLy8gVE9ETzogY29uc2lkZXIgYXVnbWVudGF0aW9uIHRvIHJlbmRlciBEcm9wZG93bnMgYXMgQnV0dG9uL01lbnUsIHNvbHZlcyBpY29uL2xpbmsgaXRlbSBpc3N1ZXNcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZW1hbnRpYy1PcmcvU2VtYW50aWMtVUktUmVhY3QvaXNzdWVzLzQwMSNpc3N1ZWNvbW1lbnQtMjQwNDg3MjI5XG4gICAgICAvLyBUT0RPOiB0aGUgaWNvbiBjbGFzcyBpcyBvbmx5IHJlcXVpcmVkIHdoZW4gYSBkcm9wZG93biBpcyBhIGJ1dHRvblxuICAgICAgLy8gdXNlS2V5T25seShpY29uLCAnaWNvbicpLFxuICAgICAgdXNlS2V5T25seShsYWJlbGVkLCAnbGFiZWxlZCcpLCB1c2VLZXlPbmx5KGl0ZW0sICdpdGVtJyksIHVzZUtleU9ubHkobXVsdGlwbGUsICdtdWx0aXBsZScpLCB1c2VLZXlPbmx5KHNlYXJjaCwgJ3NlYXJjaCcpLCB1c2VLZXlPbmx5KHNlbGVjdGlvbiwgJ3NlbGVjdGlvbicpLCB1c2VLZXlPbmx5KHNpbXBsZSwgJ3NpbXBsZScpLCB1c2VLZXlPbmx5KHNjcm9sbGluZywgJ3Njcm9sbGluZycpLCB1c2VLZXlPbmx5KHVwd2FyZCwgJ3Vwd2FyZCcpLCB1c2VLZXlPclZhbHVlQW5kS2V5KHBvaW50aW5nLCAncG9pbnRpbmcnKSwgJ2Ryb3Bkb3duJywgY2xhc3NOYW1lKTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoRHJvcGRvd24sIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoRHJvcGRvd24sIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIGFyaWFPcHRpb25zID0gdGhpcy5nZXREcm9wZG93bkFyaWFPcHRpb25zKEVsZW1lbnRUeXBlLCB0aGlzLnByb3BzKTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlZiwge1xuICAgICAgICBpbm5lclJlZjogdGhpcy5yZWZcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCBhcmlhT3B0aW9ucywge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIG9uQmx1cjogdGhpcy5oYW5kbGVCbHVyLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLFxuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd24sXG4gICAgICAgIG9uRm9jdXM6IHRoaXMuaGFuZGxlRm9jdXMsXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgdGFiSW5kZXg6IHRoaXMuY29tcHV0ZVRhYkluZGV4KClcbiAgICAgIH0pLCB0aGlzLnJlbmRlckxhYmVscygpLCB0aGlzLnJlbmRlclNlYXJjaElucHV0KCksIHRoaXMucmVuZGVyU2VhcmNoU2l6ZXIoKSwgdHJpZ2dlciB8fCB0aGlzLnJlbmRlclRleHQoKSwgSWNvbi5jcmVhdGUoaWNvbiwge1xuICAgICAgICBvdmVycmlkZVByb3BzOiB0aGlzLmhhbmRsZUljb25PdmVycmlkZXMsXG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pLCB0aGlzLnJlbmRlck1lbnUoKSwgb3BlbiAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KEV2ZW50U3RhY2ssIHtcbiAgICAgICAgbmFtZTogXCJrZXlkb3duXCIsXG4gICAgICAgIG9uOiB0aGlzLmNsb3NlT25Fc2NhcGVcbiAgICAgIH0pLCBvcGVuICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRXZlbnRTdGFjaywge1xuICAgICAgICBuYW1lOiBcImtleWRvd25cIixcbiAgICAgICAgb246IHRoaXMubW92ZVNlbGVjdGlvbk9uS2V5RG93blxuICAgICAgfSksIG9wZW4gJiYgUmVhY3QuY3JlYXRlRWxlbWVudChFdmVudFN0YWNrLCB7XG4gICAgICAgIG5hbWU6IFwiY2xpY2tcIixcbiAgICAgICAgb246IHRoaXMuY2xvc2VPbkRvY3VtZW50Q2xpY2tcbiAgICAgIH0pLCBvcGVuICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRXZlbnRTdGFjaywge1xuICAgICAgICBuYW1lOiBcImtleWRvd25cIixcbiAgICAgICAgb246IHRoaXMuc2VsZWN0SXRlbU9uRW50ZXJcbiAgICAgIH0pLCBmb2N1cyAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KEV2ZW50U3RhY2ssIHtcbiAgICAgICAgbmFtZTogXCJrZXlkb3duXCIsXG4gICAgICAgIG9uOiB0aGlzLnJlbW92ZUl0ZW1PbkJhY2tzcGFjZVxuICAgICAgfSksIGZvY3VzICYmICFvcGVuICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRXZlbnRTdGFjaywge1xuICAgICAgICBuYW1lOiBcImtleWRvd25cIixcbiAgICAgICAgb246IHRoaXMub3Blbk9uQXJyb3dcbiAgICAgIH0pLCBmb2N1cyAmJiAhb3BlbiAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KEV2ZW50U3RhY2ssIHtcbiAgICAgICAgbmFtZTogXCJrZXlkb3duXCIsXG4gICAgICAgIG9uOiB0aGlzLm9wZW5PblNwYWNlXG4gICAgICB9KSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEcm9wZG93bjtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KERyb3Bkb3duLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGFkZGl0aW9uTGFiZWw6ICdBZGQgJyxcbiAgYWRkaXRpb25Qb3NpdGlvbjogJ3RvcCcsXG4gIGNsb3NlT25CbHVyOiB0cnVlLFxuICBjbG9zZU9uRXNjYXBlOiB0cnVlLFxuICBkZWJ1cnI6IGZhbHNlLFxuICBpY29uOiAnZHJvcGRvd24nLFxuICBtaW5DaGFyYWN0ZXJzOiAxLFxuICBub1Jlc3VsdHNNZXNzYWdlOiAnTm8gcmVzdWx0cyBmb3VuZC4nLFxuICBvcGVuT25Gb2N1czogdHJ1ZSxcbiAgcmVuZGVyTGFiZWw6IGZ1bmN0aW9uIHJlbmRlckxhYmVsKF9yZWYyKSB7XG4gICAgdmFyIHRleHQgPSBfcmVmMi50ZXh0O1xuICAgIHJldHVybiB0ZXh0O1xuICB9LFxuICBzZWFyY2hJbnB1dDogJ3RleHQnLFxuICBzZWxlY3RPbkJsdXI6IHRydWUsXG4gIHNlbGVjdE9uTmF2aWdhdGlvbjogdHJ1ZSxcbiAgd3JhcFNlbGVjdGlvbjogdHJ1ZVxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShEcm9wZG93biwgXCJhdXRvQ29udHJvbGxlZFByb3BzXCIsIFsnb3BlbicsICdzZWFyY2hRdWVyeScsICdzZWxlY3RlZExhYmVsJywgJ3ZhbHVlJywgJ3Vwd2FyZCddKTtcblxuX2RlZmluZVByb3BlcnR5KERyb3Bkb3duLCBcIkRpdmlkZXJcIiwgRHJvcGRvd25EaXZpZGVyKTtcblxuX2RlZmluZVByb3BlcnR5KERyb3Bkb3duLCBcIkhlYWRlclwiLCBEcm9wZG93bkhlYWRlcik7XG5cbl9kZWZpbmVQcm9wZXJ0eShEcm9wZG93biwgXCJJdGVtXCIsIERyb3Bkb3duSXRlbSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShEcm9wZG93biwgXCJNZW51XCIsIERyb3Bkb3duTWVudSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShEcm9wZG93biwgXCJTZWFyY2hJbnB1dFwiLCBEcm9wZG93blNlYXJjaElucHV0KTtcblxuX2RlZmluZVByb3BlcnR5KERyb3Bkb3duLCBcImhhbmRsZWRQcm9wc1wiLCBbXCJhZGRpdGlvbkxhYmVsXCIsIFwiYWRkaXRpb25Qb3NpdGlvblwiLCBcImFsbG93QWRkaXRpb25zXCIsIFwiYXNcIiwgXCJiYXNpY1wiLCBcImJ1dHRvblwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xlYXJhYmxlXCIsIFwiY2xvc2VPbkJsdXJcIiwgXCJjbG9zZU9uQ2hhbmdlXCIsIFwiY2xvc2VPbkVzY2FwZVwiLCBcImNvbXBhY3RcIiwgXCJkZWJ1cnJcIiwgXCJkZWZhdWx0T3BlblwiLCBcImRlZmF1bHRTZWFyY2hRdWVyeVwiLCBcImRlZmF1bHRTZWxlY3RlZExhYmVsXCIsIFwiZGVmYXVsdFVwd2FyZFwiLCBcImRlZmF1bHRWYWx1ZVwiLCBcImRpcmVjdGlvblwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmbG9hdGluZ1wiLCBcImZsdWlkXCIsIFwiaGVhZGVyXCIsIFwiaWNvblwiLCBcImlubGluZVwiLCBcIml0ZW1cIiwgXCJsYWJlbGVkXCIsIFwibGF6eUxvYWRcIiwgXCJsb2FkaW5nXCIsIFwibWluQ2hhcmFjdGVyc1wiLCBcIm11bHRpcGxlXCIsIFwibm9SZXN1bHRzTWVzc2FnZVwiLCBcIm9uQWRkSXRlbVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcIm9uQ2xvc2VcIiwgXCJvbkZvY3VzXCIsIFwib25MYWJlbENsaWNrXCIsIFwib25Nb3VzZURvd25cIiwgXCJvbk9wZW5cIiwgXCJvblNlYXJjaENoYW5nZVwiLCBcIm9wZW5cIiwgXCJvcGVuT25Gb2N1c1wiLCBcIm9wdGlvbnNcIiwgXCJwbGFjZWhvbGRlclwiLCBcInBvaW50aW5nXCIsIFwicmVuZGVyTGFiZWxcIiwgXCJzY3JvbGxpbmdcIiwgXCJzZWFyY2hcIiwgXCJzZWFyY2hJbnB1dFwiLCBcInNlYXJjaFF1ZXJ5XCIsIFwic2VsZWN0T25CbHVyXCIsIFwic2VsZWN0T25OYXZpZ2F0aW9uXCIsIFwic2VsZWN0ZWRMYWJlbFwiLCBcInNlbGVjdGlvblwiLCBcInNpbXBsZVwiLCBcInRhYkluZGV4XCIsIFwidGV4dFwiLCBcInRyaWdnZXJcIiwgXCJ1cHdhcmRcIiwgXCJ2YWx1ZVwiLCBcIndyYXBTZWxlY3Rpb25cIl0pO1xuXG5leHBvcnQgeyBEcm9wZG93biBhcyBkZWZhdWx0IH07XG5Ecm9wZG93bi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBMYWJlbCBwcmVmaXhlZCB0byBhbiBvcHRpb24gYWRkZWQgYnkgYSB1c2VyLiAqL1xuICBhZGRpdGlvbkxhYmVsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZWxlbWVudCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKiBQb3NpdGlvbiBvZiB0aGUgYEFkZDogLi4uYCBvcHRpb24gaW4gdGhlIGRyb3Bkb3duIGxpc3QgKCd0b3AnIG9yICdib3R0b20nKS4gKi9cbiAgYWRkaXRpb25Qb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsndG9wJywgJ2JvdHRvbSddKSxcblxuICAvKipcbiAgICogQWxsb3cgdXNlciBhZGRpdGlvbnMgdG8gdGhlIGxpc3Qgb2Ygb3B0aW9ucyAoYm9vbGVhbikuXG4gICAqIFJlcXVpcmVzIHRoZSB1c2Ugb2YgYHNlbGVjdGlvbmAsIGBvcHRpb25zYCBhbmQgYHNlYXJjaGAuXG4gICAqL1xuICBhbGxvd0FkZGl0aW9uczogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtjdXN0b21Qcm9wVHlwZXMuZGVtYW5kKFsnb3B0aW9ucycsICdzZWxlY3Rpb24nLCAnc2VhcmNoJ10pLCBQcm9wVHlwZXMuYm9vbF0pLFxuXG4gIC8qKiBBIERyb3Bkb3duIGNhbiByZWR1Y2UgaXRzIGNvbXBsZXhpdHkuICovXG4gIGJhc2ljOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogRm9ybWF0IHRoZSBEcm9wZG93biB0byBhcHBlYXIgYXMgYSBidXR0b24uICovXG4gIGJ1dHRvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsnb3B0aW9ucycsICdzZWxlY3Rpb24nXSksIGN1c3RvbVByb3BUeXBlcy5naXZlblByb3BzKHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkXG4gIH0sIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQpXSksXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBVc2luZyB0aGUgY2xlYXJhYmxlIHNldHRpbmcgd2lsbCBsZXQgdXNlcnMgcmVtb3ZlIHRoZWlyIHNlbGVjdGlvbiBmcm9tIGEgZHJvcGRvd24uICovXG4gIGNsZWFyYWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFdoZXRoZXIgb3Igbm90IHRoZSBtZW51IHNob3VsZCBjbG9zZSB3aGVuIHRoZSBkcm9wZG93biBpcyBibHVycmVkLiAqL1xuICBjbG9zZU9uQmx1cjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFdoZXRoZXIgb3Igbm90IHRoZSBkcm9wZG93biBzaG91bGQgY2xvc2Ugd2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLiAqL1xuICBjbG9zZU9uRXNjYXBlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdGhlIG1lbnUgc2hvdWxkIGNsb3NlIHdoZW4gYSB2YWx1ZSBpcyBzZWxlY3RlZCBmcm9tIHRoZSBkcm9wZG93bi5cbiAgICogQnkgZGVmYXVsdCwgbXVsdGlwbGUgc2VsZWN0aW9uIGRyb3Bkb3ducyB3aWxsIHJlbWFpbiBvcGVuIG9uIGNoYW5nZSwgd2hpbGUgc2luZ2xlXG4gICAqIHNlbGVjdGlvbiBkcm9wZG93bnMgd2lsbCBjbG9zZSBvbiBjaGFuZ2UuXG4gICAqL1xuICBjbG9zZU9uQ2hhbmdlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBjb21wYWN0IGRyb3Bkb3duIGhhcyBubyBtaW5pbXVtIHdpZHRoLiAqL1xuICBjb21wYWN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogV2hldGhlciBvciBub3QgdGhlIGRyb3Bkb3duIHNob3VsZCBzdHJpcCBkaWFjcml0aWNzIGluIG9wdGlvbnMgYW5kIGlucHV0IHNlYXJjaCAqL1xuICBkZWJ1cnI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBJbml0aWFsIHZhbHVlIG9mIG9wZW4uICovXG4gIGRlZmF1bHRPcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogSW5pdGlhbCB2YWx1ZSBvZiBzZWFyY2hRdWVyeS4gKi9cbiAgZGVmYXVsdFNlYXJjaFF1ZXJ5OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBDdXJyZW50bHkgc2VsZWN0ZWQgbGFiZWwgaW4gbXVsdGktc2VsZWN0LiAqL1xuICBkZWZhdWx0U2VsZWN0ZWRMYWJlbDogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtjdXN0b21Qcm9wVHlwZXMuZGVtYW5kKFsnbXVsdGlwbGUnXSksIFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKV0pLFxuXG4gIC8qKiBJbml0aWFsIHZhbHVlIG9mIHVwd2FyZC4gKi9cbiAgZGVmYXVsdFVwd2FyZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEluaXRpYWwgdmFsdWUgb3IgdmFsdWUgYXJyYXkgaWYgbXVsdGlwbGUuICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSkpXSksXG5cbiAgLyoqIEEgZHJvcGRvd24gbWVudSBjYW4gb3BlbiB0byB0aGUgbGVmdCBvciB0byB0aGUgcmlnaHQuICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKSxcblxuICAvKiogQSBkaXNhYmxlZCBkcm9wZG93biBtZW51IG9yIGl0ZW0gZG9lcyBub3QgYWxsb3cgdXNlciBpbnRlcmFjdGlvbi4gKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBbiBlcnJvcmVkIGRyb3Bkb3duIGNhbiBhbGVydCBhIHVzZXIgdG8gYSBwcm9ibGVtLiAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgZHJvcGRvd24gbWVudSBjYW4gY29udGFpbiBmbG9hdGVkIGNvbnRlbnQuICovXG4gIGZsb2F0aW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBkcm9wZG93biBjYW4gdGFrZSB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgcGFyZW50ICovXG4gIGZsdWlkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBkcm9wZG93biBtZW51IGNhbiBjb250YWluIGEgaGVhZGVyLiAqL1xuICBoZWFkZXI6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEljb24uICovXG4gIGljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqIEEgZHJvcGRvd24gY2FuIGJlIGZvcm1hdHRlZCB0byBhcHBlYXIgaW5saW5lIGluIG90aGVyIGNvbnRlbnQuICovXG4gIGlubGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgZHJvcGRvd24gY2FuIGJlIGZvcm1hdHRlZCBhcyBhIE1lbnUgaXRlbS4gKi9cbiAgaXRlbTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgZHJvcGRvd24gY2FuIGJlIGxhYmVsZWQuICovXG4gIGxhYmVsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGRyb3Bkb3duIGNhbiBkZWZlciByZW5kZXJpbmcgaXRzIG9wdGlvbnMgdW50aWwgaXQgaXMgb3Blbi4gKi9cbiAgbGF6eUxvYWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGRyb3Bkb3duIGNhbiBzaG93IHRoYXQgaXQgaXMgY3VycmVudGx5IGxvYWRpbmcgZGF0YS4gKi9cbiAgbG9hZGluZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFRoZSBtaW5pbXVtIGNoYXJhY3RlcnMgZm9yIGEgc2VhcmNoIHRvIGJlZ2luIHNob3dpbmcgcmVzdWx0cy4gKi9cbiAgbWluQ2hhcmFjdGVyczogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKiogQSBzZWxlY3Rpb24gZHJvcGRvd24gY2FuIGFsbG93IG11bHRpcGxlIHNlbGVjdGlvbnMuICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogTWVzc2FnZSB0byBkaXNwbGF5IHdoZW4gdGhlcmUgYXJlIG5vIHJlc3VsdHMuICovXG4gIG5vUmVzdWx0c01lc3NhZ2U6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIHVzZXIgYWRkcyBhIG5ldyBpdGVtLiBVc2UgdGhpcyB0byB1cGRhdGUgdGhlIG9wdGlvbnMgbGlzdC5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcyBhbmQgdGhlIG5ldyBpdGVtJ3MgdmFsdWUuXG4gICAqL1xuICBvbkFkZEl0ZW06IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gYmx1ci5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSB1c2VyIGF0dGVtcHRzIHRvIGNoYW5nZSB0aGUgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMgYW5kIHByb3Bvc2VkIHZhbHVlLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gY2xpY2suXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBjbG9zZSBldmVudCBoYXBwZW5zLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBmb2N1cy5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIG11bHRpLXNlbGVjdCBsYWJlbCBpcyBjbGlja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIGxhYmVsIHByb3BzLlxuICAgKi9cbiAgb25MYWJlbENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIG1vdXNlZG93bi5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uTW91c2VEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYW4gb3BlbiBldmVudCBoYXBwZW5zLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIHNlYXJjaCBpbnB1dCBjaGFuZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMsIGluY2x1ZGVzIGN1cnJlbnQgdmFsdWUgb2Ygc2VhcmNoUXVlcnkuXG4gICAqL1xuICBvblNlYXJjaENoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IHRoZSBkcm9wZG93biBtZW51IGlzIGRpc3BsYXllZC4gKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFdoZXRoZXIgb3Igbm90IHRoZSBtZW51IHNob3VsZCBvcGVuIHdoZW4gdGhlIGRyb3Bkb3duIGlzIGZvY3VzZWQuICovXG4gIG9wZW5PbkZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQXJyYXkgb2YgRHJvcGRvd24uSXRlbSBwcm9wcyBlLmcuIGB7IHRleHQ6ICcnLCB2YWx1ZTogJycgfWAgKi9cbiAgb3B0aW9uczogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtjdXN0b21Qcm9wVHlwZXMuZGlzYWxsb3coWydjaGlsZHJlbiddKSwgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKERyb3Bkb3duSXRlbS5wcm9wVHlwZXMpKV0pLFxuXG4gIC8qKiBQbGFjZWhvbGRlciB0ZXh0LiAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQSBkcm9wZG93biBjYW4gYmUgZm9ybWF0dGVkIHNvIHRoYXQgaXRzIG1lbnUgaXMgcG9pbnRpbmcuICovXG4gIHBvaW50aW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAndG9wIGxlZnQnLCAndG9wIHJpZ2h0JywgJ2JvdHRvbScsICdib3R0b20gbGVmdCcsICdib3R0b20gcmlnaHQnXSldKSxcblxuICAvKipcbiAgICogTWFwcGVkIG92ZXIgdGhlIGFjdGl2ZSBpdGVtcyBhbmQgcmV0dXJucyBzaG9ydGhhbmQgZm9yIHRoZSBhY3RpdmUgaXRlbSBMYWJlbHMuXG4gICAqIE9ubHkgYXBwbGllcyB0byBgbXVsdGlwbGVgIERyb3Bkb3ducy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGl0ZW0gLSBBIGN1cnJlbnRseSBhY3RpdmUgZHJvcGRvd24gaXRlbS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGN1cnJlbnQgaW5kZXguXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkZWZhdWx0TGFiZWxQcm9wcyAtIFRoZSBkZWZhdWx0IHByb3BzIGZvciBhbiBhY3RpdmUgaXRlbSBMYWJlbC5cbiAgICogQHJldHVybnMgeyp9IFNob3J0aGFuZCBmb3IgYSBMYWJlbC5cbiAgICovXG4gIHJlbmRlckxhYmVsOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogQSBkcm9wZG93biBjYW4gaGF2ZSBpdHMgbWVudSBzY3JvbGwuICovXG4gIHNjcm9sbGluZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgc2VsZWN0aW9uIGRyb3Bkb3duIGNhbiBhbGxvdyBhIHVzZXIgdG8gc2VhcmNoIHRocm91Z2ggYSBsYXJnZSBsaXN0IG9mIGNob2ljZXMuXG4gICAqIFBhc3MgYSBmdW5jdGlvbiBoZXJlIHRvIHJlcGxhY2UgdGhlIGRlZmF1bHQgc2VhcmNoLlxuICAgKi9cbiAgc2VhcmNoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKiogQSBzaG9ydGhhbmQgZm9yIGEgc2VhcmNoIGlucHV0LiAqL1xuICBzZWFyY2hJbnB1dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5LCBQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKiBDdXJyZW50IHZhbHVlIG9mIHNlYXJjaFF1ZXJ5LiBDcmVhdGVzIGEgY29udHJvbGxlZCBjb21wb25lbnQuICovXG4gIHNlYXJjaFF1ZXJ5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvLyBUT0RPICdzZWFyY2hJbk1lbnUnIG9yICdzZWFyY2g9J2luIG1lbnUnIG9yID8/PyAgSG93IHRvIGhhbmRsZSB0aGlzIG1hcmt1cCBhbmQgZnVuY3Rpb25hbGl0eT9cblxuICAvKiogRGVmaW5lIHdoZXRoZXIgdGhlIGhpZ2hsaWdodGVkIGl0ZW0gc2hvdWxkIGJlIHNlbGVjdGVkIG9uIGJsdXIuICovXG4gIHNlbGVjdE9uQmx1cjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRvIGNoYW5nZSB0aGUgdmFsdWUgd2hlbiBuYXZpZ2F0aW5nIHRoZSBtZW51IHVzaW5nIGFycm93IGtleXMuXG4gICAqIFNldHRpbmcgdG8gZmFsc2Ugd2lsbCByZXF1aXJlIGVudGVyIG9yIGxlZnQgY2xpY2sgdG8gY29uZmlybSBhIGNob2ljZS5cbiAgICovXG4gIHNlbGVjdE9uTmF2aWdhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEN1cnJlbnRseSBzZWxlY3RlZCBsYWJlbCBpbiBtdWx0aS1zZWxlY3QuICovXG4gIHNlbGVjdGVkTGFiZWw6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRlbWFuZChbJ211bHRpcGxlJ10pLCBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSldKSxcblxuICAvKiogQSBkcm9wZG93biBjYW4gYmUgdXNlZCB0byBzZWxlY3QgYmV0d2VlbiBjaG9pY2VzIGluIGEgZm9ybS4gKi9cbiAgc2VsZWN0aW9uOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2NoaWxkcmVuJ10pLCBjdXN0b21Qcm9wVHlwZXMuZGVtYW5kKFsnb3B0aW9ucyddKSwgUHJvcFR5cGVzLmJvb2xdKSxcblxuICAvKiogQSBzaW1wbGUgZHJvcGRvd24gY2FuIG9wZW4gd2l0aG91dCBKYXZhc2NyaXB0LiAqL1xuICBzaW1wbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGRyb3Bkb3duIGNhbiByZWNlaXZlIGZvY3VzLiAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKiBUaGUgdGV4dCBkaXNwbGF5ZWQgaW4gdGhlIGRyb3Bkb3duLCB1c3VhbGx5IGZvciB0aGUgYWN0aXZlIGl0ZW0uICovXG4gIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEN1c3RvbSBlbGVtZW50IHRvIHRyaWdnZXIgdGhlIG1lbnUgdG8gYmVjb21lIHZpc2libGUuIFRha2VzIHBsYWNlIG9mICd0ZXh0Jy4gKi9cbiAgdHJpZ2dlcjogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtjdXN0b21Qcm9wVHlwZXMuZGlzYWxsb3coWydzZWxlY3Rpb24nLCAndGV4dCddKSwgUHJvcFR5cGVzLm5vZGVdKSxcblxuICAvKiogQ3VycmVudCB2YWx1ZSBvciB2YWx1ZSBhcnJheSBpZiBtdWx0aXBsZS4gQ3JlYXRlcyBhIGNvbnRyb2xsZWQgY29tcG9uZW50LiAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSkpXSksXG5cbiAgLyoqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGRyb3Bkb3duIHdpbGwgb3BlbiB1cHdhcmQuICovXG4gIHVwd2FyZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgZHJvcGRvd24gd2lsbCBnbyB0byB0aGUgbGFzdCBlbGVtZW50IHdoZW4gQXJyb3dVcCBpcyBwcmVzc2VkIG9uIHRoZSBmaXJzdCxcbiAgICogb3IgZ28gdG8gdGhlIGZpcnN0IHdoZW4gQXJyb3dEb3duIGlzIHByZXNzZWQgb24gdGhlIGxhc3QoIGFrYSBpbmZpbml0ZSBzZWxlY3Rpb24gKVxuICAgKi9cbiAgd3JhcFNlbGVjdGlvbjogUHJvcFR5cGVzLmJvb2xcbn0gOiB7fTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnLi4vLi4vbW9kdWxlcy9Ecm9wZG93bic7XG4vKipcbiAqIEEgU2VsZWN0IGlzIHN1Z2FyIGZvciA8RHJvcGRvd24gc2VsZWN0aW9uIC8+LlxuICogQHNlZSBEcm9wZG93blxuICogQHNlZSBGb3JtXG4gKi9cblxuZnVuY3Rpb24gU2VsZWN0KHByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bkb3duLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBzZWxlY3Rpb246IHRydWVcbiAgfSkpO1xufVxuXG5TZWxlY3QuaGFuZGxlZFByb3BzID0gW1wib3B0aW9uc1wiXTtcblNlbGVjdC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBcnJheSBvZiBEcm9wZG93bi5JdGVtIHByb3BzIGUuZy4gYHsgdGV4dDogJycsIHZhbHVlOiAnJyB9YCAqL1xuICBvcHRpb25zOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoRHJvcGRvd24uSXRlbS5wcm9wVHlwZXMpKS5pc1JlcXVpcmVkXG59IDoge307XG5TZWxlY3QuRGl2aWRlciA9IERyb3Bkb3duLkRpdmlkZXI7XG5TZWxlY3QuSGVhZGVyID0gRHJvcGRvd24uSGVhZGVyO1xuU2VsZWN0Lkl0ZW0gPSBEcm9wZG93bi5JdGVtO1xuU2VsZWN0Lk1lbnUgPSBEcm9wZG93bi5NZW51O1xuZXhwb3J0IGRlZmF1bHQgU2VsZWN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgX2dldCBmcm9tIFwibG9kYXNoL2dldFwiO1xuaW1wb3J0IHsgUmVmIH0gZnJvbSAnQHN0YXJkdXN0LXVpL3JlYWN0LWNvbXBvbmVudC1yZWYnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIGNyZWF0ZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgVGV4dEFyZWEgY2FuIGJlIHVzZWQgdG8gYWxsb3cgZm9yIGV4dGVuZGVkIHVzZXIgaW5wdXQuXG4gKiBAc2VlIEZvcm1cbiAqL1xuXG52YXIgVGV4dEFyZWEgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRleHRBcmVhLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUZXh0QXJlYSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0QXJlYSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihUZXh0QXJlYSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlZlwiLCBjcmVhdGVSZWYoKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZm9jdXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQ2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBfZ2V0KGUsICd0YXJnZXQudmFsdWUnKTtcblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uQ2hhbmdlJywgZSwgX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMsIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlSW5wdXRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IF9nZXQoZSwgJ3RhcmdldC52YWx1ZScpO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25JbnB1dCcsIGUsIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRleHRBcmVhLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICByb3dzID0gX3RoaXMkcHJvcHMucm93cyxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlO1xuICAgICAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhUZXh0QXJlYSwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShUZXh0QXJlYSwgdGhpcy5wcm9wcyk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWYsIHtcbiAgICAgICAgaW5uZXJSZWY6IHRoaXMucmVmXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgIG9uSW5wdXQ6IHRoaXMuaGFuZGxlSW5wdXQsXG4gICAgICAgIHJvd3M6IHJvd3MsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSkpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGV4dEFyZWE7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShUZXh0QXJlYSwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBhczogJ3RleHRhcmVhJyxcbiAgcm93czogM1xufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShUZXh0QXJlYSwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYXNcIiwgXCJvbkNoYW5nZVwiLCBcIm9uSW5wdXRcIiwgXCJyb3dzXCIsIFwidmFsdWVcIl0pO1xuXG5UZXh0QXJlYS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gY2hhbmdlLlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFRoZSBSZWFjdCBTeW50aGV0aWNFdmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMgYW5kIHRoZSBldmVudCB2YWx1ZS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGlucHV0LlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFRoZSBSZWFjdCBTeW50aGV0aWNFdmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMgYW5kIHRoZSBldmVudCB2YWx1ZS5cbiAgICovXG4gIG9uSW5wdXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKiBJbmRpY2F0ZXMgcm93IGNvdW50IGZvciBhIFRleHRBcmVhLiAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqIFRoZSB2YWx1ZSBvZiB0aGUgdGV4dGFyZWEuICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IFRleHRBcmVhOyIsIi8qKlxuICogTm9ybWFsaXplcyB0aGUgZHVyYXRpb24gb2YgYSB0cmFuc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ8b2JqZWN0fSBkdXJhdGlvbiBUaGUgdmFsdWUgdG8gbm9ybWFsaXplLlxuICogQHBhcmFtIHsnaGlkZSd8J3Nob3cnfSB0eXBlIFRoZSB0eXBlIG9mIHRyYW5zaXRpb24uXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKGR1cmF0aW9uLCB0eXBlKSB7XG4gIHJldHVybiB0eXBlb2YgZHVyYXRpb24gPT09ICdudW1iZXInIHx8IHR5cGVvZiBkdXJhdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbiA6IGR1cmF0aW9uW3R5cGVdO1xufSk7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfaGFzIGZyb20gXCJsb2Rhc2gvaGFzXCI7XG5pbXBvcnQgX2tleXMgZnJvbSBcImxvZGFzaC9rZXlzXCI7XG5pbXBvcnQgX2ZvckVhY2ggZnJvbSBcImxvZGFzaC9mb3JFYWNoXCI7XG5pbXBvcnQgX2ZpbHRlciBmcm9tIFwibG9kYXNoL2ZpbHRlclwiO1xuaW1wb3J0IF9rZXlCeSBmcm9tIFwibG9kYXNoL2tleUJ5XCI7XG5pbXBvcnQgeyBDaGlsZHJlbiwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY2hpbGRyZW4gRWxlbWVudCdzIGNoaWxkcmVuXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cblxuZXhwb3J0IHZhciBnZXRDaGlsZE1hcHBpbmcgPSBmdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIF9rZXlCeShfZmlsdGVyKENoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLCBpc1ZhbGlkRWxlbWVudCksICdrZXknKTtcbn07XG5cbnZhciBnZXRQZW5kaW5nS2V5cyA9IGZ1bmN0aW9uIGdldFBlbmRpbmdLZXlzKHByZXYsIG5leHQpIHtcbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IHt9O1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBfZm9yRWFjaChfa2V5cyhwcmV2KSwgZnVuY3Rpb24gKHByZXZLZXkpIHtcbiAgICBpZiAoIV9oYXMobmV4dCwgcHJldktleSkpIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIFtuZXh0S2V5c1BlbmRpbmcsIHBlbmRpbmdLZXlzXTtcbn07XG5cbnZhciBnZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKGtleSwgcHJldiwgbmV4dCkge1xuICByZXR1cm4gX2hhcyhuZXh0LCBrZXkpID8gbmV4dFtrZXldIDogcHJldltrZXldO1xufTtcbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCpcbiAqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHkgYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXMgYW5kIGEgbmV3IHNldFxuICogb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdCBvcmRlcmluZy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBQcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb20gYGdldENoaWxkTWFwcGluZygpYFxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgTmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tIGBnZXRDaGlsZE1hcHBpbmcoKWBcbiAqIEByZXR1cm4ge29iamVjdH0gQSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5cyBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyXG4gKi9cblxuXG5leHBvcnQgdmFyIG1lcmdlQ2hpbGRNYXBwaW5ncyA9IGZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncygpIHtcbiAgdmFyIHByZXYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgbmV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcblxuICB2YXIgX2dldFBlbmRpbmdLZXlzID0gZ2V0UGVuZGluZ0tleXMocHJldiwgbmV4dCksXG4gICAgICBfZ2V0UGVuZGluZ0tleXMyID0gX3NsaWNlZFRvQXJyYXkoX2dldFBlbmRpbmdLZXlzLCAyKSxcbiAgICAgIG5leHRLZXlzUGVuZGluZyA9IF9nZXRQZW5kaW5nS2V5czJbMF0sXG4gICAgICBwZW5kaW5nS2V5cyA9IF9nZXRQZW5kaW5nS2V5czJbMV07XG5cbiAgX2ZvckVhY2goX2tleXMobmV4dCksIGZ1bmN0aW9uIChuZXh0S2V5KSB7XG4gICAgaWYgKF9oYXMobmV4dEtleXNQZW5kaW5nLCBuZXh0S2V5KSkge1xuICAgICAgX2ZvckVhY2gobmV4dEtleXNQZW5kaW5nW25leHRLZXldLCBmdW5jdGlvbiAocGVuZGluZ0tleSkge1xuICAgICAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleV0gPSBnZXRWYWx1ZShwZW5kaW5nS2V5LCBwcmV2LCBuZXh0KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlKG5leHRLZXksIHByZXYsIG5leHQpO1xuICB9KTtcblxuICBfZm9yRWFjaChwZW5kaW5nS2V5cywgZnVuY3Rpb24gKHBlbmRpbmdLZXkpIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleV0gPSBnZXRWYWx1ZShwZW5kaW5nS2V5LCBwcmV2LCBuZXh0KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn07IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX3ZhbHVlcyBmcm9tIFwibG9kYXNoL3ZhbHVlc1wiO1xuaW1wb3J0IF9nZXQgZnJvbSBcImxvZGFzaC9nZXRcIjtcbmltcG9ydCBfaGFzIGZyb20gXCJsb2Rhc2gvaGFzXCI7XG5pbXBvcnQgX2ZvckVhY2ggZnJvbSBcImxvZGFzaC9mb3JFYWNoXCI7XG5pbXBvcnQgX21hcFZhbHVlcyBmcm9tIFwibG9kYXNoL21hcFZhbHVlc1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0Q2hpbGRNYXBwaW5nLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIG1lcmdlQ2hpbGRNYXBwaW5ncywgU1VJIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBUcmFuc2l0aW9uIGZyb20gJy4vVHJhbnNpdGlvbic7XG5cbi8qKlxuICogQSBUcmFuc2l0aW9uLkdyb3VwIGFuaW1hdGVzIGNoaWxkcmVuIGFzIHRoZXkgbW91bnQgYW5kIHVubW91bnQuXG4gKi9cbnZhciBUcmFuc2l0aW9uR3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zaXRpb25Hcm91cCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihUcmFuc2l0aW9uR3JvdXApKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVPbkhpZGVcIiwgZnVuY3Rpb24gKG5vdGhpbmcsIGNoaWxkUHJvcHMpIHtcbiAgICAgIHZhciByZWFjdEtleSA9IGNoaWxkUHJvcHMucmVhY3RLZXk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG5cbiAgICAgICAgZGVsZXRlIGNoaWxkcmVuW3JlYWN0S2V5XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIndyYXBDaGlsZFwiLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGFuaW1hdGlvbiA9IF90aGlzJHByb3BzLmFuaW1hdGlvbixcbiAgICAgICAgICBkaXJlY3Rpb25hbCA9IF90aGlzJHByb3BzLmRpcmVjdGlvbmFsLFxuICAgICAgICAgIGR1cmF0aW9uID0gX3RoaXMkcHJvcHMuZHVyYXRpb247XG4gICAgICB2YXIga2V5ID0gY2hpbGQua2V5O1xuICAgICAgdmFyIF9vcHRpb25zJHZpc2libGUgPSBvcHRpb25zLnZpc2libGUsXG4gICAgICAgICAgdmlzaWJsZSA9IF9vcHRpb25zJHZpc2libGUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyR2aXNpYmxlLFxuICAgICAgICAgIF9vcHRpb25zJHRyYW5zaXRpb25PbiA9IG9wdGlvbnMudHJhbnNpdGlvbk9uTW91bnQsXG4gICAgICAgICAgdHJhbnNpdGlvbk9uTW91bnQgPSBfb3B0aW9ucyR0cmFuc2l0aW9uT24gPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkdHJhbnNpdGlvbk9uO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwge1xuICAgICAgICBhbmltYXRpb246IGFuaW1hdGlvbixcbiAgICAgICAgZGlyZWN0aW9uYWw6IGRpcmVjdGlvbmFsLFxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIGtleToga2V5LFxuICAgICAgICBvbkhpZGU6IF90aGlzLmhhbmRsZU9uSGlkZSxcbiAgICAgICAgcmVhY3RLZXk6IGtleSxcbiAgICAgICAgdHJhbnNpdGlvbk9uTW91bnQ6IHRyYW5zaXRpb25Pbk1vdW50LFxuICAgICAgICB2aXNpYmxlOiB2aXNpYmxlXG4gICAgICB9LCBjaGlsZCk7XG4gICAgfSk7XG5cbiAgICB2YXIgX2NoaWxkcmVuID0gX3RoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjaGlsZHJlbjogX21hcFZhbHVlcyhnZXRDaGlsZE1hcHBpbmcoX2NoaWxkcmVuKSwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy53cmFwQ2hpbGQoY2hpbGQpO1xuICAgICAgfSlcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG5cblxuICBfY3JlYXRlQ2xhc3MoVHJhbnNpdGlvbkdyb3VwLCBbe1xuICAgIGtleTogXCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgcHJldk1hcHBpbmcgPSB0aGlzLnN0YXRlLmNoaWxkcmVuO1xuICAgICAgdmFyIG5leHRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldk1hcHBpbmcsIG5leHRNYXBwaW5nKTtcblxuICAgICAgX2ZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwga2V5KSB7XG4gICAgICAgIHZhciBoYXNQcmV2ID0gX2hhcyhwcmV2TWFwcGluZywga2V5KTtcblxuICAgICAgICB2YXIgaGFzTmV4dCA9IF9oYXMobmV4dE1hcHBpbmcsIGtleSk7XG5cbiAgICAgICAgdmFyIHByZXZDaGlsZCA9IHByZXZNYXBwaW5nW2tleV07XG4gICAgICAgIHZhciBpc0xlYXZpbmcgPSAhX2dldChwcmV2Q2hpbGQsICdwcm9wcy52aXNpYmxlJyk7IC8vIEhlYWRzIHVwIVxuICAgICAgICAvLyBBbiBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpLCBpdCB3aWxsIGJlIHBpY2tlZCBmcm9tIGBuZXh0Q2hpbGRyZW5gLCBzbyBpdCBzaG91bGQgYmUgd3JhcHBlZFxuXG4gICAgICAgIGlmIChoYXNOZXh0ICYmICghaGFzUHJldiB8fCBpc0xlYXZpbmcpKSB7XG4gICAgICAgICAgY2hpbGRyZW5ba2V5XSA9IF90aGlzMi53cmFwQ2hpbGQoY2hpbGQsIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25Pbk1vdW50OiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIEhlYWRzIHVwIVxuICAgICAgICAvLyBBbiBpdGVtIGlzIG9sZCAoZXhpdGluZyksIGl0IHdpbGwgYmUgcGlja2VkIGZyb20gYHByZXZDaGlsZHJlbmAsIHNvIGl0IGhhcyBiZWVuIGFscmVhZHlcbiAgICAgICAgLy8gd3JhcHBlZCwgc28gc2hvdWxkIGJlIG9ubHkgdXBkYXRlZFxuXG5cbiAgICAgICAgaWYgKCFoYXNOZXh0ICYmIGhhc1ByZXYgJiYgIWlzTGVhdmluZykge1xuICAgICAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQocHJldkNoaWxkLCB7XG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBIZWFkcyB1cCFcbiAgICAgICAgLy8gQW4gaXRlbSBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzLCBidXQgaXQgd2lsbCBiZSBwaWNrZWQgZnJvbSBgbmV4dENoaWxkcmVuYCxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIHdyYXAgaXQgYWdhaW5cblxuXG4gICAgICAgIHZhciBfcHJldkNoaWxkJHByb3BzID0gcHJldkNoaWxkLnByb3BzLFxuICAgICAgICAgICAgdmlzaWJsZSA9IF9wcmV2Q2hpbGQkcHJvcHMudmlzaWJsZSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25Pbk1vdW50ID0gX3ByZXZDaGlsZCRwcm9wcy50cmFuc2l0aW9uT25Nb3VudDtcbiAgICAgICAgY2hpbGRyZW5ba2V5XSA9IF90aGlzMi53cmFwQ2hpbGQoY2hpbGQsIHtcbiAgICAgICAgICB0cmFuc2l0aW9uT25Nb3VudDogdHJhbnNpdGlvbk9uTW91bnQsXG4gICAgICAgICAgdmlzaWJsZTogdmlzaWJsZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuc3RhdGUuY2hpbGRyZW47XG4gICAgICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShUcmFuc2l0aW9uR3JvdXAsIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhUcmFuc2l0aW9uR3JvdXAsIHRoaXMucHJvcHMpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIHJlc3QsIF92YWx1ZXMoY2hpbGRyZW4pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoVHJhbnNpdGlvbkdyb3VwLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGFzOiBGcmFnbWVudCxcbiAgYW5pbWF0aW9uOiAnZmFkZScsXG4gIGR1cmF0aW9uOiA1MDBcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoVHJhbnNpdGlvbkdyb3VwLCBcImhhbmRsZWRQcm9wc1wiLCBbXCJhbmltYXRpb25cIiwgXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiZGlyZWN0aW9uYWxcIiwgXCJkdXJhdGlvblwiXSk7XG5cbmV4cG9ydCB7IFRyYW5zaXRpb25Hcm91cCBhcyBkZWZhdWx0IH07XG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogTmFtZWQgYW5pbWF0aW9uIGV2ZW50IHRvIHVzZWQuIE11c3QgYmUgZGVmaW5lZCBpbiBDU1MuICovXG4gIGFuaW1hdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFNVSS5UUkFOU0lUSU9OUyksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIFdoZXRoZXIgaXQgaXMgZGlyZWN0aW9uYWwgYW5pbWF0aW9uIGV2ZW50IG9yIG5vdC4gVXNlIGl0IG9ubHkgZm9yIGN1c3RvbSB0cmFuc2l0aW9ucy4gKi9cbiAgZGlyZWN0aW9uYWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBEdXJhdGlvbiBvZiB0aGUgQ1NTIHRyYW5zaXRpb24gYW5pbWF0aW9uIGluIG1pbGxpc2Vjb25kcy4gKi9cbiAgZHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlkZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIHNob3c6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDoge307IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2luY2x1ZGVzIGZyb20gXCJsb2Rhc2gvaW5jbHVkZXNcIjtcbmltcG9ydCBfaXNOaWwgZnJvbSBcImxvZGFzaC9pc05pbFwiO1xuaW1wb3J0IF9nZXQgZnJvbSBcImxvZGFzaC9nZXRcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY2xvbmVFbGVtZW50LCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBub3JtYWxpemVUcmFuc2l0aW9uRHVyYXRpb24sIFNVSSwgdXNlS2V5T25seSB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwIGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwJztcbnZhciBUUkFOU0lUSU9OX1RZUEUgPSB7XG4gIEVOVEVSSU5HOiAnc2hvdycsXG4gIEVYSVRJTkc6ICdoaWRlJ1xuICAvKipcbiAgICogQSB0cmFuc2l0aW9uIGlzIGFuIGFuaW1hdGlvbiB1c3VhbGx5IHVzZWQgdG8gbW92ZSBjb250ZW50IGluIG9yIG91dCBvZiB2aWV3LlxuICAgKi9cblxufTtcblxudmFyIFRyYW5zaXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRyYW5zaXRpb24sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24oKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJhbnNpdGlvbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihUcmFuc2l0aW9uKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlU3RhcnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGR1cmF0aW9uID0gX3RoaXMucHJvcHMuZHVyYXRpb247XG4gICAgICB2YXIgc3RhdHVzID0gX3RoaXMubmV4dFN0YXR1cztcbiAgICAgIF90aGlzLm5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICBhbmltYXRpbmc6IHRydWVcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uVHlwZSA9IFRSQU5TSVRJT05fVFlQRVtzdGF0dXNdO1xuICAgICAgICB2YXIgZHVyYXRpb25WYWx1ZSA9IG5vcm1hbGl6ZVRyYW5zaXRpb25EdXJhdGlvbihkdXJhdGlvbiwgZHVyYXRpb25UeXBlKTtcblxuICAgICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25TdGFydCcsIG51bGwsIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7XG4gICAgICAgICAgc3RhdHVzOiBzdGF0dXNcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIF90aGlzLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoX3RoaXMuaGFuZGxlQ29tcGxldGUsIGR1cmF0aW9uVmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQ29tcGxldGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBfdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkNvbXBsZXRlJywgbnVsbCwgX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMsIHtcbiAgICAgICAgc3RhdHVzOiBjdXJyZW50XG4gICAgICB9KSk7XG5cbiAgICAgIGlmIChfdGhpcy5uZXh0U3RhdHVzKSB7XG4gICAgICAgIF90aGlzLmhhbmRsZVN0YXJ0KCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhdHVzID0gX3RoaXMuY29tcHV0ZUNvbXBsZXRlZFN0YXR1cygpO1xuXG4gICAgICB2YXIgY2FsbGJhY2sgPSBjdXJyZW50ID09PSBUcmFuc2l0aW9uLkVOVEVSSU5HID8gJ29uU2hvdycgOiAnb25IaWRlJztcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgYW5pbWF0aW5nOiBmYWxzZVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfaW52b2tlKF90aGlzLnByb3BzLCBjYWxsYmFjaywgbnVsbCwgX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMsIHtcbiAgICAgICAgICBzdGF0dXM6IHN0YXR1c1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1cGRhdGVTdGF0dXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFuaW1hdGluZyA9IF90aGlzLnN0YXRlLmFuaW1hdGluZztcblxuICAgICAgaWYgKF90aGlzLm5leHRTdGF0dXMpIHtcbiAgICAgICAgX3RoaXMubmV4dFN0YXR1cyA9IF90aGlzLmNvbXB1dGVOZXh0U3RhdHVzKCk7XG4gICAgICAgIGlmICghYW5pbWF0aW5nKSBfdGhpcy5oYW5kbGVTdGFydCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNvbXB1dGVDbGFzc2VzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGFuaW1hdGlvbiA9IF90aGlzJHByb3BzLmFuaW1hdGlvbixcbiAgICAgICAgICBkaXJlY3Rpb25hbCA9IF90aGlzJHByb3BzLmRpcmVjdGlvbmFsLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW47XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICBhbmltYXRpbmcgPSBfdGhpcyRzdGF0ZS5hbmltYXRpbmcsXG4gICAgICAgICAgc3RhdHVzID0gX3RoaXMkc3RhdGUuc3RhdHVzO1xuXG4gICAgICB2YXIgY2hpbGRDbGFzc2VzID0gX2dldChjaGlsZHJlbiwgJ3Byb3BzLmNsYXNzTmFtZScpO1xuXG4gICAgICB2YXIgaXNEaXJlY3Rpb25hbCA9IF9pc05pbChkaXJlY3Rpb25hbCkgPyBfaW5jbHVkZXMoU1VJLkRJUkVDVElPTkFMX1RSQU5TSVRJT05TLCBhbmltYXRpb24pIDogZGlyZWN0aW9uYWw7XG5cbiAgICAgIGlmIChpc0RpcmVjdGlvbmFsKSB7XG4gICAgICAgIHJldHVybiBjeChhbmltYXRpb24sIGNoaWxkQ2xhc3NlcywgdXNlS2V5T25seShhbmltYXRpbmcsICdhbmltYXRpbmcnKSwgdXNlS2V5T25seShzdGF0dXMgPT09IFRyYW5zaXRpb24uRU5URVJJTkcsICdpbicpLCB1c2VLZXlPbmx5KHN0YXR1cyA9PT0gVHJhbnNpdGlvbi5FWElUSU5HLCAnb3V0JyksIHVzZUtleU9ubHkoc3RhdHVzID09PSBUcmFuc2l0aW9uLkVYSVRFRCwgJ2hpZGRlbicpLCB1c2VLZXlPbmx5KHN0YXR1cyAhPT0gVHJhbnNpdGlvbi5FWElURUQsICd2aXNpYmxlJyksICd0cmFuc2l0aW9uJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjeChhbmltYXRpb24sIGNoaWxkQ2xhc3NlcywgdXNlS2V5T25seShhbmltYXRpbmcsICdhbmltYXRpbmcgdHJhbnNpdGlvbicpKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb21wdXRlQ29tcGxldGVkU3RhdHVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB1bm1vdW50T25IaWRlID0gX3RoaXMucHJvcHMudW5tb3VudE9uSGlkZTtcbiAgICAgIHZhciBzdGF0dXMgPSBfdGhpcy5zdGF0ZS5zdGF0dXM7XG4gICAgICBpZiAoc3RhdHVzID09PSBUcmFuc2l0aW9uLkVOVEVSSU5HKSByZXR1cm4gVHJhbnNpdGlvbi5FTlRFUkVEO1xuICAgICAgcmV0dXJuIHVubW91bnRPbkhpZGUgPyBUcmFuc2l0aW9uLlVOTU9VTlRFRCA6IFRyYW5zaXRpb24uRVhJVEVEO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNvbXB1dGVJbml0aWFsU3RhdHVzZXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHZpc2libGUgPSBfdGhpcyRwcm9wczIudmlzaWJsZSxcbiAgICAgICAgICBtb3VudE9uU2hvdyA9IF90aGlzJHByb3BzMi5tb3VudE9uU2hvdyxcbiAgICAgICAgICB0cmFuc2l0aW9uT25Nb3VudCA9IF90aGlzJHByb3BzMi50cmFuc2l0aW9uT25Nb3VudCxcbiAgICAgICAgICB1bm1vdW50T25IaWRlID0gX3RoaXMkcHJvcHMyLnVubW91bnRPbkhpZGU7XG5cbiAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgIGlmICh0cmFuc2l0aW9uT25Nb3VudCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0aWFsOiBUcmFuc2l0aW9uLkVYSVRFRCxcbiAgICAgICAgICAgIG5leHQ6IFRyYW5zaXRpb24uRU5URVJJTkdcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbml0aWFsOiBUcmFuc2l0aW9uLkVOVEVSRURcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vdW50T25TaG93IHx8IHVubW91bnRPbkhpZGUpIHJldHVybiB7XG4gICAgICAgIGluaXRpYWw6IFRyYW5zaXRpb24uVU5NT1VOVEVEXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdGlhbDogVHJhbnNpdGlvbi5FWElURURcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY29tcHV0ZU5leHRTdGF0dXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIGFuaW1hdGluZyA9IF90aGlzJHN0YXRlMi5hbmltYXRpbmcsXG4gICAgICAgICAgc3RhdHVzID0gX3RoaXMkc3RhdGUyLnN0YXR1cztcbiAgICAgIGlmIChhbmltYXRpbmcpIHJldHVybiBzdGF0dXMgPT09IFRyYW5zaXRpb24uRU5URVJJTkcgPyBUcmFuc2l0aW9uLkVYSVRJTkcgOiBUcmFuc2l0aW9uLkVOVEVSSU5HO1xuICAgICAgcmV0dXJuIHN0YXR1cyA9PT0gVHJhbnNpdGlvbi5FTlRFUkVEID8gVHJhbnNpdGlvbi5FWElUSU5HIDogVHJhbnNpdGlvbi5FTlRFUklORztcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb21wdXRlU3RhdHVzZXNcIiwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICB2YXIgc3RhdHVzID0gX3RoaXMuc3RhdGUuc3RhdHVzO1xuICAgICAgdmFyIHZpc2libGUgPSBwcm9wcy52aXNpYmxlO1xuXG4gICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGN1cnJlbnQ6IHN0YXR1cyA9PT0gVHJhbnNpdGlvbi5VTk1PVU5URUQgJiYgVHJhbnNpdGlvbi5FWElURUQsXG4gICAgICAgICAgbmV4dDogc3RhdHVzICE9PSBUcmFuc2l0aW9uLkVOVEVSSU5HICYmIHN0YXR1cyAhPT0gVHJhbnNpdGlvbi5FTlRFUkVEICYmIFRyYW5zaXRpb24uRU5URVJJTkdcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogKHN0YXR1cyA9PT0gVHJhbnNpdGlvbi5FTlRFUklORyB8fCBzdGF0dXMgPT09IFRyYW5zaXRpb24uRU5URVJFRCkgJiYgVHJhbnNpdGlvbi5FWElUSU5HXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNvbXB1dGVTdHlsZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczMuY2hpbGRyZW4sXG4gICAgICAgICAgZHVyYXRpb24gPSBfdGhpcyRwcm9wczMuZHVyYXRpb247XG4gICAgICB2YXIgc3RhdHVzID0gX3RoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICB2YXIgY2hpbGRTdHlsZSA9IF9nZXQoY2hpbGRyZW4sICdwcm9wcy5zdHlsZScpO1xuXG4gICAgICB2YXIgdHlwZSA9IFRSQU5TSVRJT05fVFlQRVtzdGF0dXNdO1xuICAgICAgdmFyIGFuaW1hdGlvbkR1cmF0aW9uID0gdHlwZSAmJiBcIlwiLmNvbmNhdChub3JtYWxpemVUcmFuc2l0aW9uRHVyYXRpb24oZHVyYXRpb24sIHR5cGUpLCBcIm1zXCIpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGNoaWxkU3R5bGUsIHtcbiAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IGFuaW1hdGlvbkR1cmF0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBfdGhpcyRjb21wdXRlSW5pdGlhbFMgPSBfdGhpcy5jb21wdXRlSW5pdGlhbFN0YXR1c2VzKCksXG4gICAgICAgIF9zdGF0dXMgPSBfdGhpcyRjb21wdXRlSW5pdGlhbFMuaW5pdGlhbCxcbiAgICAgICAgbmV4dCA9IF90aGlzJGNvbXB1dGVJbml0aWFsUy5uZXh0O1xuXG4gICAgX3RoaXMubmV4dFN0YXR1cyA9IG5leHQ7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IF9zdGF0dXNcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfSAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIExpZmVjeWNsZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuICBfY3JlYXRlQ2xhc3MoVHJhbnNpdGlvbiwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnVwZGF0ZVN0YXR1cygpO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgX3RoaXMkY29tcHV0ZVN0YXR1c2VzID0gdGhpcy5jb21wdXRlU3RhdHVzZXMobmV4dFByb3BzKSxcbiAgICAgICAgICBzdGF0dXMgPSBfdGhpcyRjb21wdXRlU3RhdHVzZXMuY3VycmVudCxcbiAgICAgICAgICBuZXh0ID0gX3RoaXMkY29tcHV0ZVN0YXR1c2VzLm5leHQ7XG5cbiAgICAgIHRoaXMubmV4dFN0YXR1cyA9IG5leHQ7XG4gICAgICBpZiAoc3RhdHVzKSB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBzdGF0dXNcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdGhpcy51cGRhdGVTdGF0dXMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SWQpO1xuICAgIH0gLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIENhbGxiYWNrIGhhbmRsaW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFJlbmRlclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcbiAgICAgIGlmIChzdGF0dXMgPT09IFRyYW5zaXRpb24uVU5NT1VOVEVEKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLmNvbXB1dGVDbGFzc2VzKCksXG4gICAgICAgIHN0eWxlOiB0aGlzLmNvbXB1dGVTdHlsZSgpXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KFRyYW5zaXRpb24sIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgYW5pbWF0aW9uOiAnZmFkZScsXG4gIGR1cmF0aW9uOiA1MDAsXG4gIHZpc2libGU6IHRydWUsXG4gIG1vdW50T25TaG93OiB0cnVlLFxuICB0cmFuc2l0aW9uT25Nb3VudDogZmFsc2UsXG4gIHVubW91bnRPbkhpZGU6IGZhbHNlXG59KTtcblxuX2RlZmluZVByb3BlcnR5KFRyYW5zaXRpb24sIFwiRU5URVJFRFwiLCAnRU5URVJFRCcpO1xuXG5fZGVmaW5lUHJvcGVydHkoVHJhbnNpdGlvbiwgXCJFTlRFUklOR1wiLCAnRU5URVJJTkcnKTtcblxuX2RlZmluZVByb3BlcnR5KFRyYW5zaXRpb24sIFwiRVhJVEVEXCIsICdFWElURUQnKTtcblxuX2RlZmluZVByb3BlcnR5KFRyYW5zaXRpb24sIFwiRVhJVElOR1wiLCAnRVhJVElORycpO1xuXG5fZGVmaW5lUHJvcGVydHkoVHJhbnNpdGlvbiwgXCJVTk1PVU5URURcIiwgJ1VOTU9VTlRFRCcpO1xuXG5fZGVmaW5lUHJvcGVydHkoVHJhbnNpdGlvbiwgXCJHcm91cFwiLCBUcmFuc2l0aW9uR3JvdXApO1xuXG5fZGVmaW5lUHJvcGVydHkoVHJhbnNpdGlvbiwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYW5pbWF0aW9uXCIsIFwiY2hpbGRyZW5cIiwgXCJkaXJlY3Rpb25hbFwiLCBcImR1cmF0aW9uXCIsIFwibW91bnRPblNob3dcIiwgXCJvbkNvbXBsZXRlXCIsIFwib25IaWRlXCIsIFwib25TaG93XCIsIFwib25TdGFydFwiLCBcInJlYWN0S2V5XCIsIFwidHJhbnNpdGlvbk9uTW91bnRcIiwgXCJ1bm1vdW50T25IaWRlXCIsIFwidmlzaWJsZVwiXSk7XG5cbmV4cG9ydCB7IFRyYW5zaXRpb24gYXMgZGVmYXVsdCB9O1xuVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBOYW1lZCBhbmltYXRpb24gZXZlbnQgdG8gdXNlZC4gTXVzdCBiZSBkZWZpbmVkIGluIENTUy4gKi9cbiAgYW5pbWF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoU1VJLlRSQU5TSVRJT05TKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkLFxuXG4gIC8qKiBXaGV0aGVyIGl0IGlzIGRpcmVjdGlvbmFsIGFuaW1hdGlvbiBldmVudCBvciBub3QuIFVzZSBpdCBvbmx5IGZvciBjdXN0b20gdHJhbnNpdGlvbnMuICovXG4gIGRpcmVjdGlvbmFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogRHVyYXRpb24gb2YgdGhlIENTUyB0cmFuc2l0aW9uIGFuaW1hdGlvbiBpbiBtaWxsaXNlY29uZHMuICovXG4gIGR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpZGU6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgc2hvdzogUHJvcFR5cGVzLm51bWJlclxuICB9KSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IGFuaW1hdGlvbi4gKi9cbiAgdmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFdhaXQgdW50aWwgdGhlIGZpcnN0IFwiZW50ZXJcIiB0cmFuc2l0aW9uIHRvIG1vdW50IHRoZSBjb21wb25lbnQgKGFkZCBpdCB0byB0aGUgRE9NKS4gKi9cbiAgbW91bnRPblNob3c6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBvbiBlYWNoIHRyYW5zaXRpb24gdGhhdCBjaGFuZ2VzIHZpc2liaWxpdHkgdG8gc2hvd24uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVsbH1cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMgd2l0aCBzdGF0dXMuXG4gICAqL1xuICBvbkNvbXBsZXRlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgb24gZWFjaCB0cmFuc2l0aW9uIHRoYXQgY2hhbmdlcyB2aXNpYmlsaXR5IHRvIGhpZGRlbi5cbiAgICpcbiAgICogQHBhcmFtIHtudWxsfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcyB3aXRoIHN0YXR1cy5cbiAgICovXG4gIG9uSGlkZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIG9uIGVhY2ggdHJhbnNpdGlvbiB0aGF0IGNoYW5nZXMgdmlzaWJpbGl0eSB0byBzaG93bi5cbiAgICpcbiAgICogQHBhcmFtIHtudWxsfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcyB3aXRoIHN0YXR1cy5cbiAgICovXG4gIG9uU2hvdzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIG9uIGFuaW1hdGlvbiBzdGFydC5cbiAgICpcbiAgICogQHBhcmFtIHtudWxsfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcyB3aXRoIHN0YXR1cy5cbiAgICovXG4gIG9uU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKiBSZWFjdCdzIGtleSBvZiB0aGUgZWxlbWVudC4gKi9cbiAgcmVhY3RLZXk6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFJ1biB0aGUgZW50ZXIgYW5pbWF0aW9uIHdoZW4gdGhlIGNvbXBvbmVudCBtb3VudHMsIGlmIGl0IGlzIGluaXRpYWxseSBzaG93bi4gKi9cbiAgdHJhbnNpdGlvbk9uTW91bnQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBVbm1vdW50IHRoZSBjb21wb25lbnQgKHJlbW92ZSBpdCBmcm9tIHRoZSBET00pIHdoZW4gaXQgaXMgbm90IHNob3duLiAqL1xuICB1bm1vdW50T25IaWRlOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vUG9ydGFsJztcbmltcG9ydCBUcmFuc2l0aW9uIGZyb20gJy4uLy4uL21vZHVsZXMvVHJhbnNpdGlvbic7XG5pbXBvcnQgeyBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG5cbi8qKlxuICogQSBzdWdhciBmb3IgYFBvcnRhbGAgYW5kIGBUcmFuc2l0aW9uYC5cbiAqIEBzZWUgUG9ydGFsXG4gKiBAc2VlIFRyYW5zaXRpb25cbiAqL1xudmFyIFRyYW5zaXRpb25hYmxlUG9ydGFsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUcmFuc2l0aW9uYWJsZVBvcnRhbCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbmFibGVQb3J0YWwocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJhbnNpdGlvbmFibGVQb3J0YWwpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVHJhbnNpdGlvbmFibGVQb3J0YWwpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVQb3J0YWxDbG9zZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHBvcnRhbE9wZW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVQb3J0YWxPcGVuXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcG9ydGFsT3BlbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlVHJhbnNpdGlvbkhpZGVcIiwgZnVuY3Rpb24gKG5vdGhpbmcsIGRhdGEpIHtcbiAgICAgIHZhciBwb3J0YWxPcGVuID0gX3RoaXMuc3RhdGUucG9ydGFsT3BlbjtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB0cmFuc2l0aW9uVmlzaWJsZTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25DbG9zZScsIG51bGwsIF9vYmplY3RTcHJlYWQoe30sIGRhdGEsIHtcbiAgICAgICAgcG9ydGFsT3BlbjogZmFsc2UsXG4gICAgICAgIHRyYW5zaXRpb25WaXNpYmxlOiBmYWxzZVxuICAgICAgfSkpO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25IaWRlJywgbnVsbCwgX29iamVjdFNwcmVhZCh7fSwgZGF0YSwge1xuICAgICAgICBwb3J0YWxPcGVuOiBwb3J0YWxPcGVuLFxuICAgICAgICB0cmFuc2l0aW9uVmlzaWJsZTogZmFsc2VcbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVUcmFuc2l0aW9uU3RhcnRcIiwgZnVuY3Rpb24gKG5vdGhpbmcsIGRhdGEpIHtcbiAgICAgIHZhciBwb3J0YWxPcGVuID0gX3RoaXMuc3RhdGUucG9ydGFsT3BlbjtcbiAgICAgIHZhciBzdGF0dXMgPSBkYXRhLnN0YXR1cztcbiAgICAgIHZhciB0cmFuc2l0aW9uVmlzaWJsZSA9IHN0YXR1cyA9PT0gVHJhbnNpdGlvbi5FTlRFUklORztcblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uU3RhcnQnLCBudWxsLCBfb2JqZWN0U3ByZWFkKHt9LCBkYXRhLCB7XG4gICAgICAgIHBvcnRhbE9wZW46IHBvcnRhbE9wZW4sXG4gICAgICAgIHRyYW5zaXRpb25WaXNpYmxlOiB0cmFuc2l0aW9uVmlzaWJsZVxuICAgICAgfSkpOyAvLyBIZWFkcyB1cCEgVHJhbnNpdGlvbmFibGVQb3J0YWwgZmlyZXMgb25PcGVuIGNhbGxiYWNrIG9uIHRoZSBzdGFydCBvZiB0cmFuc2l0aW9uIGFuaW1hdGlvblxuXG5cbiAgICAgIGlmICghdHJhbnNpdGlvblZpc2libGUpIHJldHVybjtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB0cmFuc2l0aW9uVmlzaWJsZTogdHJhbnNpdGlvblZpc2libGVcbiAgICAgIH0pO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25PcGVuJywgbnVsbCwgX29iamVjdFNwcmVhZCh7fSwgZGF0YSwge1xuICAgICAgICB0cmFuc2l0aW9uVmlzaWJsZTogdHJhbnNpdGlvblZpc2libGUsXG4gICAgICAgIHBvcnRhbE9wZW46IHRydWVcbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgcG9ydGFsT3BlbjogcHJvcHMub3BlblxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gTGlmZWN5Y2xlXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXG5cbiAgX2NyZWF0ZUNsYXNzKFRyYW5zaXRpb25hYmxlUG9ydGFsLCBbe1xuICAgIGtleTogXCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhfcmVmKSB7XG4gICAgICB2YXIgb3BlbiA9IF9yZWYub3BlbjtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBwb3J0YWxPcGVuOiBvcGVuXG4gICAgICB9KTtcbiAgICB9IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBDYWxsYmFjayBoYW5kbGluZ1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBSZW5kZXJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICB0cmFuc2l0aW9uID0gX3RoaXMkcHJvcHMudHJhbnNpdGlvbjtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgcG9ydGFsT3BlbiA9IF90aGlzJHN0YXRlLnBvcnRhbE9wZW4sXG4gICAgICAgICAgdHJhbnNpdGlvblZpc2libGUgPSBfdGhpcyRzdGF0ZS50cmFuc2l0aW9uVmlzaWJsZTtcbiAgICAgIHZhciBvcGVuID0gcG9ydGFsT3BlbiB8fCB0cmFuc2l0aW9uVmlzaWJsZTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoVHJhbnNpdGlvbmFibGVQb3J0YWwsIHRoaXMucHJvcHMpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUG9ydGFsLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICBvbk9wZW46IHRoaXMuaGFuZGxlUG9ydGFsT3BlbixcbiAgICAgICAgb25DbG9zZTogdGhpcy5oYW5kbGVQb3J0YWxDbG9zZVxuICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgX2V4dGVuZHMoe30sIHRyYW5zaXRpb24sIHtcbiAgICAgICAgdHJhbnNpdGlvbk9uTW91bnQ6IHRydWUsXG4gICAgICAgIG9uU3RhcnQ6IHRoaXMuaGFuZGxlVHJhbnNpdGlvblN0YXJ0LFxuICAgICAgICBvbkhpZGU6IHRoaXMuaGFuZGxlVHJhbnNpdGlvbkhpZGUsXG4gICAgICAgIHZpc2libGU6IHBvcnRhbE9wZW5cbiAgICAgIH0pLCBjaGlsZHJlbikpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUcmFuc2l0aW9uYWJsZVBvcnRhbDtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KFRyYW5zaXRpb25hYmxlUG9ydGFsLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIHRyYW5zaXRpb246IHtcbiAgICBhbmltYXRpb246ICdzY2FsZScsXG4gICAgZHVyYXRpb246IDQwMFxuICB9XG59KTtcblxuX2RlZmluZVByb3BlcnR5KFRyYW5zaXRpb25hYmxlUG9ydGFsLCBcImhhbmRsZWRQcm9wc1wiLCBbXCJjaGlsZHJlblwiLCBcIm9uQ2xvc2VcIiwgXCJvbkhpZGVcIiwgXCJvbk9wZW5cIiwgXCJvblN0YXJ0XCIsIFwib3BlblwiLCBcInRyYW5zaXRpb25cIl0pO1xuXG5leHBvcnQgeyBUcmFuc2l0aW9uYWJsZVBvcnRhbCBhcyBkZWZhdWx0IH07XG5UcmFuc2l0aW9uYWJsZVBvcnRhbC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIGNsb3NlIGV2ZW50IGhhcHBlbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMgYW5kIGludGVybmFsIHN0YXRlLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIG9uIGVhY2ggdHJhbnNpdGlvbiB0aGF0IGNoYW5nZXMgdmlzaWJpbGl0eSB0byBoaWRkZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVsbH1cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMgd2l0aCB0cmFuc2l0aW9uIHN0YXR1cyBhbmQgaW50ZXJuYWwgc3RhdGUuXG4gICAqL1xuICBvbkhpZGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhbiBvcGVuIGV2ZW50IGhhcHBlbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMgYW5kIGludGVybmFsIHN0YXRlLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgb24gYW5pbWF0aW9uIHN0YXJ0LlxuICAgKlxuICAgKiBAcGFyYW0ge251bGx9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzIHdpdGggdHJhbnNpdGlvbiBzdGF0dXMgYW5kIGludGVybmFsIHN0YXRlLlxuICAgKi9cbiAgb25TdGFydDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IHRoZSBwb3J0YWwgaXMgZGlzcGxheWVkLiAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogVHJhbnNpdGlvbiBwcm9wcy4gKi9cbiAgdHJhbnNpdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufSA6IHt9OyIsIi8qKlxuICogTm9ybWFsaXplcyB0aGUgb2Zmc2V0IHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ8YXJyYXl9IHZhbHVlIFRoZSB2YWx1ZSB0byBub3JtYWxpemUuXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBbdmFsdWUsIHZhbHVlXSA6IHZhbHVlO1xufSk7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCBfZm9yRWFjaCBmcm9tIFwibG9kYXNoL2ZvckVhY2hcIjtcbmltcG9ydCBfd2l0aG91dCBmcm9tIFwibG9kYXNoL3dpdGhvdXRcIjtcbmltcG9ydCBfaW5jbHVkZXMgZnJvbSBcImxvZGFzaC9pbmNsdWRlc1wiO1xuaW1wb3J0IHsgUmVmIH0gZnJvbSAnQHN0YXJkdXN0LXVpL3JlYWN0LWNvbXBvbmVudC1yZWYnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIGNyZWF0ZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGV2ZW50U3RhY2ssIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgbm9ybWFsaXplT2Zmc2V0LCBpc0Jyb3dzZXIgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBWaXNpYmlsaXR5IHByb3ZpZGVzIGEgc2V0IG9mIGNhbGxiYWNrcyBmb3Igd2hlbiBhIGNvbnRlbnQgYXBwZWFycyBpbiB0aGUgdmlld3BvcnQuXG4gKi9cblxudmFyIFZpc2liaWxpdHkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFZpc2liaWxpdHksIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFZpc2liaWxpdHkoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmlzaWJpbGl0eSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihWaXNpYmlsaXR5KSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2FsY3VsYXRpb25zXCIsIHtcbiAgICAgIGJvdHRvbVBhc3NlZDogZmFsc2UsXG4gICAgICBib3R0b21WaXNpYmxlOiBmYWxzZSxcbiAgICAgIGZpdHM6IGZhbHNlLFxuICAgICAgcGFzc2luZzogZmFsc2UsXG4gICAgICBvZmZTY3JlZW46IGZhbHNlLFxuICAgICAgb25TY3JlZW46IGZhbHNlLFxuICAgICAgdG9wUGFzc2VkOiBmYWxzZSxcbiAgICAgIHRvcFZpc2libGU6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZmlyZWRDYWxsYmFja3NcIiwgW10pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlZlwiLCBjcmVhdGVSZWYoKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZmlyZVwiLCBmdW5jdGlvbiAoX3JlZiwgdmFsdWUpIHtcbiAgICAgIHZhciBjYWxsYmFjayA9IF9yZWYuY2FsbGJhY2ssXG4gICAgICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgICAgIHZhciByZXZlcnNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNvbnRpbnVvdXMgPSBfdGhpcyRwcm9wcy5jb250aW51b3VzLFxuICAgICAgICAgIG9uY2UgPSBfdGhpcyRwcm9wcy5vbmNlOyAvLyBIZWFkcyB1cCEgRm9yIHRoZSBleGVjdXRpb24gaXMgcmVxdWlyZWQ6XG4gICAgICAvLyAtIGN1cnJlbnQgdmFsdWUgY29ycmVzcG9uZCB0byB0aGUgZmlyZWQgZGlyZWN0aW9uXG4gICAgICAvLyAtIGBjb250aW51b3VzYCBpcyB0cnVlIG9yIGNhbGN1bGF0aW9uIHZhbHVlcyBhcmUgZGlmZmVyZW50XG5cbiAgICAgIHZhciBtYXRjaGVzRGlyZWN0aW9uID0gX3RoaXMuY2FsY3VsYXRpb25zW3ZhbHVlXSAhPT0gcmV2ZXJzZTtcbiAgICAgIHZhciBleGVjdXRpb25Qb3NzaWJsZSA9IGNvbnRpbnVvdXMgfHwgX3RoaXMuY2FsY3VsYXRpb25zW3ZhbHVlXSAhPT0gX3RoaXMub2xkQ2FsY3VsYXRpb25zW3ZhbHVlXTtcbiAgICAgIGlmIChtYXRjaGVzRGlyZWN0aW9uICYmIGV4ZWN1dGlvblBvc3NpYmxlKSBfdGhpcy5leGVjdXRlKGNhbGxiYWNrLCBuYW1lKTsgLy8gSGVhZHMgdXAhIFdlIHNob3VsZCByZW1vdmUgY2FsbGJhY2sgZnJvbSB0aGUgaGFwcGVuZWQgd2hlbiBpdCdzIG5vdCBgb25jZWBcblxuICAgICAgaWYgKCFvbmNlKSBfdGhpcy5maXJlZENhbGxiYWNrcyA9IF93aXRob3V0KF90aGlzLmZpcmVkQ2FsbGJhY2tzLCBuYW1lKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVVcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnRpY2tpbmcpIHJldHVybjtcbiAgICAgIF90aGlzLnRpY2tpbmcgPSB0cnVlO1xuICAgICAgX3RoaXMuZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShfdGhpcy51cGRhdGUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLm1vdW50ZWQpIHJldHVybjtcbiAgICAgIF90aGlzLnRpY2tpbmcgPSBmYWxzZTtcbiAgICAgIF90aGlzLm9sZENhbGN1bGF0aW9ucyA9IF90aGlzLmNhbGN1bGF0aW9ucztcbiAgICAgIF90aGlzLmNhbGN1bGF0aW9ucyA9IF90aGlzLmNvbXB1dGVDYWxjdWxhdGlvbnMoKTtcbiAgICAgIF90aGlzLnBhZ2VZT2Zmc2V0ID0gX3RoaXMuZ2V0UGFnZVlPZmZzZXQoKTtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkJvdHRvbVBhc3NlZCA9IF90aGlzJHByb3BzMi5vbkJvdHRvbVBhc3NlZCxcbiAgICAgICAgICBvbkJvdHRvbVBhc3NlZFJldmVyc2UgPSBfdGhpcyRwcm9wczIub25Cb3R0b21QYXNzZWRSZXZlcnNlLFxuICAgICAgICAgIG9uQm90dG9tVmlzaWJsZSA9IF90aGlzJHByb3BzMi5vbkJvdHRvbVZpc2libGUsXG4gICAgICAgICAgb25Cb3R0b21WaXNpYmxlUmV2ZXJzZSA9IF90aGlzJHByb3BzMi5vbkJvdHRvbVZpc2libGVSZXZlcnNlLFxuICAgICAgICAgIG9uUGFzc2luZyA9IF90aGlzJHByb3BzMi5vblBhc3NpbmcsXG4gICAgICAgICAgb25QYXNzaW5nUmV2ZXJzZSA9IF90aGlzJHByb3BzMi5vblBhc3NpbmdSZXZlcnNlLFxuICAgICAgICAgIG9uVG9wUGFzc2VkID0gX3RoaXMkcHJvcHMyLm9uVG9wUGFzc2VkLFxuICAgICAgICAgIG9uVG9wUGFzc2VkUmV2ZXJzZSA9IF90aGlzJHByb3BzMi5vblRvcFBhc3NlZFJldmVyc2UsXG4gICAgICAgICAgb25Ub3BWaXNpYmxlID0gX3RoaXMkcHJvcHMyLm9uVG9wVmlzaWJsZSxcbiAgICAgICAgICBvblRvcFZpc2libGVSZXZlcnNlID0gX3RoaXMkcHJvcHMyLm9uVG9wVmlzaWJsZVJldmVyc2UsXG4gICAgICAgICAgb25PZmZTY3JlZW4gPSBfdGhpcyRwcm9wczIub25PZmZTY3JlZW4sXG4gICAgICAgICAgb25PblNjcmVlbiA9IF90aGlzJHByb3BzMi5vbk9uU2NyZWVuLFxuICAgICAgICAgIHVwZGF0ZU9uID0gX3RoaXMkcHJvcHMyLnVwZGF0ZU9uO1xuICAgICAgdmFyIGZvcndhcmQgPSB7XG4gICAgICAgIGJvdHRvbVBhc3NlZDoge1xuICAgICAgICAgIGNhbGxiYWNrOiBvbkJvdHRvbVBhc3NlZCxcbiAgICAgICAgICBuYW1lOiAnb25Cb3R0b21QYXNzZWQnXG4gICAgICAgIH0sXG4gICAgICAgIGJvdHRvbVZpc2libGU6IHtcbiAgICAgICAgICBjYWxsYmFjazogb25Cb3R0b21WaXNpYmxlLFxuICAgICAgICAgIG5hbWU6ICdvbkJvdHRvbVZpc2libGUnXG4gICAgICAgIH0sXG4gICAgICAgIHBhc3Npbmc6IHtcbiAgICAgICAgICBjYWxsYmFjazogb25QYXNzaW5nLFxuICAgICAgICAgIG5hbWU6ICdvblBhc3NpbmcnXG4gICAgICAgIH0sXG4gICAgICAgIG9mZlNjcmVlbjoge1xuICAgICAgICAgIGNhbGxiYWNrOiBvbk9mZlNjcmVlbixcbiAgICAgICAgICBuYW1lOiAnb25PZmZTY3JlZW4nXG4gICAgICAgIH0sXG4gICAgICAgIG9uU2NyZWVuOiB7XG4gICAgICAgICAgY2FsbGJhY2s6IG9uT25TY3JlZW4sXG4gICAgICAgICAgbmFtZTogJ29uT25TY3JlZW4nXG4gICAgICAgIH0sXG4gICAgICAgIHRvcFBhc3NlZDoge1xuICAgICAgICAgIGNhbGxiYWNrOiBvblRvcFBhc3NlZCxcbiAgICAgICAgICBuYW1lOiAnb25Ub3BQYXNzZWQnXG4gICAgICAgIH0sXG4gICAgICAgIHRvcFZpc2libGU6IHtcbiAgICAgICAgICBjYWxsYmFjazogb25Ub3BWaXNpYmxlLFxuICAgICAgICAgIG5hbWU6ICdvblRvcFZpc2libGUnXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgcmV2ZXJzZSA9IHtcbiAgICAgICAgYm90dG9tUGFzc2VkOiB7XG4gICAgICAgICAgY2FsbGJhY2s6IG9uQm90dG9tUGFzc2VkUmV2ZXJzZSxcbiAgICAgICAgICBuYW1lOiAnb25Cb3R0b21QYXNzZWRSZXZlcnNlJ1xuICAgICAgICB9LFxuICAgICAgICBib3R0b21WaXNpYmxlOiB7XG4gICAgICAgICAgY2FsbGJhY2s6IG9uQm90dG9tVmlzaWJsZVJldmVyc2UsXG4gICAgICAgICAgbmFtZTogJ29uQm90dG9tVmlzaWJsZVJldmVyc2UnXG4gICAgICAgIH0sXG4gICAgICAgIHBhc3Npbmc6IHtcbiAgICAgICAgICBjYWxsYmFjazogb25QYXNzaW5nUmV2ZXJzZSxcbiAgICAgICAgICBuYW1lOiAnb25QYXNzaW5nUmV2ZXJzZSdcbiAgICAgICAgfSxcbiAgICAgICAgdG9wUGFzc2VkOiB7XG4gICAgICAgICAgY2FsbGJhY2s6IG9uVG9wUGFzc2VkUmV2ZXJzZSxcbiAgICAgICAgICBuYW1lOiAnb25Ub3BQYXNzZWRSZXZlcnNlJ1xuICAgICAgICB9LFxuICAgICAgICB0b3BWaXNpYmxlOiB7XG4gICAgICAgICAgY2FsbGJhY2s6IG9uVG9wVmlzaWJsZVJldmVyc2UsXG4gICAgICAgICAgbmFtZTogJ29uVG9wVmlzaWJsZVJldmVyc2UnXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvblVwZGF0ZScsIG51bGwsIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7XG4gICAgICAgIGNhbGN1bGF0aW9uczogX3RoaXMuY2FsY3VsYXRpb25zXG4gICAgICB9KSk7XG5cbiAgICAgIF90aGlzLmZpcmVPblBhc3NlZCgpOyAvLyBIZWFkcyB1cCEgUmV2ZXJzZSBjYWxsYmFja3Mgc2hvdWxkIGJlIGZpcmVkIGZpcnN0XG5cblxuICAgICAgX2ZvckVhY2gocmV2ZXJzZSwgZnVuY3Rpb24gKGRhdGEsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5maXJlKGRhdGEsIHZhbHVlLCB0cnVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBfZm9yRWFjaChmb3J3YXJkLCBmdW5jdGlvbiAoZGF0YSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmZpcmUoZGF0YSwgdmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh1cGRhdGVPbiA9PT0gJ3JlcGFpbnQnKSBfdGhpcy5oYW5kbGVVcGRhdGUoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhWaXNpYmlsaXR5LCBbe1xuICAgIGtleTogXCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBMaWZlY3ljbGVcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgIHZhbHVlOiBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhfcmVmMikge1xuICAgICAgdmFyIGNvbnRpbnVvdXMgPSBfcmVmMi5jb250aW51b3VzLFxuICAgICAgICAgIG9uY2UgPSBfcmVmMi5vbmNlLFxuICAgICAgICAgIGNvbnRleHQgPSBfcmVmMi5jb250ZXh0LFxuICAgICAgICAgIHVwZGF0ZU9uID0gX3JlZjIudXBkYXRlT247XG4gICAgICB2YXIgY2xlYW5IYXBwZW5lZCA9IGNvbnRpbnVvdXMgIT09IHRoaXMucHJvcHMuY29udGludW91cyB8fCBvbmNlICE9PSB0aGlzLnByb3BzLm9uY2UgfHwgdXBkYXRlT24gIT09IHRoaXMucHJvcHMudXBkYXRlT247IC8vIEhlYWRzIHVwISBXZSBzaG91bGQgY2xlYW4gdXAgYXJyYXkgb2YgaGFwcGVuZWQgY2FsbGJhY2tzLCBpZiB2YWx1ZXMgb2YgdGhlc2UgcHJvcHMgYXJlIGNoYW5nZWRcblxuICAgICAgaWYgKGNsZWFuSGFwcGVuZWQpIHRoaXMuZmlyZWRDYWxsYmFja3MgPSBbXTtcblxuICAgICAgaWYgKGNvbnRleHQgIT09IHRoaXMucHJvcHMuY29udGV4dCB8fCB1cGRhdGVPbiAhPT0gdGhpcy5wcm9wcy51cGRhdGVPbikge1xuICAgICAgICB0aGlzLnVuYXR0YWNoSGFuZGxlcnModGhpcy5wcm9wcy5jb250ZXh0KTtcbiAgICAgICAgdGhpcy5hdHRhY2hIYW5kbGVycyhjb250ZXh0LCB1cGRhdGVPbik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICAgIGlmICghaXNCcm93c2VyKCkpIHJldHVybjtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczMuY29udGV4dCxcbiAgICAgICAgICBmaXJlT25Nb3VudCA9IF90aGlzJHByb3BzMy5maXJlT25Nb3VudCxcbiAgICAgICAgICB1cGRhdGVPbiA9IF90aGlzJHByb3BzMy51cGRhdGVPbjtcbiAgICAgIHRoaXMucGFnZVlPZmZzZXQgPSB0aGlzLmdldFBhZ2VZT2Zmc2V0KCk7XG4gICAgICB0aGlzLmF0dGFjaEhhbmRsZXJzKGNvbnRleHQsIHVwZGF0ZU9uKTtcbiAgICAgIGlmIChmaXJlT25Nb3VudCkgdGhpcy51cGRhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMucHJvcHMuY29udGV4dDtcbiAgICAgIHRoaXMudW5hdHRhY2hIYW5kbGVycyhjb250ZXh0KTtcbiAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhdHRhY2hIYW5kbGVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhdHRhY2hIYW5kbGVycyhjb250ZXh0LCB1cGRhdGVPbikge1xuICAgICAgaWYgKHVwZGF0ZU9uID09PSAnZXZlbnRzJykge1xuICAgICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAgIGV2ZW50U3RhY2suc3ViKCdyZXNpemUnLCB0aGlzLmhhbmRsZVVwZGF0ZSwge1xuICAgICAgICAgICAgdGFyZ2V0OiBjb250ZXh0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZXZlbnRTdGFjay5zdWIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlVXBkYXRlLCB7XG4gICAgICAgICAgICB0YXJnZXQ6IGNvbnRleHRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gSGVhZHMgdXAhXG4gICAgICAvLyBXZSB3aWxsIGRlYWwgd2l0aCBgcmVwYWludGAgdGhlcmVcblxuXG4gICAgICB0aGlzLmhhbmRsZVVwZGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1bmF0dGFjaEhhbmRsZXJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuYXR0YWNoSGFuZGxlcnMoY29udGV4dCkge1xuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgZXZlbnRTdGFjay51bnN1YigncmVzaXplJywgdGhpcy5oYW5kbGVVcGRhdGUsIHtcbiAgICAgICAgICB0YXJnZXQ6IGNvbnRleHRcbiAgICAgICAgfSk7XG4gICAgICAgIGV2ZW50U3RhY2sudW5zdWIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlVXBkYXRlLCB7XG4gICAgICAgICAgdGFyZ2V0OiBjb250ZXh0XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mcmFtZUlkKSBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmZyYW1lSWQpO1xuICAgIH0gLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIENhbGxiYWNrIGhhbmRsaW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiZXhlY3V0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleGVjdXRlKGNhbGxiYWNrLCBuYW1lKSB7XG4gICAgICB2YXIgY29udGludW91cyA9IHRoaXMucHJvcHMuY29udGludW91cztcbiAgICAgIGlmICghY2FsbGJhY2spIHJldHVybjsgLy8gSGVhZHMgdXAhIFdoZW4gYGNvbnRpbnVvdXNgIGlzIHRydWUsIGNhbGxiYWNrIHdpbGwgYmUgZmlyZWQgYWx3YXlzXG5cbiAgICAgIGlmICghY29udGludW91cyAmJiBfaW5jbHVkZXModGhpcy5maXJlZENhbGxiYWNrcywgbmFtZSkpIHJldHVybjtcbiAgICAgIGNhbGxiYWNrKG51bGwsIF9vYmplY3RTcHJlYWQoe30sIHRoaXMucHJvcHMsIHtcbiAgICAgICAgY2FsY3VsYXRpb25zOiB0aGlzLmNhbGN1bGF0aW9uc1xuICAgICAgfSkpO1xuICAgICAgdGhpcy5maXJlZENhbGxiYWNrcy5wdXNoKG5hbWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaXJlT25QYXNzZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmlyZU9uUGFzc2VkKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRjYWxjdWxhdGlvbnMgPSB0aGlzLmNhbGN1bGF0aW9ucyxcbiAgICAgICAgICBwZXJjZW50YWdlUGFzc2VkID0gX3RoaXMkY2FsY3VsYXRpb25zLnBlcmNlbnRhZ2VQYXNzZWQsXG4gICAgICAgICAgcGl4ZWxzUGFzc2VkID0gX3RoaXMkY2FsY3VsYXRpb25zLnBpeGVsc1Bhc3NlZDtcbiAgICAgIHZhciBvblBhc3NlZCA9IHRoaXMucHJvcHMub25QYXNzZWQ7XG5cbiAgICAgIF9mb3JFYWNoKG9uUGFzc2VkLCBmdW5jdGlvbiAoY2FsbGJhY2ssIHBhc3NlZCkge1xuICAgICAgICB2YXIgcGl4ZWxzVmFsdWUgPSBOdW1iZXIocGFzc2VkKTtcblxuICAgICAgICBpZiAocGl4ZWxzVmFsdWUgJiYgcGl4ZWxzUGFzc2VkID49IHBpeGVsc1ZhbHVlKSB7XG4gICAgICAgICAgX3RoaXMyLmV4ZWN1dGUoY2FsbGJhY2ssIHBhc3NlZCk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWF0Y2hQZXJjZW50YWdlID0gXCJcIi5jb25jYXQocGFzc2VkKS5tYXRjaCgvXihcXGQrKSUkLyk7XG4gICAgICAgIGlmICghbWF0Y2hQZXJjZW50YWdlKSByZXR1cm47XG4gICAgICAgIHZhciBwZXJjZW50YWdlVmFsdWUgPSBOdW1iZXIobWF0Y2hQZXJjZW50YWdlWzFdKSAvIDEwMDtcbiAgICAgICAgaWYgKHBlcmNlbnRhZ2VQYXNzZWQgPj0gcGVyY2VudGFnZVZhbHVlKSBfdGhpczIuZXhlY3V0ZShjYWxsYmFjaywgcGFzc2VkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wdXRlQ2FsY3VsYXRpb25zXCIsXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEhlbHBlcnNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXB1dGVDYWxjdWxhdGlvbnMoKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5wcm9wcy5vZmZzZXQ7XG5cbiAgICAgIHZhciBfdGhpcyRyZWYkY3VycmVudCRnZXQgPSB0aGlzLnJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgIGJvdHRvbSA9IF90aGlzJHJlZiRjdXJyZW50JGdldC5ib3R0b20sXG4gICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcmVmJGN1cnJlbnQkZ2V0LmhlaWdodCxcbiAgICAgICAgICB0b3AgPSBfdGhpcyRyZWYkY3VycmVudCRnZXQudG9wLFxuICAgICAgICAgIHdpZHRoID0gX3RoaXMkcmVmJGN1cnJlbnQkZ2V0LndpZHRoO1xuXG4gICAgICB2YXIgX25vcm1hbGl6ZU9mZnNldCA9IG5vcm1hbGl6ZU9mZnNldChvZmZzZXQpLFxuICAgICAgICAgIF9ub3JtYWxpemVPZmZzZXQyID0gX3NsaWNlZFRvQXJyYXkoX25vcm1hbGl6ZU9mZnNldCwgMiksXG4gICAgICAgICAgdG9wT2Zmc2V0ID0gX25vcm1hbGl6ZU9mZnNldDJbMF0sXG4gICAgICAgICAgYm90dG9tT2Zmc2V0ID0gX25vcm1hbGl6ZU9mZnNldDJbMV07XG5cbiAgICAgIHZhciBuZXdPZmZzZXQgPSB0aGlzLmdldFBhZ2VZT2Zmc2V0KCk7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gbmV3T2Zmc2V0ID4gdGhpcy5wYWdlWU9mZnNldCA/ICdkb3duJyA6ICd1cCc7XG4gICAgICB2YXIgdG9wUGFzc2VkID0gdG9wIDwgdG9wT2Zmc2V0O1xuICAgICAgdmFyIGJvdHRvbVBhc3NlZCA9IGJvdHRvbSA8IGJvdHRvbU9mZnNldDtcbiAgICAgIHZhciBwaXhlbHNQYXNzZWQgPSBib3R0b21QYXNzZWQgPyAwIDogTWF0aC5tYXgodG9wICogLTEsIDApO1xuICAgICAgdmFyIHBlcmNlbnRhZ2VQYXNzZWQgPSBwaXhlbHNQYXNzZWQgLyBoZWlnaHQ7XG4gICAgICB2YXIgYm90dG9tVmlzaWJsZSA9IGJvdHRvbSA+PSBib3R0b21PZmZzZXQgJiYgYm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIHZhciB0b3BWaXNpYmxlID0gdG9wID49IHRvcE9mZnNldCAmJiB0b3AgPD0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgdmFyIGZpdHMgPSB0b3BWaXNpYmxlICYmIGJvdHRvbVZpc2libGU7XG4gICAgICB2YXIgcGFzc2luZyA9IHRvcFBhc3NlZCAmJiAhYm90dG9tUGFzc2VkO1xuICAgICAgdmFyIG9uU2NyZWVuID0gKHRvcFZpc2libGUgfHwgdG9wUGFzc2VkKSAmJiAhYm90dG9tUGFzc2VkO1xuICAgICAgdmFyIG9mZlNjcmVlbiA9ICFvblNjcmVlbjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJvdHRvbVBhc3NlZDogYm90dG9tUGFzc2VkLFxuICAgICAgICBib3R0b21WaXNpYmxlOiBib3R0b21WaXNpYmxlLFxuICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICAgICAgZml0czogZml0cyxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHBhc3Npbmc6IHBhc3NpbmcsXG4gICAgICAgIHBlcmNlbnRhZ2VQYXNzZWQ6IHBlcmNlbnRhZ2VQYXNzZWQsXG4gICAgICAgIHBpeGVsc1Bhc3NlZDogcGl4ZWxzUGFzc2VkLFxuICAgICAgICBvZmZTY3JlZW46IG9mZlNjcmVlbixcbiAgICAgICAgb25TY3JlZW46IG9uU2NyZWVuLFxuICAgICAgICB0b3BQYXNzZWQ6IHRvcFBhc3NlZCxcbiAgICAgICAgdG9wVmlzaWJsZTogdG9wVmlzaWJsZSxcbiAgICAgICAgd2lkdGg6IHdpZHRoXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRQYWdlWU9mZnNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYWdlWU9mZnNldCgpIHtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5wcm9wcy5jb250ZXh0O1xuXG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAvLyBIZWFkcyB1cCEgYHdpbmRvd2AgZG9lc24ndCBoYXZlIGBwYWdlWU9mZnNldGAgcHJvcGVydHlcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPT09IHdpbmRvdyA/IHdpbmRvdy5wYWdlWU9mZnNldCA6IGNvbnRleHQuc2Nyb2xsVG9wO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gMDtcbiAgICB9IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBSZW5kZXJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFZpc2liaWxpdHksIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhWaXNpYmlsaXR5LCB0aGlzLnByb3BzKTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlZiwge1xuICAgICAgICBpbm5lclJlZjogdGhpcy5yZWZcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIHJlc3QsIGNoaWxkcmVuKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZpc2liaWxpdHk7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShWaXNpYmlsaXR5LCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNvbnRleHQ6IGlzQnJvd3NlcigpID8gd2luZG93IDogbnVsbCxcbiAgY29udGludW91czogZmFsc2UsXG4gIG9mZnNldDogWzAsIDBdLFxuICBvbmNlOiB0cnVlLFxuICB1cGRhdGVPbjogJ2V2ZW50cydcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoVmlzaWJpbGl0eSwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNvbnRleHRcIiwgXCJjb250aW51b3VzXCIsIFwiZmlyZU9uTW91bnRcIiwgXCJvZmZzZXRcIiwgXCJvbkJvdHRvbVBhc3NlZFwiLCBcIm9uQm90dG9tUGFzc2VkUmV2ZXJzZVwiLCBcIm9uQm90dG9tVmlzaWJsZVwiLCBcIm9uQm90dG9tVmlzaWJsZVJldmVyc2VcIiwgXCJvbk9mZlNjcmVlblwiLCBcIm9uT25TY3JlZW5cIiwgXCJvblBhc3NlZFwiLCBcIm9uUGFzc2luZ1wiLCBcIm9uUGFzc2luZ1JldmVyc2VcIiwgXCJvblRvcFBhc3NlZFwiLCBcIm9uVG9wUGFzc2VkUmV2ZXJzZVwiLCBcIm9uVG9wVmlzaWJsZVwiLCBcIm9uVG9wVmlzaWJsZVJldmVyc2VcIiwgXCJvblVwZGF0ZVwiLCBcIm9uY2VcIiwgXCJ1cGRhdGVPblwiXSk7XG5cbmV4cG9ydCB7IFZpc2liaWxpdHkgYXMgZGVmYXVsdCB9O1xuVmlzaWJpbGl0eS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQ29udGV4dCB3aGljaCB2aXNpYmlsaXR5IHNob3VsZCBhdHRhY2ggb25zY3JvbGwgZXZlbnRzLiAqL1xuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBXaGVuIHNldCB0byB0cnVlIGEgY2FsbGJhY2sgd2lsbCBvY2N1ciBhbnl0aW1lIGFuIGVsZW1lbnQgcGFzc2VzIGEgY29uZGl0aW9uIG5vdCBqdXN0IGltbWVkaWF0ZWx5IGFmdGVyIHRoZVxuICAgKiB0aHJlc2hvbGQgaXMgbWV0LlxuICAgKi9cbiAgY29udGludW91czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEZpcmVzIGNhbGxiYWNrcyBpbW1lZGlhdGVseSBhZnRlciBtb3VudC4gKi9cbiAgZmlyZU9uTW91bnQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbGVtZW50J3MgYm90dG9tIGVkZ2UgaGFzIHBhc3NlZCB0b3Agb2Ygc2NyZWVuLlxuICAgKlxuICAgKiBAcGFyYW0ge251bGx9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25Cb3R0b21QYXNzZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBFbGVtZW50J3MgYm90dG9tIGVkZ2UgaGFzIG5vdCBwYXNzZWQgdG9wIG9mIHNjcmVlbi5cbiAgICpcbiAgICogQHBhcmFtIHtudWxsfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uQm90dG9tUGFzc2VkUmV2ZXJzZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEVsZW1lbnQncyBib3R0b20gZWRnZSBoYXMgcGFzc2VkIGJvdHRvbSBvZiBzY3JlZW5cbiAgICpcbiAgICogQHBhcmFtIHtudWxsfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uQm90dG9tVmlzaWJsZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEVsZW1lbnQncyBib3R0b20gZWRnZSBoYXMgbm90IHBhc3NlZCBib3R0b20gb2Ygc2NyZWVuLlxuICAgKlxuICAgKiBAcGFyYW0ge251bGx9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25Cb3R0b21WaXNpYmxlUmV2ZXJzZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFZhbHVlIHRoYXQgY29udGV4dCBzaG91bGQgYmUgYWRqdXN0ZWQgaW4gcGl4ZWxzLiBVc2VmdWwgZm9yIG1ha2luZyBjb250ZW50IGFwcGVhciBiZWxvdyBjb250ZW50IGZpeGVkIHRvIHRoZVxuICAgKiBwYWdlLlxuICAgKi9cbiAgb2Zmc2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSkpXSksXG5cbiAgLyoqIFdoZW4gc2V0IHRvIGZhbHNlIGEgY2FsbGJhY2sgd2lsbCBvY2N1ciBlYWNoIHRpbWUgYW4gZWxlbWVudCBwYXNzZXMgdGhlIHRocmVzaG9sZCBmb3IgYSBjb25kaXRpb24uICovXG4gIG9uY2U6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBFbGVtZW50IGlzIG5vdCB2aXNpYmxlIG9uIHRoZSBzY3JlZW4uICovXG4gIG9uUGFzc2VkOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBBbnkgcGFydCBvZiBhbiBlbGVtZW50IGlzIHZpc2libGUgb24gc2NyZWVuLlxuICAgKlxuICAgKiBAcGFyYW0ge251bGx9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25QYXNzaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogRWxlbWVudCdzIHRvcCBoYXMgbm90IHBhc3NlZCB0b3Agb2Ygc2NyZWVuIGJ1dCBib3R0b20gaGFzLlxuICAgKlxuICAgKiBAcGFyYW0ge251bGx9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25QYXNzaW5nUmV2ZXJzZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEVsZW1lbnQgaXMgbm90IHZpc2libGUgb24gdGhlIHNjcmVlbi5cbiAgICpcbiAgICogQHBhcmFtIHtudWxsfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uT2ZmU2NyZWVuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogRWxlbWVudCBpcyB2aXNpYmxlIG9uIHRoZSBzY3JlZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVsbH1cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbk9uU2NyZWVuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogRWxlbWVudCdzIHRvcCBlZGdlIGhhcyBwYXNzZWQgdG9wIG9mIHRoZSBzY3JlZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVsbH1cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvblRvcFBhc3NlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEVsZW1lbnQncyB0b3AgZWRnZSBoYXMgbm90IHBhc3NlZCB0b3Agb2YgdGhlIHNjcmVlbi5cbiAgICpcbiAgICogQHBhcmFtIHtudWxsfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uVG9wUGFzc2VkUmV2ZXJzZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEVsZW1lbnQncyB0b3AgZWRnZSBoYXMgcGFzc2VkIGJvdHRvbSBvZiBzY3JlZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVsbH1cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvblRvcFZpc2libGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBFbGVtZW50J3MgdG9wIGVkZ2UgaGFzIG5vdCBwYXNzZWQgYm90dG9tIG9mIHNjcmVlbi5cbiAgICpcbiAgICogQHBhcmFtIHtudWxsfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uVG9wVmlzaWJsZVJldmVyc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBFbGVtZW50J3MgdG9wIGVkZ2UgaGFzIHBhc3NlZCBib3R0b20gb2Ygc2NyZWVuLlxuICAgKlxuICAgKiBAcGFyYW0ge251bGx9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25VcGRhdGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdG8gY2hvb3NlIHRoZSBtb2RlIG9mIHRoZSBwb3NpdGlvbiBjYWxjdWxhdGlvbnM6XG4gICAqIC0gYGV2ZW50c2AgLSAoZGVmYXVsdCkgdXBkYXRlIGFuZCBmaXJlIGNhbGxiYWNrcyBvbmx5IG9uIHNjcm9sbC9yZXNpemUgZXZlbnRzXG4gICAqIC0gYHJlcGFpbnRgIC0gdXBkYXRlIGFuZCBmaXJlIGNhbGxiYWNrcyBvbiBicm93c2VyIHJlcGFpbnQgKGFuaW1hdGlvbiBmcmFtZXMpXG4gICAqL1xuICB1cGRhdGVPbjogUHJvcFR5cGVzLm9uZU9mKFsnZXZlbnRzJywgJ3JlcGFpbnQnXSlcbn0gOiB7fTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkXCI7XG5pbXBvcnQgX2lzTmlsIGZyb20gXCJsb2Rhc2gvaXNOaWxcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRVbmhhbmRsZWRQcm9wcywgZ2V0RWxlbWVudFR5cGUgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vLi4vZWxlbWVudHMvSWNvbic7XG4vKipcbiAqIEEgZGl2aWRlciBzdWItY29tcG9uZW50IGZvciBCcmVhZGNydW1iIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBCcmVhZGNydW1iRGl2aWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgaWNvbiA9IHByb3BzLmljb247XG4gIHZhciBjbGFzc2VzID0gY3goJ2RpdmlkZXInLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEJyZWFkY3J1bWJEaXZpZGVyLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEJyZWFkY3J1bWJEaXZpZGVyLCBwcm9wcyk7XG5cbiAgaWYgKCFfaXNOaWwoaWNvbikpIHtcbiAgICByZXR1cm4gSWNvbi5jcmVhdGUoaWNvbiwge1xuICAgICAgZGVmYXVsdFByb3BzOiBfb2JqZWN0U3ByZWFkKHt9LCByZXN0LCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICAgICAgfSksXG4gICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICBpZiAoIV9pc05pbChjb250ZW50KSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNvbnRlbnQpO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/ICcvJyA6IGNoaWxkcmVuKTtcbn1cblxuQnJlYWRjcnVtYkRpdmlkZXIuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJpY29uXCJdO1xuQnJlYWRjcnVtYkRpdmlkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIFJlbmRlciBhcyBhbiBgSWNvbmAgY29tcG9uZW50IHdpdGggYGRpdmlkZXJgIGNsYXNzIGluc3RlYWQgb2YgYSBgZGl2YC4gKi9cbiAgaWNvbjogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmRcbn0gOiB7fTtcbkJyZWFkY3J1bWJEaXZpZGVyLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoQnJlYWRjcnVtYkRpdmlkZXIsIGZ1bmN0aW9uIChpY29uKSB7XG4gIHJldHVybiB7XG4gICAgaWNvbjogaWNvblxuICB9O1xufSk7XG5leHBvcnQgZGVmYXVsdCBCcmVhZGNydW1iRGl2aWRlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRVbmhhbmRsZWRQcm9wcywgZ2V0RWxlbWVudFR5cGUsIHVzZUtleU9ubHkgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIHNlY3Rpb24gc3ViLWNvbXBvbmVudCBmb3IgQnJlYWRjcnVtYiBjb21wb25lbnQuXG4gKi9cblxudmFyIEJyZWFkY3J1bWJTZWN0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCcmVhZGNydW1iU2VjdGlvbiwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJlYWRjcnVtYlNlY3Rpb24oKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJlYWRjcnVtYlNlY3Rpb24pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoQnJlYWRjcnVtYlNlY3Rpb24pKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb21wdXRlRWxlbWVudFR5cGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgbGluayA9IF90aGlzJHByb3BzLmxpbmssXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2s7XG4gICAgICBpZiAobGluayB8fCBvbkNsaWNrKSByZXR1cm4gJ2EnO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gX2ludm9rZShfdGhpcy5wcm9wcywgJ29uQ2xpY2snLCBlLCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQnJlYWRjcnVtYlNlY3Rpb24sIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhY3RpdmUgPSBfdGhpcyRwcm9wczIuYWN0aXZlLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWUsXG4gICAgICAgICAgY29udGVudCA9IF90aGlzJHByb3BzMi5jb250ZW50LFxuICAgICAgICAgIGhyZWYgPSBfdGhpcyRwcm9wczIuaHJlZjtcbiAgICAgIHZhciBjbGFzc2VzID0gY3godXNlS2V5T25seShhY3RpdmUsICdhY3RpdmUnKSwgJ3NlY3Rpb24nLCBjbGFzc05hbWUpO1xuICAgICAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhCcmVhZGNydW1iU2VjdGlvbiwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShCcmVhZGNydW1iU2VjdGlvbiwgdGhpcy5wcm9wcywgdGhpcy5jb21wdXRlRWxlbWVudFR5cGUpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgaHJlZjogaHJlZixcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQnJlYWRjcnVtYlNlY3Rpb247XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShCcmVhZGNydW1iU2VjdGlvbiwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYWN0aXZlXCIsIFwiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJocmVmXCIsIFwibGlua1wiLCBcIm9uQ2xpY2tcIl0pO1xuXG5leHBvcnQgeyBCcmVhZGNydW1iU2VjdGlvbiBhcyBkZWZhdWx0IH07XG5CcmVhZGNydW1iU2VjdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBTdHlsZSBhcyB0aGUgY3VycmVudGx5IGFjdGl2ZSBzZWN0aW9uLiAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogUmVuZGVyIGFzIGFuIGBhYCB0YWcgaW5zdGVhZCBvZiBhIGBkaXZgIGFuZCBhZGRzIHRoZSBocmVmIGF0dHJpYnV0ZS4gKi9cbiAgaHJlZjogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtjdXN0b21Qcm9wVHlwZXMuZGlzYWxsb3coWydsaW5rJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqIFJlbmRlciBhcyBhbiBgYWAgdGFnIGluc3RlYWQgb2YgYSBgZGl2YC4gKi9cbiAgbGluazogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtjdXN0b21Qcm9wVHlwZXMuZGlzYWxsb3coWydocmVmJ10pLCBQcm9wVHlwZXMuYm9vbF0pLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gY2xpY2suIFdoZW4gcGFzc2VkLCB0aGUgY29tcG9uZW50IHdpbGwgcmVuZGVyIGFzIGFuIGBhYFxuICAgKiB0YWcgYnkgZGVmYXVsdCBpbnN0ZWFkIG9mIGEgYGRpdmAuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9O1xuQnJlYWRjcnVtYlNlY3Rpb24uY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShCcmVhZGNydW1iU2VjdGlvbiwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50LFxuICAgIGxpbms6IHRydWVcbiAgfTtcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3dpdGhvdXQgZnJvbSBcImxvZGFzaC93aXRob3V0XCI7XG5pbXBvcnQgX2VhY2ggZnJvbSBcImxvZGFzaC9lYWNoXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0VW5oYW5kbGVkUHJvcHMsIGdldEVsZW1lbnRUeXBlLCBTVUkgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IEJyZWFkY3J1bWJEaXZpZGVyIGZyb20gJy4vQnJlYWRjcnVtYkRpdmlkZXInO1xuaW1wb3J0IEJyZWFkY3J1bWJTZWN0aW9uIGZyb20gJy4vQnJlYWRjcnVtYlNlY3Rpb24nO1xuLyoqXG4gKiBBIGJyZWFkY3J1bWIgaXMgdXNlZCB0byBzaG93IGhpZXJhcmNoeSBiZXR3ZWVuIGNvbnRlbnQuXG4gKi9cblxuZnVuY3Rpb24gQnJlYWRjcnVtYihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRpdmlkZXIgPSBwcm9wcy5kaXZpZGVyLFxuICAgICAgaWNvbiA9IHByb3BzLmljb24sXG4gICAgICBzZWN0aW9ucyA9IHByb3BzLnNlY3Rpb25zLFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemU7XG4gIHZhciBjbGFzc2VzID0gY3goJ3VpJywgc2l6ZSwgJ2JyZWFkY3J1bWInLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEJyZWFkY3J1bWIsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoQnJlYWRjcnVtYiwgcHJvcHMpO1xuXG4gIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICAgIH0pLCBjaGlsZHJlbik7XG4gIH1cblxuICB2YXIgY2hpbGRFbGVtZW50cyA9IFtdO1xuXG4gIF9lYWNoKHNlY3Rpb25zLCBmdW5jdGlvbiAoc2VjdGlvbiwgaW5kZXgpIHtcbiAgICAvLyBzZWN0aW9uXG4gICAgdmFyIGJyZWFkY3J1bWJFbGVtZW50ID0gQnJlYWRjcnVtYlNlY3Rpb24uY3JlYXRlKHNlY3Rpb24pO1xuICAgIGNoaWxkRWxlbWVudHMucHVzaChicmVhZGNydW1iRWxlbWVudCk7IC8vIGRpdmlkZXJcblxuICAgIGlmIChpbmRleCAhPT0gc2VjdGlvbnMubGVuZ3RoIC0gMSkge1xuICAgICAgdmFyIGtleSA9IFwiXCIuY29uY2F0KGJyZWFkY3J1bWJFbGVtZW50LmtleSwgXCJfZGl2aWRlclwiKSB8fCBKU09OLnN0cmluZ2lmeShzZWN0aW9uKTtcbiAgICAgIGNoaWxkRWxlbWVudHMucHVzaChCcmVhZGNydW1iRGl2aWRlci5jcmVhdGUoe1xuICAgICAgICBjb250ZW50OiBkaXZpZGVyLFxuICAgICAgICBpY29uOiBpY29uLFxuICAgICAgICBrZXk6IGtleVxuICAgICAgfSkpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZEVsZW1lbnRzKTtcbn1cblxuQnJlYWRjcnVtYi5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGl2aWRlclwiLCBcImljb25cIiwgXCJzZWN0aW9uc1wiLCBcInNpemVcIl07XG5CcmVhZGNydW1iLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQgb2YgdGhlIEJyZWFkY3J1bWIuRGl2aWRlci4gKi9cbiAgZGl2aWRlcjogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtjdXN0b21Qcm9wVHlwZXMuZGlzYWxsb3coWydpY29uJ10pLCBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZF0pLFxuXG4gIC8qKiBGb3IgdXNlIHdpdGggdGhlIHNlY3Rpb25zIHByb3AuIFJlbmRlciBhcyBhbiBgSWNvbmAgY29tcG9uZW50IHdpdGggYGRpdmlkZXJgIGNsYXNzIGluc3RlYWQgb2YgYSBgZGl2YCBpblxuICAgKiAgQnJlYWRjcnVtYi5EaXZpZGVyLiAqL1xuICBpY29uOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2RpdmlkZXInXSksIGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kXSksXG5cbiAgLyoqIFNob3J0aGFuZCBhcnJheSBvZiBwcm9wcyBmb3IgQnJlYWRjcnVtYi5TZWN0aW9uLiAqL1xuICBzZWN0aW9uczogY3VzdG9tUHJvcFR5cGVzLmNvbGxlY3Rpb25TaG9ydGhhbmQsXG5cbiAgLyoqIFNpemUgb2YgQnJlYWRjcnVtYi4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKF93aXRob3V0KFNVSS5TSVpFUywgJ21lZGl1bScpKVxufSA6IHt9O1xuQnJlYWRjcnVtYi5EaXZpZGVyID0gQnJlYWRjcnVtYkRpdmlkZXI7XG5CcmVhZGNydW1iLlNlY3Rpb24gPSBCcmVhZGNydW1iU2VjdGlvbjtcbmV4cG9ydCBkZWZhdWx0IEJyZWFkY3J1bWI7IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9pc05pbCBmcm9tIFwibG9kYXNoL2lzTmlsXCI7XG5pbXBvcnQgX2dldCBmcm9tIFwibG9kYXNoL2dldFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlSFRNTExhYmVsLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VXaWR0aFByb3AgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IExhYmVsIGZyb20gJy4uLy4uL2VsZW1lbnRzL0xhYmVsJztcbmltcG9ydCBDaGVja2JveCBmcm9tICcuLi8uLi9tb2R1bGVzL0NoZWNrYm94JztcbmltcG9ydCBSYWRpbyBmcm9tICcuLi8uLi9hZGRvbnMvUmFkaW8nO1xuLyoqXG4gKiBBIGZpZWxkIGlzIGEgZm9ybSBlbGVtZW50IGNvbnRhaW5pbmcgYSBsYWJlbCBhbmQgYW4gaW5wdXQuXG4gKiBAc2VlIEZvcm1cbiAqIEBzZWUgQnV0dG9uXG4gKiBAc2VlIENoZWNrYm94XG4gKiBAc2VlIERyb3Bkb3duXG4gKiBAc2VlIElucHV0XG4gKiBAc2VlIFJhZGlvXG4gKiBAc2VlIFNlbGVjdFxuICogQHNlZSBWaXNpYmlsaXR5XG4gKi9cblxuZnVuY3Rpb24gRm9ybUZpZWxkKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICBjb250cm9sID0gcHJvcHMuY29udHJvbCxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgaW5saW5lID0gcHJvcHMuaW5saW5lLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICB0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHdpZHRoID0gcHJvcHMud2lkdGgsXG4gICAgICBpZCA9IHByb3BzLmlkO1xuICB2YXIgY2xhc3NlcyA9IGN4KHVzZUtleU9ubHkoZGlzYWJsZWQsICdkaXNhYmxlZCcpLCB1c2VLZXlPbmx5KGVycm9yLCAnZXJyb3InKSwgdXNlS2V5T25seShpbmxpbmUsICdpbmxpbmUnKSwgdXNlS2V5T25seShyZXF1aXJlZCwgJ3JlcXVpcmVkJyksIHVzZVdpZHRoUHJvcCh3aWR0aCwgJ3dpZGUnKSwgJ2ZpZWxkJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhGb3JtRmllbGQsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoRm9ybUZpZWxkLCBwcm9wcyk7XG5cbiAgdmFyIGVycm9yUG9pbnRpbmcgPSBfZ2V0KGVycm9yLCAncG9pbnRpbmcnLCAnYWJvdmUnKTtcblxuICB2YXIgZXJyb3JMYWJlbCA9IExhYmVsLmNyZWF0ZShlcnJvciwge1xuICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2UsXG4gICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICBwcm9tcHQ6IHRydWUsXG4gICAgICBwb2ludGluZzogZXJyb3JQb2ludGluZyxcbiAgICAgIGlkOiBpZCA/IFwiXCIuY29uY2F0KGlkLCBcIi1lcnJvci1tZXNzYWdlXCIpIDogdW5kZWZpbmVkLFxuICAgICAgcm9sZTogJ2FsZXJ0JyxcbiAgICAgICdhcmlhLWF0b21pYyc6IHRydWVcbiAgICB9XG4gIH0pO1xuICB2YXIgZXJyb3JMYWJlbEJlZm9yZSA9IChlcnJvclBvaW50aW5nID09PSAnYmVsb3cnIHx8IGVycm9yUG9pbnRpbmcgPT09ICdyaWdodCcpICYmIGVycm9yTGFiZWw7XG4gIHZhciBlcnJvckxhYmVsQWZ0ZXIgPSAoZXJyb3JQb2ludGluZyA9PT0gJ2Fib3ZlJyB8fCBlcnJvclBvaW50aW5nID09PSAnbGVmdCcpICYmIGVycm9yTGFiZWw7IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gTm8gQ29udHJvbFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgaWYgKF9pc05pbChjb250cm9sKSkge1xuICAgIGlmIChfaXNOaWwobGFiZWwpKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGVycm9yTGFiZWxCZWZvcmUsIGNyZWF0ZUhUTUxMYWJlbChsYWJlbCwge1xuICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgIH0pLCBlcnJvckxhYmVsQWZ0ZXIpO1xuICB9IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQ2hlY2tib3gvUmFkaW8gQ29udHJvbFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuICB2YXIgYXJpYURlc2NyaWJlZEJ5ID0gaWQgJiYgZXJyb3IgPyBcIlwiLmNvbmNhdChpZCwgXCItZXJyb3ItbWVzc2FnZVwiKSA6IG51bGw7XG4gIHZhciBhcmlhQXR0cnMgPSB7XG4gICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkQnksXG4gICAgJ2FyaWEtaW52YWxpZCc6IGVycm9yICE9PSB1bmRlZmluZWQgPyB0cnVlIDogdW5kZWZpbmVkXG4gIH07XG5cbiAgdmFyIGNvbnRyb2xQcm9wcyA9IF9vYmplY3RTcHJlYWQoe30sIHJlc3QsIHtcbiAgICBjb250ZW50OiBjb250ZW50LFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgaWQ6IGlkIC8vIHdyYXAgSFRNTCBjaGVja2JveGVzL3JhZGlvcyBpbiB0aGUgbGFiZWxcblxuICB9KTtcblxuICBpZiAoY29udHJvbCA9PT0gJ2lucHV0JyAmJiAodHlwZSA9PT0gJ2NoZWNrYm94JyB8fCB0eXBlID09PSAncmFkaW8nKSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwgbnVsbCwgZXJyb3JMYWJlbEJlZm9yZSwgY3JlYXRlRWxlbWVudChjb250cm9sLCBfb2JqZWN0U3ByZWFkKHt9LCBhcmlhQXR0cnMsIGNvbnRyb2xQcm9wcykpLCBcIiBcIiwgbGFiZWwsIGVycm9yTGFiZWxBZnRlcikpO1xuICB9IC8vIHBhc3MgbGFiZWwgcHJvcCB0byBjb250cm9scyB0aGF0IHN1cHBvcnQgaXRcblxuXG4gIGlmIChjb250cm9sID09PSBDaGVja2JveCB8fCBjb250cm9sID09PSBSYWRpbykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9LCBlcnJvckxhYmVsQmVmb3JlLCBjcmVhdGVFbGVtZW50KGNvbnRyb2wsIF9vYmplY3RTcHJlYWQoe30sIGFyaWFBdHRycywgY29udHJvbFByb3BzLCB7XG4gICAgICBsYWJlbDogbGFiZWxcbiAgICB9KSksIGVycm9yTGFiZWxBZnRlcik7XG4gIH0gLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBPdGhlciBDb250cm9sXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0sIGNyZWF0ZUhUTUxMYWJlbChsYWJlbCwge1xuICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgaHRtbEZvcjogaWRcbiAgICB9LFxuICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgfSksIGVycm9yTGFiZWxCZWZvcmUsIGNyZWF0ZUVsZW1lbnQoY29udHJvbCwgX29iamVjdFNwcmVhZCh7fSwgYXJpYUF0dHJzLCBjb250cm9sUHJvcHMpKSwgZXJyb3JMYWJlbEFmdGVyKTtcbn1cblxuRm9ybUZpZWxkLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiY29udHJvbFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJpZFwiLCBcImlubGluZVwiLCBcImxhYmVsXCIsIFwicmVxdWlyZWRcIiwgXCJ0eXBlXCIsIFwid2lkdGhcIl07XG5Gb3JtRmllbGQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqXG4gICAqIEEgZm9ybSBjb250cm9sIGNvbXBvbmVudCAoaS5lLiBEcm9wZG93bikgb3IgSFRNTCB0YWdOYW1lIChpLmUuICdpbnB1dCcpLlxuICAgKiBFeHRyYSBGb3JtRmllbGQgcHJvcHMgYXJlIHBhc3NlZCB0byB0aGUgY29udHJvbCBjb21wb25lbnQuXG4gICAqIE11dHVhbGx5IGV4Y2x1c2l2ZSB3aXRoIGNoaWxkcmVuLlxuICAgKi9cbiAgY29udHJvbDogY3VzdG9tUHJvcFR5cGVzLnNvbWUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub25lT2YoWydidXR0b24nLCAnaW5wdXQnLCAnc2VsZWN0JywgJ3RleHRhcmVhJ10pXSksXG5cbiAgLyoqIEluZGl2aWR1YWwgZmllbGRzIG1heSBiZSBkaXNhYmxlZC4gKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBJbmRpdmlkdWFsIGZpZWxkcyBtYXkgZGlzcGxheSBhbiBlcnJvciBzdGF0ZSBhbG9uZyB3aXRoIGEgbWVzc2FnZS4gKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZF0pLFxuXG4gIC8qKiBUaGUgaWQgb2YgdGhlIGNvbnRyb2wgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEEgZmllbGQgY2FuIGhhdmUgaXRzIGxhYmVsIG5leHQgdG8gaW5zdGVhZCBvZiBhYm92ZSBpdC4gKi9cbiAgaW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgLy8gSGVhZHMgVXAhXG4gIC8vIERvIG5vdCBkaXNhbGxvdyBjaGlsZHJlbiB3aXRoIGBsYWJlbGAgc2hvcnRoYW5kXG4gIC8vIFRoZSBgY29udHJvbGAgbWlnaHQgYWNjZXB0IGEgYGxhYmVsYCBwcm9wIGFuZCBgY2hpbGRyZW5gXG5cbiAgLyoqIE11dHVhbGx5IGV4Y2x1c2l2ZSB3aXRoIGNoaWxkcmVuLiAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKiogQSBmaWVsZCBjYW4gc2hvdyB0aGF0IGlucHV0IGlzIG1hbmRhdG9yeS4gKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBQYXNzZWQgdG8gdGhlIGNvbnRyb2wgY29tcG9uZW50IChpLmUuIDxpbnB1dCB0eXBlPSdwYXNzd29yZCcgLz4pICovXG4gIHR5cGU6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRlbWFuZChbJ2NvbnRyb2wnXSldKSxcblxuICAvKiogQSBmaWVsZCBjYW4gc3BlY2lmeSBpdHMgd2lkdGggaW4gZ3JpZCBjb2x1bW5zICovXG4gIHdpZHRoOiBQcm9wVHlwZXMub25lT2YoU1VJLldJRFRIUylcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IEZvcm1GaWVsZDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi9lbGVtZW50cy9CdXR0b24nO1xuaW1wb3J0IEZvcm1GaWVsZCBmcm9tICcuL0Zvcm1GaWVsZCc7XG4vKipcbiAqIFN1Z2FyIGZvciA8Rm9ybS5GaWVsZCBjb250cm9sPXtCdXR0b259IC8+LlxuICogQHNlZSBCdXR0b25cbiAqIEBzZWUgRm9ybVxuICovXG5cbmZ1bmN0aW9uIEZvcm1CdXR0b24ocHJvcHMpIHtcbiAgdmFyIGNvbnRyb2wgPSBwcm9wcy5jb250cm9sO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEZvcm1CdXR0b24sIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoRm9ybUJ1dHRvbiwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjb250cm9sOiBjb250cm9sXG4gIH0pKTtcbn1cblxuRm9ybUJ1dHRvbi5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNvbnRyb2xcIl07XG5Gb3JtQnV0dG9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEEgRm9ybUZpZWxkIGNvbnRyb2wgcHJvcC4gKi9cbiAgY29udHJvbDogRm9ybUZpZWxkLnByb3BUeXBlcy5jb250cm9sXG59IDoge307XG5Gb3JtQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6IEZvcm1GaWVsZCxcbiAgY29udHJvbDogQnV0dG9uXG59O1xuZXhwb3J0IGRlZmF1bHQgRm9ybUJ1dHRvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IENoZWNrYm94IGZyb20gJy4uLy4uL21vZHVsZXMvQ2hlY2tib3gnO1xuaW1wb3J0IEZvcm1GaWVsZCBmcm9tICcuL0Zvcm1GaWVsZCc7XG4vKipcbiAqIFN1Z2FyIGZvciA8Rm9ybS5GaWVsZCBjb250cm9sPXtDaGVja2JveH0gLz4uXG4gKiBAc2VlIENoZWNrYm94XG4gKiBAc2VlIEZvcm1cbiAqL1xuXG5mdW5jdGlvbiBGb3JtQ2hlY2tib3gocHJvcHMpIHtcbiAgdmFyIGNvbnRyb2wgPSBwcm9wcy5jb250cm9sO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEZvcm1DaGVja2JveCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShGb3JtQ2hlY2tib3gsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY29udHJvbDogY29udHJvbFxuICB9KSk7XG59XG5cbkZvcm1DaGVja2JveC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNvbnRyb2xcIl07XG5Gb3JtQ2hlY2tib3gucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQSBGb3JtRmllbGQgY29udHJvbCBwcm9wLiAqL1xuICBjb250cm9sOiBGb3JtRmllbGQucHJvcFR5cGVzLmNvbnRyb2xcbn0gOiB7fTtcbkZvcm1DaGVja2JveC5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiBGb3JtRmllbGQsXG4gIGNvbnRyb2w6IENoZWNrYm94XG59O1xuZXhwb3J0IGRlZmF1bHQgRm9ybUNoZWNrYm94OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnLi4vLi4vbW9kdWxlcy9Ecm9wZG93bic7XG5pbXBvcnQgRm9ybUZpZWxkIGZyb20gJy4vRm9ybUZpZWxkJztcbi8qKlxuICogU3VnYXIgZm9yIDxGb3JtLkZpZWxkIGNvbnRyb2w9e0Ryb3Bkb3dufSAvPi5cbiAqIEBzZWUgRHJvcGRvd25cbiAqIEBzZWUgRm9ybVxuICovXG5cbmZ1bmN0aW9uIEZvcm1Ecm9wZG93bihwcm9wcykge1xuICB2YXIgY29udHJvbCA9IHByb3BzLmNvbnRyb2w7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoRm9ybURyb3Bkb3duLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEZvcm1Ecm9wZG93biwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjb250cm9sOiBjb250cm9sXG4gIH0pKTtcbn1cblxuRm9ybURyb3Bkb3duLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY29udHJvbFwiXTtcbkZvcm1Ecm9wZG93bi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBIEZvcm1GaWVsZCBjb250cm9sIHByb3AuICovXG4gIGNvbnRyb2w6IEZvcm1GaWVsZC5wcm9wVHlwZXMuY29udHJvbFxufSA6IHt9O1xuRm9ybURyb3Bkb3duLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6IEZvcm1GaWVsZCxcbiAgY29udHJvbDogRHJvcGRvd25cbn07XG5leHBvcnQgZGVmYXVsdCBGb3JtRHJvcGRvd247IiwiaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIFNVSSwgdXNlS2V5T25seSwgdXNlV2lkdGhQcm9wIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBzZXQgb2YgZmllbGRzIGNhbiBhcHBlYXIgZ3JvdXBlZCB0b2dldGhlci5cbiAqIEBzZWUgRm9ybVxuICovXG5cbmZ1bmN0aW9uIEZvcm1Hcm91cChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGdyb3VwZWQgPSBwcm9wcy5ncm91cGVkLFxuICAgICAgaW5saW5lID0gcHJvcHMuaW5saW5lLFxuICAgICAgdW5zdGFja2FibGUgPSBwcm9wcy51bnN0YWNrYWJsZSxcbiAgICAgIHdpZHRocyA9IHByb3BzLndpZHRocztcbiAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KGdyb3VwZWQsICdncm91cGVkJyksIHVzZUtleU9ubHkoaW5saW5lLCAnaW5saW5lJyksIHVzZUtleU9ubHkodW5zdGFja2FibGUsICd1bnN0YWNrYWJsZScpLCB1c2VXaWR0aFByb3Aod2lkdGhzLCBudWxsLCB0cnVlKSwgJ2ZpZWxkcycsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoRm9ybUdyb3VwLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEZvcm1Hcm91cCwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuKTtcbn1cblxuRm9ybUdyb3VwLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJncm91cGVkXCIsIFwiaW5saW5lXCIsIFwidW5zdGFja2FibGVcIiwgXCJ3aWR0aHNcIl07XG5Gb3JtR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBGaWVsZHMgY2FuIHNob3cgcmVsYXRlZCBjaG9pY2VzLiAqL1xuICBncm91cGVkOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2lubGluZSddKSwgUHJvcFR5cGVzLmJvb2xdKSxcblxuICAvKiogTXVsdGlwbGUgZmllbGRzIG1heSBiZSBpbmxpbmUgaW4gYSByb3cuICovXG4gIGlubGluZTogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtjdXN0b21Qcm9wVHlwZXMuZGlzYWxsb3coWydncm91cGVkJ10pLCBQcm9wVHlwZXMuYm9vbF0pLFxuXG4gIC8qKiBBIGZvcm0gZ3JvdXAgY2FuIHByZXZlbnQgaXRzZWxmIGZyb20gc3RhY2tpbmcgb24gbW9iaWxlLiAqL1xuICB1bnN0YWNrYWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEZpZWxkcyBHcm91cHMgY2FuIHNwZWNpZnkgdGhlaXIgd2lkdGggaW4gZ3JpZCBjb2x1bW5zIG9yIGF1dG9tYXRpY2FsbHkgZGl2aWRlIGZpZWxkcyB0byBiZSBlcXVhbCB3aWR0aC4gKi9cbiAgd2lkdGhzOiBQcm9wVHlwZXMub25lT2YoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShTVUkuV0lEVEhTKSwgWydlcXVhbCddKSlcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IEZvcm1Hcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9pbmNsdWRlcyBmcm9tIFwibG9kYXNoL2luY2x1ZGVzXCI7XG5pbXBvcnQgX21hcCBmcm9tIFwibG9kYXNoL21hcFwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCBfZ2V0IGZyb20gXCJsb2Rhc2gvZ2V0XCI7XG5pbXBvcnQgX2lzTmlsIGZyb20gXCJsb2Rhc2gvaXNOaWxcIjtcbmltcG9ydCB7IGhhbmRsZVJlZiB9IGZyb20gJ0BzdGFyZHVzdC11aS9yZWFjdC1jb21wb25lbnQtcmVmJztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIGNsb25lRWxlbWVudCwgQ29tcG9uZW50LCBjcmVhdGVSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVIVE1MSW5wdXQsIGNyZWF0ZVNob3J0aGFuZEZhY3RvcnksIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBwYXJ0aXRpb25IVE1MUHJvcHMsIHVzZUtleU9ubHksIHVzZVZhbHVlQW5kS2V5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vQnV0dG9uJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24nO1xuaW1wb3J0IExhYmVsIGZyb20gJy4uL0xhYmVsJztcbi8qKlxuICogQW4gSW5wdXQgaXMgYSBmaWVsZCB1c2VkIHRvIGVsaWNpdCBhIHJlc3BvbnNlIGZyb20gYSB1c2VyLlxuICogQHNlZSBCdXR0b25cbiAqIEBzZWUgRm9ybVxuICogQHNlZSBJY29uXG4gKiBAc2VlIExhYmVsXG4gKi9cblxudmFyIElucHV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhJbnB1dCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5wdXQoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoSW5wdXQpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpbnB1dFJlZlwiLCBjcmVhdGVSZWYoKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY29tcHV0ZUljb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgbG9hZGluZyA9IF90aGlzJHByb3BzLmxvYWRpbmcsXG4gICAgICAgICAgaWNvbiA9IF90aGlzJHByb3BzLmljb247XG4gICAgICBpZiAoIV9pc05pbChpY29uKSkgcmV0dXJuIGljb247XG4gICAgICBpZiAobG9hZGluZykgcmV0dXJuICdzcGlubmVyJztcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb21wdXRlVGFiSW5kZXhcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICAgIHRhYkluZGV4ID0gX3RoaXMkcHJvcHMyLnRhYkluZGV4O1xuICAgICAgaWYgKCFfaXNOaWwodGFiSW5kZXgpKSByZXR1cm4gdGFiSW5kZXg7XG4gICAgICBpZiAoZGlzYWJsZWQpIHJldHVybiAtMTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJmb2N1c1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNlbGVjdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuaW5wdXRSZWYuY3VycmVudC5zZWxlY3QoKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IF9nZXQoZSwgJ3RhcmdldC52YWx1ZScpO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25DaGFuZ2UnLCBlLCBfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDaGlsZE92ZXJyaWRlc1wiLCBmdW5jdGlvbiAoY2hpbGQsIGRlZmF1bHRQcm9wcykge1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRQcm9wcywgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoYykge1xuICAgICAgICAgIGhhbmRsZVJlZihjaGlsZC5yZWYsIGMpO1xuICAgICAgICAgIF90aGlzLmlucHV0UmVmLmN1cnJlbnQgPSBjO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwYXJ0aXRpb25Qcm9wc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczMuZGlzYWJsZWQsXG4gICAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzMy50eXBlO1xuXG4gICAgICB2YXIgdGFiSW5kZXggPSBfdGhpcy5jb21wdXRlVGFiSW5kZXgoKTtcblxuICAgICAgdmFyIHVuaGFuZGxlZCA9IGdldFVuaGFuZGxlZFByb3BzKElucHV0LCBfdGhpcy5wcm9wcyk7XG5cbiAgICAgIHZhciBfcGFydGl0aW9uSFRNTFByb3BzID0gcGFydGl0aW9uSFRNTFByb3BzKHVuaGFuZGxlZCksXG4gICAgICAgICAgX3BhcnRpdGlvbkhUTUxQcm9wczIgPSBfc2xpY2VkVG9BcnJheShfcGFydGl0aW9uSFRNTFByb3BzLCAyKSxcbiAgICAgICAgICBodG1sSW5wdXRQcm9wcyA9IF9wYXJ0aXRpb25IVE1MUHJvcHMyWzBdLFxuICAgICAgICAgIHJlc3QgPSBfcGFydGl0aW9uSFRNTFByb3BzMlsxXTtcblxuICAgICAgcmV0dXJuIFtfb2JqZWN0U3ByZWFkKHt9LCBodG1sSW5wdXRQcm9wcywge1xuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgICAgb25DaGFuZ2U6IF90aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgcmVmOiBfdGhpcy5pbnB1dFJlZlxuICAgICAgfSksIHJlc3RdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKElucHV0LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFjdGlvbiA9IF90aGlzJHByb3BzNC5hY3Rpb24sXG4gICAgICAgICAgYWN0aW9uUG9zaXRpb24gPSBfdGhpcyRwcm9wczQuYWN0aW9uUG9zaXRpb24sXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczQuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHM0LmNsYXNzTmFtZSxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzNC5kaXNhYmxlZCxcbiAgICAgICAgICBlcnJvciA9IF90aGlzJHByb3BzNC5lcnJvcixcbiAgICAgICAgICBmbHVpZCA9IF90aGlzJHByb3BzNC5mbHVpZCxcbiAgICAgICAgICBmb2N1cyA9IF90aGlzJHByb3BzNC5mb2N1cyxcbiAgICAgICAgICBpY29uID0gX3RoaXMkcHJvcHM0Lmljb24sXG4gICAgICAgICAgaWNvblBvc2l0aW9uID0gX3RoaXMkcHJvcHM0Lmljb25Qb3NpdGlvbixcbiAgICAgICAgICBpbnB1dCA9IF90aGlzJHByb3BzNC5pbnB1dCxcbiAgICAgICAgICBpbnZlcnRlZCA9IF90aGlzJHByb3BzNC5pbnZlcnRlZCxcbiAgICAgICAgICBsYWJlbCA9IF90aGlzJHByb3BzNC5sYWJlbCxcbiAgICAgICAgICBsYWJlbFBvc2l0aW9uID0gX3RoaXMkcHJvcHM0LmxhYmVsUG9zaXRpb24sXG4gICAgICAgICAgbG9hZGluZyA9IF90aGlzJHByb3BzNC5sb2FkaW5nLFxuICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wczQuc2l6ZSxcbiAgICAgICAgICB0cmFuc3BhcmVudCA9IF90aGlzJHByb3BzNC50cmFuc3BhcmVudCxcbiAgICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHM0LnR5cGU7XG4gICAgICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIHNpemUsIHVzZUtleU9ubHkoZGlzYWJsZWQsICdkaXNhYmxlZCcpLCB1c2VLZXlPbmx5KGVycm9yLCAnZXJyb3InKSwgdXNlS2V5T25seShmbHVpZCwgJ2ZsdWlkJyksIHVzZUtleU9ubHkoZm9jdXMsICdmb2N1cycpLCB1c2VLZXlPbmx5KGludmVydGVkLCAnaW52ZXJ0ZWQnKSwgdXNlS2V5T25seShsb2FkaW5nLCAnbG9hZGluZycpLCB1c2VLZXlPbmx5KHRyYW5zcGFyZW50LCAndHJhbnNwYXJlbnQnKSwgdXNlVmFsdWVBbmRLZXkoYWN0aW9uUG9zaXRpb24sICdhY3Rpb24nKSB8fCB1c2VLZXlPbmx5KGFjdGlvbiwgJ2FjdGlvbicpLCB1c2VWYWx1ZUFuZEtleShpY29uUG9zaXRpb24sICdpY29uJykgfHwgdXNlS2V5T25seShpY29uIHx8IGxvYWRpbmcsICdpY29uJyksIHVzZVZhbHVlQW5kS2V5KGxhYmVsUG9zaXRpb24sICdsYWJlbGVkJykgfHwgdXNlS2V5T25seShsYWJlbCwgJ2xhYmVsZWQnKSwgJ2lucHV0JywgY2xhc3NOYW1lKTtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKElucHV0LCB0aGlzLnByb3BzKTtcblxuICAgICAgdmFyIF90aGlzJHBhcnRpdGlvblByb3BzID0gdGhpcy5wYXJ0aXRpb25Qcm9wcygpLFxuICAgICAgICAgIF90aGlzJHBhcnRpdGlvblByb3BzMiA9IF9zbGljZWRUb0FycmF5KF90aGlzJHBhcnRpdGlvblByb3BzLCAyKSxcbiAgICAgICAgICBodG1sSW5wdXRQcm9wcyA9IF90aGlzJHBhcnRpdGlvblByb3BzMlswXSxcbiAgICAgICAgICByZXN0ID0gX3RoaXMkcGFydGl0aW9uUHJvcHMyWzFdOyAvLyBSZW5kZXIgd2l0aCBjaGlsZHJlblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbiAgICAgIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gYWRkIGh0bWxJbnB1dFByb3BzIHRvIHRoZSBgPGlucHV0IC8+YCBjaGlsZFxuICAgICAgICB2YXIgY2hpbGRFbGVtZW50cyA9IF9tYXAoQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbiksIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgIGlmIChjaGlsZC50eXBlICE9PSAnaW5wdXQnKSByZXR1cm4gY2hpbGQ7XG4gICAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwgX3RoaXMyLmhhbmRsZUNoaWxkT3ZlcnJpZGVzKGNoaWxkLCBodG1sSW5wdXRQcm9wcykpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICAgICAgfSksIGNoaWxkRWxlbWVudHMpO1xuICAgICAgfSAvLyBSZW5kZXIgU2hvcnRoYW5kXG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuICAgICAgdmFyIGFjdGlvbkVsZW1lbnQgPSBCdXR0b24uY3JlYXRlKGFjdGlvbiwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHZhciBsYWJlbEVsZW1lbnQgPSBMYWJlbC5jcmVhdGUobGFiZWwsIHtcbiAgICAgICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjeCgnbGFiZWwnLCAvLyBhZGQgJ2xlZnR8cmlnaHQgY29ybmVyJ1xuICAgICAgICAgIF9pbmNsdWRlcyhsYWJlbFBvc2l0aW9uLCAnY29ybmVyJykgJiYgbGFiZWxQb3NpdGlvbilcbiAgICAgICAgfSxcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgICB9KSwgYWN0aW9uUG9zaXRpb24gPT09ICdsZWZ0JyAmJiBhY3Rpb25FbGVtZW50LCBsYWJlbFBvc2l0aW9uICE9PSAncmlnaHQnICYmIGxhYmVsRWxlbWVudCwgY3JlYXRlSFRNTElucHV0KGlucHV0IHx8IHR5cGUsIHtcbiAgICAgICAgZGVmYXVsdFByb3BzOiBodG1sSW5wdXRQcm9wcyxcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSksIEljb24uY3JlYXRlKHRoaXMuY29tcHV0ZUljb24oKSwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KSwgYWN0aW9uUG9zaXRpb24gIT09ICdsZWZ0JyAmJiBhY3Rpb25FbGVtZW50LCBsYWJlbFBvc2l0aW9uID09PSAncmlnaHQnICYmIGxhYmVsRWxlbWVudCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIElucHV0O1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoSW5wdXQsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgdHlwZTogJ3RleHQnXG59KTtcblxuX2RlZmluZVByb3BlcnR5KElucHV0LCBcImhhbmRsZWRQcm9wc1wiLCBbXCJhY3Rpb25cIiwgXCJhY3Rpb25Qb3NpdGlvblwiLCBcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmx1aWRcIiwgXCJmb2N1c1wiLCBcImljb25cIiwgXCJpY29uUG9zaXRpb25cIiwgXCJpbnB1dFwiLCBcImludmVydGVkXCIsIFwibGFiZWxcIiwgXCJsYWJlbFBvc2l0aW9uXCIsIFwibG9hZGluZ1wiLCBcIm9uQ2hhbmdlXCIsIFwic2l6ZVwiLCBcInRhYkluZGV4XCIsIFwidHJhbnNwYXJlbnRcIiwgXCJ0eXBlXCJdKTtcblxuSW5wdXQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQW4gSW5wdXQgY2FuIGJlIGZvcm1hdHRlZCB0byBhbGVydCB0aGUgdXNlciB0byBhbiBhY3Rpb24gdGhleSBtYXkgcGVyZm9ybS4gKi9cbiAgYWN0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmRdKSxcblxuICAvKiogQW4gYWN0aW9uIGNhbiBhcHBlYXIgYWxvbmcgc2lkZSBhbiBJbnB1dCBvbiB0aGUgbGVmdCBvciByaWdodC4gKi9cbiAgYWN0aW9uUG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnXSksXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQW4gSW5wdXQgZmllbGQgY2FuIHNob3cgdGhhdCBpdCBpcyBkaXNhYmxlZC4gKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBbiBJbnB1dCBmaWVsZCBjYW4gc2hvdyB0aGUgZGF0YSBjb250YWlucyBlcnJvcnMuICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogVGFrZSBvbiB0aGUgc2l6ZSBvZiBpdHMgY29udGFpbmVyLiAqL1xuICBmbHVpZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEFuIElucHV0IGZpZWxkIGNhbiBzaG93IGEgdXNlciBpcyBjdXJyZW50bHkgaW50ZXJhY3Rpbmcgd2l0aCBpdC4gKi9cbiAgZm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBPcHRpb25hbCBJY29uIHRvIGRpc3BsYXkgaW5zaWRlIHRoZSBJbnB1dC4gKi9cbiAgaWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kXSksXG5cbiAgLyoqIEFuIEljb24gY2FuIGFwcGVhciBpbnNpZGUgYW4gSW5wdXQgb24gdGhlIGxlZnQgb3IgcmlnaHQuICovXG4gIGljb25Qb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCddKSxcblxuICAvKiogU2hvcnRoYW5kIGZvciBjcmVhdGluZyB0aGUgSFRNTCBJbnB1dC4gKi9cbiAgaW5wdXQ6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBGb3JtYXQgdG8gYXBwZWFyIG9uIGRhcmsgYmFja2dyb3VuZHMuICovXG4gIGludmVydGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogT3B0aW9uYWwgTGFiZWwgdG8gZGlzcGxheSBhbG9uZyBzaWRlIHRoZSBJbnB1dC4gKi9cbiAgbGFiZWw6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBBIExhYmVsIGNhbiBhcHBlYXIgb3V0c2lkZSBhbiBJbnB1dCBvbiB0aGUgbGVmdCBvciByaWdodC4gKi9cbiAgbGFiZWxQb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCcsICdsZWZ0IGNvcm5lcicsICdyaWdodCBjb3JuZXInXSksXG5cbiAgLyoqIEFuIEljb24gSW5wdXQgZmllbGQgY2FuIHNob3cgdGhhdCBpdCBpcyBjdXJyZW50bHkgbG9hZGluZyBkYXRhLiAqL1xuICBsb2FkaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGNoYW5nZS5cbiAgICpcbiAgICogQHBhcmFtIHtDaGFuZ2VFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcyBhbmQgYSBwcm9wb3NlZCB2YWx1ZS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogQW4gSW5wdXQgY2FuIHZhcnkgaW4gc2l6ZS4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnbWluaScsICdzbWFsbCcsICdsYXJnZScsICdiaWcnLCAnaHVnZScsICdtYXNzaXZlJ10pLFxuXG4gIC8qKiBBbiBJbnB1dCBjYW4gcmVjZWl2ZSBmb2N1cy4gKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKiogVHJhbnNwYXJlbnQgSW5wdXQgaGFzIG5vIGJhY2tncm91bmQuICovXG4gIHRyYW5zcGFyZW50OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogVGhlIEhUTUwgaW5wdXQgdHlwZS4gKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHt9O1xuSW5wdXQuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShJbnB1dCwgZnVuY3Rpb24gKHR5cGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlXG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IElucHV0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vLi4vZWxlbWVudHMvSW5wdXQnO1xuaW1wb3J0IEZvcm1GaWVsZCBmcm9tICcuL0Zvcm1GaWVsZCc7XG4vKipcbiAqIFN1Z2FyIGZvciA8Rm9ybS5GaWVsZCBjb250cm9sPXtJbnB1dH0gLz4uXG4gKiBAc2VlIEZvcm1cbiAqIEBzZWUgSW5wdXRcbiAqL1xuXG5mdW5jdGlvbiBGb3JtSW5wdXQocHJvcHMpIHtcbiAgdmFyIGNvbnRyb2wgPSBwcm9wcy5jb250cm9sO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEZvcm1JbnB1dCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShGb3JtSW5wdXQsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY29udHJvbDogY29udHJvbFxuICB9KSk7XG59XG5cbkZvcm1JbnB1dC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNvbnRyb2xcIl07XG5Gb3JtSW5wdXQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQSBGb3JtRmllbGQgY29udHJvbCBwcm9wLiAqL1xuICBjb250cm9sOiBGb3JtRmllbGQucHJvcFR5cGVzLmNvbnRyb2xcbn0gOiB7fTtcbkZvcm1JbnB1dC5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiBGb3JtRmllbGQsXG4gIGNvbnRyb2w6IElucHV0XG59O1xuZXhwb3J0IGRlZmF1bHQgRm9ybUlucHV0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgUmFkaW8gZnJvbSAnLi4vLi4vYWRkb25zL1JhZGlvJztcbmltcG9ydCBGb3JtRmllbGQgZnJvbSAnLi9Gb3JtRmllbGQnO1xuLyoqXG4gKiBTdWdhciBmb3IgPEZvcm0uRmllbGQgY29udHJvbD17UmFkaW99IC8+LlxuICogQHNlZSBGb3JtXG4gKiBAc2VlIFJhZGlvXG4gKi9cblxuZnVuY3Rpb24gRm9ybVJhZGlvKHByb3BzKSB7XG4gIHZhciBjb250cm9sID0gcHJvcHMuY29udHJvbDtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhGb3JtUmFkaW8sIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoRm9ybVJhZGlvLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNvbnRyb2w6IGNvbnRyb2xcbiAgfSkpO1xufVxuXG5Gb3JtUmFkaW8uaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjb250cm9sXCJdO1xuRm9ybVJhZGlvLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEEgRm9ybUZpZWxkIGNvbnRyb2wgcHJvcC4gKi9cbiAgY29udHJvbDogRm9ybUZpZWxkLnByb3BUeXBlcy5jb250cm9sXG59IDoge307XG5Gb3JtUmFkaW8uZGVmYXVsdFByb3BzID0ge1xuICBhczogRm9ybUZpZWxkLFxuICBjb250cm9sOiBSYWRpb1xufTtcbmV4cG9ydCBkZWZhdWx0IEZvcm1SYWRpbzsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuLi8uLi9hZGRvbnMvU2VsZWN0JztcbmltcG9ydCBEcm9wZG93biBmcm9tICcuLi8uLi9tb2R1bGVzL0Ryb3Bkb3duJztcbmltcG9ydCBGb3JtRmllbGQgZnJvbSAnLi9Gb3JtRmllbGQnO1xuLyoqXG4gKiBTdWdhciBmb3IgPEZvcm0uRmllbGQgY29udHJvbD17U2VsZWN0fSAvPi5cbiAqIEBzZWUgRm9ybVxuICogQHNlZSBTZWxlY3RcbiAqL1xuXG5mdW5jdGlvbiBGb3JtU2VsZWN0KHByb3BzKSB7XG4gIHZhciBjb250cm9sID0gcHJvcHMuY29udHJvbCxcbiAgICAgIG9wdGlvbnMgPSBwcm9wcy5vcHRpb25zO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEZvcm1TZWxlY3QsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoRm9ybVNlbGVjdCwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjb250cm9sOiBjb250cm9sLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfSkpO1xufVxuXG5Gb3JtU2VsZWN0LmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY29udHJvbFwiLCBcIm9wdGlvbnNcIl07XG5Gb3JtU2VsZWN0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEEgRm9ybUZpZWxkIGNvbnRyb2wgcHJvcC4gKi9cbiAgY29udHJvbDogRm9ybUZpZWxkLnByb3BUeXBlcy5jb250cm9sLFxuXG4gIC8qKiBBcnJheSBvZiBEcm9wZG93bi5JdGVtIHByb3BzIGUuZy4gYHsgdGV4dDogJycsIHZhbHVlOiAnJyB9YCAqL1xuICBvcHRpb25zOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoRHJvcGRvd24uSXRlbS5wcm9wVHlwZXMpKS5pc1JlcXVpcmVkXG59IDoge307XG5Gb3JtU2VsZWN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6IEZvcm1GaWVsZCxcbiAgY29udHJvbDogU2VsZWN0XG59O1xuZXhwb3J0IGRlZmF1bHQgRm9ybVNlbGVjdDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IFRleHRBcmVhIGZyb20gJy4uLy4uL2FkZG9ucy9UZXh0QXJlYSc7XG5pbXBvcnQgRm9ybUZpZWxkIGZyb20gJy4vRm9ybUZpZWxkJztcbi8qKlxuICogU3VnYXIgZm9yIDxGb3JtLkZpZWxkIGNvbnRyb2w9e1RleHRBcmVhfSAvPi5cbiAqIEBzZWUgRm9ybVxuICogQHNlZSBUZXh0QXJlYVxuICovXG5cbmZ1bmN0aW9uIEZvcm1UZXh0QXJlYShwcm9wcykge1xuICB2YXIgY29udHJvbCA9IHByb3BzLmNvbnRyb2w7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoRm9ybVRleHRBcmVhLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEZvcm1UZXh0QXJlYSwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjb250cm9sOiBjb250cm9sXG4gIH0pKTtcbn1cblxuRm9ybVRleHRBcmVhLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY29udHJvbFwiXTtcbkZvcm1UZXh0QXJlYS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBIEZvcm1GaWVsZCBjb250cm9sIHByb3AuICovXG4gIGNvbnRyb2w6IEZvcm1GaWVsZC5wcm9wVHlwZXMuY29udHJvbFxufSA6IHt9O1xuRm9ybVRleHRBcmVhLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6IEZvcm1GaWVsZCxcbiAgY29udHJvbDogVGV4dEFyZWFcbn07XG5leHBvcnQgZGVmYXVsdCBGb3JtVGV4dEFyZWE7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgX3dpdGhvdXQgZnJvbSBcImxvZGFzaC93aXRob3V0XCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VXaWR0aFByb3AgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IEZvcm1CdXR0b24gZnJvbSAnLi9Gb3JtQnV0dG9uJztcbmltcG9ydCBGb3JtQ2hlY2tib3ggZnJvbSAnLi9Gb3JtQ2hlY2tib3gnO1xuaW1wb3J0IEZvcm1Ecm9wZG93biBmcm9tICcuL0Zvcm1Ecm9wZG93bic7XG5pbXBvcnQgRm9ybUZpZWxkIGZyb20gJy4vRm9ybUZpZWxkJztcbmltcG9ydCBGb3JtR3JvdXAgZnJvbSAnLi9Gb3JtR3JvdXAnO1xuaW1wb3J0IEZvcm1JbnB1dCBmcm9tICcuL0Zvcm1JbnB1dCc7XG5pbXBvcnQgRm9ybVJhZGlvIGZyb20gJy4vRm9ybVJhZGlvJztcbmltcG9ydCBGb3JtU2VsZWN0IGZyb20gJy4vRm9ybVNlbGVjdCc7XG5pbXBvcnQgRm9ybVRleHRBcmVhIGZyb20gJy4vRm9ybVRleHRBcmVhJztcbi8qKlxuICogQSBGb3JtIGRpc3BsYXlzIGEgc2V0IG9mIHJlbGF0ZWQgdXNlciBpbnB1dCBmaWVsZHMgaW4gYSBzdHJ1Y3R1cmVkIHdheS5cbiAqIEBzZWUgQnV0dG9uXG4gKiBAc2VlIENoZWNrYm94XG4gKiBAc2VlIERyb3Bkb3duXG4gKiBAc2VlIElucHV0XG4gKiBAc2VlIE1lc3NhZ2VcbiAqIEBzZWUgUmFkaW9cbiAqIEBzZWUgU2VsZWN0XG4gKiBAc2VlIFZpc2liaWxpdHlcbiAqL1xuXG52YXIgRm9ybSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRm9ybSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRm9ybSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3JtKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBfYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIF9hcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoRm9ybSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChfYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVTdWJtaXRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBhY3Rpb24gPSBfdGhpcy5wcm9wcy5hY3Rpb247IC8vIEhlYWRzIHVwISBUaGlyZCBwYXJ0eSBsaWJzIGNhbiBwYXNzIG93biBkYXRhIGFzIGZpcnN0IGFyZ3VtZW50LCB3ZSBuZWVkIHRvIGNoZWNrIHRoYXQgaXQgaGFzIHByZXZlbnREZWZhdWx0KClcbiAgICAgIC8vIG1ldGhvZC5cblxuICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gIT09ICdzdHJpbmcnKSBfaW52b2tlKGUsICdwcmV2ZW50RGVmYXVsdCcpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBfaW52b2tlLmFwcGx5KHZvaWQgMCwgW190aGlzLnByb3BzLCAnb25TdWJtaXQnLCBlLCBfdGhpcy5wcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGb3JtLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhY3Rpb24gPSBfdGhpcyRwcm9wcy5hY3Rpb24sXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgZXJyb3IgPSBfdGhpcyRwcm9wcy5lcnJvcixcbiAgICAgICAgICBpbnZlcnRlZCA9IF90aGlzJHByb3BzLmludmVydGVkLFxuICAgICAgICAgIGxvYWRpbmcgPSBfdGhpcyRwcm9wcy5sb2FkaW5nLFxuICAgICAgICAgIHJlcGx5ID0gX3RoaXMkcHJvcHMucmVwbHksXG4gICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzLnNpemUsXG4gICAgICAgICAgc3VjY2VzcyA9IF90aGlzJHByb3BzLnN1Y2Nlc3MsXG4gICAgICAgICAgdW5zdGFja2FibGUgPSBfdGhpcyRwcm9wcy51bnN0YWNrYWJsZSxcbiAgICAgICAgICB3YXJuaW5nID0gX3RoaXMkcHJvcHMud2FybmluZyxcbiAgICAgICAgICB3aWR0aHMgPSBfdGhpcyRwcm9wcy53aWR0aHM7XG4gICAgICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIHNpemUsIHVzZUtleU9ubHkoZXJyb3IsICdlcnJvcicpLCB1c2VLZXlPbmx5KGludmVydGVkLCAnaW52ZXJ0ZWQnKSwgdXNlS2V5T25seShsb2FkaW5nLCAnbG9hZGluZycpLCB1c2VLZXlPbmx5KHJlcGx5LCAncmVwbHknKSwgdXNlS2V5T25seShzdWNjZXNzLCAnc3VjY2VzcycpLCB1c2VLZXlPbmx5KHVuc3RhY2thYmxlLCAndW5zdGFja2FibGUnKSwgdXNlS2V5T25seSh3YXJuaW5nLCAnd2FybmluZycpLCB1c2VXaWR0aFByb3Aod2lkdGhzLCBudWxsLCB0cnVlKSwgJ2Zvcm0nLCBjbGFzc05hbWUpO1xuICAgICAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhGb3JtLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEZvcm0sIHRoaXMucHJvcHMpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIG9uU3VibWl0OiB0aGlzLmhhbmRsZVN1Ym1pdFxuICAgICAgfSksIGNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRm9ybTtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KEZvcm0sIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgYXM6ICdmb3JtJ1xufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShGb3JtLCBcIkZpZWxkXCIsIEZvcm1GaWVsZCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShGb3JtLCBcIkJ1dHRvblwiLCBGb3JtQnV0dG9uKTtcblxuX2RlZmluZVByb3BlcnR5KEZvcm0sIFwiQ2hlY2tib3hcIiwgRm9ybUNoZWNrYm94KTtcblxuX2RlZmluZVByb3BlcnR5KEZvcm0sIFwiRHJvcGRvd25cIiwgRm9ybURyb3Bkb3duKTtcblxuX2RlZmluZVByb3BlcnR5KEZvcm0sIFwiR3JvdXBcIiwgRm9ybUdyb3VwKTtcblxuX2RlZmluZVByb3BlcnR5KEZvcm0sIFwiSW5wdXRcIiwgRm9ybUlucHV0KTtcblxuX2RlZmluZVByb3BlcnR5KEZvcm0sIFwiUmFkaW9cIiwgRm9ybVJhZGlvKTtcblxuX2RlZmluZVByb3BlcnR5KEZvcm0sIFwiU2VsZWN0XCIsIEZvcm1TZWxlY3QpO1xuXG5fZGVmaW5lUHJvcGVydHkoRm9ybSwgXCJUZXh0QXJlYVwiLCBGb3JtVGV4dEFyZWEpO1xuXG5fZGVmaW5lUHJvcGVydHkoRm9ybSwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYWN0aW9uXCIsIFwiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImVycm9yXCIsIFwiaW52ZXJ0ZWRcIiwgXCJsb2FkaW5nXCIsIFwib25TdWJtaXRcIiwgXCJyZXBseVwiLCBcInNpemVcIiwgXCJzdWNjZXNzXCIsIFwidW5zdGFja2FibGVcIiwgXCJ3YXJuaW5nXCIsIFwid2lkdGhzXCJdKTtcblxuRm9ybS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBUaGUgSFRNTCBmb3JtIGFjdGlvbiAqL1xuICBhY3Rpb246IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQXV0b21hdGljYWxseSBzaG93IGFueSBlcnJvciBNZXNzYWdlIGNoaWxkcmVuLiAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgZm9ybSBjYW4gaGF2ZSBpdHMgY29sb3IgaW52ZXJ0ZWQgZm9yIGNvbnRyYXN0LiAqL1xuICBpbnZlcnRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEF1dG9tYXRpY2FsbHkgc2hvdyBhIGxvYWRpbmcgaW5kaWNhdG9yLiAqL1xuICBsb2FkaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogVGhlIEhUTUwgZm9ybSBzdWJtaXQgaGFuZGxlci4gKi9cbiAgb25TdWJtaXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKiBBIGNvbW1lbnQgY2FuIGNvbnRhaW4gYSBmb3JtIHRvIHJlcGx5IHRvIGEgY29tbWVudC4gVGhpcyBtYXkgaGF2ZSBhcmJpdHJhcnkgY29udGVudC4gKi9cbiAgcmVwbHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGZvcm0gY2FuIHZhcnkgaW4gc2l6ZS4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKF93aXRob3V0KFNVSS5TSVpFUywgJ21lZGl1bScpKSxcblxuICAvKiogQXV0b21hdGljYWxseSBzaG93IGFueSBzdWNjZXNzIE1lc3NhZ2UgY2hpbGRyZW4uICovXG4gIHN1Y2Nlc3M6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGZvcm0gY2FuIHByZXZlbnQgaXRzZWxmIGZyb20gc3RhY2tpbmcgb24gbW9iaWxlLiAqL1xuICB1bnN0YWNrYWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEF1dG9tYXRpY2FsbHkgc2hvdyBhbnkgd2FybmluZyBNZXNzYWdlIGNoaWxkcmVuLiAqL1xuICB3YXJuaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogRm9ybXMgY2FuIGF1dG9tYXRpY2FsbHkgZGl2aWRlIGZpZWxkcyB0byBiZSBlcXVhbCB3aWR0aC4gKi9cbiAgd2lkdGhzOiBQcm9wVHlwZXMub25lT2YoWydlcXVhbCddKVxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgRm9ybTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjdXN0b21Qcm9wVHlwZXMsIGNyZWF0ZVNob3J0aGFuZEZhY3RvcnksIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VNdWx0aXBsZVByb3AsIHVzZVRleHRBbGlnblByb3AsIHVzZVZhbHVlQW5kS2V5LCB1c2VWZXJ0aWNhbEFsaWduUHJvcCwgdXNlV2lkdGhQcm9wIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBjb2x1bW4gc3ViLWNvbXBvbmVudCBmb3IgR3JpZC5cbiAqL1xuXG5mdW5jdGlvbiBHcmlkQ29sdW1uKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29tcHV0ZXIgPSBwcm9wcy5jb21wdXRlcixcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBmbG9hdGVkID0gcHJvcHMuZmxvYXRlZCxcbiAgICAgIGxhcmdlU2NyZWVuID0gcHJvcHMubGFyZ2VTY3JlZW4sXG4gICAgICBtb2JpbGUgPSBwcm9wcy5tb2JpbGUsXG4gICAgICBvbmx5ID0gcHJvcHMub25seSxcbiAgICAgIHN0cmV0Y2hlZCA9IHByb3BzLnN0cmV0Y2hlZCxcbiAgICAgIHRhYmxldCA9IHByb3BzLnRhYmxldCxcbiAgICAgIHRleHRBbGlnbiA9IHByb3BzLnRleHRBbGlnbixcbiAgICAgIHZlcnRpY2FsQWxpZ24gPSBwcm9wcy52ZXJ0aWNhbEFsaWduLFxuICAgICAgd2lkZXNjcmVlbiA9IHByb3BzLndpZGVzY3JlZW4sXG4gICAgICB3aWR0aCA9IHByb3BzLndpZHRoO1xuICB2YXIgY2xhc3NlcyA9IGN4KGNvbG9yLCB1c2VLZXlPbmx5KHN0cmV0Y2hlZCwgJ3N0cmV0Y2hlZCcpLCB1c2VNdWx0aXBsZVByb3Aob25seSwgJ29ubHknKSwgdXNlVGV4dEFsaWduUHJvcCh0ZXh0QWxpZ24pLCB1c2VWYWx1ZUFuZEtleShmbG9hdGVkLCAnZmxvYXRlZCcpLCB1c2VWZXJ0aWNhbEFsaWduUHJvcCh2ZXJ0aWNhbEFsaWduKSwgdXNlV2lkdGhQcm9wKGNvbXB1dGVyLCAnd2lkZSBjb21wdXRlcicpLCB1c2VXaWR0aFByb3AobGFyZ2VTY3JlZW4sICd3aWRlIGxhcmdlIHNjcmVlbicpLCB1c2VXaWR0aFByb3AobW9iaWxlLCAnd2lkZSBtb2JpbGUnKSwgdXNlV2lkdGhQcm9wKHRhYmxldCwgJ3dpZGUgdGFibGV0JyksIHVzZVdpZHRoUHJvcCh3aWRlc2NyZWVuLCAnd2lkZSB3aWRlc2NyZWVuJyksIHVzZVdpZHRoUHJvcCh3aWR0aCwgJ3dpZGUnKSwgJ2NvbHVtbicsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoR3JpZENvbHVtbiwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShHcmlkQ29sdW1uLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW4pO1xufVxuXG5HcmlkQ29sdW1uLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXB1dGVyXCIsIFwiZmxvYXRlZFwiLCBcImxhcmdlU2NyZWVuXCIsIFwibW9iaWxlXCIsIFwib25seVwiLCBcInN0cmV0Y2hlZFwiLCBcInRhYmxldFwiLCBcInRleHRBbGlnblwiLCBcInZlcnRpY2FsQWxpZ25cIiwgXCJ3aWRlc2NyZWVuXCIsIFwid2lkdGhcIl07XG5HcmlkQ29sdW1uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQSBncmlkIGNvbHVtbiBjYW4gYmUgY29sb3JlZC4gKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihTVUkuQ09MT1JTKSxcblxuICAvKiogQSBjb2x1bW4gY2FuIHNwZWNpZnkgYSB3aWR0aCBmb3IgYSBjb21wdXRlci4gKi9cbiAgY29tcHV0ZXI6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsnd2lkdGgnXSksIFByb3BUeXBlcy5vbmVPZihTVUkuV0lEVEhTKV0pLFxuXG4gIC8qKiBBIGNvbHVtbiBjYW4gc2l0IGZsdXNoIGFnYWluc3QgdGhlIGxlZnQgb3IgcmlnaHQgZWRnZSBvZiBhIHJvdy4gKi9cbiAgZmxvYXRlZDogUHJvcFR5cGVzLm9uZU9mKFNVSS5GTE9BVFMpLFxuXG4gIC8qKiBBIGNvbHVtbiBjYW4gc3BlY2lmeSBhIHdpZHRoIGZvciBhIGxhcmdlIHNjcmVlbiBkZXZpY2UuICovXG4gIGxhcmdlU2NyZWVuOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ3dpZHRoJ10pLCBQcm9wVHlwZXMub25lT2YoU1VJLldJRFRIUyldKSxcblxuICAvKiogQSBjb2x1bW4gY2FuIHNwZWNpZnkgYSB3aWR0aCBmb3IgYSBtb2JpbGUgZGV2aWNlLiAqL1xuICBtb2JpbGU6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsnd2lkdGgnXSksIFByb3BUeXBlcy5vbmVPZihTVUkuV0lEVEhTKV0pLFxuXG4gIC8qKiBBIGNvbHVtbiBjYW4gYXBwZWFyIG9ubHkgZm9yIGEgc3BlY2lmaWMgZGV2aWNlLCBvciBzY3JlZW4gc2l6ZXMuICovXG4gIG9ubHk6IGN1c3RvbVByb3BUeXBlcy5tdWx0aXBsZVByb3AoU1VJLlZJU0lCSUxJVFkpLFxuXG4gIC8qKiBBIGNvbHVtbiBjYW4gc3RyZXRjaCBpdHMgY29udGVudHMgdG8gdGFrZSB1cCB0aGUgZW50aXJlIGdyaWQgb3Igcm93IGhlaWdodC4gKi9cbiAgc3RyZXRjaGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBjb2x1bW4gY2FuIHNwZWNpZnkgYSB3aWR0aCBmb3IgYSB0YWJsZXQgZGV2aWNlLiAqL1xuICB0YWJsZXQ6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsnd2lkdGgnXSksIFByb3BUeXBlcy5vbmVPZihTVUkuV0lEVEhTKV0pLFxuXG4gIC8qKiBBIGNvbHVtbiBjYW4gc3BlY2lmeSBpdHMgdGV4dCBhbGlnbm1lbnQuICovXG4gIHRleHRBbGlnbjogUHJvcFR5cGVzLm9uZU9mKFNVSS5URVhUX0FMSUdOTUVOVFMpLFxuXG4gIC8qKiBBIGNvbHVtbiBjYW4gc3BlY2lmeSBpdHMgdmVydGljYWwgYWxpZ25tZW50IHRvIGhhdmUgYWxsIGl0cyBjb2x1bW5zIHZlcnRpY2FsbHkgY2VudGVyZWQuICovXG4gIHZlcnRpY2FsQWxpZ246IFByb3BUeXBlcy5vbmVPZihTVUkuVkVSVElDQUxfQUxJR05NRU5UUyksXG5cbiAgLyoqIEEgY29sdW1uIGNhbiBzcGVjaWZ5IGEgd2lkdGggZm9yIGEgd2lkZSBzY3JlZW4gZGV2aWNlLiAqL1xuICB3aWRlc2NyZWVuOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ3dpZHRoJ10pLCBQcm9wVHlwZXMub25lT2YoU1VJLldJRFRIUyldKSxcblxuICAvKiogUmVwcmVzZW50cyB3aWR0aCBvZiBjb2x1bW4uICovXG4gIHdpZHRoOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2NvbXB1dGVyJywgJ2xhcmdlU2NyZWVuJywgJ21vYmlsZScsICd0YWJsZXQnLCAnd2lkZXNjcmVlbiddKSwgUHJvcFR5cGVzLm9uZU9mKFNVSS5XSURUSFMpXSlcbn0gOiB7fTtcbkdyaWRDb2x1bW4uY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShHcmlkQ29sdW1uLCBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgR3JpZENvbHVtbjsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VNdWx0aXBsZVByb3AsIHVzZVRleHRBbGlnblByb3AsIHVzZVZlcnRpY2FsQWxpZ25Qcm9wLCB1c2VXaWR0aFByb3AgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIHJvdyBzdWItY29tcG9uZW50IGZvciBHcmlkLlxuICovXG5cbmZ1bmN0aW9uIEdyaWRSb3cocHJvcHMpIHtcbiAgdmFyIGNlbnRlcmVkID0gcHJvcHMuY2VudGVyZWQsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbHVtbnMgPSBwcm9wcy5jb2x1bW5zLFxuICAgICAgZGl2aWRlZCA9IHByb3BzLmRpdmlkZWQsXG4gICAgICBvbmx5ID0gcHJvcHMub25seSxcbiAgICAgIHJldmVyc2VkID0gcHJvcHMucmV2ZXJzZWQsXG4gICAgICBzdHJldGNoZWQgPSBwcm9wcy5zdHJldGNoZWQsXG4gICAgICB0ZXh0QWxpZ24gPSBwcm9wcy50ZXh0QWxpZ24sXG4gICAgICB2ZXJ0aWNhbEFsaWduID0gcHJvcHMudmVydGljYWxBbGlnbjtcbiAgdmFyIGNsYXNzZXMgPSBjeChjb2xvciwgdXNlS2V5T25seShjZW50ZXJlZCwgJ2NlbnRlcmVkJyksIHVzZUtleU9ubHkoZGl2aWRlZCwgJ2RpdmlkZWQnKSwgdXNlS2V5T25seShzdHJldGNoZWQsICdzdHJldGNoZWQnKSwgdXNlTXVsdGlwbGVQcm9wKG9ubHksICdvbmx5JyksIHVzZU11bHRpcGxlUHJvcChyZXZlcnNlZCwgJ3JldmVyc2VkJyksIHVzZVRleHRBbGlnblByb3AodGV4dEFsaWduKSwgdXNlVmVydGljYWxBbGlnblByb3AodmVydGljYWxBbGlnbiksIHVzZVdpZHRoUHJvcChjb2x1bW5zLCAnY29sdW1uJywgdHJ1ZSksICdyb3cnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEdyaWRSb3csIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoR3JpZFJvdywgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuKTtcbn1cblxuR3JpZFJvdy5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNlbnRlcmVkXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbHVtbnNcIiwgXCJkaXZpZGVkXCIsIFwib25seVwiLCBcInJldmVyc2VkXCIsIFwic3RyZXRjaGVkXCIsIFwidGV4dEFsaWduXCIsIFwidmVydGljYWxBbGlnblwiXTtcbkdyaWRSb3cucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQSByb3cgY2FuIGhhdmUgaXRzIGNvbHVtbnMgY2VudGVyZWQuICovXG4gIGNlbnRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBBIGdyaWQgcm93IGNhbiBiZSBjb2xvcmVkLiAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFNVSS5DT0xPUlMpLFxuXG4gIC8qKiBSZXByZXNlbnRzIGNvbHVtbiBjb3VudCBwZXIgbGluZSBpbiBSb3cuICovXG4gIGNvbHVtbnM6IFByb3BUeXBlcy5vbmVPZihbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KFNVSS5XSURUSFMpLCBbJ2VxdWFsJ10pKSxcblxuICAvKiogQSByb3cgY2FuIGhhdmUgZGl2aWRlcnMgYmV0d2VlbiBpdHMgY29sdW1ucy4gKi9cbiAgZGl2aWRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgcm93IGNhbiBhcHBlYXIgb25seSBmb3IgYSBzcGVjaWZpYyBkZXZpY2UsIG9yIHNjcmVlbiBzaXplcy4gKi9cbiAgb25seTogY3VzdG9tUHJvcFR5cGVzLm11bHRpcGxlUHJvcChTVUkuVklTSUJJTElUWSksXG5cbiAgLyoqIEEgcm93IGNhbiBzcGVjaWZ5IHRoYXQgaXRzIGNvbHVtbnMgc2hvdWxkIHJldmVyc2Ugb3JkZXIgYXQgZGlmZmVyZW50IGRldmljZSBzaXplcy4gKi9cbiAgcmV2ZXJzZWQ6IGN1c3RvbVByb3BUeXBlcy5tdWx0aXBsZVByb3AoWydjb21wdXRlcicsICdjb21wdXRlciB2ZXJ0aWNhbGx5JywgJ21vYmlsZScsICdtb2JpbGUgdmVydGljYWxseScsICd0YWJsZXQnLCAndGFibGV0IHZlcnRpY2FsbHknXSksXG5cbiAgLyoqIEEgcm93IGNhbiBzdHJldGNoIGl0cyBjb250ZW50cyB0byB0YWtlIHVwIHRoZSBlbnRpcmUgY29sdW1uIGhlaWdodC4gKi9cbiAgc3RyZXRjaGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSByb3cgY2FuIHNwZWNpZnkgaXRzIHRleHQgYWxpZ25tZW50LiAqL1xuICB0ZXh0QWxpZ246IFByb3BUeXBlcy5vbmVPZihTVUkuVEVYVF9BTElHTk1FTlRTKSxcblxuICAvKiogQSByb3cgY2FuIHNwZWNpZnkgaXRzIHZlcnRpY2FsIGFsaWdubWVudCB0byBoYXZlIGFsbCBpdHMgY29sdW1ucyB2ZXJ0aWNhbGx5IGNlbnRlcmVkLiAqL1xuICB2ZXJ0aWNhbEFsaWduOiBQcm9wVHlwZXMub25lT2YoU1VJLlZFUlRJQ0FMX0FMSUdOTUVOVFMpXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBHcmlkUm93OyIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZUtleU9ubHksIHVzZUtleU9yVmFsdWVBbmRLZXksIHVzZU11bHRpcGxlUHJvcCwgdXNlVGV4dEFsaWduUHJvcCwgdXNlVmVydGljYWxBbGlnblByb3AsIHVzZVdpZHRoUHJvcCB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgR3JpZENvbHVtbiBmcm9tICcuL0dyaWRDb2x1bW4nO1xuaW1wb3J0IEdyaWRSb3cgZnJvbSAnLi9HcmlkUm93Jztcbi8qKlxuICogQSBncmlkIGlzIHVzZWQgdG8gaGFybW9uaXplIG5lZ2F0aXZlIHNwYWNlIGluIGEgbGF5b3V0LlxuICovXG5cbmZ1bmN0aW9uIEdyaWQocHJvcHMpIHtcbiAgdmFyIGNlbGxlZCA9IHByb3BzLmNlbGxlZCxcbiAgICAgIGNlbnRlcmVkID0gcHJvcHMuY2VudGVyZWQsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sdW1ucyA9IHByb3BzLmNvbHVtbnMsXG4gICAgICBjb250YWluZXIgPSBwcm9wcy5jb250YWluZXIsXG4gICAgICBkaXZpZGVkID0gcHJvcHMuZGl2aWRlZCxcbiAgICAgIGRvdWJsaW5nID0gcHJvcHMuZG91YmxpbmcsXG4gICAgICBpbnZlcnRlZCA9IHByb3BzLmludmVydGVkLFxuICAgICAgcGFkZGVkID0gcHJvcHMucGFkZGVkLFxuICAgICAgcmVsYXhlZCA9IHByb3BzLnJlbGF4ZWQsXG4gICAgICByZXZlcnNlZCA9IHByb3BzLnJldmVyc2VkLFxuICAgICAgc3RhY2thYmxlID0gcHJvcHMuc3RhY2thYmxlLFxuICAgICAgc3RyZXRjaGVkID0gcHJvcHMuc3RyZXRjaGVkLFxuICAgICAgdGV4dEFsaWduID0gcHJvcHMudGV4dEFsaWduLFxuICAgICAgdmVydGljYWxBbGlnbiA9IHByb3BzLnZlcnRpY2FsQWxpZ247XG4gIHZhciBjbGFzc2VzID0gY3goJ3VpJywgdXNlS2V5T25seShjZW50ZXJlZCwgJ2NlbnRlcmVkJyksIHVzZUtleU9ubHkoY29udGFpbmVyLCAnY29udGFpbmVyJyksIHVzZUtleU9ubHkoZG91YmxpbmcsICdkb3VibGluZycpLCB1c2VLZXlPbmx5KGludmVydGVkLCAnaW52ZXJ0ZWQnKSwgdXNlS2V5T25seShzdGFja2FibGUsICdzdGFja2FibGUnKSwgdXNlS2V5T25seShzdHJldGNoZWQsICdzdHJldGNoZWQnKSwgdXNlS2V5T3JWYWx1ZUFuZEtleShjZWxsZWQsICdjZWxsZWQnKSwgdXNlS2V5T3JWYWx1ZUFuZEtleShkaXZpZGVkLCAnZGl2aWRlZCcpLCB1c2VLZXlPclZhbHVlQW5kS2V5KHBhZGRlZCwgJ3BhZGRlZCcpLCB1c2VLZXlPclZhbHVlQW5kS2V5KHJlbGF4ZWQsICdyZWxheGVkJyksIHVzZU11bHRpcGxlUHJvcChyZXZlcnNlZCwgJ3JldmVyc2VkJyksIHVzZVRleHRBbGlnblByb3AodGV4dEFsaWduKSwgdXNlVmVydGljYWxBbGlnblByb3AodmVydGljYWxBbGlnbiksIHVzZVdpZHRoUHJvcChjb2x1bW5zLCAnY29sdW1uJywgdHJ1ZSksICdncmlkJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhHcmlkLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEdyaWQsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlbik7XG59XG5cbkdyaWQuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjZWxsZWRcIiwgXCJjZW50ZXJlZFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sdW1uc1wiLCBcImNvbnRhaW5lclwiLCBcImRpdmlkZWRcIiwgXCJkb3VibGluZ1wiLCBcImludmVydGVkXCIsIFwicGFkZGVkXCIsIFwicmVsYXhlZFwiLCBcInJldmVyc2VkXCIsIFwic3RhY2thYmxlXCIsIFwic3RyZXRjaGVkXCIsIFwidGV4dEFsaWduXCIsIFwidmVydGljYWxBbGlnblwiXTtcbkdyaWQuQ29sdW1uID0gR3JpZENvbHVtbjtcbkdyaWQuUm93ID0gR3JpZFJvdztcbkdyaWQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQSBncmlkIGNhbiBoYXZlIHJvd3MgZGl2aWRlZCBpbnRvIGNlbGxzLiAqL1xuICBjZWxsZWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub25lT2YoWydpbnRlcm5hbGx5J10pXSksXG5cbiAgLyoqIEEgZ3JpZCBjYW4gaGF2ZSBpdHMgY29sdW1ucyBjZW50ZXJlZC4gKi9cbiAgY2VudGVyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFJlcHJlc2VudHMgY29sdW1uIGNvdW50IHBlciByb3cgaW4gR3JpZC4gKi9cbiAgY29sdW1uczogUHJvcFR5cGVzLm9uZU9mKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoU1VJLldJRFRIUyksIFsnZXF1YWwnXSkpLFxuXG4gIC8qKiBBIGdyaWQgY2FuIGJlIGNvbWJpbmVkIHdpdGggYSBjb250YWluZXIgdG8gdXNlIHRoZSBhdmFpbGFibGUgbGF5b3V0IGFuZCBhbGlnbm1lbnQuICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgZ3JpZCBjYW4gaGF2ZSBkaXZpZGVycyBiZXR3ZWVuIGl0cyBjb2x1bW5zLiAqL1xuICBkaXZpZGVkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9uZU9mKFsndmVydGljYWxseSddKV0pLFxuXG4gIC8qKiBBIGdyaWQgY2FuIGRvdWJsZSBpdHMgY29sdW1uIHdpZHRoIG9uIHRhYmxldCBhbmQgbW9iaWxlIHNpemVzLiAqL1xuICBkb3VibGluZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgZ3JpZCdzIGNvbG9ycyBjYW4gYmUgaW52ZXJ0ZWQuICovXG4gIGludmVydGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBncmlkIGNhbiBwcmVzZXJ2ZSBpdHMgdmVydGljYWwgYW5kIGhvcml6b250YWwgZ3V0dGVycyBvbiBmaXJzdCBhbmQgbGFzdCBjb2x1bW5zLiAqL1xuICBwYWRkZWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsbHknLCAndmVydGljYWxseSddKV0pLFxuXG4gIC8qKiBBIGdyaWQgY2FuIGluY3JlYXNlIGl0cyBndXR0ZXJzIHRvIGFsbG93IGZvciBtb3JlIG5lZ2F0aXZlIHNwYWNlLiAqL1xuICByZWxheGVkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9uZU9mKFsndmVyeSddKV0pLFxuXG4gIC8qKiBBIGdyaWQgY2FuIHNwZWNpZnkgdGhhdCBpdHMgY29sdW1ucyBzaG91bGQgcmV2ZXJzZSBvcmRlciBhdCBkaWZmZXJlbnQgZGV2aWNlIHNpemVzLiAqL1xuICByZXZlcnNlZDogY3VzdG9tUHJvcFR5cGVzLm11bHRpcGxlUHJvcChbJ2NvbXB1dGVyJywgJ2NvbXB1dGVyIHZlcnRpY2FsbHknLCAnbW9iaWxlJywgJ21vYmlsZSB2ZXJ0aWNhbGx5JywgJ3RhYmxldCcsICd0YWJsZXQgdmVydGljYWxseSddKSxcblxuICAvKiogQSBncmlkIGNhbiBoYXZlIGl0cyBjb2x1bW5zIHN0YWNrIG9uLXRvcCBvZiBlYWNoIG90aGVyIGFmdGVyIHJlYWNoaW5nIG1vYmlsZSBicmVha3BvaW50cy4gKi9cbiAgc3RhY2thYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBncmlkIGNhbiBzdHJldGNoIGl0cyBjb250ZW50cyB0byB0YWtlIHVwIHRoZSBlbnRpcmUgZ3JpZCBoZWlnaHQuICovXG4gIHN0cmV0Y2hlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgZ3JpZCBjYW4gc3BlY2lmeSBpdHMgdGV4dCBhbGlnbm1lbnQuICovXG4gIHRleHRBbGlnbjogUHJvcFR5cGVzLm9uZU9mKFNVSS5URVhUX0FMSUdOTUVOVFMpLFxuXG4gIC8qKiBBIGdyaWQgY2FuIHNwZWNpZnkgaXRzIHZlcnRpY2FsIGFsaWdubWVudCB0byBoYXZlIGFsbCBpdHMgY29sdW1ucyB2ZXJ0aWNhbGx5IGNlbnRlcmVkLiAqL1xuICB2ZXJ0aWNhbEFsaWduOiBQcm9wVHlwZXMub25lT2YoU1VJLlZFUlRJQ0FMX0FMSUdOTUVOVFMpXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBHcmlkOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBtZXNzYWdlIGNhbiBjb250YWluIGEgY29udGVudC5cbiAqL1xuXG5mdW5jdGlvbiBNZXNzYWdlQ29udGVudChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdjb250ZW50JywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhNZXNzYWdlQ29udGVudCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShNZXNzYWdlQ29udGVudCwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuTWVzc2FnZUNvbnRlbnQuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5NZXNzYWdlQ29udGVudC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZUNvbnRlbnQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIG1lc3NhZ2UgY2FuIGNvbnRhaW4gYSBoZWFkZXIuXG4gKi9cblxuZnVuY3Rpb24gTWVzc2FnZUhlYWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdoZWFkZXInLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKE1lc3NhZ2VIZWFkZXIsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTWVzc2FnZUhlYWRlciwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuTWVzc2FnZUhlYWRlci5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiXTtcbk1lc3NhZ2VIZWFkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmRcbn0gOiB7fTtcbk1lc3NhZ2VIZWFkZXIuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShNZXNzYWdlSGVhZGVyLCBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB7XG4gICAgY29udGVudDogdmFsXG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VIZWFkZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIG1lc3NhZ2UgbGlzdCBjYW4gY29udGFpbiBhbiBpdGVtLlxuICovXG5cbmZ1bmN0aW9uIE1lc3NhZ2VJdGVtKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQ7XG4gIHZhciBjbGFzc2VzID0gY3goJ2NvbnRlbnQnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKE1lc3NhZ2VJdGVtLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKE1lc3NhZ2VJdGVtLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5NZXNzYWdlSXRlbS5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiXTtcbk1lc3NhZ2VJdGVtLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5NZXNzYWdlSXRlbS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnbGknXG59O1xuTWVzc2FnZUl0ZW0uY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShNZXNzYWdlSXRlbSwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VJdGVtOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX21hcCBmcm9tIFwibG9kYXNoL21hcFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgTWVzc2FnZUl0ZW0gZnJvbSAnLi9NZXNzYWdlSXRlbSc7XG4vKipcbiAqIEEgbWVzc2FnZSBjYW4gY29udGFpbiBhIGxpc3Qgb2YgaXRlbXMuXG4gKi9cblxuZnVuY3Rpb24gTWVzc2FnZUxpc3QocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBpdGVtcyA9IHByb3BzLml0ZW1zO1xuICB2YXIgY2xhc3NlcyA9IGN4KCdsaXN0JywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhNZXNzYWdlTGlzdCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShNZXNzYWdlTGlzdCwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gX21hcChpdGVtcywgTWVzc2FnZUl0ZW0uY3JlYXRlKSA6IGNoaWxkcmVuKTtcbn1cblxuTWVzc2FnZUxpc3QuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcIml0ZW1zXCJdO1xuTWVzc2FnZUxpc3QucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgTWVzc2FnZS5JdGVtcy4gKi9cbiAgaXRlbXM6IGN1c3RvbVByb3BUeXBlcy5jb2xsZWN0aW9uU2hvcnRoYW5kXG59IDoge307XG5NZXNzYWdlTGlzdC5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAndWwnXG59O1xuTWVzc2FnZUxpc3QuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShNZXNzYWdlTGlzdCwgZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4ge1xuICAgIGl0ZW1zOiB2YWxcbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZUxpc3Q7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaXNOaWwgZnJvbSBcImxvZGFzaC9pc05pbFwiO1xuaW1wb3J0IF93aXRob3V0IGZyb20gXCJsb2Rhc2gvd2l0aG91dFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVIVE1MUGFyYWdyYXBoLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VLZXlPclZhbHVlQW5kS2V5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL2VsZW1lbnRzL0ljb24nO1xuaW1wb3J0IE1lc3NhZ2VDb250ZW50IGZyb20gJy4vTWVzc2FnZUNvbnRlbnQnO1xuaW1wb3J0IE1lc3NhZ2VIZWFkZXIgZnJvbSAnLi9NZXNzYWdlSGVhZGVyJztcbmltcG9ydCBNZXNzYWdlTGlzdCBmcm9tICcuL01lc3NhZ2VMaXN0JztcbmltcG9ydCBNZXNzYWdlSXRlbSBmcm9tICcuL01lc3NhZ2VJdGVtJztcbi8qKlxuICogQSBtZXNzYWdlIGRpc3BsYXlzIGluZm9ybWF0aW9uIHRoYXQgZXhwbGFpbnMgbmVhcmJ5IGNvbnRlbnQuXG4gKiBAc2VlIEZvcm1cbiAqL1xuXG52YXIgTWVzc2FnZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVzc2FnZSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVzc2FnZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZXNzYWdlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKE1lc3NhZ2UpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVEaXNtaXNzXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgb25EaXNtaXNzID0gX3RoaXMucHJvcHMub25EaXNtaXNzO1xuICAgICAgaWYgKG9uRGlzbWlzcykgb25EaXNtaXNzKGUsIF90aGlzLnByb3BzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNZXNzYWdlLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhdHRhY2hlZCA9IF90aGlzJHByb3BzLmF0dGFjaGVkLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMuY29sb3IsXG4gICAgICAgICAgY29tcGFjdCA9IF90aGlzJHByb3BzLmNvbXBhY3QsXG4gICAgICAgICAgY29udGVudCA9IF90aGlzJHByb3BzLmNvbnRlbnQsXG4gICAgICAgICAgZXJyb3IgPSBfdGhpcyRwcm9wcy5lcnJvcixcbiAgICAgICAgICBmbG9hdGluZyA9IF90aGlzJHByb3BzLmZsb2F0aW5nLFxuICAgICAgICAgIGhlYWRlciA9IF90aGlzJHByb3BzLmhlYWRlcixcbiAgICAgICAgICBoaWRkZW4gPSBfdGhpcyRwcm9wcy5oaWRkZW4sXG4gICAgICAgICAgaWNvbiA9IF90aGlzJHByb3BzLmljb24sXG4gICAgICAgICAgaW5mbyA9IF90aGlzJHByb3BzLmluZm8sXG4gICAgICAgICAgbGlzdCA9IF90aGlzJHByb3BzLmxpc3QsXG4gICAgICAgICAgbmVnYXRpdmUgPSBfdGhpcyRwcm9wcy5uZWdhdGl2ZSxcbiAgICAgICAgICBvbkRpc21pc3MgPSBfdGhpcyRwcm9wcy5vbkRpc21pc3MsXG4gICAgICAgICAgcG9zaXRpdmUgPSBfdGhpcyRwcm9wcy5wb3NpdGl2ZSxcbiAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICBzdWNjZXNzID0gX3RoaXMkcHJvcHMuc3VjY2VzcyxcbiAgICAgICAgICB2aXNpYmxlID0gX3RoaXMkcHJvcHMudmlzaWJsZSxcbiAgICAgICAgICB3YXJuaW5nID0gX3RoaXMkcHJvcHMud2FybmluZztcbiAgICAgIHZhciBjbGFzc2VzID0gY3goJ3VpJywgY29sb3IsIHNpemUsIHVzZUtleU9ubHkoY29tcGFjdCwgJ2NvbXBhY3QnKSwgdXNlS2V5T25seShlcnJvciwgJ2Vycm9yJyksIHVzZUtleU9ubHkoZmxvYXRpbmcsICdmbG9hdGluZycpLCB1c2VLZXlPbmx5KGhpZGRlbiwgJ2hpZGRlbicpLCB1c2VLZXlPbmx5KGljb24sICdpY29uJyksIHVzZUtleU9ubHkoaW5mbywgJ2luZm8nKSwgdXNlS2V5T25seShuZWdhdGl2ZSwgJ25lZ2F0aXZlJyksIHVzZUtleU9ubHkocG9zaXRpdmUsICdwb3NpdGl2ZScpLCB1c2VLZXlPbmx5KHN1Y2Nlc3MsICdzdWNjZXNzJyksIHVzZUtleU9ubHkodmlzaWJsZSwgJ3Zpc2libGUnKSwgdXNlS2V5T25seSh3YXJuaW5nLCAnd2FybmluZycpLCB1c2VLZXlPclZhbHVlQW5kS2V5KGF0dGFjaGVkLCAnYXR0YWNoZWQnKSwgJ21lc3NhZ2UnLCBjbGFzc05hbWUpO1xuICAgICAgdmFyIGRpc21pc3NJY29uID0gb25EaXNtaXNzICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgICAgICBuYW1lOiBcImNsb3NlXCIsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlRGlzbWlzc1xuICAgICAgfSk7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKE1lc3NhZ2UsIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTWVzc2FnZSwgdGhpcy5wcm9wcyk7XG5cbiAgICAgIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgICAgIH0pLCBkaXNtaXNzSWNvbiwgY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgICB9KSwgZGlzbWlzc0ljb24sIEljb24uY3JlYXRlKGljb24sIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSksICghX2lzTmlsKGhlYWRlcikgfHwgIV9pc05pbChjb250ZW50KSB8fCAhX2lzTmlsKGxpc3QpKSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KE1lc3NhZ2VDb250ZW50LCBudWxsLCBNZXNzYWdlSGVhZGVyLmNyZWF0ZShoZWFkZXIsIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSksIE1lc3NhZ2VMaXN0LmNyZWF0ZShsaXN0LCB7XG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pLCBjcmVhdGVIVE1MUGFyYWdyYXBoKGNvbnRlbnQsIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSkpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWVzc2FnZTtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KE1lc3NhZ2UsIFwiQ29udGVudFwiLCBNZXNzYWdlQ29udGVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNZXNzYWdlLCBcIkhlYWRlclwiLCBNZXNzYWdlSGVhZGVyKTtcblxuX2RlZmluZVByb3BlcnR5KE1lc3NhZ2UsIFwiTGlzdFwiLCBNZXNzYWdlTGlzdCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNZXNzYWdlLCBcIkl0ZW1cIiwgTWVzc2FnZUl0ZW0pO1xuXG5fZGVmaW5lUHJvcGVydHkoTWVzc2FnZSwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYXNcIiwgXCJhdHRhY2hlZFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wYWN0XCIsIFwiY29udGVudFwiLCBcImVycm9yXCIsIFwiZmxvYXRpbmdcIiwgXCJoZWFkZXJcIiwgXCJoaWRkZW5cIiwgXCJpY29uXCIsIFwiaW5mb1wiLCBcImxpc3RcIiwgXCJuZWdhdGl2ZVwiLCBcIm9uRGlzbWlzc1wiLCBcInBvc2l0aXZlXCIsIFwic2l6ZVwiLCBcInN1Y2Nlc3NcIiwgXCJ2aXNpYmxlXCIsIFwid2FybmluZ1wiXSk7XG5cbmV4cG9ydCB7IE1lc3NhZ2UgYXMgZGVmYXVsdCB9O1xuTWVzc2FnZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBIG1lc3NhZ2UgY2FuIGJlIGZvcm1hdHRlZCB0byBhdHRhY2ggaXRzZWxmIHRvIG90aGVyIGNvbnRlbnQuICovXG4gIGF0dGFjaGVkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ3RvcCddKV0pLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEEgbWVzc2FnZSBjYW4gYmUgZm9ybWF0dGVkIHRvIGJlIGRpZmZlcmVudCBjb2xvcnMuICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoU1VJLkNPTE9SUyksXG5cbiAgLyoqIEEgbWVzc2FnZSBjYW4gb25seSB0YWtlIHVwIHRoZSB3aWR0aCBvZiBpdHMgY29udGVudC4gKi9cbiAgY29tcGFjdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBtZXNzYWdlIG1heSBiZSBmb3JtYXR0ZWQgdG8gZGlzcGxheSBhIG5lZ2F0aXZlIG1lc3NhZ2UuIFNhbWUgYXMgYG5lZ2F0aXZlYC4gKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIG1lc3NhZ2UgY2FuIGZsb2F0IGFib3ZlIGNvbnRlbnQgdGhhdCBpdCBpcyByZWxhdGVkIHRvLiAqL1xuICBmbG9hdGluZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgTWVzc2FnZUhlYWRlci4gKi9cbiAgaGVhZGVyOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogQSBtZXNzYWdlIGNhbiBiZSBoaWRkZW4uICovXG4gIGhpZGRlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgbWVzc2FnZSBjYW4gY29udGFpbiBhbiBpY29uLiAqL1xuICBpY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCwgUHJvcFR5cGVzLmJvb2xdKSxcblxuICAvKiogQSBtZXNzYWdlIG1heSBiZSBmb3JtYXR0ZWQgdG8gZGlzcGxheSBpbmZvcm1hdGlvbi4gKi9cbiAgaW5mbzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEFycmF5IHNob3J0aGFuZCBpdGVtcyBmb3IgdGhlIE1lc3NhZ2VMaXN0LiBNdXR1YWxseSBleGNsdXNpdmUgd2l0aCBjaGlsZHJlbi4gKi9cbiAgbGlzdDogY3VzdG9tUHJvcFR5cGVzLmNvbGxlY3Rpb25TaG9ydGhhbmQsXG5cbiAgLyoqIEEgbWVzc2FnZSBtYXkgYmUgZm9ybWF0dGVkIHRvIGRpc3BsYXkgYSBuZWdhdGl2ZSBtZXNzYWdlLiBTYW1lIGFzIGBlcnJvcmAuICovXG4gIG5lZ2F0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBtZXNzYWdlIHRoYXQgdGhlIHVzZXIgY2FuIGNob29zZSB0byBoaWRlLlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIFwieFwiIGljb24uIFRoaXMgYWxzbyBhZGRzIHRoZSBcInhcIiBpY29uLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogQSBtZXNzYWdlIG1heSBiZSBmb3JtYXR0ZWQgdG8gZGlzcGxheSBhIHBvc2l0aXZlIG1lc3NhZ2UuICBTYW1lIGFzIGBzdWNjZXNzYC4gKi9cbiAgcG9zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIG1lc3NhZ2UgY2FuIGhhdmUgZGlmZmVyZW50IHNpemVzLiAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoX3dpdGhvdXQoU1VJLlNJWkVTLCAnbWVkaXVtJykpLFxuXG4gIC8qKiBBIG1lc3NhZ2UgbWF5IGJlIGZvcm1hdHRlZCB0byBkaXNwbGF5IGEgcG9zaXRpdmUgbWVzc2FnZS4gIFNhbWUgYXMgYHBvc2l0aXZlYC4gKi9cbiAgc3VjY2VzczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgbWVzc2FnZSBjYW4gYmUgc2V0IHRvIHZpc2libGUgdG8gZm9yY2UgaXRzZWxmIHRvIGJlIHNob3duLiAqL1xuICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBtZXNzYWdlIG1heSBiZSBmb3JtYXR0ZWQgdG8gZGlzcGxheSB3YXJuaW5nIG1lc3NhZ2VzLiAqL1xuICB3YXJuaW5nOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG5cbmZ1bmN0aW9uIFRhYmxlQm9keShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZTtcbiAgdmFyIGNsYXNzZXMgPSBjeChjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFRhYmxlQm9keSwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShUYWJsZUJvZHksIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlbik7XG59XG5cblRhYmxlQm9keS5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCJdO1xuVGFibGVCb2R5LmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICd0Ym9keSdcbn07XG5UYWJsZUJvZHkucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBUYWJsZUJvZHk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfd2l0aG91dCBmcm9tIFwibG9kYXNoL3dpdGhvdXRcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIFNVSSwgdXNlS2V5T25seSwgdXNlVGV4dEFsaWduUHJvcCwgdXNlVmVydGljYWxBbGlnblByb3AsIHVzZVdpZHRoUHJvcCB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi8uLi9lbGVtZW50cy9JY29uJztcbi8qKlxuICogQSB0YWJsZSByb3cgY2FuIGhhdmUgY2VsbHMuXG4gKi9cblxuZnVuY3Rpb24gVGFibGVDZWxsKHByb3BzKSB7XG4gIHZhciBhY3RpdmUgPSBwcm9wcy5hY3RpdmUsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sbGFwc2luZyA9IHByb3BzLmNvbGxhcHNpbmcsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgaWNvbiA9IHByb3BzLmljb24sXG4gICAgICBuZWdhdGl2ZSA9IHByb3BzLm5lZ2F0aXZlLFxuICAgICAgcG9zaXRpdmUgPSBwcm9wcy5wb3NpdGl2ZSxcbiAgICAgIHNlbGVjdGFibGUgPSBwcm9wcy5zZWxlY3RhYmxlLFxuICAgICAgc2luZ2xlTGluZSA9IHByb3BzLnNpbmdsZUxpbmUsXG4gICAgICB0ZXh0QWxpZ24gPSBwcm9wcy50ZXh0QWxpZ24sXG4gICAgICB2ZXJ0aWNhbEFsaWduID0gcHJvcHMudmVydGljYWxBbGlnbixcbiAgICAgIHdhcm5pbmcgPSBwcm9wcy53YXJuaW5nLFxuICAgICAgd2lkdGggPSBwcm9wcy53aWR0aDtcbiAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KGFjdGl2ZSwgJ2FjdGl2ZScpLCB1c2VLZXlPbmx5KGNvbGxhcHNpbmcsICdjb2xsYXBzaW5nJyksIHVzZUtleU9ubHkoZGlzYWJsZWQsICdkaXNhYmxlZCcpLCB1c2VLZXlPbmx5KGVycm9yLCAnZXJyb3InKSwgdXNlS2V5T25seShuZWdhdGl2ZSwgJ25lZ2F0aXZlJyksIHVzZUtleU9ubHkocG9zaXRpdmUsICdwb3NpdGl2ZScpLCB1c2VLZXlPbmx5KHNlbGVjdGFibGUsICdzZWxlY3RhYmxlJyksIHVzZUtleU9ubHkoc2luZ2xlTGluZSwgJ3NpbmdsZSBsaW5lJyksIHVzZUtleU9ubHkod2FybmluZywgJ3dhcm5pbmcnKSwgdXNlVGV4dEFsaWduUHJvcCh0ZXh0QWxpZ24pLCB1c2VWZXJ0aWNhbEFsaWduUHJvcCh2ZXJ0aWNhbEFsaWduKSwgdXNlV2lkdGhQcm9wKHdpZHRoLCAnd2lkZScpLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFRhYmxlQ2VsbCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShUYWJsZUNlbGwsIHByb3BzKTtcblxuICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBJY29uLmNyZWF0ZShpY29uKSwgY29udGVudCk7XG59XG5cblRhYmxlQ2VsbC5oYW5kbGVkUHJvcHMgPSBbXCJhY3RpdmVcIiwgXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sbGFwc2luZ1wiLCBcImNvbnRlbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiaWNvblwiLCBcIm5lZ2F0aXZlXCIsIFwicG9zaXRpdmVcIiwgXCJzZWxlY3RhYmxlXCIsIFwic2luZ2xlTGluZVwiLCBcInRleHRBbGlnblwiLCBcInZlcnRpY2FsQWxpZ25cIiwgXCJ3YXJuaW5nXCIsIFwid2lkdGhcIl07XG5UYWJsZUNlbGwuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ3RkJ1xufTtcblRhYmxlQ2VsbC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBIGNlbGwgY2FuIGJlIGFjdGl2ZSBvciBzZWxlY3RlZCBieSBhIHVzZXIuICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQSBjZWxsIGNhbiBiZSBjb2xsYXBzaW5nIHNvIHRoYXQgaXQgb25seSB1c2VzIGFzIG11Y2ggc3BhY2UgYXMgcmVxdWlyZWQuICovXG4gIGNvbGxhcHNpbmc6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIEEgY2VsbCBjYW4gYmUgZGlzYWJsZWQuICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBjZWxsIG1heSBjYWxsIGF0dGVudGlvbiB0byBhbiBlcnJvciBvciBhIG5lZ2F0aXZlIHZhbHVlLiAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEFkZCBhbiBJY29uIGJ5IG5hbWUsIHByb3BzIG9iamVjdCwgb3IgcGFzcyBhbiA8SWNvbiAvPiAqL1xuICBpY29uOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogQSBjZWxsIG1heSBsZXQgYSB1c2VyIGtub3cgd2hldGhlciBhIHZhbHVlIGlzIGJhZC4gKi9cbiAgbmVnYXRpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGNlbGwgbWF5IGxldCBhIHVzZXIga25vdyB3aGV0aGVyIGEgdmFsdWUgaXMgZ29vZC4gKi9cbiAgcG9zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGNlbGwgY2FuIGJlIHNlbGVjdGFibGUuICovXG4gIHNlbGVjdGFibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGNlbGwgY2FuIHNwZWNpZnkgdGhhdCBpdHMgY29udGVudHMgc2hvdWxkIHJlbWFpbiBvbiBhIHNpbmdsZSBsaW5lIGFuZCBub3Qgd3JhcC4gKi9cbiAgc2luZ2xlTGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgdGFibGUgY2VsbCBjYW4gYWRqdXN0IGl0cyB0ZXh0IGFsaWdubWVudC4gKi9cbiAgdGV4dEFsaWduOiBQcm9wVHlwZXMub25lT2YoX3dpdGhvdXQoU1VJLlRFWFRfQUxJR05NRU5UUywgJ2p1c3RpZmllZCcpKSxcblxuICAvKiogQSB0YWJsZSBjZWxsIGNhbiBhZGp1c3QgaXRzIHRleHQgYWxpZ25tZW50LiAqL1xuICB2ZXJ0aWNhbEFsaWduOiBQcm9wVHlwZXMub25lT2YoU1VJLlZFUlRJQ0FMX0FMSUdOTUVOVFMpLFxuXG4gIC8qKiBBIGNlbGwgbWF5IHdhcm4gYSB1c2VyLiAqL1xuICB3YXJuaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSB0YWJsZSBjYW4gc3BlY2lmeSB0aGUgd2lkdGggb2YgaW5kaXZpZHVhbCBjb2x1bW5zIGluZGVwZW5kZW50bHkuICovXG4gIHdpZHRoOiBQcm9wVHlwZXMub25lT2YoU1VJLldJRFRIUylcbn0gOiB7fTtcblRhYmxlQ2VsbC5jcmVhdGUgPSBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KFRhYmxlQ2VsbCwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IFRhYmxlQ2VsbDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgdXNlS2V5T25seSB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgdGFibGUgY2FuIGhhdmUgYSBoZWFkZXIuXG4gKi9cblxuZnVuY3Rpb24gVGFibGVIZWFkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aDtcbiAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KGZ1bGxXaWR0aCwgJ2Z1bGwtd2lkdGgnKSwgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhUYWJsZUhlYWRlciwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShUYWJsZUhlYWRlciwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuVGFibGVIZWFkZXIuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJmdWxsV2lkdGhcIl07XG5UYWJsZUhlYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAndGhlYWQnXG59O1xuVGFibGVIZWFkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIEEgZGVmaW5pdGlvbiB0YWJsZSBjYW4gaGF2ZSBhIGZ1bGwgd2lkdGggaGVhZGVyIG9yIGZvb3RlciwgZmlsbGluZyBpbiB0aGUgZ2FwIGxlZnQgYnkgdGhlIGZpcnN0IGNvbHVtbi4gKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgVGFibGVIZWFkZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IFRhYmxlSGVhZGVyIGZyb20gJy4vVGFibGVIZWFkZXInO1xuLyoqXG4gKiBBIHRhYmxlIGNhbiBoYXZlIGEgZm9vdGVyLlxuICovXG5cbmZ1bmN0aW9uIFRhYmxlRm9vdGVyKHByb3BzKSB7XG4gIHZhciBhcyA9IHByb3BzLmFzO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFRhYmxlRm9vdGVyLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlSGVhZGVyLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGFzOiBhc1xuICB9KSk7XG59XG5cblRhYmxlRm9vdGVyLmhhbmRsZWRQcm9wcyA9IFtcImFzXCJdO1xuVGFibGVGb290ZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxufSA6IHt9O1xuVGFibGVGb290ZXIuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ3Rmb290J1xufTtcbmV4cG9ydCBkZWZhdWx0IFRhYmxlRm9vdGVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFVuaGFuZGxlZFByb3BzLCB1c2VWYWx1ZUFuZEtleSB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgVGFibGVDZWxsIGZyb20gJy4vVGFibGVDZWxsJztcbi8qKlxuICogQSB0YWJsZSBjYW4gaGF2ZSBhIGhlYWRlciBjZWxsLlxuICovXG5cbmZ1bmN0aW9uIFRhYmxlSGVhZGVyQ2VsbChwcm9wcykge1xuICB2YXIgYXMgPSBwcm9wcy5hcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIHNvcnRlZCA9IHByb3BzLnNvcnRlZDtcbiAgdmFyIGNsYXNzZXMgPSBjeCh1c2VWYWx1ZUFuZEtleShzb3J0ZWQsICdzb3J0ZWQnKSwgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhUYWJsZUhlYWRlckNlbGwsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFibGVDZWxsLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGFzOiBhcyxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSkpO1xufVxuXG5UYWJsZUhlYWRlckNlbGwuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjbGFzc05hbWVcIiwgXCJzb3J0ZWRcIl07XG5UYWJsZUhlYWRlckNlbGwucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEEgaGVhZGVyIGNlbGwgY2FuIGJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3IgZGVzY2VuZGluZyBvcmRlci4gKi9cbiAgc29ydGVkOiBQcm9wVHlwZXMub25lT2YoWydhc2NlbmRpbmcnLCAnZGVzY2VuZGluZyddKVxufSA6IHt9O1xuVGFibGVIZWFkZXJDZWxsLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICd0aCdcbn07XG5leHBvcnQgZGVmYXVsdCBUYWJsZUhlYWRlckNlbGw7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfd2l0aG91dCBmcm9tIFwibG9kYXNoL3dpdGhvdXRcIjtcbmltcG9ydCBfbWFwIGZyb20gXCJsb2Rhc2gvbWFwXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGNyZWF0ZVNob3J0aGFuZEZhY3RvcnksIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZUtleU9ubHksIHVzZVRleHRBbGlnblByb3AsIHVzZVZlcnRpY2FsQWxpZ25Qcm9wIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBUYWJsZUNlbGwgZnJvbSAnLi9UYWJsZUNlbGwnO1xuLyoqXG4gKiBBIHRhYmxlIGNhbiBoYXZlIHJvd3MuXG4gKi9cblxuZnVuY3Rpb24gVGFibGVSb3cocHJvcHMpIHtcbiAgdmFyIGFjdGl2ZSA9IHByb3BzLmFjdGl2ZSxcbiAgICAgIGNlbGxBcyA9IHByb3BzLmNlbGxBcyxcbiAgICAgIGNlbGxzID0gcHJvcHMuY2VsbHMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBuZWdhdGl2ZSA9IHByb3BzLm5lZ2F0aXZlLFxuICAgICAgcG9zaXRpdmUgPSBwcm9wcy5wb3NpdGl2ZSxcbiAgICAgIHRleHRBbGlnbiA9IHByb3BzLnRleHRBbGlnbixcbiAgICAgIHZlcnRpY2FsQWxpZ24gPSBwcm9wcy52ZXJ0aWNhbEFsaWduLFxuICAgICAgd2FybmluZyA9IHByb3BzLndhcm5pbmc7XG4gIHZhciBjbGFzc2VzID0gY3godXNlS2V5T25seShhY3RpdmUsICdhY3RpdmUnKSwgdXNlS2V5T25seShkaXNhYmxlZCwgJ2Rpc2FibGVkJyksIHVzZUtleU9ubHkoZXJyb3IsICdlcnJvcicpLCB1c2VLZXlPbmx5KG5lZ2F0aXZlLCAnbmVnYXRpdmUnKSwgdXNlS2V5T25seShwb3NpdGl2ZSwgJ3Bvc2l0aXZlJyksIHVzZUtleU9ubHkod2FybmluZywgJ3dhcm5pbmcnKSwgdXNlVGV4dEFsaWduUHJvcCh0ZXh0QWxpZ24pLCB1c2VWZXJ0aWNhbEFsaWduUHJvcCh2ZXJ0aWNhbEFsaWduKSwgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhUYWJsZVJvdywgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShUYWJsZVJvdywgcHJvcHMpO1xuXG4gIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICAgIH0pLCBjaGlsZHJlbik7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIF9tYXAoY2VsbHMsIGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIFRhYmxlQ2VsbC5jcmVhdGUoY2VsbCwge1xuICAgICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICAgIGFzOiBjZWxsQXNcbiAgICAgIH1cbiAgICB9KTtcbiAgfSkpO1xufVxuXG5UYWJsZVJvdy5oYW5kbGVkUHJvcHMgPSBbXCJhY3RpdmVcIiwgXCJhc1wiLCBcImNlbGxBc1wiLCBcImNlbGxzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwibmVnYXRpdmVcIiwgXCJwb3NpdGl2ZVwiLCBcInRleHRBbGlnblwiLCBcInZlcnRpY2FsQWxpZ25cIiwgXCJ3YXJuaW5nXCJdO1xuVGFibGVSb3cuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ3RyJyxcbiAgY2VsbEFzOiAndGQnXG59O1xuVGFibGVSb3cucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQSByb3cgY2FuIGJlIGFjdGl2ZSBvciBzZWxlY3RlZCBieSBhIHVzZXIuICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGNlbGxBczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBTaG9ydGhhbmQgYXJyYXkgb2YgcHJvcHMgZm9yIFRhYmxlQ2VsbC4gKi9cbiAgY2VsbHM6IGN1c3RvbVByb3BUeXBlcy5jb2xsZWN0aW9uU2hvcnRoYW5kLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEEgcm93IGNhbiBiZSBkaXNhYmxlZC4gKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHJvdyBtYXkgY2FsbCBhdHRlbnRpb24gdG8gYW4gZXJyb3Igb3IgYSBuZWdhdGl2ZSB2YWx1ZS4gKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHJvdyBtYXkgbGV0IGEgdXNlciBrbm93IHdoZXRoZXIgYSB2YWx1ZSBpcyBiYWQuICovXG4gIG5lZ2F0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSByb3cgbWF5IGxldCBhIHVzZXIga25vdyB3aGV0aGVyIGEgdmFsdWUgaXMgZ29vZC4gKi9cbiAgcG9zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHRhYmxlIHJvdyBjYW4gYWRqdXN0IGl0cyB0ZXh0IGFsaWdubWVudC4gKi9cbiAgdGV4dEFsaWduOiBQcm9wVHlwZXMub25lT2YoX3dpdGhvdXQoU1VJLlRFWFRfQUxJR05NRU5UUywgJ2p1c3RpZmllZCcpKSxcblxuICAvKiogQSB0YWJsZSByb3cgY2FuIGFkanVzdCBpdHMgdmVydGljYWwgYWxpZ25tZW50LiAqL1xuICB2ZXJ0aWNhbEFsaWduOiBQcm9wVHlwZXMub25lT2YoU1VJLlZFUlRJQ0FMX0FMSUdOTUVOVFMpLFxuXG4gIC8qKiBBIHJvdyBtYXkgd2FybiBhIHVzZXIuICovXG4gIHdhcm5pbmc6IFByb3BUeXBlcy5ib29sXG59IDoge307XG5UYWJsZVJvdy5jcmVhdGUgPSBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KFRhYmxlUm93LCBmdW5jdGlvbiAoY2VsbHMpIHtcbiAgcmV0dXJuIHtcbiAgICBjZWxsczogY2VsbHNcbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgVGFibGVSb3c7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfd2l0aG91dCBmcm9tIFwibG9kYXNoL3dpdGhvdXRcIjtcbmltcG9ydCBfbWFwIGZyb20gXCJsb2Rhc2gvbWFwXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZUtleU9ubHksIHVzZUtleU9yVmFsdWVBbmRLZXksIHVzZVRleHRBbGlnblByb3AsIHVzZVZlcnRpY2FsQWxpZ25Qcm9wLCB1c2VXaWR0aFByb3AgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IFRhYmxlQm9keSBmcm9tICcuL1RhYmxlQm9keSc7XG5pbXBvcnQgVGFibGVDZWxsIGZyb20gJy4vVGFibGVDZWxsJztcbmltcG9ydCBUYWJsZUZvb3RlciBmcm9tICcuL1RhYmxlRm9vdGVyJztcbmltcG9ydCBUYWJsZUhlYWRlciBmcm9tICcuL1RhYmxlSGVhZGVyJztcbmltcG9ydCBUYWJsZUhlYWRlckNlbGwgZnJvbSAnLi9UYWJsZUhlYWRlckNlbGwnO1xuaW1wb3J0IFRhYmxlUm93IGZyb20gJy4vVGFibGVSb3cnO1xuLyoqXG4gKiBBIHRhYmxlIGRpc3BsYXlzIGEgY29sbGVjdGlvbnMgb2YgZGF0YSBncm91cGVkIGludG8gcm93cy5cbiAqL1xuXG5mdW5jdGlvbiBUYWJsZShwcm9wcykge1xuICB2YXIgYXR0YWNoZWQgPSBwcm9wcy5hdHRhY2hlZCxcbiAgICAgIGJhc2ljID0gcHJvcHMuYmFzaWMsXG4gICAgICBjZWxsZWQgPSBwcm9wcy5jZWxsZWQsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sbGFwc2luZyA9IHByb3BzLmNvbGxhcHNpbmcsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sdW1ucyA9IHByb3BzLmNvbHVtbnMsXG4gICAgICBjb21wYWN0ID0gcHJvcHMuY29tcGFjdCxcbiAgICAgIGRlZmluaXRpb24gPSBwcm9wcy5kZWZpbml0aW9uLFxuICAgICAgZml4ZWQgPSBwcm9wcy5maXhlZCxcbiAgICAgIGZvb3RlclJvdyA9IHByb3BzLmZvb3RlclJvdyxcbiAgICAgIGhlYWRlclJvdyA9IHByb3BzLmhlYWRlclJvdyxcbiAgICAgIGhlYWRlclJvd3MgPSBwcm9wcy5oZWFkZXJSb3dzLFxuICAgICAgaW52ZXJ0ZWQgPSBwcm9wcy5pbnZlcnRlZCxcbiAgICAgIHBhZGRlZCA9IHByb3BzLnBhZGRlZCxcbiAgICAgIHJlbmRlckJvZHlSb3cgPSBwcm9wcy5yZW5kZXJCb2R5Um93LFxuICAgICAgc2VsZWN0YWJsZSA9IHByb3BzLnNlbGVjdGFibGUsXG4gICAgICBzaW5nbGVMaW5lID0gcHJvcHMuc2luZ2xlTGluZSxcbiAgICAgIHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc29ydGFibGUgPSBwcm9wcy5zb3J0YWJsZSxcbiAgICAgIHN0YWNrYWJsZSA9IHByb3BzLnN0YWNrYWJsZSxcbiAgICAgIHN0cmlwZWQgPSBwcm9wcy5zdHJpcGVkLFxuICAgICAgc3RydWN0dXJlZCA9IHByb3BzLnN0cnVjdHVyZWQsXG4gICAgICB0YWJsZURhdGEgPSBwcm9wcy50YWJsZURhdGEsXG4gICAgICB0ZXh0QWxpZ24gPSBwcm9wcy50ZXh0QWxpZ24sXG4gICAgICB1bnN0YWNrYWJsZSA9IHByb3BzLnVuc3RhY2thYmxlLFxuICAgICAgdmVydGljYWxBbGlnbiA9IHByb3BzLnZlcnRpY2FsQWxpZ247XG4gIHZhciBjbGFzc2VzID0gY3goJ3VpJywgY29sb3IsIHNpemUsIHVzZUtleU9ubHkoY2VsbGVkLCAnY2VsbGVkJyksIHVzZUtleU9ubHkoY29sbGFwc2luZywgJ2NvbGxhcHNpbmcnKSwgdXNlS2V5T25seShkZWZpbml0aW9uLCAnZGVmaW5pdGlvbicpLCB1c2VLZXlPbmx5KGZpeGVkLCAnZml4ZWQnKSwgdXNlS2V5T25seShpbnZlcnRlZCwgJ2ludmVydGVkJyksIHVzZUtleU9ubHkoc2VsZWN0YWJsZSwgJ3NlbGVjdGFibGUnKSwgdXNlS2V5T25seShzaW5nbGVMaW5lLCAnc2luZ2xlIGxpbmUnKSwgdXNlS2V5T25seShzb3J0YWJsZSwgJ3NvcnRhYmxlJyksIHVzZUtleU9ubHkoc3RhY2thYmxlLCAnc3RhY2thYmxlJyksIHVzZUtleU9ubHkoc3RyaXBlZCwgJ3N0cmlwZWQnKSwgdXNlS2V5T25seShzdHJ1Y3R1cmVkLCAnc3RydWN0dXJlZCcpLCB1c2VLZXlPbmx5KHVuc3RhY2thYmxlLCAndW5zdGFja2FibGUnKSwgdXNlS2V5T3JWYWx1ZUFuZEtleShhdHRhY2hlZCwgJ2F0dGFjaGVkJyksIHVzZUtleU9yVmFsdWVBbmRLZXkoYmFzaWMsICdiYXNpYycpLCB1c2VLZXlPclZhbHVlQW5kS2V5KGNvbXBhY3QsICdjb21wYWN0JyksIHVzZUtleU9yVmFsdWVBbmRLZXkocGFkZGVkLCAncGFkZGVkJyksIHVzZVRleHRBbGlnblByb3AodGV4dEFsaWduKSwgdXNlVmVydGljYWxBbGlnblByb3AodmVydGljYWxBbGlnbiksIHVzZVdpZHRoUHJvcChjb2x1bW5zLCAnY29sdW1uJyksICd0YWJsZScsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoVGFibGUsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoVGFibGUsIHByb3BzKTtcblxuICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgdmFyIGhhc0hlYWRlclJvd3MgPSBoZWFkZXJSb3cgfHwgaGVhZGVyUm93cztcbiAgdmFyIGhlYWRlclNob3J0aGFuZE9wdGlvbnMgPSB7XG4gICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICBjZWxsQXM6ICd0aCdcbiAgICB9XG4gIH07XG4gIHZhciBoZWFkZXJFbGVtZW50ID0gaGFzSGVhZGVyUm93cyAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlSGVhZGVyLCBudWxsLCBUYWJsZVJvdy5jcmVhdGUoaGVhZGVyUm93LCBoZWFkZXJTaG9ydGhhbmRPcHRpb25zKSwgX21hcChoZWFkZXJSb3dzLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBUYWJsZVJvdy5jcmVhdGUoZGF0YSwgaGVhZGVyU2hvcnRoYW5kT3B0aW9ucyk7XG4gIH0pKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBoZWFkZXJFbGVtZW50LCBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlQm9keSwgbnVsbCwgcmVuZGVyQm9keVJvdyAmJiBfbWFwKHRhYmxlRGF0YSwgZnVuY3Rpb24gKGRhdGEsIGluZGV4KSB7XG4gICAgcmV0dXJuIFRhYmxlUm93LmNyZWF0ZShyZW5kZXJCb2R5Um93KGRhdGEsIGluZGV4KSk7XG4gIH0pKSwgZm9vdGVyUm93ICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFibGVGb290ZXIsIG51bGwsIFRhYmxlUm93LmNyZWF0ZShmb290ZXJSb3cpKSk7XG59XG5cblRhYmxlLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiYXR0YWNoZWRcIiwgXCJiYXNpY1wiLCBcImNlbGxlZFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sbGFwc2luZ1wiLCBcImNvbG9yXCIsIFwiY29sdW1uc1wiLCBcImNvbXBhY3RcIiwgXCJkZWZpbml0aW9uXCIsIFwiZml4ZWRcIiwgXCJmb290ZXJSb3dcIiwgXCJoZWFkZXJSb3dcIiwgXCJoZWFkZXJSb3dzXCIsIFwiaW52ZXJ0ZWRcIiwgXCJwYWRkZWRcIiwgXCJyZW5kZXJCb2R5Um93XCIsIFwic2VsZWN0YWJsZVwiLCBcInNpbmdsZUxpbmVcIiwgXCJzaXplXCIsIFwic29ydGFibGVcIiwgXCJzdGFja2FibGVcIiwgXCJzdHJpcGVkXCIsIFwic3RydWN0dXJlZFwiLCBcInRhYmxlRGF0YVwiLCBcInRleHRBbGlnblwiLCBcInVuc3RhY2thYmxlXCIsIFwidmVydGljYWxBbGlnblwiXTtcblRhYmxlLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICd0YWJsZSdcbn07XG5UYWJsZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBdHRhY2ggdGFibGUgdG8gb3RoZXIgY29udGVudCAqL1xuICBhdHRhY2hlZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5vbmVPZihbJ3RvcCcsICdib3R0b20nXSldKSxcblxuICAvKiogQSB0YWJsZSBjYW4gcmVkdWNlIGl0cyBjb21wbGV4aXR5IHRvIGluY3JlYXNlIHJlYWRhYmlsaXR5LiAqL1xuICBiYXNpYzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsndmVyeSddKSwgUHJvcFR5cGVzLmJvb2xdKSxcblxuICAvKiogQSB0YWJsZSBtYXkgYmUgZGl2aWRlZCBlYWNoIHJvdyBpbnRvIHNlcGFyYXRlIGNlbGxzLiAqL1xuICBjZWxsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEEgdGFibGUgY2FuIGJlIGNvbGxhcHNpbmcsIHRha2luZyB1cCBvbmx5IGFzIG11Y2ggc3BhY2UgYXMgaXRzIHJvd3MuICovXG4gIGNvbGxhcHNpbmc6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHRhYmxlIGNhbiBiZSBnaXZlbiBhIGNvbG9yIHRvIGRpc3Rpbmd1aXNoIGl0IGZyb20gb3RoZXIgdGFibGVzLiAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFNVSS5DT0xPUlMpLFxuXG4gIC8qKiBBIHRhYmxlIGNhbiBzcGVjaWZ5IGl0cyBjb2x1bW4gY291bnQgdG8gZGl2aWRlIGl0cyBjb250ZW50IGV2ZW5seS4gKi9cbiAgY29sdW1uczogUHJvcFR5cGVzLm9uZU9mKFNVSS5XSURUSFMpLFxuXG4gIC8qKiBBIHRhYmxlIG1heSBzb21ldGltZXMgbmVlZCB0byBiZSBtb3JlIGNvbXBhY3QgdG8gbWFrZSBtb3JlIHJvd3MgdmlzaWJsZSBhdCBhIHRpbWUuICovXG4gIGNvbXBhY3Q6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub25lT2YoWyd2ZXJ5J10pXSksXG5cbiAgLyoqIEEgdGFibGUgbWF5IGJlIGZvcm1hdHRlZCB0byBlbXBoYXNpemUgYSBmaXJzdCBjb2x1bW4gdGhhdCBkZWZpbmVzIGEgcm93cyBjb250ZW50LiAqL1xuICBkZWZpbml0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSB0YWJsZSBjYW4gdXNlIGZpeGVkIGEgc3BlY2lhbCBmYXN0ZXIgZm9ybSBvZiB0YWJsZSByZW5kZXJpbmcgdGhhdCBkb2VzIG5vdCByZXNpemUgdGFibGUgY2VsbHMgYmFzZWQgb24gY29udGVudFxuICAgKi9cbiAgZml4ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIGEgVGFibGVSb3cgdG8gYmUgcGxhY2VkIHdpdGhpbiBUYWJsZS5Gb290ZXIuICovXG4gIGZvb3RlclJvdzogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgYSBUYWJsZVJvdyB0byBiZSBwbGFjZWQgd2l0aGluIFRhYmxlLkhlYWRlci4gKi9cbiAgaGVhZGVyUm93OiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2hlYWRlclJvd3MnXSksIGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kXSksXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgbXVsdGlwbGUgVGFibGVSb3dzIHRvIGJlIHBsYWNlZCB3aXRoaW4gVGFibGUuSGVhZGVyLiAqL1xuICBoZWFkZXJSb3dzOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2hlYWRlclJvdyddKSwgY3VzdG9tUHJvcFR5cGVzLmNvbGxlY3Rpb25TaG9ydGhhbmRdKSxcblxuICAvKiogQSB0YWJsZSdzIGNvbG9ycyBjYW4gYmUgaW52ZXJ0ZWQuICovXG4gIGludmVydGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSB0YWJsZSBtYXkgc29tZXRpbWVzIG5lZWQgdG8gYmUgbW9yZSBwYWRkZWQgZm9yIGxlZ2liaWxpdHkuICovXG4gIHBhZGRlZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5vbmVPZihbJ3ZlcnknXSldKSxcblxuICAvKipcbiAgICogTWFwcGVkIG92ZXIgYHRhYmxlRGF0YWAgYW5kIHNob3VsZCByZXR1cm4gc2hvcnRoYW5kIGZvciBlYWNoIFRhYmxlLlJvdyB0byBiZSBwbGFjZWQgd2l0aGluIFRhYmxlLkJvZHkuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZGF0YSAtIEFuIGVsZW1lbnQgaW4gdGhlIGB0YWJsZURhdGFgIGFycmF5LlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBpbiBgdGFibGVEYXRhYC5cbiAgICogQHJldHVybnMgeyp9IFNob3J0aGFuZCBmb3IgYSBUYWJsZS5Sb3cuXG4gICAqL1xuICByZW5kZXJCb2R5Um93OiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2NoaWxkcmVuJ10pLCBjdXN0b21Qcm9wVHlwZXMuZGVtYW5kKFsndGFibGVEYXRhJ10pLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKiBBIHRhYmxlIGNhbiBoYXZlIGl0cyByb3dzIGFwcGVhciBzZWxlY3RhYmxlLiAqL1xuICBzZWxlY3RhYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSB0YWJsZSBjYW4gc3BlY2lmeSB0aGF0IGl0cyBjZWxsIGNvbnRlbnRzIHNob3VsZCByZW1haW4gb24gYSBzaW5nbGUgbGluZSBhbmQgbm90IHdyYXAuICovXG4gIHNpbmdsZUxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHRhYmxlIGNhbiBhbHNvIGJlIHNtYWxsIG9yIGxhcmdlLiAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoX3dpdGhvdXQoU1VJLlNJWkVTLCAnbWluaScsICd0aW55JywgJ21lZGl1bScsICdiaWcnLCAnaHVnZScsICdtYXNzaXZlJykpLFxuXG4gIC8qKiBBIHRhYmxlIG1heSBhbGxvdyBhIHVzZXIgdG8gc29ydCBjb250ZW50cyBieSBjbGlja2luZyBvbiBhIHRhYmxlIGhlYWRlci4gKi9cbiAgc29ydGFibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHRhYmxlIGNhbiBzcGVjaWZ5IGhvdyBpdCBzdGFja3MgdGFibGUgY29udGVudCByZXNwb25zaXZlbHkuICovXG4gIHN0YWNrYWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgdGFibGUgY2FuIHN0cmlwZSBhbHRlcm5hdGUgcm93cyBvZiBjb250ZW50IHdpdGggYSBkYXJrZXIgY29sb3IgdG8gaW5jcmVhc2UgY29udHJhc3QuICovXG4gIHN0cmlwZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHRhYmxlIGNhbiBiZSBmb3JtYXR0ZWQgdG8gZGlzcGxheSBjb21wbGV4IHN0cnVjdHVyZWQgZGF0YS4gKi9cbiAgc3RydWN0dXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIERhdGEgdG8gYmUgcGFzc2VkIHRvIHRoZSByZW5kZXJCb2R5Um93IGZ1bmN0aW9uLiAqL1xuICB0YWJsZURhdGE6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsnY2hpbGRyZW4nXSksIGN1c3RvbVByb3BUeXBlcy5kZW1hbmQoWydyZW5kZXJCb2R5Um93J10pLCBQcm9wVHlwZXMuYXJyYXldKSxcblxuICAvKiogQSB0YWJsZSBjYW4gYWRqdXN0IGl0cyB0ZXh0IGFsaWdubWVudC4gKi9cbiAgdGV4dEFsaWduOiBQcm9wVHlwZXMub25lT2YoX3dpdGhvdXQoU1VJLlRFWFRfQUxJR05NRU5UUywgJ2p1c3RpZmllZCcpKSxcblxuICAvKiogQSB0YWJsZSBjYW4gc3BlY2lmeSBob3cgaXQgc3RhY2tzIHRhYmxlIGNvbnRlbnQgcmVzcG9uc2l2ZWx5LiAqL1xuICB1bnN0YWNrYWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgdGFibGUgY2FuIGFkanVzdCBpdHMgdGV4dCBhbGlnbm1lbnQuICovXG4gIHZlcnRpY2FsQWxpZ246IFByb3BUeXBlcy5vbmVPZihTVUkuVkVSVElDQUxfQUxJR05NRU5UUylcbn0gOiB7fTtcblRhYmxlLkJvZHkgPSBUYWJsZUJvZHk7XG5UYWJsZS5DZWxsID0gVGFibGVDZWxsO1xuVGFibGUuRm9vdGVyID0gVGFibGVGb290ZXI7XG5UYWJsZS5IZWFkZXIgPSBUYWJsZUhlYWRlcjtcblRhYmxlLkhlYWRlckNlbGwgPSBUYWJsZUhlYWRlckNlbGw7XG5UYWJsZS5Sb3cgPSBUYWJsZVJvdztcbmV4cG9ydCBkZWZhdWx0IFRhYmxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZUtleU9ubHksIHVzZVRleHRBbGlnblByb3AgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGNvbnRhaW5lciBsaW1pdHMgY29udGVudCB0byBhIG1heGltdW0gd2lkdGguXG4gKi9cblxuZnVuY3Rpb24gQ29udGFpbmVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICBmbHVpZCA9IHByb3BzLmZsdWlkLFxuICAgICAgdGV4dCA9IHByb3BzLnRleHQsXG4gICAgICB0ZXh0QWxpZ24gPSBwcm9wcy50ZXh0QWxpZ247XG4gIHZhciBjbGFzc2VzID0gY3goJ3VpJywgdXNlS2V5T25seSh0ZXh0LCAndGV4dCcpLCB1c2VLZXlPbmx5KGZsdWlkLCAnZmx1aWQnKSwgdXNlVGV4dEFsaWduUHJvcCh0ZXh0QWxpZ24pLCAnY29udGFpbmVyJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhDb250YWluZXIsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoQ29udGFpbmVyLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5Db250YWluZXIuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJmbHVpZFwiLCBcInRleHRcIiwgXCJ0ZXh0QWxpZ25cIl07XG5Db250YWluZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIENvbnRhaW5lciBoYXMgbm8gbWF4aW11bSB3aWR0aC4gKi9cbiAgZmx1aWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBSZWR1Y2UgbWF4aW11bSB3aWR0aCB0byBtb3JlIG5hdHVyYWxseSBhY2NvbW1vZGF0ZSB0ZXh0LiAqL1xuICB0ZXh0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQWxpZ24gY29udGFpbmVyIHRleHQuICovXG4gIHRleHRBbGlnbjogUHJvcFR5cGVzLm9uZU9mKFNVSS5URVhUX0FMSUdOTUVOVFMpXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBDb250YWluZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIHVzZUtleU9ubHkgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGRpdmlkZXIgdmlzdWFsbHkgc2VnbWVudHMgY29udGVudCBpbnRvIGdyb3Vwcy5cbiAqL1xuXG5mdW5jdGlvbiBEaXZpZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY2xlYXJpbmcgPSBwcm9wcy5jbGVhcmluZyxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgZml0dGVkID0gcHJvcHMuZml0dGVkLFxuICAgICAgaGlkZGVuID0gcHJvcHMuaGlkZGVuLFxuICAgICAgaG9yaXpvbnRhbCA9IHByb3BzLmhvcml6b250YWwsXG4gICAgICBpbnZlcnRlZCA9IHByb3BzLmludmVydGVkLFxuICAgICAgc2VjdGlvbiA9IHByb3BzLnNlY3Rpb24sXG4gICAgICB2ZXJ0aWNhbCA9IHByb3BzLnZlcnRpY2FsO1xuICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIHVzZUtleU9ubHkoY2xlYXJpbmcsICdjbGVhcmluZycpLCB1c2VLZXlPbmx5KGZpdHRlZCwgJ2ZpdHRlZCcpLCB1c2VLZXlPbmx5KGhpZGRlbiwgJ2hpZGRlbicpLCB1c2VLZXlPbmx5KGhvcml6b250YWwsICdob3Jpem9udGFsJyksIHVzZUtleU9ubHkoaW52ZXJ0ZWQsICdpbnZlcnRlZCcpLCB1c2VLZXlPbmx5KHNlY3Rpb24sICdzZWN0aW9uJyksIHVzZUtleU9ubHkodmVydGljYWwsICd2ZXJ0aWNhbCcpLCAnZGl2aWRlcicsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoRGl2aWRlciwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShEaXZpZGVyLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5EaXZpZGVyLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjbGVhcmluZ1wiLCBcImNvbnRlbnRcIiwgXCJmaXR0ZWRcIiwgXCJoaWRkZW5cIiwgXCJob3Jpem9udGFsXCIsIFwiaW52ZXJ0ZWRcIiwgXCJzZWN0aW9uXCIsIFwidmVydGljYWxcIl07XG5EaXZpZGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogRGl2aWRlciBjYW4gY2xlYXIgdGhlIGNvbnRlbnQgYWJvdmUgaXQuICovXG4gIGNsZWFyaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBEaXZpZGVyIGNhbiBiZSBmaXR0ZWQgd2l0aG91dCBhbnkgc3BhY2UgYWJvdmUgb3IgYmVsb3cgaXQuICovXG4gIGZpdHRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIERpdmlkZXIgY2FuIGRpdmlkZSBjb250ZW50IHdpdGhvdXQgY3JlYXRpbmcgYSBkaXZpZGluZyBsaW5lLiAqL1xuICBoaWRkZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBEaXZpZGVyIGNhbiBzZWdtZW50IGNvbnRlbnQgaG9yaXpvbnRhbGx5LiAqL1xuICBob3Jpem9udGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogRGl2aWRlciBjYW4gaGF2ZSBpdHMgY29sb3VycyBpbnZlcnRlZC4gKi9cbiAgaW52ZXJ0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBEaXZpZGVyIGNhbiBwcm92aWRlIGdyZWF0ZXIgbWFyZ2lucyB0byBkaXZpZGUgc2VjdGlvbnMgb2YgY29udGVudC4gKi9cbiAgc2VjdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIERpdmlkZXIgY2FuIHNlZ21lbnQgY29udGVudCB2ZXJ0aWNhbGx5LiAqL1xuICB2ZXJ0aWNhbDogUHJvcFR5cGVzLmJvb2xcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IERpdmlkZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBIZWFkZXJzIG1heSBjb250YWluIHN1YmhlYWRlcnMuXG4gKi9cblxuZnVuY3Rpb24gSGVhZGVyU3ViaGVhZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQ7XG4gIHZhciBjbGFzc2VzID0gY3goJ3N1YiBoZWFkZXInLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEhlYWRlclN1YmhlYWRlciwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShIZWFkZXJTdWJoZWFkZXIsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cbkhlYWRlclN1YmhlYWRlci5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiXTtcbkhlYWRlclN1YmhlYWRlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZFxufSA6IHt9O1xuSGVhZGVyU3ViaGVhZGVyLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoSGVhZGVyU3ViaGVhZGVyLCBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgSGVhZGVyU3ViaGVhZGVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogSGVhZGVyIGNvbnRlbnQgd3JhcHMgdGhlIG1haW4gY29udGVudCB3aGVuIHRoZXJlIGlzIGFuIGFkamFjZW50IEljb24gb3IgSW1hZ2UuXG4gKi9cblxuZnVuY3Rpb24gSGVhZGVyQ29udGVudChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdjb250ZW50JywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhIZWFkZXJDb250ZW50LCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEhlYWRlckNvbnRlbnQsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cbkhlYWRlckNvbnRlbnQuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5IZWFkZXJDb250ZW50LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBIZWFkZXJDb250ZW50OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3dpdGhvdXQgZnJvbSBcImxvZGFzaC93aXRob3V0XCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZVZhbHVlQW5kS2V5LCB1c2VUZXh0QWxpZ25Qcm9wLCB1c2VLZXlPclZhbHVlQW5kS2V5LCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24nO1xuaW1wb3J0IEltYWdlIGZyb20gJy4uL0ltYWdlJztcbmltcG9ydCBIZWFkZXJTdWJoZWFkZXIgZnJvbSAnLi9IZWFkZXJTdWJoZWFkZXInO1xuaW1wb3J0IEhlYWRlckNvbnRlbnQgZnJvbSAnLi9IZWFkZXJDb250ZW50Jztcbi8qKlxuICogQSBoZWFkZXIgcHJvdmlkZXMgYSBzaG9ydCBzdW1tYXJ5IG9mIGNvbnRlbnRcbiAqL1xuXG5mdW5jdGlvbiBIZWFkZXIocHJvcHMpIHtcbiAgdmFyIGF0dGFjaGVkID0gcHJvcHMuYXR0YWNoZWQsXG4gICAgICBibG9jayA9IHByb3BzLmJsb2NrLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXZpZGluZyA9IHByb3BzLmRpdmlkaW5nLFxuICAgICAgZmxvYXRlZCA9IHByb3BzLmZsb2F0ZWQsXG4gICAgICBpY29uID0gcHJvcHMuaWNvbixcbiAgICAgIGltYWdlID0gcHJvcHMuaW1hZ2UsXG4gICAgICBpbnZlcnRlZCA9IHByb3BzLmludmVydGVkLFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzdWIgPSBwcm9wcy5zdWIsXG4gICAgICBzdWJoZWFkZXIgPSBwcm9wcy5zdWJoZWFkZXIsXG4gICAgICB0ZXh0QWxpZ24gPSBwcm9wcy50ZXh0QWxpZ247XG4gIHZhciBjbGFzc2VzID0gY3goJ3VpJywgY29sb3IsIHNpemUsIHVzZUtleU9ubHkoYmxvY2ssICdibG9jaycpLCB1c2VLZXlPbmx5KGRpc2FibGVkLCAnZGlzYWJsZWQnKSwgdXNlS2V5T25seShkaXZpZGluZywgJ2RpdmlkaW5nJyksIHVzZVZhbHVlQW5kS2V5KGZsb2F0ZWQsICdmbG9hdGVkJyksIHVzZUtleU9ubHkoaWNvbiA9PT0gdHJ1ZSwgJ2ljb24nKSwgdXNlS2V5T25seShpbWFnZSA9PT0gdHJ1ZSwgJ2ltYWdlJyksIHVzZUtleU9ubHkoaW52ZXJ0ZWQsICdpbnZlcnRlZCcpLCB1c2VLZXlPbmx5KHN1YiwgJ3N1YicpLCB1c2VLZXlPclZhbHVlQW5kS2V5KGF0dGFjaGVkLCAnYXR0YWNoZWQnKSwgdXNlVGV4dEFsaWduUHJvcCh0ZXh0QWxpZ24pLCAnaGVhZGVyJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhIZWFkZXIsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoSGVhZGVyLCBwcm9wcyk7XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfVxuXG4gIHZhciBpY29uRWxlbWVudCA9IEljb24uY3JlYXRlKGljb24sIHtcbiAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gIH0pO1xuICB2YXIgaW1hZ2VFbGVtZW50ID0gSW1hZ2UuY3JlYXRlKGltYWdlLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KTtcbiAgdmFyIHN1YmhlYWRlckVsZW1lbnQgPSBIZWFkZXJTdWJoZWFkZXIuY3JlYXRlKHN1YmhlYWRlciwge1xuICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgfSk7XG5cbiAgaWYgKGljb25FbGVtZW50IHx8IGltYWdlRWxlbWVudCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGljb25FbGVtZW50IHx8IGltYWdlRWxlbWVudCwgKGNvbnRlbnQgfHwgc3ViaGVhZGVyRWxlbWVudCkgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChIZWFkZXJDb250ZW50LCBudWxsLCBjb250ZW50LCBzdWJoZWFkZXJFbGVtZW50KSk7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNvbnRlbnQsIHN1YmhlYWRlckVsZW1lbnQpO1xufVxuXG5IZWFkZXIuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJhdHRhY2hlZFwiLCBcImJsb2NrXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbnRlbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpdmlkaW5nXCIsIFwiZmxvYXRlZFwiLCBcImljb25cIiwgXCJpbWFnZVwiLCBcImludmVydGVkXCIsIFwic2l6ZVwiLCBcInN1YlwiLCBcInN1YmhlYWRlclwiLCBcInRleHRBbGlnblwiXTtcbkhlYWRlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBdHRhY2ggaGVhZGVyICB0byBvdGhlciBjb250ZW50LCBsaWtlIGEgc2VnbWVudC4gKi9cbiAgYXR0YWNoZWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAnYm90dG9tJ10pXSksXG5cbiAgLyoqIEZvcm1hdCBoZWFkZXIgdG8gYXBwZWFyIGluc2lkZSBhIGNvbnRlbnQgYmxvY2suICovXG4gIGJsb2NrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBDb2xvciBvZiB0aGUgaGVhZGVyLiAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFNVSS5DT0xPUlMpLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIFNob3cgdGhhdCB0aGUgaGVhZGVyIGlzIGluYWN0aXZlLiAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIERpdmlkZSBoZWFkZXIgZnJvbSB0aGUgY29udGVudCBiZWxvdyBpdC4gKi9cbiAgZGl2aWRpbmc6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBIZWFkZXIgY2FuIHNpdCB0byB0aGUgbGVmdCBvciByaWdodCBvZiBvdGhlciBjb250ZW50LiAqL1xuICBmbG9hdGVkOiBQcm9wVHlwZXMub25lT2YoU1VJLkZMT0FUUyksXG5cbiAgLyoqIEFkZCBhbiBpY29uIGJ5IGljb24gbmFtZSBvciBwYXNzIGFuIEljb24uICovXG4gIGljb246IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsnaW1hZ2UnXSksIFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZF0pXSksXG5cbiAgLyoqIEFkZCBhbiBpbWFnZSBieSBpbWcgc3JjIG9yIHBhc3MgYW4gSW1hZ2UuICovXG4gIGltYWdlOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2ljb24nXSksIFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZF0pXSksXG5cbiAgLyoqIEludmVydHMgdGhlIGNvbG9yIG9mIHRoZSBoZWFkZXIgZm9yIGRhcmsgYmFja2dyb3VuZHMuICovXG4gIGludmVydGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQ29udGVudCBoZWFkaW5ncyBhcmUgc2l6ZWQgd2l0aCBlbSBhbmQgYXJlIGJhc2VkIG9uIHRoZSBmb250LXNpemUgb2YgdGhlaXIgY29udGFpbmVyLiAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoX3dpdGhvdXQoU1VJLlNJWkVTLCAnYmlnJywgJ21hc3NpdmUnLCAnbWluaScpKSxcblxuICAvKiogSGVhZGVycyBtYXkgYmUgZm9ybWF0dGVkIHRvIGxhYmVsIHNtYWxsZXIgb3IgZGUtZW1waGFzaXplZCBjb250ZW50LiAqL1xuICBzdWI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEhlYWRlci5TdWJoZWFkZXIuICovXG4gIHN1YmhlYWRlcjogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIEFsaWduIGhlYWRlciBjb250ZW50LiAqL1xuICB0ZXh0QWxpZ246IFByb3BUeXBlcy5vbmVPZihTVUkuVEVYVF9BTElHTk1FTlRTKVxufSA6IHt9O1xuSGVhZGVyLkNvbnRlbnQgPSBIZWFkZXJDb250ZW50O1xuSGVhZGVyLlN1YmhlYWRlciA9IEhlYWRlclN1YmhlYWRlcjtcbmV4cG9ydCBkZWZhdWx0IEhlYWRlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgbGlzdCBpdGVtIGNhbiBjb250YWluIGEgZGVzY3JpcHRpb24uXG4gKi9cblxuZnVuY3Rpb24gTGlzdERlc2NyaXB0aW9uKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQ7XG4gIHZhciBjbGFzc2VzID0gY3goY2xhc3NOYW1lLCAnZGVzY3JpcHRpb24nKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhMaXN0RGVzY3JpcHRpb24sIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTGlzdERlc2NyaXB0aW9uLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5MaXN0RGVzY3JpcHRpb24uaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5MaXN0RGVzY3JpcHRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmRcbn0gOiB7fTtcbkxpc3REZXNjcmlwdGlvbi5jcmVhdGUgPSBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KExpc3REZXNjcmlwdGlvbiwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IExpc3REZXNjcmlwdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgbGlzdCBpdGVtIGNhbiBjb250YWluIGEgaGVhZGVyLlxuICovXG5cbmZ1bmN0aW9uIExpc3RIZWFkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudDtcbiAgdmFyIGNsYXNzZXMgPSBjeCgnaGVhZGVyJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhMaXN0SGVhZGVyLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKExpc3RIZWFkZXIsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cbkxpc3RIZWFkZXIuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5MaXN0SGVhZGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5MaXN0SGVhZGVyLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoTGlzdEhlYWRlciwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IExpc3RIZWFkZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIFNVSSwgdXNlVmFsdWVBbmRLZXksIHVzZVZlcnRpY2FsQWxpZ25Qcm9wIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBMaXN0RGVzY3JpcHRpb24gZnJvbSAnLi9MaXN0RGVzY3JpcHRpb24nO1xuaW1wb3J0IExpc3RIZWFkZXIgZnJvbSAnLi9MaXN0SGVhZGVyJztcbi8qKlxuICogQSBsaXN0IGl0ZW0gY2FuIGNvbnRhaW4gYSBjb250ZW50LlxuICovXG5cbmZ1bmN0aW9uIExpc3RDb250ZW50KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICBkZXNjcmlwdGlvbiA9IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgZmxvYXRlZCA9IHByb3BzLmZsb2F0ZWQsXG4gICAgICBoZWFkZXIgPSBwcm9wcy5oZWFkZXIsXG4gICAgICB2ZXJ0aWNhbEFsaWduID0gcHJvcHMudmVydGljYWxBbGlnbjtcbiAgdmFyIGNsYXNzZXMgPSBjeCh1c2VWYWx1ZUFuZEtleShmbG9hdGVkLCAnZmxvYXRlZCcpLCB1c2VWZXJ0aWNhbEFsaWduUHJvcCh2ZXJ0aWNhbEFsaWduKSwgJ2NvbnRlbnQnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKExpc3RDb250ZW50LCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKExpc3RDb250ZW50LCBwcm9wcyk7XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgTGlzdEhlYWRlci5jcmVhdGUoaGVhZGVyKSwgTGlzdERlc2NyaXB0aW9uLmNyZWF0ZShkZXNjcmlwdGlvbiksIGNvbnRlbnQpO1xufVxuXG5MaXN0Q29udGVudC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiLCBcImRlc2NyaXB0aW9uXCIsIFwiZmxvYXRlZFwiLCBcImhlYWRlclwiLCBcInZlcnRpY2FsQWxpZ25cIl07XG5MaXN0Q29udGVudC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBMaXN0RGVzY3JpcHRpb24uICovXG4gIGRlc2NyaXB0aW9uOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogQW4gbGlzdCBjb250ZW50IGNhbiBiZSBmbG9hdGVkIGxlZnQgb3IgcmlnaHQuICovXG4gIGZsb2F0ZWQ6IFByb3BUeXBlcy5vbmVPZihTVUkuRkxPQVRTKSxcblxuICAvKiogU2hvcnRoYW5kIGZvciBMaXN0SGVhZGVyLiAqL1xuICBoZWFkZXI6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBBbiBlbGVtZW50IGluc2lkZSBhIGxpc3QgY2FuIGJlIHZlcnRpY2FsbHkgYWxpZ25lZC4gKi9cbiAgdmVydGljYWxBbGlnbjogUHJvcFR5cGVzLm9uZU9mKFNVSS5WRVJUSUNBTF9BTElHTk1FTlRTKVxufSA6IHt9O1xuTGlzdENvbnRlbnQuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShMaXN0Q29udGVudCwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IExpc3RDb250ZW50OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnksIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZVZlcnRpY2FsQWxpZ25Qcm9wIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24vSWNvbic7XG4vKipcbiAqIEEgbGlzdCBpdGVtIGNhbiBjb250YWluIGFuIGljb24uXG4gKi9cblxuZnVuY3Rpb24gTGlzdEljb24ocHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIHZlcnRpY2FsQWxpZ24gPSBwcm9wcy52ZXJ0aWNhbEFsaWduO1xuICB2YXIgY2xhc3NlcyA9IGN4KHVzZVZlcnRpY2FsQWxpZ25Qcm9wKHZlcnRpY2FsQWxpZ24pLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKExpc3RJY29uLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pKTtcbn1cblxuTGlzdEljb24uaGFuZGxlZFByb3BzID0gW1wiY2xhc3NOYW1lXCIsIFwidmVydGljYWxBbGlnblwiXTtcbkxpc3RJY29uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBBbiBlbGVtZW50IGluc2lkZSBhIGxpc3QgY2FuIGJlIHZlcnRpY2FsbHkgYWxpZ25lZC4gKi9cbiAgdmVydGljYWxBbGlnbjogUHJvcFR5cGVzLm9uZU9mKFNVSS5WRVJUSUNBTF9BTElHTk1FTlRTKVxufSA6IHt9O1xuTGlzdEljb24uY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShMaXN0SWNvbiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lXG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IExpc3RJY29uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2lzUGxhaW5PYmplY3QgZnJvbSBcImxvZGFzaC9pc1BsYWluT2JqZWN0XCI7XG5pbXBvcnQgX2ludm9rZSBmcm9tIFwibG9kYXNoL2ludm9rZVwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIHVzZUtleU9ubHkgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IEltYWdlIGZyb20gJy4uL0ltYWdlJztcbmltcG9ydCBMaXN0Q29udGVudCBmcm9tICcuL0xpc3RDb250ZW50JztcbmltcG9ydCBMaXN0RGVzY3JpcHRpb24gZnJvbSAnLi9MaXN0RGVzY3JpcHRpb24nO1xuaW1wb3J0IExpc3RIZWFkZXIgZnJvbSAnLi9MaXN0SGVhZGVyJztcbmltcG9ydCBMaXN0SWNvbiBmcm9tICcuL0xpc3RJY29uJztcbi8qKlxuICogQSBsaXN0IGl0ZW0gY2FuIGNvbnRhaW4gYSBzZXQgb2YgaXRlbXMuXG4gKi9cblxudmFyIExpc3RJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMaXN0SXRlbSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlzdEl0ZW0oKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGlzdEl0ZW0pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoTGlzdEl0ZW0pKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGRpc2FibGVkID0gX3RoaXMucHJvcHMuZGlzYWJsZWQ7XG4gICAgICBpZiAoIWRpc2FibGVkKSBfaW52b2tlKF90aGlzLnByb3BzLCAnb25DbGljaycsIGUsIF90aGlzLnByb3BzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMaXN0SXRlbSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbnRlbnQgPSBfdGhpcyRwcm9wcy5jb250ZW50LFxuICAgICAgICAgIGRlc2NyaXB0aW9uID0gX3RoaXMkcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBoZWFkZXIgPSBfdGhpcyRwcm9wcy5oZWFkZXIsXG4gICAgICAgICAgaWNvbiA9IF90aGlzJHByb3BzLmljb24sXG4gICAgICAgICAgaW1hZ2UgPSBfdGhpcyRwcm9wcy5pbWFnZSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlO1xuICAgICAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTGlzdEl0ZW0sIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KGFjdGl2ZSwgJ2FjdGl2ZScpLCB1c2VLZXlPbmx5KGRpc2FibGVkLCAnZGlzYWJsZWQnKSwgdXNlS2V5T25seShFbGVtZW50VHlwZSAhPT0gJ2xpJywgJ2l0ZW0nKSwgY2xhc3NOYW1lKTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoTGlzdEl0ZW0sIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIHZhbHVlUHJvcCA9IEVsZW1lbnRUeXBlID09PSAnbGknID8ge1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0gOiB7XG4gICAgICAgICdkYXRhLXZhbHVlJzogdmFsdWVcbiAgICAgIH07XG5cbiAgICAgIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCB2YWx1ZVByb3AsIHtcbiAgICAgICAgICByb2xlOiBcImxpc3RpdGVtXCIsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICAgICAgfSwgcmVzdCksIGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGljb25FbGVtZW50ID0gTGlzdEljb24uY3JlYXRlKGljb24sIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICAgICAgfSk7XG4gICAgICB2YXIgaW1hZ2VFbGVtZW50ID0gSW1hZ2UuY3JlYXRlKGltYWdlLCB7XG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pOyAvLyBTZWUgZGVzY3JpcHRpb24gb2YgYGNvbnRlbnRgIHByb3AgZm9yIGV4cGxhbmF0aW9uIGFib3V0IHdoeSB0aGlzIGlzIG5lY2Vzc2FyeS5cblxuICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudChjb250ZW50KSAmJiBfaXNQbGFpbk9iamVjdChjb250ZW50KSkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHZhbHVlUHJvcCwge1xuICAgICAgICAgIHJvbGU6IFwibGlzdGl0ZW1cIixcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgICB9LCByZXN0KSwgaWNvbkVsZW1lbnQgfHwgaW1hZ2VFbGVtZW50LCBMaXN0Q29udGVudC5jcmVhdGUoY29udGVudCwge1xuICAgICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2UsXG4gICAgICAgICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICAgICAgICBoZWFkZXI6IGhlYWRlcixcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGVhZGVyRWxlbWVudCA9IExpc3RIZWFkZXIuY3JlYXRlKGhlYWRlciwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHZhciBkZXNjcmlwdGlvbkVsZW1lbnQgPSBMaXN0RGVzY3JpcHRpb24uY3JlYXRlKGRlc2NyaXB0aW9uLCB7XG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaWNvbkVsZW1lbnQgfHwgaW1hZ2VFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgdmFsdWVQcm9wLCB7XG4gICAgICAgICAgcm9sZTogXCJsaXN0aXRlbVwiLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrXG4gICAgICAgIH0sIHJlc3QpLCBpY29uRWxlbWVudCB8fCBpbWFnZUVsZW1lbnQsIChjb250ZW50IHx8IGhlYWRlckVsZW1lbnQgfHwgZGVzY3JpcHRpb25FbGVtZW50KSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KExpc3RDb250ZW50LCBudWxsLCBoZWFkZXJFbGVtZW50LCBkZXNjcmlwdGlvbkVsZW1lbnQsIGNvbnRlbnQpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCB2YWx1ZVByb3AsIHtcbiAgICAgICAgcm9sZTogXCJsaXN0aXRlbVwiLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICAgIH0sIHJlc3QpLCBoZWFkZXJFbGVtZW50LCBkZXNjcmlwdGlvbkVsZW1lbnQsIGNvbnRlbnQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMaXN0SXRlbTtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KExpc3RJdGVtLCBcImhhbmRsZWRQcm9wc1wiLCBbXCJhY3RpdmVcIiwgXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiLCBcImRlc2NyaXB0aW9uXCIsIFwiZGlzYWJsZWRcIiwgXCJoZWFkZXJcIiwgXCJpY29uXCIsIFwiaW1hZ2VcIiwgXCJvbkNsaWNrXCIsIFwidmFsdWVcIl0pO1xuXG5MaXN0SXRlbS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBIGxpc3QgaXRlbSBjYW4gYWN0aXZlLiAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LlxuICAgKlxuICAgKiBIZWFkcyB1cCFcbiAgICpcbiAgICogVGhpcyBpcyBoYW5kbGVkIHNsaWdodGx5IGRpZmZlcmVudGx5IHRoYW4gdGhlIHR5cGljYWwgYGNvbnRlbnRgIHByb3Agc2luY2VcbiAgICogdGhlIHdyYXBwaW5nIExpc3RDb250ZW50IGlzIG5vdCB1c2VkIHdoZW4gdGhlcmUncyBubyBpY29uIG9yIGltYWdlLlxuICAgKlxuICAgKiBJZiB5b3UgcGFzcyBjb250ZW50IGFzOlxuICAgKiAtIGFuIGVsZW1lbnQvbGl0ZXJhbCwgaXQncyB0cmVhdGVkIGFzIHRoZSBzaWJsaW5nIG5vZGUgdG9cbiAgICogaGVhZGVyL2Rlc2NyaXB0aW9uICh3aGV0aGVyIHdyYXBwZWQgaW4gSXRlbS5Db250ZW50IG9yIG5vdCkuXG4gICAqIC0gYSBwcm9wcyBvYmplY3QsIGl0IGZvcmNlcyB0aGUgcHJlc2VuY2Ugb2YgSXRlbS5Db250ZW50IGFuZCBwYXNzZXMgdGhvc2VcbiAgICogcHJvcHMgdG8gaXQuIElmIHlvdSBwYXNzIGEgY29udGVudCBwcm9wIHdpdGhpbiB0aGF0IHByb3BzIG9iamVjdCwgaXRcbiAgICogd2lsbCBiZSB0cmVhdGVkIGFzIHRoZSBzaWJsaW5nIG5vZGUgdG8gaGVhZGVyL2Rlc2NyaXB0aW9uLlxuICAgKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgTGlzdERlc2NyaXB0aW9uLiAqL1xuICBkZXNjcmlwdGlvbjogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIEEgbGlzdCBpdGVtIGNhbiBkaXNhYmxlZC4gKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIExpc3RIZWFkZXIuICovXG4gIGhlYWRlcjogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgTGlzdEljb24uICovXG4gIGljb246IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsnaW1hZ2UnXSksIGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kXSksXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgSW1hZ2UuICovXG4gIGltYWdlOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2ljb24nXSksIGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kXSksXG5cbiAgLyoqIEEgTGlzdEl0ZW0gY2FuIGJlIGNsaWNrZWQgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqIEEgdmFsdWUgZm9yIGFuIG9yZGVyZWQgbGlzdC4gKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB7fTtcbkxpc3RJdGVtLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoTGlzdEl0ZW0sIGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiB7XG4gICAgY29udGVudDogY29udGVudFxuICB9O1xufSk7XG5leHBvcnQgZGVmYXVsdCBMaXN0SXRlbTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgdXNlS2V5T25seSB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgbGlzdCBjYW4gY29udGFpbiBhIHN1YiBsaXN0LlxuICovXG5cbmZ1bmN0aW9uIExpc3RMaXN0KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQ7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoTGlzdExpc3QsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTGlzdExpc3QsIHByb3BzKTtcbiAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KEVsZW1lbnRUeXBlICE9PSAndWwnICYmIEVsZW1lbnRUeXBlICE9PSAnb2wnLCAnbGlzdCcpLCBjbGFzc05hbWUpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuTGlzdExpc3QuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5MaXN0TGlzdC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgTGlzdExpc3Q7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfbWFwIGZyb20gXCJsb2Rhc2gvbWFwXCI7XG5pbXBvcnQgX2ludm9rZSBmcm9tIFwibG9kYXNoL2ludm9rZVwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VLZXlPclZhbHVlQW5kS2V5LCB1c2VWYWx1ZUFuZEtleSwgdXNlVmVydGljYWxBbGlnblByb3AgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IExpc3RDb250ZW50IGZyb20gJy4vTGlzdENvbnRlbnQnO1xuaW1wb3J0IExpc3REZXNjcmlwdGlvbiBmcm9tICcuL0xpc3REZXNjcmlwdGlvbic7XG5pbXBvcnQgTGlzdEhlYWRlciBmcm9tICcuL0xpc3RIZWFkZXInO1xuaW1wb3J0IExpc3RJY29uIGZyb20gJy4vTGlzdEljb24nO1xuaW1wb3J0IExpc3RJdGVtIGZyb20gJy4vTGlzdEl0ZW0nO1xuaW1wb3J0IExpc3RMaXN0IGZyb20gJy4vTGlzdExpc3QnO1xuLyoqXG4gKiBBIGxpc3QgZ3JvdXBzIHJlbGF0ZWQgY29udGVudC5cbiAqL1xuXG52YXIgTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTGlzdCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlzdCgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXN0KTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKExpc3QpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVJdGVtT3ZlcnJpZGVzXCIsIGZ1bmN0aW9uIChwcmVkZWZpbmVkUHJvcHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSwgaXRlbVByb3BzKSB7XG4gICAgICAgICAgX2ludm9rZShwcmVkZWZpbmVkUHJvcHMsICdvbkNsaWNrJywgZSwgaXRlbVByb3BzKTtcblxuICAgICAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkl0ZW1DbGljaycsIGUsIGl0ZW1Qcm9wcyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTGlzdCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFuaW1hdGVkID0gX3RoaXMkcHJvcHMuYW5pbWF0ZWQsXG4gICAgICAgICAgYnVsbGV0ZWQgPSBfdGhpcyRwcm9wcy5idWxsZXRlZCxcbiAgICAgICAgICBjZWxsZWQgPSBfdGhpcyRwcm9wcy5jZWxsZWQsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY29udGVudCA9IF90aGlzJHByb3BzLmNvbnRlbnQsXG4gICAgICAgICAgZGl2aWRlZCA9IF90aGlzJHByb3BzLmRpdmlkZWQsXG4gICAgICAgICAgZmxvYXRlZCA9IF90aGlzJHByb3BzLmZsb2F0ZWQsXG4gICAgICAgICAgaG9yaXpvbnRhbCA9IF90aGlzJHByb3BzLmhvcml6b250YWwsXG4gICAgICAgICAgaW52ZXJ0ZWQgPSBfdGhpcyRwcm9wcy5pbnZlcnRlZCxcbiAgICAgICAgICBpdGVtcyA9IF90aGlzJHByb3BzLml0ZW1zLFxuICAgICAgICAgIGxpbmsgPSBfdGhpcyRwcm9wcy5saW5rLFxuICAgICAgICAgIG9yZGVyZWQgPSBfdGhpcyRwcm9wcy5vcmRlcmVkLFxuICAgICAgICAgIHJlbGF4ZWQgPSBfdGhpcyRwcm9wcy5yZWxheGVkLFxuICAgICAgICAgIHNlbGVjdGlvbiA9IF90aGlzJHByb3BzLnNlbGVjdGlvbixcbiAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICB2ZXJ0aWNhbEFsaWduID0gX3RoaXMkcHJvcHMudmVydGljYWxBbGlnbjtcbiAgICAgIHZhciBjbGFzc2VzID0gY3goJ3VpJywgc2l6ZSwgdXNlS2V5T25seShhbmltYXRlZCwgJ2FuaW1hdGVkJyksIHVzZUtleU9ubHkoYnVsbGV0ZWQsICdidWxsZXRlZCcpLCB1c2VLZXlPbmx5KGNlbGxlZCwgJ2NlbGxlZCcpLCB1c2VLZXlPbmx5KGRpdmlkZWQsICdkaXZpZGVkJyksIHVzZUtleU9ubHkoaG9yaXpvbnRhbCwgJ2hvcml6b250YWwnKSwgdXNlS2V5T25seShpbnZlcnRlZCwgJ2ludmVydGVkJyksIHVzZUtleU9ubHkobGluaywgJ2xpbmsnKSwgdXNlS2V5T25seShvcmRlcmVkLCAnb3JkZXJlZCcpLCB1c2VLZXlPbmx5KHNlbGVjdGlvbiwgJ3NlbGVjdGlvbicpLCB1c2VLZXlPclZhbHVlQW5kS2V5KHJlbGF4ZWQsICdyZWxheGVkJyksIHVzZVZhbHVlQW5kS2V5KGZsb2F0ZWQsICdmbG9hdGVkJyksIHVzZVZlcnRpY2FsQWxpZ25Qcm9wKHZlcnRpY2FsQWxpZ24pLCAnbGlzdCcsIGNsYXNzTmFtZSk7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKExpc3QsIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTGlzdCwgdGhpcy5wcm9wcyk7XG5cbiAgICAgIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHtcbiAgICAgICAgICByb2xlOiBcImxpc3RcIixcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICAgICAgfSwgcmVzdCksIGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNvbnRlbnQpKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgcm9sZTogXCJsaXN0XCIsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgICAgIH0sIHJlc3QpLCBjb250ZW50KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHtcbiAgICAgICAgcm9sZTogXCJsaXN0XCIsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICAgICAgfSwgcmVzdCksIF9tYXAoaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBMaXN0SXRlbS5jcmVhdGUoaXRlbSwge1xuICAgICAgICAgIG92ZXJyaWRlUHJvcHM6IF90aGlzMi5oYW5kbGVJdGVtT3ZlcnJpZGVzXG4gICAgICAgIH0pO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMaXN0O1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoTGlzdCwgXCJDb250ZW50XCIsIExpc3RDb250ZW50KTtcblxuX2RlZmluZVByb3BlcnR5KExpc3QsIFwiRGVzY3JpcHRpb25cIiwgTGlzdERlc2NyaXB0aW9uKTtcblxuX2RlZmluZVByb3BlcnR5KExpc3QsIFwiSGVhZGVyXCIsIExpc3RIZWFkZXIpO1xuXG5fZGVmaW5lUHJvcGVydHkoTGlzdCwgXCJJY29uXCIsIExpc3RJY29uKTtcblxuX2RlZmluZVByb3BlcnR5KExpc3QsIFwiSXRlbVwiLCBMaXN0SXRlbSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShMaXN0LCBcIkxpc3RcIiwgTGlzdExpc3QpO1xuXG5fZGVmaW5lUHJvcGVydHkoTGlzdCwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYW5pbWF0ZWRcIiwgXCJhc1wiLCBcImJ1bGxldGVkXCIsIFwiY2VsbGVkXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiZGl2aWRlZFwiLCBcImZsb2F0ZWRcIiwgXCJob3Jpem9udGFsXCIsIFwiaW52ZXJ0ZWRcIiwgXCJpdGVtc1wiLCBcImxpbmtcIiwgXCJvbkl0ZW1DbGlja1wiLCBcIm9yZGVyZWRcIiwgXCJyZWxheGVkXCIsIFwic2VsZWN0aW9uXCIsIFwic2l6ZVwiLCBcInZlcnRpY2FsQWxpZ25cIl0pO1xuXG5MaXN0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEEgbGlzdCBjYW4gYW5pbWF0ZSB0byBzZXQgdGhlIGN1cnJlbnQgaXRlbSBhcGFydCBmcm9tIHRoZSBsaXN0LiAqL1xuICBhbmltYXRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgbGlzdCBjYW4gbWFyayBpdGVtcyB3aXRoIGEgYnVsbGV0LiAqL1xuICBidWxsZXRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgbGlzdCBjYW4gZGl2aWRlIGl0cyBpdGVtcyBpbnRvIGNlbGxzLiAqL1xuICBjZWxsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBsaXN0IGNhbiBzaG93IGRpdmlzaW9ucyBiZXR3ZWVuIGNvbnRlbnQuICovXG4gIGRpdmlkZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBbiBsaXN0IGNhbiBiZSBmbG9hdGVkIGxlZnQgb3IgcmlnaHQuICovXG4gIGZsb2F0ZWQ6IFByb3BUeXBlcy5vbmVPZihTVUkuRkxPQVRTKSxcblxuICAvKiogQSBsaXN0IGNhbiBiZSBmb3JtYXR0ZWQgdG8gaGF2ZSBpdGVtcyBhcHBlYXIgaG9yaXpvbnRhbGx5LiAqL1xuICBob3Jpem9udGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBsaXN0IGNhbiBiZSBpbnZlcnRlZCB0byBhcHBlYXIgb24gYSBkYXJrIGJhY2tncm91bmQuICovXG4gIGludmVydGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogU2hvcnRoYW5kIGFycmF5IG9mIHByb3BzIGZvciBMaXN0SXRlbS4gKi9cbiAgaXRlbXM6IGN1c3RvbVByb3BUeXBlcy5jb2xsZWN0aW9uU2hvcnRoYW5kLFxuXG4gIC8qKiBBIGxpc3QgY2FuIGJlIHNwZWNpYWxseSBmb3JtYXR0ZWQgZm9yIG5hdmlnYXRpb24gbGlua3MuICovXG4gIGxpbms6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBvbkNsaWNrIGhhbmRsZXIgZm9yIExpc3RJdGVtLiBNdXR1YWxseSBleGNsdXNpdmUgd2l0aCBjaGlsZHJlbi5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBpdGVtIHByb3BzLlxuICAgKi9cbiAgb25JdGVtQ2xpY2s6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsnY2hpbGRyZW4nXSksIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqIEEgbGlzdCBjYW4gYmUgb3JkZXJlZCBudW1lcmljYWxseS4gKi9cbiAgb3JkZXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgbGlzdCBjYW4gcmVsYXggaXRzIHBhZGRpbmcgdG8gcHJvdmlkZSBtb3JlIG5lZ2F0aXZlIHNwYWNlLiAqL1xuICByZWxheGVkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9uZU9mKFsndmVyeSddKV0pLFxuXG4gIC8qKiBBIHNlbGVjdGlvbiBsaXN0IGZvcm1hdHMgbGlzdCBpdGVtcyBhcyBwb3NzaWJsZSBjaG9pY2VzLiAqL1xuICBzZWxlY3Rpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGxpc3QgY2FuIHZhcnkgaW4gc2l6ZS4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFNVSS5TSVpFUyksXG5cbiAgLyoqIEFuIGVsZW1lbnQgaW5zaWRlIGEgbGlzdCBjYW4gYmUgdmVydGljYWxseSBhbGlnbmVkLiAqL1xuICB2ZXJ0aWNhbEFsaWduOiBQcm9wVHlwZXMub25lT2YoU1VJLlZFUlRJQ0FMX0FMSUdOTUVOVFMpXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBMaXN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZUtleU9ubHksIHVzZUtleU9yVmFsdWVBbmRLZXkgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGxvYWRlciBhbGVydHMgYSB1c2VyIHRvIHdhaXQgZm9yIGFuIGFjdGl2aXR5IHRvIGNvbXBsZXRlLlxuICogQHNlZSBEaW1tZXJcbiAqL1xuXG5mdW5jdGlvbiBMb2FkZXIocHJvcHMpIHtcbiAgdmFyIGFjdGl2ZSA9IHByb3BzLmFjdGl2ZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBpbmRldGVybWluYXRlID0gcHJvcHMuaW5kZXRlcm1pbmF0ZSxcbiAgICAgIGlubGluZSA9IHByb3BzLmlubGluZSxcbiAgICAgIGludmVydGVkID0gcHJvcHMuaW52ZXJ0ZWQsXG4gICAgICBzaXplID0gcHJvcHMuc2l6ZTtcbiAgdmFyIGNsYXNzZXMgPSBjeCgndWknLCBzaXplLCB1c2VLZXlPbmx5KGFjdGl2ZSwgJ2FjdGl2ZScpLCB1c2VLZXlPbmx5KGRpc2FibGVkLCAnZGlzYWJsZWQnKSwgdXNlS2V5T25seShpbmRldGVybWluYXRlLCAnaW5kZXRlcm1pbmF0ZScpLCB1c2VLZXlPbmx5KGludmVydGVkLCAnaW52ZXJ0ZWQnKSwgdXNlS2V5T25seShjaGlsZHJlbiB8fCBjb250ZW50LCAndGV4dCcpLCB1c2VLZXlPclZhbHVlQW5kS2V5KGlubGluZSwgJ2lubGluZScpLCAnbG9hZGVyJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhMb2FkZXIsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoTG9hZGVyLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5Mb2FkZXIuaGFuZGxlZFByb3BzID0gW1wiYWN0aXZlXCIsIFwiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJkaXNhYmxlZFwiLCBcImluZGV0ZXJtaW5hdGVcIiwgXCJpbmxpbmVcIiwgXCJpbnZlcnRlZFwiLCBcInNpemVcIl07XG5Mb2FkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQSBsb2FkZXIgY2FuIGJlIGFjdGl2ZSBvciB2aXNpYmxlLiAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBsb2FkZXIgY2FuIGJlIGRpc2FibGVkIG9yIGhpZGRlbi4gKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGxvYWRlciBjYW4gc2hvdyBpdCdzIHVuc3VyZSBvZiBob3cgbG9uZyBhIHRhc2sgd2lsbCB0YWtlLiAqL1xuICBpbmRldGVybWluYXRlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogTG9hZGVycyBjYW4gYXBwZWFyIGlubGluZSB3aXRoIGNvbnRlbnQuICovXG4gIGlubGluZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5vbmVPZihbJ2NlbnRlcmVkJ10pXSksXG5cbiAgLyoqIExvYWRlcnMgY2FuIGhhdmUgdGhlaXIgY29sb3JzIGludmVydGVkLiAqL1xuICBpbnZlcnRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIExvYWRlcnMgY2FuIGhhdmUgZGlmZmVyZW50IHNpemVzLiAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoU1VJLlNJWkVTKVxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgTG9hZGVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBwbGFjZWhvbGRlciBjYW4gY29udGFpbiBhIGhlYWRlci5cbiAqL1xuXG5mdW5jdGlvbiBQbGFjZWhvbGRlckhlYWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgaW1hZ2UgPSBwcm9wcy5pbWFnZTtcbiAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KGltYWdlLCAnaW1hZ2UnKSwgJ2hlYWRlcicsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoUGxhY2Vob2xkZXJIZWFkZXIsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoUGxhY2Vob2xkZXJIZWFkZXIsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cblBsYWNlaG9sZGVySGVhZGVyLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiaW1hZ2VcIl07XG5QbGFjZWhvbGRlckhlYWRlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBwbGFjZWhvbGRlciBjYW4gY29udGFpbiBhbiBpbWFnZS4gKi9cbiAgaW1hZ2U6IFByb3BUeXBlcy5ib29sXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBQbGFjZWhvbGRlckhlYWRlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgdXNlS2V5T25seSB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgcGxhY2Vob2xkZXIgY2FuIGNvbnRhaW4gYW4gaW1hZ2UuXG4gKi9cblxuZnVuY3Rpb24gUGxhY2Vob2xkZXJJbWFnZShwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgc3F1YXJlID0gcHJvcHMuc3F1YXJlLFxuICAgICAgcmVjdGFuZ3VsYXIgPSBwcm9wcy5yZWN0YW5ndWxhcjtcbiAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KHNxdWFyZSwgJ3NxdWFyZScpLCB1c2VLZXlPbmx5KHJlY3Rhbmd1bGFyLCAncmVjdGFuZ3VsYXInKSwgJ2ltYWdlJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhQbGFjZWhvbGRlckltYWdlLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFBsYWNlaG9sZGVySW1hZ2UsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pKTtcbn1cblxuUGxhY2Vob2xkZXJJbWFnZS5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNsYXNzTmFtZVwiLCBcInJlY3Rhbmd1bGFyXCIsIFwic3F1YXJlXCJdO1xuUGxhY2Vob2xkZXJJbWFnZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQW4gaW1hZ2UgY2FuIG1vZGlmeSBzaXplIGNvcnJlY3RseSB3aXRoIHJlc3BvbnNpdmUgc3R5bGVzLiAqL1xuICBzcXVhcmU6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsncmVjdGFuZ3VsYXInXSksIFByb3BUeXBlcy5ib29sXSksXG5cbiAgLyoqIEFuIGltYWdlIGNhbiBtb2RpZnkgc2l6ZSBjb3JyZWN0bHkgd2l0aCByZXNwb25zaXZlIHN0eWxlcy4gKi9cbiAgcmVjdGFuZ3VsYXI6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsnc3F1YXJlJ10pLCBQcm9wVHlwZXMuYm9vbF0pXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBQbGFjZWhvbGRlckltYWdlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgcGxhY2Vob2xkZXIgY2FuIGNvbnRhaW4gaGF2ZSBsaW5lcyBvZiB0ZXh0LlxuICovXG5cbmZ1bmN0aW9uIFBsYWNlaG9sZGVyTGluZShwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICB2YXIgY2xhc3NlcyA9IGN4KCdsaW5lJywgbGVuZ3RoLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFBsYWNlaG9sZGVyTGluZSwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShQbGFjZWhvbGRlckxpbmUsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pKTtcbn1cblxuUGxhY2Vob2xkZXJMaW5lLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2xhc3NOYW1lXCIsIFwibGVuZ3RoXCJdO1xuUGxhY2Vob2xkZXJMaW5lLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBBIGxpbmUgY2FuIHNwZWNpZnkgaG93IGxvbmcgaXRzIGNvbnRlbnRzIHNob3VsZCBhcHBlYXIuICovXG4gIGxlbmd0aDogUHJvcFR5cGVzLm9uZU9mKFsnZnVsbCcsICd2ZXJ5IGxvbmcnLCAnbG9uZycsICdtZWRpdW0nLCAnc2hvcnQnLCAndmVyeSBzaG9ydCddKVxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgUGxhY2Vob2xkZXJMaW5lOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBwbGFjZWhvbGRlciBjYW4gY29udGFpbiBhIHBhcmFncmFwaC5cbiAqL1xuXG5mdW5jdGlvbiBQbGFjZWhvbGRlclBhcmFncmFwaChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdwYXJhZ3JhcGgnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFBsYWNlaG9sZGVyUGFyYWdyYXBoLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFBsYWNlaG9sZGVyUGFyYWdyYXBoLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5QbGFjZWhvbGRlclBhcmFncmFwaC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiXTtcblBsYWNlaG9sZGVyUGFyYWdyYXBoLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBQbGFjZWhvbGRlclBhcmFncmFwaDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgdXNlS2V5T25seSB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgUGxhY2Vob2xkZXJIZWFkZXIgZnJvbSAnLi9QbGFjZWhvbGRlckhlYWRlcic7XG5pbXBvcnQgUGxhY2Vob2xkZXJJbWFnZSBmcm9tICcuL1BsYWNlaG9sZGVySW1hZ2UnO1xuaW1wb3J0IFBsYWNlaG9sZGVyTGluZSBmcm9tICcuL1BsYWNlaG9sZGVyTGluZSc7XG5pbXBvcnQgUGxhY2Vob2xkZXJQYXJhZ3JhcGggZnJvbSAnLi9QbGFjZWhvbGRlclBhcmFncmFwaCc7XG4vKipcbiAqIEEgcGxhY2Vob2xkZXIgaXMgdXNlZCB0byByZXNlcnZlIHNwbGFjZSBmb3IgY29udGVudCB0aGF0IHNvb24gd2lsbCBhcHBlYXIgaW4gYSBsYXlvdXQuXG4gKi9cblxuZnVuY3Rpb24gUGxhY2Vob2xkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGZsdWlkID0gcHJvcHMuZmx1aWQsXG4gICAgICBpbnZlcnRlZCA9IHByb3BzLmludmVydGVkO1xuICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIHVzZUtleU9ubHkoZmx1aWQsICdmbHVpZCcpLCB1c2VLZXlPbmx5KGludmVydGVkLCAnaW52ZXJ0ZWQnKSwgJ3BsYWNlaG9sZGVyJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhQbGFjZWhvbGRlciwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShQbGFjZWhvbGRlciwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuUGxhY2Vob2xkZXIuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJmbHVpZFwiLCBcImludmVydGVkXCJdO1xuUGxhY2Vob2xkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIEEgZmx1aWQgcGxhY2Vob2xkZXIgdGFrZXMgdXAgdGhlIHdpZHRoIG9mIGl0cyBjb250YWluZXIuICovXG4gIGZsdWlkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBwbGFjZWhvbGRlciBjYW4gaGF2ZSB0aGVpciBjb2xvcnMgaW52ZXJ0ZWQuICovXG4gIGludmVydGVkOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuUGxhY2Vob2xkZXIuSGVhZGVyID0gUGxhY2Vob2xkZXJIZWFkZXI7XG5QbGFjZWhvbGRlci5JbWFnZSA9IFBsYWNlaG9sZGVySW1hZ2U7XG5QbGFjZWhvbGRlci5MaW5lID0gUGxhY2Vob2xkZXJMaW5lO1xuUGxhY2Vob2xkZXIuUGFyYWdyYXBoID0gUGxhY2Vob2xkZXJQYXJhZ3JhcGg7XG5leHBvcnQgZGVmYXVsdCBQbGFjZWhvbGRlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF93aXRob3V0IGZyb20gXCJsb2Rhc2gvd2l0aG91dFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VLZXlPclZhbHVlQW5kS2V5IH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSByYWlsIGlzIHVzZWQgdG8gc2hvdyBhY2NvbXBhbnlpbmcgY29udGVudCBvdXRzaWRlIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBtYWluIHZpZXcgb2YgYSBzaXRlLlxuICovXG5cbmZ1bmN0aW9uIFJhaWwocHJvcHMpIHtcbiAgdmFyIGF0dGFjaGVkID0gcHJvcHMuYXR0YWNoZWQsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY2xvc2UgPSBwcm9wcy5jbG9zZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgZGl2aWRpbmcgPSBwcm9wcy5kaXZpZGluZyxcbiAgICAgIGludGVybmFsID0gcHJvcHMuaW50ZXJuYWwsXG4gICAgICBwb3NpdGlvbiA9IHByb3BzLnBvc2l0aW9uLFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemU7XG4gIHZhciBjbGFzc2VzID0gY3goJ3VpJywgcG9zaXRpb24sIHNpemUsIHVzZUtleU9ubHkoYXR0YWNoZWQsICdhdHRhY2hlZCcpLCB1c2VLZXlPbmx5KGRpdmlkaW5nLCAnZGl2aWRpbmcnKSwgdXNlS2V5T25seShpbnRlcm5hbCwgJ2ludGVybmFsJyksIHVzZUtleU9yVmFsdWVBbmRLZXkoY2xvc2UsICdjbG9zZScpLCAncmFpbCcsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoUmFpbCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShSYWlsLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5SYWlsLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiYXR0YWNoZWRcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNsb3NlXCIsIFwiY29udGVudFwiLCBcImRpdmlkaW5nXCIsIFwiaW50ZXJuYWxcIiwgXCJwb3NpdGlvblwiLCBcInNpemVcIl07XG5SYWlsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEEgcmFpbCBjYW4gYXBwZWFyIGF0dGFjaGVkIHRvIHRoZSBtYWluIHZpZXdwb3J0LiAqL1xuICBhdHRhY2hlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQSByYWlsIGNhbiBhcHBlYXIgY2xvc2VyIHRvIHRoZSBtYWluIHZpZXdwb3J0LiAqL1xuICBjbG9zZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5vbmVPZihbJ3ZlcnknXSldKSxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBBIHJhaWwgY2FuIGNyZWF0ZSBhIGRpdmlzaW9uIGJldHdlZW4gaXRzZWxmIGFuZCBhIGNvbnRhaW5lci4gKi9cbiAgZGl2aWRpbmc6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHJhaWwgY2FuIGF0dGFjaCBpdHNlbGYgdG8gdGhlIGluc2lkZSBvZiBhIGNvbnRhaW5lci4gKi9cbiAgaW50ZXJuYWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHJhaWwgY2FuIGJlIHByZXNlbnRlZCBvbiB0aGUgbGVmdCBvciByaWdodCBzaWRlIG9mIGEgY29udGFpbmVyLiAqL1xuICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFNVSS5GTE9BVFMpLmlzUmVxdWlyZWQsXG5cbiAgLyoqIEEgcmFpbCBjYW4gaGF2ZSBkaWZmZXJlbnQgc2l6ZXMuICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihfd2l0aG91dChTVUkuU0laRVMsICdtZWRpdW0nKSlcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IFJhaWw7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIHVzZUtleU9ubHkgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGNvbnRlbnQgc3ViLWNvbXBvbmVudCBmb3IgdGhlIFJldmVhbC5cbiAqL1xuXG5mdW5jdGlvbiBSZXZlYWxDb250ZW50KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICBoaWRkZW4gPSBwcm9wcy5oaWRkZW4sXG4gICAgICB2aXNpYmxlID0gcHJvcHMudmlzaWJsZTtcbiAgdmFyIGNsYXNzZXMgPSBjeCgndWknLCB1c2VLZXlPbmx5KGhpZGRlbiwgJ2hpZGRlbicpLCB1c2VLZXlPbmx5KHZpc2libGUsICd2aXNpYmxlJyksICdjb250ZW50JywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhSZXZlYWxDb250ZW50LCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFJldmVhbENvbnRlbnQsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cblJldmVhbENvbnRlbnQuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJoaWRkZW5cIiwgXCJ2aXNpYmxlXCJdO1xuUmV2ZWFsQ29udGVudC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSByZXZlYWwgbWF5IGNvbnRhaW4gY29udGVudCB0aGF0IGlzIHZpc2libGUgYmVmb3JlIGludGVyYWN0aW9uLiAqL1xuICBoaWRkZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHJldmVhbCBtYXkgY29udGFpbiBjb250ZW50IHRoYXQgaXMgaGlkZGVuIGJlZm9yZSB1c2VyIGludGVyYWN0aW9uLiAqL1xuICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgUmV2ZWFsQ29udGVudDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgdXNlS2V5T25seSB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgUmV2ZWFsQ29udGVudCBmcm9tICcuL1JldmVhbENvbnRlbnQnO1xuLyoqXG4gKiBBIHJldmVhbCBkaXNwbGF5cyBhZGRpdGlvbmFsIGNvbnRlbnQgaW4gcGxhY2Ugb2YgcHJldmlvdXMgY29udGVudCB3aGVuIGFjdGl2YXRlZC5cbiAqL1xuXG5mdW5jdGlvbiBSZXZlYWwocHJvcHMpIHtcbiAgdmFyIGFjdGl2ZSA9IHByb3BzLmFjdGl2ZSxcbiAgICAgIGFuaW1hdGVkID0gcHJvcHMuYW5pbWF0ZWQsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgaW5zdGFudCA9IHByb3BzLmluc3RhbnQ7XG4gIHZhciBjbGFzc2VzID0gY3goJ3VpJywgYW5pbWF0ZWQsIHVzZUtleU9ubHkoYWN0aXZlLCAnYWN0aXZlJyksIHVzZUtleU9ubHkoZGlzYWJsZWQsICdkaXNhYmxlZCcpLCB1c2VLZXlPbmx5KGluc3RhbnQsICdpbnN0YW50JyksICdyZXZlYWwnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFJldmVhbCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShSZXZlYWwsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cblJldmVhbC5oYW5kbGVkUHJvcHMgPSBbXCJhY3RpdmVcIiwgXCJhbmltYXRlZFwiLCBcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJpbnN0YW50XCJdO1xuUmV2ZWFsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEFuIGFjdGl2ZSByZXZlYWwgZGlzcGxheXMgaXRzIGhpZGRlbiBjb250ZW50LiAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBbiBhbmltYXRpb24gbmFtZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byBSZXZlYWwuICovXG4gIGFuaW1hdGVkOiBQcm9wVHlwZXMub25lT2YoWydmYWRlJywgJ3NtYWxsIGZhZGUnLCAnbW92ZScsICdtb3ZlIHJpZ2h0JywgJ21vdmUgdXAnLCAnbW92ZSBkb3duJywgJ3JvdGF0ZScsICdyb3RhdGUgbGVmdCddKSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIEEgZGlzYWJsZWQgcmV2ZWFsIHdpbGwgbm90IGFuaW1hdGUgd2hlbiBob3ZlcmVkLiAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEFuIGVsZW1lbnQgY2FuIHNob3cgaXRzIGNvbnRlbnQgd2l0aG91dCBkZWxheS4gKi9cbiAgaW5zdGFudDogUHJvcFR5cGVzLmJvb2xcbn0gOiB7fTtcblJldmVhbC5Db250ZW50ID0gUmV2ZWFsQ29udGVudDtcbmV4cG9ydCBkZWZhdWx0IFJldmVhbDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF93aXRob3V0IGZyb20gXCJsb2Rhc2gvd2l0aG91dFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBncm91cCBvZiBzZWdtZW50cyBjYW4gYmUgZm9ybWF0dGVkIHRvIGFwcGVhciB0b2dldGhlci5cbiAqL1xuXG5mdW5jdGlvbiBTZWdtZW50R3JvdXAocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb21wYWN0ID0gcHJvcHMuY29tcGFjdCxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgaG9yaXpvbnRhbCA9IHByb3BzLmhvcml6b250YWwsXG4gICAgICBwaWxlZCA9IHByb3BzLnBpbGVkLFxuICAgICAgcmFpc2VkID0gcHJvcHMucmFpc2VkLFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzdGFja2VkID0gcHJvcHMuc3RhY2tlZDtcbiAgdmFyIGNsYXNzZXMgPSBjeCgndWknLCBzaXplLCB1c2VLZXlPbmx5KGNvbXBhY3QsICdjb21wYWN0JyksIHVzZUtleU9ubHkoaG9yaXpvbnRhbCwgJ2hvcml6b250YWwnKSwgdXNlS2V5T25seShwaWxlZCwgJ3BpbGVkJyksIHVzZUtleU9ubHkocmFpc2VkLCAncmFpc2VkJyksIHVzZUtleU9ubHkoc3RhY2tlZCwgJ3N0YWNrZWQnKSwgJ3NlZ21lbnRzJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhTZWdtZW50R3JvdXAsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoU2VnbWVudEdyb3VwLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5TZWdtZW50R3JvdXAuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBhY3RcIiwgXCJjb250ZW50XCIsIFwiaG9yaXpvbnRhbFwiLCBcInBpbGVkXCIsIFwicmFpc2VkXCIsIFwic2l6ZVwiLCBcInN0YWNrZWRcIl07XG5TZWdtZW50R3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBBIHNlZ21lbnQgbWF5IHRha2UgdXAgb25seSBhcyBtdWNoIHNwYWNlIGFzIGlzIG5lY2Vzc2FyeS4gKi9cbiAgY29tcGFjdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogRm9ybWF0cyBjb250ZW50IHRvIGJlIGFsaWduZWQgaG9yaXpvbnRhbGx5LiAqL1xuICBob3Jpem9udGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogRm9ybWF0dGVkIHRvIGxvb2sgbGlrZSBhIHBpbGUgb2YgcGFnZXMuICovXG4gIHBpbGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBzZWdtZW50IGdyb3VwIG1heSBiZSBmb3JtYXR0ZWQgdG8gcmFpc2UgYWJvdmUgdGhlIHBhZ2UuICovXG4gIHJhaXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgc2VnbWVudCBncm91cCBjYW4gaGF2ZSBkaWZmZXJlbnQgc2l6ZXMuICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihfd2l0aG91dChTVUkuU0laRVMsICdtZWRpdW0nKSksXG5cbiAgLyoqIEZvcm1hdHRlZCB0byBzaG93IGl0IGNvbnRhaW5zIG11bHRpcGxlIHBhZ2VzLiAqL1xuICBzdGFja2VkOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgU2VnbWVudEdyb3VwOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBwbGFjZWhvbGRlciBzZWdtZW50IGNhbiBiZSBpbmxpbmUuXG4gKi9cblxuZnVuY3Rpb24gU2VnbWVudElubGluZShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdpbmxpbmUnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFNlZ21lbnRJbmxpbmUsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoU2VnbWVudElubGluZSwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuU2VnbWVudElubGluZS5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiXTtcblNlZ21lbnRJbmxpbmUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmRcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IFNlZ21lbnRJbmxpbmU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfd2l0aG91dCBmcm9tIFwibG9kYXNoL3dpdGhvdXRcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIFNVSSwgdXNlS2V5T25seSwgdXNlS2V5T3JWYWx1ZUFuZEtleSwgdXNlVGV4dEFsaWduUHJvcCwgdXNlVmFsdWVBbmRLZXkgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IFNlZ21lbnRHcm91cCBmcm9tICcuL1NlZ21lbnRHcm91cCc7XG5pbXBvcnQgU2VnbWVudElubGluZSBmcm9tICcuL1NlZ21lbnRJbmxpbmUnO1xuLyoqXG4gKiBBIHNlZ21lbnQgaXMgdXNlZCB0byBjcmVhdGUgYSBncm91cGluZyBvZiByZWxhdGVkIGNvbnRlbnQuXG4gKi9cblxuZnVuY3Rpb24gU2VnbWVudChwcm9wcykge1xuICB2YXIgYXR0YWNoZWQgPSBwcm9wcy5hdHRhY2hlZCxcbiAgICAgIGJhc2ljID0gcHJvcHMuYmFzaWMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2lyY3VsYXIgPSBwcm9wcy5jaXJjdWxhcixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNsZWFyaW5nID0gcHJvcHMuY2xlYXJpbmcsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29tcGFjdCA9IHByb3BzLmNvbXBhY3QsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBmbG9hdGVkID0gcHJvcHMuZmxvYXRlZCxcbiAgICAgIGludmVydGVkID0gcHJvcHMuaW52ZXJ0ZWQsXG4gICAgICBsb2FkaW5nID0gcHJvcHMubG9hZGluZyxcbiAgICAgIHBsYWNlaG9sZGVyID0gcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICBwYWRkZWQgPSBwcm9wcy5wYWRkZWQsXG4gICAgICBwaWxlZCA9IHByb3BzLnBpbGVkLFxuICAgICAgcmFpc2VkID0gcHJvcHMucmFpc2VkLFxuICAgICAgc2Vjb25kYXJ5ID0gcHJvcHMuc2Vjb25kYXJ5LFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzdGFja2VkID0gcHJvcHMuc3RhY2tlZCxcbiAgICAgIHRlcnRpYXJ5ID0gcHJvcHMudGVydGlhcnksXG4gICAgICB0ZXh0QWxpZ24gPSBwcm9wcy50ZXh0QWxpZ24sXG4gICAgICB2ZXJ0aWNhbCA9IHByb3BzLnZlcnRpY2FsO1xuICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIGNvbG9yLCBzaXplLCB1c2VLZXlPbmx5KGJhc2ljLCAnYmFzaWMnKSwgdXNlS2V5T25seShjaXJjdWxhciwgJ2NpcmN1bGFyJyksIHVzZUtleU9ubHkoY2xlYXJpbmcsICdjbGVhcmluZycpLCB1c2VLZXlPbmx5KGNvbXBhY3QsICdjb21wYWN0JyksIHVzZUtleU9ubHkoZGlzYWJsZWQsICdkaXNhYmxlZCcpLCB1c2VLZXlPbmx5KGludmVydGVkLCAnaW52ZXJ0ZWQnKSwgdXNlS2V5T25seShsb2FkaW5nLCAnbG9hZGluZycpLCB1c2VLZXlPbmx5KHBsYWNlaG9sZGVyLCAncGxhY2Vob2xkZXInKSwgdXNlS2V5T25seShwaWxlZCwgJ3BpbGVkJyksIHVzZUtleU9ubHkocmFpc2VkLCAncmFpc2VkJyksIHVzZUtleU9ubHkoc2Vjb25kYXJ5LCAnc2Vjb25kYXJ5JyksIHVzZUtleU9ubHkoc3RhY2tlZCwgJ3N0YWNrZWQnKSwgdXNlS2V5T25seSh0ZXJ0aWFyeSwgJ3RlcnRpYXJ5JyksIHVzZUtleU9ubHkodmVydGljYWwsICd2ZXJ0aWNhbCcpLCB1c2VLZXlPclZhbHVlQW5kS2V5KGF0dGFjaGVkLCAnYXR0YWNoZWQnKSwgdXNlS2V5T3JWYWx1ZUFuZEtleShwYWRkZWQsICdwYWRkZWQnKSwgdXNlVGV4dEFsaWduUHJvcCh0ZXh0QWxpZ24pLCB1c2VWYWx1ZUFuZEtleShmbG9hdGVkLCAnZmxvYXRlZCcpLCAnc2VnbWVudCcsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoU2VnbWVudCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShTZWdtZW50LCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5TZWdtZW50LmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiYXR0YWNoZWRcIiwgXCJiYXNpY1wiLCBcImNoaWxkcmVuXCIsIFwiY2lyY3VsYXJcIiwgXCJjbGFzc05hbWVcIiwgXCJjbGVhcmluZ1wiLCBcImNvbG9yXCIsIFwiY29tcGFjdFwiLCBcImNvbnRlbnRcIiwgXCJkaXNhYmxlZFwiLCBcImZsb2F0ZWRcIiwgXCJpbnZlcnRlZFwiLCBcImxvYWRpbmdcIiwgXCJwYWRkZWRcIiwgXCJwaWxlZFwiLCBcInBsYWNlaG9sZGVyXCIsIFwicmFpc2VkXCIsIFwic2Vjb25kYXJ5XCIsIFwic2l6ZVwiLCBcInN0YWNrZWRcIiwgXCJ0ZXJ0aWFyeVwiLCBcInRleHRBbGlnblwiLCBcInZlcnRpY2FsXCJdO1xuU2VnbWVudC5Hcm91cCA9IFNlZ21lbnRHcm91cDtcblNlZ21lbnQuSW5saW5lID0gU2VnbWVudElubGluZTtcblNlZ21lbnQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQXR0YWNoIHNlZ21lbnQgdG8gb3RoZXIgY29udGVudCwgbGlrZSBhIGhlYWRlci4gKi9cbiAgYXR0YWNoZWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAnYm90dG9tJ10pXSksXG5cbiAgLyoqIEEgYmFzaWMgc2VnbWVudCBoYXMgbm8gc3BlY2lhbCBmb3JtYXR0aW5nLiAqL1xuICBiYXNpYzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBIHNlZ21lbnQgY2FuIGJlIGNpcmN1bGFyLiAqL1xuICBjaXJjdWxhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBBIHNlZ21lbnQgY2FuIGNsZWFyIGZsb2F0ZWQgY29udGVudC4gKi9cbiAgY2xlYXJpbmc6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTZWdtZW50IGNhbiBiZSBjb2xvcmVkLiAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFNVSS5DT0xPUlMpLFxuXG4gIC8qKiBBIHNlZ21lbnQgbWF5IHRha2UgdXAgb25seSBhcyBtdWNoIHNwYWNlIGFzIGlzIG5lY2Vzc2FyeS4gKi9cbiAgY29tcGFjdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBzZWdtZW50IG1heSBzaG93IGl0cyBjb250ZW50IGlzIGRpc2FibGVkLiAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNlZ21lbnQgY29udGVudCBjYW4gYmUgZmxvYXRlZCB0byB0aGUgbGVmdCBvciByaWdodC4gKi9cbiAgZmxvYXRlZDogUHJvcFR5cGVzLm9uZU9mKFNVSS5GTE9BVFMpLFxuXG4gIC8qKiBBIHNlZ21lbnQgY2FuIGhhdmUgaXRzIGNvbG9ycyBpbnZlcnRlZCBmb3IgY29udHJhc3QuICovXG4gIGludmVydGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBzZWdtZW50IG1heSBzaG93IGl0cyBjb250ZW50IGlzIGJlaW5nIGxvYWRlZC4gKi9cbiAgbG9hZGluZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgc2VnbWVudCBjYW4gaW5jcmVhc2UgaXRzIHBhZGRpbmcuICovXG4gIHBhZGRlZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5vbmVPZihbJ3ZlcnknXSldKSxcblxuICAvKiogQSBzZWdtZW50IGNhbiBiZSB1c2VkIHRvIHJlc2VydmUgc3BhY2UgZm9yIGNvbmRpdGlvbmFsbHkgZGlzcGxheWVkIGNvbnRlbnQuICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogRm9ybWF0dGVkIHRvIGxvb2sgbGlrZSBhIHBpbGUgb2YgcGFnZXMuICovXG4gIHBpbGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBzZWdtZW50IG1heSBiZSBmb3JtYXR0ZWQgdG8gcmFpc2UgYWJvdmUgdGhlIHBhZ2UuICovXG4gIHJhaXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgc2VnbWVudCBjYW4gYmUgZm9ybWF0dGVkIHRvIGFwcGVhciBsZXNzIG5vdGljZWFibGUuICovXG4gIHNlY29uZGFyeTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgc2VnbWVudCBjYW4gaGF2ZSBkaWZmZXJlbnQgc2l6ZXMuICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihfd2l0aG91dChTVUkuU0laRVMsICdtZWRpdW0nKSksXG5cbiAgLyoqIEZvcm1hdHRlZCB0byBzaG93IGl0IGNvbnRhaW5zIG11bHRpcGxlIHBhZ2VzLiAqL1xuICBzdGFja2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBzZWdtZW50IGNhbiBiZSBmb3JtYXR0ZWQgdG8gYXBwZWFyIGV2ZW4gbGVzcyBub3RpY2VhYmxlLiAqL1xuICB0ZXJ0aWFyeTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEZvcm1hdHMgY29udGVudCB0byBiZSBhbGlnbmVkIGFzIHBhcnQgb2YgYSB2ZXJ0aWNhbCBncm91cC4gKi9cbiAgdGV4dEFsaWduOiBQcm9wVHlwZXMub25lT2YoX3dpdGhvdXQoU1VJLlRFWFRfQUxJR05NRU5UUywgJ2p1c3RpZmllZCcpKSxcblxuICAvKiogRm9ybWF0cyBjb250ZW50IHRvIGJlIGFsaWduZWQgdmVydGljYWxseS4gKi9cbiAgdmVydGljYWw6IFByb3BUeXBlcy5ib29sXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBTZWdtZW50OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGNyZWF0ZVNob3J0aGFuZEZhY3RvcnksIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcblxuZnVuY3Rpb24gU3RlcERlc2NyaXB0aW9uKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQ7XG4gIHZhciBjbGFzc2VzID0gY3goJ2Rlc2NyaXB0aW9uJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhTdGVwRGVzY3JpcHRpb24sIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoU3RlcERlc2NyaXB0aW9uLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5TdGVwRGVzY3JpcHRpb24uaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5TdGVwRGVzY3JpcHRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmRcbn0gOiB7fTtcblN0ZXBEZXNjcmlwdGlvbi5jcmVhdGUgPSBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KFN0ZXBEZXNjcmlwdGlvbiwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IFN0ZXBEZXNjcmlwdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgc3RlcCBjYW4gY29udGFpbiBhIHRpdGxlLlxuICovXG5cbmZ1bmN0aW9uIFN0ZXBUaXRsZShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCd0aXRsZScsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoU3RlcFRpdGxlLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFN0ZXBUaXRsZSwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuU3RlcFRpdGxlLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCJdO1xuU3RlcFRpdGxlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5TdGVwVGl0bGUuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShTdGVwVGl0bGUsIGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiB7XG4gICAgY29udGVudDogY29udGVudFxuICB9O1xufSk7XG5leHBvcnQgZGVmYXVsdCBTdGVwVGl0bGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IFN0ZXBEZXNjcmlwdGlvbiBmcm9tICcuL1N0ZXBEZXNjcmlwdGlvbic7XG5pbXBvcnQgU3RlcFRpdGxlIGZyb20gJy4vU3RlcFRpdGxlJztcbi8qKlxuICogQSBzdGVwIGNhbiBjb250YWluIGEgY29udGVudC5cbiAqL1xuXG5mdW5jdGlvbiBTdGVwQ29udGVudChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgZGVzY3JpcHRpb24gPSBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgIHRpdGxlID0gcHJvcHMudGl0bGU7XG4gIHZhciBjbGFzc2VzID0gY3goJ2NvbnRlbnQnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFN0ZXBDb250ZW50LCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFN0ZXBDb250ZW50LCBwcm9wcyk7XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfVxuXG4gIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjb250ZW50KSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNvbnRlbnQpO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBTdGVwVGl0bGUuY3JlYXRlKHRpdGxlLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSwgU3RlcERlc2NyaXB0aW9uLmNyZWF0ZShkZXNjcmlwdGlvbiwge1xuICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgfSkpO1xufVxuXG5TdGVwQ29udGVudC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiLCBcImRlc2NyaXB0aW9uXCIsIFwidGl0bGVcIl07XG5TdGVwQ29udGVudC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBTdGVwRGVzY3JpcHRpb24uICovXG4gIGRlc2NyaXB0aW9uOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBTdGVwVGl0bGUuICovXG4gIHRpdGxlOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZFxufSA6IHt9O1xuU3RlcENvbnRlbnQuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShTdGVwQ29udGVudCwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IFN0ZXBDb250ZW50OyIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3ZhbHVlcyBmcm9tIFwibG9kYXNoL3ZhbHVlc1wiO1xuaW1wb3J0IF9rZXlzIGZyb20gXCJsb2Rhc2gva2V5c1wiO1xuaW1wb3J0IF93aXRob3V0IGZyb20gXCJsb2Rhc2gvd2l0aG91dFwiO1xuaW1wb3J0IF9tYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcbmltcG9ydCBfcGlja0J5IGZyb20gXCJsb2Rhc2gvcGlja0J5XCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBudW1iZXJUb1dvcmRNYXAsIFNVSSwgdXNlS2V5T25seSwgdXNlS2V5T3JWYWx1ZUFuZEtleSwgdXNlVmFsdWVBbmRLZXksIHVzZVdpZHRoUHJvcCB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgU3RlcCBmcm9tICcuL1N0ZXAnO1xudmFyIG51bWJlck1hcCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IF9waWNrQnkobnVtYmVyVG9Xb3JkTWFwLCBmdW5jdGlvbiAodmFsLCBrZXkpIHtcbiAgcmV0dXJuIGtleSA8PSA4O1xufSkgOiB7fTtcbi8qKlxuICogQSBzZXQgb2Ygc3RlcHMuXG4gKi9cblxuZnVuY3Rpb24gU3RlcEdyb3VwKHByb3BzKSB7XG4gIHZhciBhdHRhY2hlZCA9IHByb3BzLmF0dGFjaGVkLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgZmx1aWQgPSBwcm9wcy5mbHVpZCxcbiAgICAgIGl0ZW1zID0gcHJvcHMuaXRlbXMsXG4gICAgICBvcmRlcmVkID0gcHJvcHMub3JkZXJlZCxcbiAgICAgIHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc3RhY2thYmxlID0gcHJvcHMuc3RhY2thYmxlLFxuICAgICAgdW5zdGFja2FibGUgPSBwcm9wcy51bnN0YWNrYWJsZSxcbiAgICAgIHZlcnRpY2FsID0gcHJvcHMudmVydGljYWwsXG4gICAgICB3aWR0aHMgPSBwcm9wcy53aWR0aHM7XG4gIHZhciBjbGFzc2VzID0gY3goJ3VpJywgc2l6ZSwgdXNlS2V5T25seShmbHVpZCwgJ2ZsdWlkJyksIHVzZUtleU9ubHkob3JkZXJlZCwgJ29yZGVyZWQnKSwgdXNlS2V5T25seSh1bnN0YWNrYWJsZSwgJ3Vuc3RhY2thYmxlJyksIHVzZUtleU9ubHkodmVydGljYWwsICd2ZXJ0aWNhbCcpLCB1c2VLZXlPclZhbHVlQW5kS2V5KGF0dGFjaGVkLCAnYXR0YWNoZWQnKSwgdXNlVmFsdWVBbmRLZXkoc3RhY2thYmxlLCAnc3RhY2thYmxlJyksIHVzZVdpZHRoUHJvcCh3aWR0aHMpLCAnc3RlcHMnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFN0ZXBHcm91cCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShTdGVwR3JvdXAsIHByb3BzKTtcblxuICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNvbnRlbnQpKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY29udGVudCk7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIF9tYXAoaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIFN0ZXAuY3JlYXRlKGl0ZW0pO1xuICB9KSk7XG59XG5cblN0ZXBHcm91cC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImF0dGFjaGVkXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiZmx1aWRcIiwgXCJpdGVtc1wiLCBcIm9yZGVyZWRcIiwgXCJzaXplXCIsIFwic3RhY2thYmxlXCIsIFwidW5zdGFja2FibGVcIiwgXCJ2ZXJ0aWNhbFwiLCBcIndpZHRoc1wiXTtcblN0ZXBHcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBTdGVwcyBjYW4gYmUgYXR0YWNoZWQgdG8gb3RoZXIgZWxlbWVudHMuICovXG4gIGF0dGFjaGVkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9uZU9mKFsndG9wJywgJ2JvdHRvbSddKV0pLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBmbHVpZCBzdGVwIHRha2VzIHVwIHRoZSB3aWR0aCBvZiBpdHMgY29udGFpbmVyLiAqL1xuICBmbHVpZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNob3J0aGFuZCBhcnJheSBvZiBwcm9wcyBmb3IgU3RlcC4gKi9cbiAgaXRlbXM6IGN1c3RvbVByb3BUeXBlcy5jb2xsZWN0aW9uU2hvcnRoYW5kLFxuXG4gIC8qKiBBIHN0ZXAgY2FuIHNob3cgYSBvcmRlcmVkIHNlcXVlbmNlIG9mIHN0ZXBzLiAqL1xuICBvcmRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogU3RlcHMgY2FuIGhhdmUgZGlmZmVyZW50IHNpemVzLiAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoX3dpdGhvdXQoU1VJLlNJWkVTLCAnbWVkaXVtJykpLFxuXG4gIC8qKiBBIHN0ZXAgY2FuIHN0YWNrIHZlcnRpY2FsbHkgb25seSBvbiBzbWFsbGVyIHNjcmVlbnMuICovXG4gIHN0YWNrYWJsZTogUHJvcFR5cGVzLm9uZU9mKFsndGFibGV0J10pLFxuXG4gIC8qKiBBIHN0ZXAgY2FuIHByZXZlbnQgaXRzZWxmIGZyb20gc3RhY2tpbmcgb24gbW9iaWxlLiAqL1xuICB1bnN0YWNrYWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgc3RlcCBjYW4gYmUgZGlzcGxheWVkIHN0YWNrZWQgdmVydGljYWxseS4gKi9cbiAgdmVydGljYWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTdGVwcyBjYW4gYmUgZGl2aWRlZCBldmVubHkgaW5zaWRlIHRoZWlyIHBhcmVudC4gKi9cbiAgd2lkdGhzOiBQcm9wVHlwZXMub25lT2YoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShfa2V5cyhudW1iZXJNYXApKSwgX3RvQ29uc3VtYWJsZUFycmF5KF9rZXlzKG51bWJlck1hcCkubWFwKE51bWJlcikpLCBfdG9Db25zdW1hYmxlQXJyYXkoX3ZhbHVlcyhudW1iZXJNYXApKSkpXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBTdGVwR3JvdXA7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGNyZWF0ZVNob3J0aGFuZEZhY3RvcnksIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24nO1xuaW1wb3J0IFN0ZXBDb250ZW50IGZyb20gJy4vU3RlcENvbnRlbnQnO1xuaW1wb3J0IFN0ZXBEZXNjcmlwdGlvbiBmcm9tICcuL1N0ZXBEZXNjcmlwdGlvbic7XG5pbXBvcnQgU3RlcEdyb3VwIGZyb20gJy4vU3RlcEdyb3VwJztcbmltcG9ydCBTdGVwVGl0bGUgZnJvbSAnLi9TdGVwVGl0bGUnO1xuLyoqXG4gKiBBIHN0ZXAgc2hvd3MgdGhlIGNvbXBsZXRpb24gc3RhdHVzIG9mIGFuIGFjdGl2aXR5IGluIGEgc2VyaWVzIG9mIGFjdGl2aXRpZXMuXG4gKi9cblxudmFyIFN0ZXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0ZXAsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0ZXAoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RlcCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihTdGVwKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY29tcHV0ZUVsZW1lbnRUeXBlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvbkNsaWNrID0gX3RoaXMucHJvcHMub25DbGljaztcbiAgICAgIGlmIChvbkNsaWNrKSByZXR1cm4gJ2EnO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgZGlzYWJsZWQgPSBfdGhpcy5wcm9wcy5kaXNhYmxlZDtcbiAgICAgIGlmICghZGlzYWJsZWQpIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkNsaWNrJywgZSwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFN0ZXAsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzLmFjdGl2ZSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjb21wbGV0ZWQgPSBfdGhpcyRwcm9wcy5jb21wbGV0ZWQsXG4gICAgICAgICAgY29udGVudCA9IF90aGlzJHByb3BzLmNvbnRlbnQsXG4gICAgICAgICAgZGVzY3JpcHRpb24gPSBfdGhpcyRwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGhyZWYgPSBfdGhpcyRwcm9wcy5ocmVmLFxuICAgICAgICAgIGljb24gPSBfdGhpcyRwcm9wcy5pY29uLFxuICAgICAgICAgIGxpbmsgPSBfdGhpcyRwcm9wcy5saW5rLFxuICAgICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGU7XG4gICAgICB2YXIgY2xhc3NlcyA9IGN4KHVzZUtleU9ubHkoYWN0aXZlLCAnYWN0aXZlJyksIHVzZUtleU9ubHkoY29tcGxldGVkLCAnY29tcGxldGVkJyksIHVzZUtleU9ubHkoZGlzYWJsZWQsICdkaXNhYmxlZCcpLCB1c2VLZXlPbmx5KGxpbmssICdsaW5rJyksICdzdGVwJywgY2xhc3NOYW1lKTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoU3RlcCwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShTdGVwLCB0aGlzLnByb3BzLCB0aGlzLmNvbXB1dGVFbGVtZW50VHlwZSk7XG5cbiAgICAgIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICAgIGhyZWY6IGhyZWYsXG4gICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgICB9KSwgY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY29udGVudCkpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICAgIGhyZWY6IGhyZWYsXG4gICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgICB9KSwgY29udGVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIGhyZWY6IGhyZWYsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICAgIH0pLCBJY29uLmNyZWF0ZShpY29uLCB7XG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pLCBTdGVwQ29udGVudC5jcmVhdGUoe1xuICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICAgIHRpdGxlOiB0aXRsZVxuICAgICAgfSwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0ZXA7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShTdGVwLCBcIkNvbnRlbnRcIiwgU3RlcENvbnRlbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoU3RlcCwgXCJEZXNjcmlwdGlvblwiLCBTdGVwRGVzY3JpcHRpb24pO1xuXG5fZGVmaW5lUHJvcGVydHkoU3RlcCwgXCJHcm91cFwiLCBTdGVwR3JvdXApO1xuXG5fZGVmaW5lUHJvcGVydHkoU3RlcCwgXCJUaXRsZVwiLCBTdGVwVGl0bGUpO1xuXG5fZGVmaW5lUHJvcGVydHkoU3RlcCwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYWN0aXZlXCIsIFwiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBsZXRlZFwiLCBcImNvbnRlbnRcIiwgXCJkZXNjcmlwdGlvblwiLCBcImRpc2FibGVkXCIsIFwiaHJlZlwiLCBcImljb25cIiwgXCJsaW5rXCIsIFwib25DbGlja1wiLCBcIm9yZGVyZWRcIiwgXCJ0aXRsZVwiXSk7XG5cblN0ZXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQSBzdGVwIGNhbiBiZSBoaWdobGlnaHRlZCBhcyBhY3RpdmUuICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQSBzdGVwIGNhbiBzaG93IHRoYXQgYSB1c2VyIGhhcyBjb21wbGV0ZWQgaXQuICovXG4gIGNvbXBsZXRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBTdGVwRGVzY3JpcHRpb24uICovXG4gIGRlc2NyaXB0aW9uOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogU2hvdyB0aGF0IHRoZSBMb2FkZXIgaXMgaW5hY3RpdmUuICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUmVuZGVyIGFzIGFuIGBhYCB0YWcgaW5zdGVhZCBvZiBhIGBkaXZgIGFuZCBhZGRzIHRoZSBocmVmIGF0dHJpYnV0ZS4gKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBJY29uLiAqL1xuICBpY29uOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogQSBzdGVwIGNhbiBiZSBsaW5rLiAqL1xuICBsaW5rOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGNsaWNrLiBXaGVuIHBhc3NlZCwgdGhlIGNvbXBvbmVudCB3aWxsIHJlbmRlciBhcyBhbiBgYWBcbiAgICogdGFnIGJ5IGRlZmF1bHQgaW5zdGVhZCBvZiBhIGBkaXZgLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqIEEgc3RlcCBjYW4gc2hvdyBhIG9yZGVyZWQgc2VxdWVuY2Ugb2Ygc3RlcHMuIFBhc3NlZCBmcm9tIFN0ZXBHcm91cC4gKi9cbiAgb3JkZXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgU3RlcFRpdGxlLiAqL1xuICB0aXRsZTogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmRcbn0gOiB7fTtcblN0ZXAuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShTdGVwLCBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgU3RlcDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9pc05pbCBmcm9tIFwibG9kYXNoL2lzTmlsXCI7XG5pbXBvcnQgX2ludm9rZSBmcm9tIFwibG9kYXNoL2ludm9rZVwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgdXNlS2V5T25seSB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi8uLi9lbGVtZW50cy9JY29uJztcbi8qKlxuICogQSB0aXRsZSBzdWItY29tcG9uZW50IGZvciBBY2NvcmRpb24gY29tcG9uZW50LlxuICovXG5cbnZhciBBY2NvcmRpb25UaXRsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQWNjb3JkaW9uVGl0bGUsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEFjY29yZGlvblRpdGxlKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjY29yZGlvblRpdGxlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKEFjY29yZGlvblRpdGxlKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQ2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBfaW52b2tlKF90aGlzLnByb3BzLCAnb25DbGljaycsIGUsIF90aGlzLnByb3BzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBY2NvcmRpb25UaXRsZSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbnRlbnQgPSBfdGhpcyRwcm9wcy5jb250ZW50LFxuICAgICAgICAgIGljb24gPSBfdGhpcyRwcm9wcy5pY29uO1xuICAgICAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KGFjdGl2ZSwgJ2FjdGl2ZScpLCAndGl0bGUnLCBjbGFzc05hbWUpO1xuICAgICAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhBY2NvcmRpb25UaXRsZSwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShBY2NvcmRpb25UaXRsZSwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgaWNvblZhbHVlID0gX2lzTmlsKGljb24pID8gJ2Ryb3Bkb3duJyA6IGljb247XG5cbiAgICAgIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICAgICAgfSksIGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgICAgfSksIEljb24uY3JlYXRlKGljb25WYWx1ZSwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KSwgY29udGVudCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFjY29yZGlvblRpdGxlO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoQWNjb3JkaW9uVGl0bGUsIFwiaGFuZGxlZFByb3BzXCIsIFtcImFjdGl2ZVwiLCBcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiaWNvblwiLCBcImluZGV4XCIsIFwib25DbGlja1wiXSk7XG5cbmV4cG9ydCB7IEFjY29yZGlvblRpdGxlIGFzIGRlZmF1bHQgfTtcbkFjY29yZGlvblRpdGxlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFdoZXRoZXIgb3Igbm90IHRoZSB0aXRsZSBpcyBpbiB0aGUgb3BlbiBzdGF0ZS4gKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgSWNvbi4gKi9cbiAgaWNvbjogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIEFjY29yZGlvblRpdGxlIGluZGV4IGluc2lkZSBBY2NvcmRpb24uICovXG4gIGluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBjbGljay5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jXG59IDoge307XG5BY2NvcmRpb25UaXRsZS5jcmVhdGUgPSBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KEFjY29yZGlvblRpdGxlLCBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgfTtcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGNyZWF0ZVNob3J0aGFuZEZhY3RvcnksIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBjb250ZW50IHN1Yi1jb21wb25lbnQgZm9yIEFjY29yZGlvbiBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gQWNjb3JkaW9uQ29udGVudChwcm9wcykge1xuICB2YXIgYWN0aXZlID0gcHJvcHMuYWN0aXZlLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdjb250ZW50JywgdXNlS2V5T25seShhY3RpdmUsICdhY3RpdmUnKSwgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhBY2NvcmRpb25Db250ZW50LCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEFjY29yZGlvbkNvbnRlbnQsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cbkFjY29yZGlvbkNvbnRlbnQuaGFuZGxlZFByb3BzID0gW1wiYWN0aXZlXCIsIFwiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5BY2NvcmRpb25Db250ZW50LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFdoZXRoZXIgb3Igbm90IHRoZSBjb250ZW50IGlzIHZpc2libGUuICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5BY2NvcmRpb25Db250ZW50LmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoQWNjb3JkaW9uQ29udGVudCwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IEFjY29yZGlvbkNvbnRlbnQ7IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnksIGN1c3RvbVByb3BUeXBlcyB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgQWNjb3JkaW9uVGl0bGUgZnJvbSAnLi9BY2NvcmRpb25UaXRsZSc7XG5pbXBvcnQgQWNjb3JkaW9uQ29udGVudCBmcm9tICcuL0FjY29yZGlvbkNvbnRlbnQnO1xuLyoqXG4gKiBBIHBhbmVsIHN1Yi1jb21wb25lbnQgZm9yIEFjY29yZGlvbiBjb21wb25lbnQuXG4gKi9cblxudmFyIEFjY29yZGlvblBhbmVsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhBY2NvcmRpb25QYW5lbCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQWNjb3JkaW9uUGFuZWwoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWNjb3JkaW9uUGFuZWwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoQWNjb3JkaW9uUGFuZWwpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVUaXRsZU92ZXJyaWRlc1wiLCBmdW5jdGlvbiAocHJlZGVmaW5lZFByb3BzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUsIHRpdGxlUHJvcHMpIHtcbiAgICAgICAgICBfaW52b2tlKHByZWRlZmluZWRQcm9wcywgJ29uQ2xpY2snLCBlLCB0aXRsZVByb3BzKTtcblxuICAgICAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvblRpdGxlQ2xpY2snLCBlLCB0aXRsZVByb3BzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBY2NvcmRpb25QYW5lbCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICAgIGNvbnRlbnQgPSBfdGhpcyRwcm9wcy5jb250ZW50LFxuICAgICAgICAgIGluZGV4ID0gX3RoaXMkcHJvcHMuaW5kZXgsXG4gICAgICAgICAgdGl0bGUgPSBfdGhpcyRwcm9wcy50aXRsZTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBBY2NvcmRpb25UaXRsZS5jcmVhdGUodGl0bGUsIHtcbiAgICAgICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZSxcbiAgICAgICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICAgICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICAgIH0sXG4gICAgICAgIG92ZXJyaWRlUHJvcHM6IHRoaXMuaGFuZGxlVGl0bGVPdmVycmlkZXNcbiAgICAgIH0pLCBBY2NvcmRpb25Db250ZW50LmNyZWF0ZShjb250ZW50LCB7XG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2UsXG4gICAgICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICAgIGFjdGl2ZTogYWN0aXZlXG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQWNjb3JkaW9uUGFuZWw7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShBY2NvcmRpb25QYW5lbCwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYWN0aXZlXCIsIFwiY29udGVudFwiLCBcImluZGV4XCIsIFwib25UaXRsZUNsaWNrXCIsIFwidGl0bGVcIl0pO1xuXG5BY2NvcmRpb25QYW5lbC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBXaGV0aGVyIG9yIG5vdCB0aGUgdGl0bGUgaXMgaW4gdGhlIG9wZW4gc3RhdGUuICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgc2hvcnRoYW5kIGZvciBBY2NvcmRpb24uQ29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIEEgcGFuZWwgaW5kZXguICovXG4gIGluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgcGFuZWwgdGl0bGUgaXMgY2xpY2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBpdGVtIHByb3BzLlxuICAgKi9cbiAgb25UaXRsZUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogQSBzaG9ydGhhbmQgZm9yIEFjY29yZGlvbi5UaXRsZS4gKi9cbiAgdGl0bGU6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kXG59IDoge307XG5BY2NvcmRpb25QYW5lbC5jcmVhdGUgPSBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KEFjY29yZGlvblBhbmVsLCBudWxsKTtcbmV4cG9ydCBkZWZhdWx0IEFjY29yZGlvblBhbmVsOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX21hcCBmcm9tIFwibG9kYXNoL21hcFwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCBfd2l0aG91dCBmcm9tIFwibG9kYXNoL3dpdGhvdXRcIjtcbmltcG9ydCBfaW5jbHVkZXMgZnJvbSBcImxvZGFzaC9pbmNsdWRlc1wiO1xuaW1wb3J0IF9pc0FycmF5IGZyb20gXCJsb2Rhc2gvaXNBcnJheVwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBdXRvQ29udHJvbGxlZENvbXBvbmVudCBhcyBDb21wb25lbnQsIGNoaWxkcmVuVXRpbHMsIGNyZWF0ZVNob3J0aGFuZEZhY3RvcnksIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBBY2NvcmRpb25QYW5lbCBmcm9tICcuL0FjY29yZGlvblBhbmVsJztcblxudmFyIHdhcm5JZlByb3BzQXJlSW52YWxpZCA9IGZ1bmN0aW9uIHdhcm5JZlByb3BzQXJlSW52YWxpZChwcm9wcywgc3RhdGUpIHtcbiAgdmFyIGV4Y2x1c2l2ZSA9IHByb3BzLmV4Y2x1c2l2ZTtcbiAgdmFyIGFjdGl2ZUluZGV4ID0gc3RhdGUuYWN0aXZlSW5kZXg7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cblxuICBpZiAoZXhjbHVzaXZlICYmIHR5cGVvZiBhY3RpdmVJbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICBjb25zb2xlLmVycm9yKCdgYWN0aXZlSW5kZXhgIG11c3QgYmUgYSBudW1iZXIgaWYgYGV4Y2x1c2l2ZWAgaXMgdHJ1ZScpO1xuICB9IGVsc2UgaWYgKCFleGNsdXNpdmUgJiYgIV9pc0FycmF5KGFjdGl2ZUluZGV4KSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ2BhY3RpdmVJbmRleGAgbXVzdCBiZSBhbiBhcnJheSBpZiBgZXhjbHVzaXZlYCBpcyBmYWxzZScpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG59O1xuLyoqXG4gKiBBbiBBY2NvcmRpb24gY2FuIGNvbnRhaW4gc3ViLWFjY29yZGlvbnMuXG4gKi9cblxuXG52YXIgQWNjb3JkaW9uQWNjb3JkaW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhBY2NvcmRpb25BY2NvcmRpb24sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEFjY29yZGlvbkFjY29yZGlvbigpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBY2NvcmRpb25BY2NvcmRpb24pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoQWNjb3JkaW9uQWNjb3JkaW9uKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY29tcHV0ZU5ld0luZGV4XCIsIGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgdmFyIGV4Y2x1c2l2ZSA9IF90aGlzLnByb3BzLmV4Y2x1c2l2ZTtcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IF90aGlzLnN0YXRlLmFjdGl2ZUluZGV4O1xuICAgICAgaWYgKGV4Y2x1c2l2ZSkgcmV0dXJuIGluZGV4ID09PSBhY3RpdmVJbmRleCA/IC0xIDogaW5kZXg7IC8vIGNoZWNrIHRvIHNlZSBpZiBpbmRleCBpcyBpbiBhcnJheSwgYW5kIHJlbW92ZSBpdCwgaWYgbm90IHRoZW4gYWRkIGl0XG5cbiAgICAgIHJldHVybiBfaW5jbHVkZXMoYWN0aXZlSW5kZXgsIGluZGV4KSA/IF93aXRob3V0KGFjdGl2ZUluZGV4LCBpbmRleCkgOiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFjdGl2ZUluZGV4KSwgW2luZGV4XSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlVGl0bGVDbGlja1wiLCBmdW5jdGlvbiAoZSwgdGl0bGVQcm9wcykge1xuICAgICAgdmFyIGluZGV4ID0gdGl0bGVQcm9wcy5pbmRleDtcblxuICAgICAgX3RoaXMudHJ5U2V0U3RhdGUoe1xuICAgICAgICBhY3RpdmVJbmRleDogX3RoaXMuY29tcHV0ZU5ld0luZGV4KGluZGV4KVxuICAgICAgfSk7XG5cbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvblRpdGxlQ2xpY2snLCBlLCB0aXRsZVByb3BzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpc0luZGV4QWN0aXZlXCIsIGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgdmFyIGV4Y2x1c2l2ZSA9IF90aGlzLnByb3BzLmV4Y2x1c2l2ZTtcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IF90aGlzLnN0YXRlLmFjdGl2ZUluZGV4O1xuICAgICAgcmV0dXJuIGV4Y2x1c2l2ZSA/IGFjdGl2ZUluZGV4ID09PSBpbmRleCA6IF9pbmNsdWRlcyhhY3RpdmVJbmRleCwgaW5kZXgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFjY29yZGlvbkFjY29yZGlvbiwgW3tcbiAgICBrZXk6IFwiZ2V0SW5pdGlhbEF1dG9Db250cm9sbGVkU3RhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbEF1dG9Db250cm9sbGVkU3RhdGUoX3JlZikge1xuICAgICAgdmFyIGV4Y2x1c2l2ZSA9IF9yZWYuZXhjbHVzaXZlO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWN0aXZlSW5kZXg6IGV4Y2x1c2l2ZSA/IC0xIDogW11cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybklmUHJvcHNBcmVJbnZhbGlkKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybklmUHJvcHNBcmVJbnZhbGlkKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcGFuZWxzID0gX3RoaXMkcHJvcHMucGFuZWxzO1xuICAgICAgdmFyIGNsYXNzZXMgPSBjeCgnYWNjb3JkaW9uJywgY2xhc3NOYW1lKTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoQWNjb3JkaW9uQWNjb3JkaW9uLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEFjY29yZGlvbkFjY29yZGlvbiwgdGhpcy5wcm9wcyk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBfbWFwKHBhbmVscywgZnVuY3Rpb24gKHBhbmVsLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gQWNjb3JkaW9uUGFuZWwuY3JlYXRlKHBhbmVsLCB7XG4gICAgICAgICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICAgICAgICBhY3RpdmU6IF90aGlzMi5pc0luZGV4QWN0aXZlKGluZGV4KSxcbiAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgIG9uVGl0bGVDbGljazogX3RoaXMyLmhhbmRsZVRpdGxlQ2xpY2tcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSkgOiBjaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFjY29yZGlvbkFjY29yZGlvbjtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KEFjY29yZGlvbkFjY29yZGlvbiwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBleGNsdXNpdmU6IHRydWVcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoQWNjb3JkaW9uQWNjb3JkaW9uLCBcImF1dG9Db250cm9sbGVkUHJvcHNcIiwgWydhY3RpdmVJbmRleCddKTtcblxuX2RlZmluZVByb3BlcnR5KEFjY29yZGlvbkFjY29yZGlvbiwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYWN0aXZlSW5kZXhcIiwgXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdEFjdGl2ZUluZGV4XCIsIFwiZXhjbHVzaXZlXCIsIFwib25UaXRsZUNsaWNrXCIsIFwicGFuZWxzXCJdKTtcblxuZXhwb3J0IHsgQWNjb3JkaW9uQWNjb3JkaW9uIGFzIGRlZmF1bHQgfTtcbkFjY29yZGlvbkFjY29yZGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBJbmRleCBvZiB0aGUgY3VycmVudGx5IGFjdGl2ZSBwYW5lbC4gKi9cbiAgYWN0aXZlSW5kZXg6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsnY2hpbGRyZW4nXSksIFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLCBQcm9wVHlwZXMubnVtYmVyXSldKSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBJbml0aWFsIGFjdGl2ZUluZGV4IHZhbHVlLiAqL1xuICBkZWZhdWx0QWN0aXZlSW5kZXg6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsnY2hpbGRyZW4nXSksIFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLCBQcm9wVHlwZXMubnVtYmVyXSldKSxcblxuICAvKiogT25seSBhbGxvdyBvbmUgcGFuZWwgb3BlbiBhdCBhIHRpbWUuICovXG4gIGV4Y2x1c2l2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgcGFuZWwgdGl0bGUgaXMgY2xpY2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBpdGVtIHByb3BzLlxuICAgKi9cbiAgb25UaXRsZUNsaWNrOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2NoaWxkcmVuJ10pLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKiBTaG9ydGhhbmQgYXJyYXkgb2YgcHJvcHMgZm9yIEFjY29yZGlvbi4gKi9cbiAgcGFuZWxzOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ2NoaWxkcmVuJ10pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuICAgIHRpdGxlOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZFxuICB9KSldKVxufSA6IHt9O1xuQWNjb3JkaW9uQWNjb3JkaW9uLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoQWNjb3JkaW9uQWNjb3JkaW9uLCBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgfTtcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFVuaGFuZGxlZFByb3BzLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBBY2NvcmRpb25BY2NvcmRpb24gZnJvbSAnLi9BY2NvcmRpb25BY2NvcmRpb24nO1xuaW1wb3J0IEFjY29yZGlvbkNvbnRlbnQgZnJvbSAnLi9BY2NvcmRpb25Db250ZW50JztcbmltcG9ydCBBY2NvcmRpb25QYW5lbCBmcm9tICcuL0FjY29yZGlvblBhbmVsJztcbmltcG9ydCBBY2NvcmRpb25UaXRsZSBmcm9tICcuL0FjY29yZGlvblRpdGxlJztcbi8qKlxuICogQW4gYWNjb3JkaW9uIGFsbG93cyB1c2VycyB0byB0b2dnbGUgdGhlIGRpc3BsYXkgb2Ygc2VjdGlvbnMgb2YgY29udGVudC5cbiAqL1xuXG5mdW5jdGlvbiBBY2NvcmRpb24ocHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGZsdWlkID0gcHJvcHMuZmx1aWQsXG4gICAgICBpbnZlcnRlZCA9IHByb3BzLmludmVydGVkLFxuICAgICAgc3R5bGVkID0gcHJvcHMuc3R5bGVkO1xuICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIHVzZUtleU9ubHkoZmx1aWQsICdmbHVpZCcpLCB1c2VLZXlPbmx5KGludmVydGVkLCAnaW52ZXJ0ZWQnKSwgdXNlS2V5T25seShzdHlsZWQsICdzdHlsZWQnKSwgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhBY2NvcmRpb24sIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQWNjb3JkaW9uQWNjb3JkaW9uLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSk7XG59XG5cbkFjY29yZGlvbi5oYW5kbGVkUHJvcHMgPSBbXCJjbGFzc05hbWVcIiwgXCJmbHVpZFwiLCBcImludmVydGVkXCIsIFwic3R5bGVkXCJdO1xuQWNjb3JkaW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBGb3JtYXQgdG8gdGFrZSB1cCB0aGUgd2lkdGggb2YgaXRzIGNvbnRhaW5lci4gKi9cbiAgZmx1aWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBGb3JtYXQgZm9yIGRhcmsgYmFja2dyb3VuZHMuICovXG4gIGludmVydGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQWRkcyBzb21lIGJhc2ljIHN0eWxpbmcgdG8gYWNjb3JkaW9uIHBhbmVscy4gKi9cbiAgc3R5bGVkOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuQWNjb3JkaW9uLkFjY29yZGlvbiA9IEFjY29yZGlvbkFjY29yZGlvbjtcbkFjY29yZGlvbi5Db250ZW50ID0gQWNjb3JkaW9uQ29udGVudDtcbkFjY29yZGlvbi5QYW5lbCA9IEFjY29yZGlvblBhbmVsO1xuQWNjb3JkaW9uLlRpdGxlID0gQWNjb3JkaW9uVGl0bGU7XG5leHBvcnQgZGVmYXVsdCBBY2NvcmRpb247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBdXRvQ29udHJvbGxlZENvbXBvbmVudCBhcyBDb21wb25lbnQsIGNoaWxkcmVuVXRpbHMsIGNyZWF0ZUhUTUxJZnJhbWUsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL2VsZW1lbnRzL0ljb24nO1xuLyoqXG4gKiBBbiBlbWJlZCBkaXNwbGF5cyBjb250ZW50IGZyb20gb3RoZXIgd2Vic2l0ZXMgbGlrZSBZb3VUdWJlIHZpZGVvcyBvciBHb29nbGUgTWFwcy5cbiAqL1xuXG52YXIgRW1iZWQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEVtYmVkLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBFbWJlZCgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFbWJlZCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihFbWJlZCkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgb25DbGljayA9IF90aGlzLnByb3BzLm9uQ2xpY2s7XG4gICAgICB2YXIgYWN0aXZlID0gX3RoaXMuc3RhdGUuYWN0aXZlO1xuICAgICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZSwgX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMsIHtcbiAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICB9KSk7XG4gICAgICBpZiAoIWFjdGl2ZSkgX3RoaXMudHJ5U2V0U3RhdGUoe1xuICAgICAgICBhY3RpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVtYmVkLCBbe1xuICAgIGtleTogXCJnZXRTcmNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3JjKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBfdGhpcyRwcm9wcyRhdXRvcGxheSA9IF90aGlzJHByb3BzLmF1dG9wbGF5LFxuICAgICAgICAgIGF1dG9wbGF5ID0gX3RoaXMkcHJvcHMkYXV0b3BsYXkgPT09IHZvaWQgMCA/IHRydWUgOiBfdGhpcyRwcm9wcyRhdXRvcGxheSxcbiAgICAgICAgICBfdGhpcyRwcm9wcyRicmFuZGVkVUkgPSBfdGhpcyRwcm9wcy5icmFuZGVkVUksXG4gICAgICAgICAgYnJhbmRlZFVJID0gX3RoaXMkcHJvcHMkYnJhbmRlZFVJID09PSB2b2lkIDAgPyBmYWxzZSA6IF90aGlzJHByb3BzJGJyYW5kZWRVSSxcbiAgICAgICAgICBfdGhpcyRwcm9wcyRjb2xvciA9IF90aGlzJHByb3BzLmNvbG9yLFxuICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICcjNDQ0NDQ0JyA6IF90aGlzJHByb3BzJGNvbG9yLFxuICAgICAgICAgIF90aGlzJHByb3BzJGhkID0gX3RoaXMkcHJvcHMuaGQsXG4gICAgICAgICAgaGQgPSBfdGhpcyRwcm9wcyRoZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF90aGlzJHByb3BzJGhkLFxuICAgICAgICAgIGlkID0gX3RoaXMkcHJvcHMuaWQsXG4gICAgICAgICAgc291cmNlID0gX3RoaXMkcHJvcHMuc291cmNlLFxuICAgICAgICAgIHVybCA9IF90aGlzJHByb3BzLnVybDtcblxuICAgICAgaWYgKHNvdXJjZSA9PT0gJ3lvdXR1YmUnKSB7XG4gICAgICAgIHJldHVybiBbXCIvL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9cIi5jb25jYXQoaWQpLCAnP2F1dG9oaWRlPXRydWUnLCBcIiZhbXA7YXV0b3BsYXk9XCIuY29uY2F0KGF1dG9wbGF5KSwgXCImYW1wO2NvbG9yPVwiLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoY29sb3IpKSwgXCImYW1wO2hxPVwiLmNvbmNhdChoZCksICcmYW1wO2pzYXBpPWZhbHNlJywgXCImYW1wO21vZGVzdGJyYW5kaW5nPVwiLmNvbmNhdChicmFuZGVkVUkpLCBcIiZhbXA7cmVsPVwiLmNvbmNhdChicmFuZGVkVUkgPyAwIDogMSldLmpvaW4oJycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc291cmNlID09PSAndmltZW8nKSB7XG4gICAgICAgIHJldHVybiBbXCIvL3BsYXllci52aW1lby5jb20vdmlkZW8vXCIuY29uY2F0KGlkKSwgJz9hcGk9ZmFsc2UnLCBcIiZhbXA7YXV0b3BsYXk9XCIuY29uY2F0KGF1dG9wbGF5KSwgJyZhbXA7YnlsaW5lPWZhbHNlJywgXCImYW1wO2NvbG9yPVwiLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoY29sb3IpKSwgJyZhbXA7cG9ydHJhaXQ9ZmFsc2UnLCAnJmFtcDt0aXRsZT1mYWxzZSddLmpvaW4oJycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYXNwZWN0UmF0aW8gPSBfdGhpcyRwcm9wczIuYXNwZWN0UmF0aW8sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBpY29uID0gX3RoaXMkcHJvcHMyLmljb24sXG4gICAgICAgICAgcGxhY2Vob2xkZXIgPSBfdGhpcyRwcm9wczIucGxhY2Vob2xkZXI7XG4gICAgICB2YXIgYWN0aXZlID0gdGhpcy5zdGF0ZS5hY3RpdmU7XG4gICAgICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIGFzcGVjdFJhdGlvLCB1c2VLZXlPbmx5KGFjdGl2ZSwgJ2FjdGl2ZScpLCAnZW1iZWQnLCBjbGFzc05hbWUpO1xuICAgICAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhFbWJlZCwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShFbWJlZCwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgaWNvblNob3J0aGFuZCA9IGljb24gIT09IHVuZGVmaW5lZCA/IGljb24gOiAndmlkZW8gcGxheSc7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrXG4gICAgICB9KSwgSWNvbi5jcmVhdGUoaWNvblNob3J0aGFuZCwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KSwgcGxhY2Vob2xkZXIgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJwbGFjZWhvbGRlclwiLFxuICAgICAgICBzcmM6IHBsYWNlaG9sZGVyXG4gICAgICB9KSwgdGhpcy5yZW5kZXJFbWJlZCgpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyRW1iZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRW1iZWQoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMy5jaGlsZHJlbixcbiAgICAgICAgICBjb250ZW50ID0gX3RoaXMkcHJvcHMzLmNvbnRlbnQsXG4gICAgICAgICAgaWZyYW1lID0gX3RoaXMkcHJvcHMzLmlmcmFtZSxcbiAgICAgICAgICBzb3VyY2UgPSBfdGhpcyRwcm9wczMuc291cmNlO1xuICAgICAgdmFyIGFjdGl2ZSA9IHRoaXMuc3RhdGUuYWN0aXZlO1xuICAgICAgaWYgKCFhY3RpdmUpIHJldHVybiBudWxsO1xuICAgICAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSkgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiZW1iZWRcIlxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgICAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNvbnRlbnQpKSByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJlbWJlZFwiXG4gICAgICB9LCBjb250ZW50KTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImVtYmVkXCJcbiAgICAgIH0sIGNyZWF0ZUhUTUxJZnJhbWUoY2hpbGRyZW5VdGlscy5pc05pbChpZnJhbWUpID8gdGhpcy5nZXRTcmMoKSA6IGlmcmFtZSwge1xuICAgICAgICBkZWZhdWx0UHJvcHM6IHtcbiAgICAgICAgICBhbGxvd0Z1bGxTY3JlZW46IGZhbHNlLFxuICAgICAgICAgIGZyYW1lQm9yZGVyOiAwLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIHNjcm9sbGluZzogJ25vJyxcbiAgICAgICAgICBzcmM6IHRoaXMuZ2V0U3JjKCksXG4gICAgICAgICAgdGl0bGU6IFwiRW1iZWRkZWQgY29udGVudCBmcm9tIFwiLmNvbmNhdChzb3VyY2UsIFwiLlwiKSxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnXG4gICAgICAgIH0sXG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRW1iZWQ7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShFbWJlZCwgXCJhdXRvQ29udHJvbGxlZFByb3BzXCIsIFsnYWN0aXZlJ10pO1xuXG5fZGVmaW5lUHJvcGVydHkoRW1iZWQsIFwiaGFuZGxlZFByb3BzXCIsIFtcImFjdGl2ZVwiLCBcImFzXCIsIFwiYXNwZWN0UmF0aW9cIiwgXCJhdXRvcGxheVwiLCBcImJyYW5kZWRVSVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb250ZW50XCIsIFwiZGVmYXVsdEFjdGl2ZVwiLCBcImhkXCIsIFwiaWNvblwiLCBcImlkXCIsIFwiaWZyYW1lXCIsIFwib25DbGlja1wiLCBcInBsYWNlaG9sZGVyXCIsIFwic291cmNlXCIsIFwidXJsXCJdKTtcblxuZXhwb3J0IHsgRW1iZWQgYXMgZGVmYXVsdCB9O1xuRW1iZWQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQW4gZW1iZWQgY2FuIGJlIGFjdGl2ZS4gKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQW4gZW1iZWQgY2FuIHNwZWNpZnkgYW4gYWx0ZXJuYXRpdmUgYXNwZWN0IHJhdGlvLiAqL1xuICBhc3BlY3RSYXRpbzogUHJvcFR5cGVzLm9uZU9mKFsnNDozJywgJzE2OjknLCAnMjE6OSddKSxcblxuICAvKiogU2V0dGluZyB0byB0cnVlIG9yIGZhbHNlIHdpbGwgZm9yY2UgYXV0b3BsYXkuICovXG4gIGF1dG9wbGF5OiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kZW1hbmQoWydzb3VyY2UnXSksIFByb3BUeXBlcy5ib29sXSksXG5cbiAgLyoqIFdoZXRoZXIgdG8gc2hvdyBuZXR3b3JrcyBicmFuZGVkIFVJIGxpa2UgdGl0bGUgY2FyZHMsIG9yIGFmdGVyIHZpZGVvIGNhbGxzIHRvIGFjdGlvbi4gKi9cbiAgYnJhbmRlZFVJOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kZW1hbmQoWydzb3VyY2UnXSksIFByb3BUeXBlcy5ib29sXSksXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU3BlY2lmaWVzIGEgZGVmYXVsdCBjaHJvbWUgY29sb3Igd2l0aCBWaW1lbyBvciBZb3VUdWJlLiAqL1xuICBjb2xvcjogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtjdXN0b21Qcm9wVHlwZXMuZGVtYW5kKFsnc291cmNlJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogSW5pdGlhbCB2YWx1ZSBvZiBhY3RpdmUuICovXG4gIGRlZmF1bHRBY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBXaGV0aGVyIHRvIHByZWZlciBIRCBjb250ZW50LiAqL1xuICBoZDogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtjdXN0b21Qcm9wVHlwZXMuZGVtYW5kKFsnc291cmNlJ10pLCBQcm9wVHlwZXMuYm9vbF0pLFxuXG4gIC8qKiBTcGVjaWZpZXMgYW4gaWNvbiB0byB1c2Ugd2l0aCBwbGFjZWhvbGRlciBjb250ZW50LiAqL1xuICBpY29uOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogU3BlY2lmaWVzIGFuIGlkIGZvciBzb3VyY2UuICovXG4gIGlkOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kZW1hbmQoWydzb3VyY2UnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKiogU2hvcnRoYW5kIGZvciBIVE1MIGlmcmFtZS4gKi9cbiAgaWZyYW1lOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kZW1hbmQoWydzb3VyY2UnXSksIGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kXSksXG5cbiAgLyoqXG4gICAqINChYWxsZWQgb24gY2xpY2suXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMgYW5kIHByb3Bvc2VkIHZhbHVlLlxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqIEEgcGxhY2Vob2xkZXIgaW1hZ2UgZm9yIGVtYmVkLiAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU3BlY2lmaWVzIGEgc291cmNlIHRvIHVzZS4gKi9cbiAgc291cmNlOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ3NvdXJjZVVybCddKSwgUHJvcFR5cGVzLm9uZU9mKFsneW91dHViZScsICd2aW1lbyddKV0pLFxuXG4gIC8qKiBTcGVjaWZpZXMgYSB1cmwgdG8gdXNlIGZvciBlbWJlZC4gKi9cbiAgdXJsOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ3NvdXJjZSddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDoge307IiwiaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuZXhwb3J0IHZhciBNYW5hZ2VyUmVmZXJlbmNlTm9kZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG5leHBvcnQgdmFyIE1hbmFnZXJSZWZlcmVuY2VOb2RlU2V0dGVyQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcblxudmFyIE1hbmFnZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWFuYWdlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWFuYWdlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZWZlcmVuY2VOb2RlXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0UmVmZXJlbmNlTm9kZVwiLCBmdW5jdGlvbiAobmV3UmVmZXJlbmNlTm9kZSkge1xuICAgICAgaWYgKG5ld1JlZmVyZW5jZU5vZGUgJiYgX3RoaXMucmVmZXJlbmNlTm9kZSAhPT0gbmV3UmVmZXJlbmNlTm9kZSkge1xuICAgICAgICBfdGhpcy5yZWZlcmVuY2VOb2RlID0gbmV3UmVmZXJlbmNlTm9kZTtcblxuICAgICAgICBfdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucmVmZXJlbmNlTm9kZSA9IG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChNYW5hZ2VyUmVmZXJlbmNlTm9kZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnJlZmVyZW5jZU5vZGVcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KE1hbmFnZXJSZWZlcmVuY2VOb2RlU2V0dGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc2V0UmVmZXJlbmNlTm9kZVxuICAgIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gTWFuYWdlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IHsgTWFuYWdlciBhcyBkZWZhdWx0IH07IiwiLyoqXG4gKiBUYWtlcyBhbiBhcmd1bWVudCBhbmQgaWYgaXQncyBhbiBhcnJheSwgcmV0dXJucyB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgYXJyYXksXG4gKiBvdGhlcndpc2UgcmV0dXJucyB0aGUgYXJndW1lbnQuIFVzZWQgZm9yIFByZWFjdCBjb21wYXRpYmlsaXR5LlxuICovXG5leHBvcnQgdmFyIHVud3JhcEFycmF5ID0gZnVuY3Rpb24gdW53cmFwQXJyYXkoYXJnKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyZykgPyBhcmdbMF0gOiBhcmc7XG59O1xuLyoqXG4gKiBUYWtlcyBhIG1heWJlLXVuZGVmaW5lZCBmdW5jdGlvbiBhbmQgYXJiaXRyYXJ5IGFyZ3MgYW5kIGludm9rZXMgdGhlIGZ1bmN0aW9uXG4gKiBvbmx5IGlmIGl0IGlzIGRlZmluZWQuXG4gKi9cblxuZXhwb3J0IHZhciBzYWZlSW52b2tlID0gZnVuY3Rpb24gc2FmZUludm9rZShmbikge1xuICBpZiAodHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm4uYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgfVxufTtcbi8qKlxuICogRG9lcyBhIHNoYWxsb3cgZXF1YWxpdHkgY2hlY2sgb2YgdHdvIG9iamVjdHMgYnkgY29tcGFyaW5nIHRoZSByZWZlcmVuY2VcbiAqIGVxdWFsaXR5IG9mIGVhY2ggdmFsdWUuXG4gKi9cblxuZXhwb3J0IHZhciBzaGFsbG93RXF1YWwgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGJLZXlzLmxlbmd0aCAhPT0gYUtleXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBhS2V5c1tpXTtcblxuICAgIGlmIChvYmpBW2tleV0gIT09IG9iakJba2V5XSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogU2V0cyBhIHJlZiB1c2luZyBlaXRoZXIgYSByZWYgY2FsbGJhY2sgb3IgYSByZWYgb2JqZWN0XG4gKi9cblxuZXhwb3J0IHZhciBzZXRSZWYgPSBmdW5jdGlvbiBzZXRSZWYocmVmLCBub2RlKSB7XG4gIC8vIGlmIGl0cyBhIGZ1bmN0aW9uIGNhbGwgaXRcbiAgaWYgKHR5cGVvZiByZWYgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBzYWZlSW52b2tlKHJlZiwgbm9kZSk7XG4gIH0gLy8gb3RoZXJ3aXNlIHdlIHNob3VsZCB0cmVhdCBpdCBhcyBhIHJlZiBvYmplY3RcbiAgZWxzZSBpZiAocmVmICE9IG51bGwpIHtcbiAgICAgIHJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICB9XG59OyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IGRlZXBFcXVhbCBmcm9tIFwiZGVlcC1lcXVhbFwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFBvcHBlckpTIGZyb20gJ3BvcHBlci5qcyc7XG5pbXBvcnQgeyBNYW5hZ2VyUmVmZXJlbmNlTm9kZUNvbnRleHQgfSBmcm9tICcuL01hbmFnZXInO1xuaW1wb3J0IHsgdW53cmFwQXJyYXksIHNldFJlZiwgc2hhbGxvd0VxdWFsIH0gZnJvbSAnLi91dGlscyc7XG52YXIgaW5pdGlhbFN0eWxlID0ge1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBvcGFjaXR5OiAwLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbn07XG52YXIgaW5pdGlhbEFycm93U3R5bGUgPSB7fTtcbmV4cG9ydCB2YXIgSW5uZXJQb3BwZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW5uZXJQb3BwZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIElubmVyUG9wcGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgIHBsYWNlbWVudDogdW5kZWZpbmVkXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicG9wcGVySW5zdGFuY2VcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwb3BwZXJOb2RlXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImFycm93Tm9kZVwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRQb3BwZXJOb2RlXCIsIGZ1bmN0aW9uIChwb3BwZXJOb2RlKSB7XG4gICAgICBpZiAoIXBvcHBlck5vZGUgfHwgX3RoaXMucG9wcGVyTm9kZSA9PT0gcG9wcGVyTm9kZSkgcmV0dXJuO1xuICAgICAgc2V0UmVmKF90aGlzLnByb3BzLmlubmVyUmVmLCBwb3BwZXJOb2RlKTtcbiAgICAgIF90aGlzLnBvcHBlck5vZGUgPSBwb3BwZXJOb2RlO1xuXG4gICAgICBfdGhpcy51cGRhdGVQb3BwZXJJbnN0YW5jZSgpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNldEFycm93Tm9kZVwiLCBmdW5jdGlvbiAoYXJyb3dOb2RlKSB7XG4gICAgICBfdGhpcy5hcnJvd05vZGUgPSBhcnJvd05vZGU7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwidXBkYXRlU3RhdGVNb2RpZmllclwiLCB7XG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgb3JkZXI6IDkwMCxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihkYXRhKSB7XG4gICAgICAgIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcblxuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRPcHRpb25zXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBsYWNlbWVudDogX3RoaXMucHJvcHMucGxhY2VtZW50LFxuICAgICAgICBldmVudHNFbmFibGVkOiBfdGhpcy5wcm9wcy5ldmVudHNFbmFibGVkLFxuICAgICAgICBwb3NpdGlvbkZpeGVkOiBfdGhpcy5wcm9wcy5wb3NpdGlvbkZpeGVkLFxuICAgICAgICBtb2RpZmllcnM6IF9leHRlbmRzKHt9LCBfdGhpcy5wcm9wcy5tb2RpZmllcnMsIHtcbiAgICAgICAgICBhcnJvdzogX2V4dGVuZHMoe30sIF90aGlzLnByb3BzLm1vZGlmaWVycyAmJiBfdGhpcy5wcm9wcy5tb2RpZmllcnMuYXJyb3csIHtcbiAgICAgICAgICAgIGVuYWJsZWQ6ICEhX3RoaXMuYXJyb3dOb2RlLFxuICAgICAgICAgICAgZWxlbWVudDogX3RoaXMuYXJyb3dOb2RlXG4gICAgICAgICAgfSksXG4gICAgICAgICAgYXBwbHlTdHlsZToge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVwZGF0ZVN0YXRlTW9kaWZpZXI6IF90aGlzLnVwZGF0ZVN0YXRlTW9kaWZpZXJcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0UG9wcGVyU3R5bGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICFfdGhpcy5wb3BwZXJOb2RlIHx8ICFfdGhpcy5zdGF0ZS5kYXRhID8gaW5pdGlhbFN0eWxlIDogX2V4dGVuZHMoe1xuICAgICAgICBwb3NpdGlvbjogX3RoaXMuc3RhdGUuZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvblxuICAgICAgfSwgX3RoaXMuc3RhdGUuZGF0YS5zdHlsZXMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFBvcHBlclBsYWNlbWVudFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gIV90aGlzLnN0YXRlLmRhdGEgPyB1bmRlZmluZWQgOiBfdGhpcy5zdGF0ZS5wbGFjZW1lbnQ7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0QXJyb3dTdHlsZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gIV90aGlzLmFycm93Tm9kZSB8fCAhX3RoaXMuc3RhdGUuZGF0YSA/IGluaXRpYWxBcnJvd1N0eWxlIDogX3RoaXMuc3RhdGUuZGF0YS5hcnJvd1N0eWxlcztcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRPdXRPZkJvdW5kYXJpZXNTdGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuc3RhdGUuZGF0YSA/IF90aGlzLnN0YXRlLmRhdGEuaGlkZSA6IHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJkZXN0cm95UG9wcGVySW5zdGFuY2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5wb3BwZXJJbnN0YW5jZSkgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5wb3BwZXJJbnN0YW5jZS5kZXN0cm95KCk7XG5cbiAgICAgIF90aGlzLnBvcHBlckluc3RhbmNlID0gbnVsbDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1cGRhdGVQb3BwZXJJbnN0YW5jZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5kZXN0cm95UG9wcGVySW5zdGFuY2UoKTtcblxuICAgICAgdmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZSA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLFxuICAgICAgICAgIHBvcHBlck5vZGUgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemUucG9wcGVyTm9kZTtcblxuICAgICAgdmFyIHJlZmVyZW5jZUVsZW1lbnQgPSBfdGhpcy5wcm9wcy5yZWZlcmVuY2VFbGVtZW50O1xuICAgICAgaWYgKCFyZWZlcmVuY2VFbGVtZW50IHx8ICFwb3BwZXJOb2RlKSByZXR1cm47XG4gICAgICBfdGhpcy5wb3BwZXJJbnN0YW5jZSA9IG5ldyBQb3BwZXJKUyhyZWZlcmVuY2VFbGVtZW50LCBwb3BwZXJOb2RlLCBfdGhpcy5nZXRPcHRpb25zKCkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNjaGVkdWxlVXBkYXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgICBfdGhpcy5wb3BwZXJJbnN0YW5jZS5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IElubmVyUG9wcGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgLy8gSWYgdGhlIFBvcHBlci5qcyBvcHRpb25zIGhhdmUgY2hhbmdlZCwgdXBkYXRlIHRoZSBpbnN0YW5jZSAoZGVzdHJveSArIGNyZWF0ZSlcbiAgICBpZiAodGhpcy5wcm9wcy5wbGFjZW1lbnQgIT09IHByZXZQcm9wcy5wbGFjZW1lbnQgfHwgdGhpcy5wcm9wcy5yZWZlcmVuY2VFbGVtZW50ICE9PSBwcmV2UHJvcHMucmVmZXJlbmNlRWxlbWVudCB8fCB0aGlzLnByb3BzLnBvc2l0aW9uRml4ZWQgIT09IHByZXZQcm9wcy5wb3NpdGlvbkZpeGVkIHx8ICFkZWVwRXF1YWwodGhpcy5wcm9wcy5tb2RpZmllcnMsIHByZXZQcm9wcy5tb2RpZmllcnMsIHtcbiAgICAgIHN0cmljdDogdHJ1ZVxuICAgIH0pKSB7XG4gICAgICAvLyBkZXZlbG9wIG9ubHkgY2hlY2sgdGhhdCBtb2RpZmllcnMgaXNuJ3QgYmVpbmcgdXBkYXRlZCBuZWVkbGVzc2x5XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RpZmllcnMgIT09IHByZXZQcm9wcy5tb2RpZmllcnMgJiYgdGhpcy5wcm9wcy5tb2RpZmllcnMgIT0gbnVsbCAmJiBwcmV2UHJvcHMubW9kaWZpZXJzICE9IG51bGwgJiYgc2hhbGxvd0VxdWFsKHRoaXMucHJvcHMubW9kaWZpZXJzLCBwcmV2UHJvcHMubW9kaWZpZXJzKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIidtb2RpZmllcnMnIHByb3AgcmVmZXJlbmNlIHVwZGF0ZWQgZXZlbiB0aG91Z2ggYWxsIHZhbHVlcyBhcHBlYXIgdGhlIHNhbWUuXFxuQ29uc2lkZXIgbWVtb2l6aW5nIHRoZSAnbW9kaWZpZXJzJyBvYmplY3QgdG8gYXZvaWQgbmVlZGxlc3MgcmVuZGVyaW5nLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnVwZGF0ZVBvcHBlckluc3RhbmNlKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmV2ZW50c0VuYWJsZWQgIT09IHByZXZQcm9wcy5ldmVudHNFbmFibGVkICYmIHRoaXMucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIHRoaXMucHJvcHMuZXZlbnRzRW5hYmxlZCA/IHRoaXMucG9wcGVySW5zdGFuY2UuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSA6IHRoaXMucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBBIHBsYWNlbWVudCBkaWZmZXJlbmNlIGluIHN0YXRlIG1lYW5zIHBvcHBlciBkZXRlcm1pbmVkIGEgbmV3IHBsYWNlbWVudFxuICAgIC8vIGFwYXJ0IGZyb20gdGhlIHByb3BzIHZhbHVlLiBCeSB0aGUgdGltZSB0aGUgcG9wcGVyIGVsZW1lbnQgaXMgcmVuZGVyZWQgd2l0aFxuICAgIC8vIHRoZSBuZXcgcG9zaXRpb24gUG9wcGVyIGhhcyBhbHJlYWR5IG1lYXN1cmVkIGl0LCBpZiB0aGUgcGxhY2UgY2hhbmdlIHRyaWdnZXJzXG4gICAgLy8gYSBzaXplIGNoYW5nZSBpdCB3aWxsIHJlc3VsdCBpbiBhIG1pc2FsaWduZWQgcG9wcGVyLiBTbyB3ZSBzY2hlZHVsZSBhbiB1cGRhdGUgdG8gYmUgc3VyZS5cblxuXG4gICAgaWYgKHByZXZTdGF0ZS5wbGFjZW1lbnQgIT09IHRoaXMuc3RhdGUucGxhY2VtZW50KSB7XG4gICAgICB0aGlzLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHNldFJlZih0aGlzLnByb3BzLmlubmVyUmVmLCBudWxsKTtcbiAgICB0aGlzLmRlc3Ryb3lQb3BwZXJJbnN0YW5jZSgpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHVud3JhcEFycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pKHtcbiAgICAgIHJlZjogdGhpcy5zZXRQb3BwZXJOb2RlLFxuICAgICAgc3R5bGU6IHRoaXMuZ2V0UG9wcGVyU3R5bGUoKSxcbiAgICAgIHBsYWNlbWVudDogdGhpcy5nZXRQb3BwZXJQbGFjZW1lbnQoKSxcbiAgICAgIG91dE9mQm91bmRhcmllczogdGhpcy5nZXRPdXRPZkJvdW5kYXJpZXNTdGF0ZSgpLFxuICAgICAgc2NoZWR1bGVVcGRhdGU6IHRoaXMuc2NoZWR1bGVVcGRhdGUsXG4gICAgICBhcnJvd1Byb3BzOiB7XG4gICAgICAgIHJlZjogdGhpcy5zZXRBcnJvd05vZGUsXG4gICAgICAgIHN0eWxlOiB0aGlzLmdldEFycm93U3R5bGUoKVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBJbm5lclBvcHBlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KElubmVyUG9wcGVyLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG4gIHJlZmVyZW5jZUVsZW1lbnQ6IHVuZGVmaW5lZCxcbiAgcG9zaXRpb25GaXhlZDogZmFsc2Vcbn0pO1xuXG52YXIgcGxhY2VtZW50cyA9IFBvcHBlckpTLnBsYWNlbWVudHM7XG5leHBvcnQgeyBwbGFjZW1lbnRzIH07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQb3BwZXIoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlRWxlbWVudCA9IF9yZWYucmVmZXJlbmNlRWxlbWVudCxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wicmVmZXJlbmNlRWxlbWVudFwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWFuYWdlclJlZmVyZW5jZU5vZGVDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAocmVmZXJlbmNlTm9kZSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KElubmVyUG9wcGVyLCBfZXh0ZW5kcyh7XG4gICAgICByZWZlcmVuY2VFbGVtZW50OiByZWZlcmVuY2VFbGVtZW50ICE9PSB1bmRlZmluZWQgPyByZWZlcmVuY2VFbGVtZW50IDogcmVmZXJlbmNlTm9kZVxuICAgIH0sIHByb3BzKSk7XG4gIH0pO1xufSIsImltcG9ydCBfaW52ZXJ0IGZyb20gXCJsb2Rhc2gvaW52ZXJ0XCI7XG5pbXBvcnQgX2tleXMgZnJvbSBcImxvZGFzaC9rZXlzXCI7XG5leHBvcnQgdmFyIHBvc2l0aW9uc01hcHBpbmcgPSB7XG4gICd0b3AgY2VudGVyJzogJ3RvcCcsXG4gICd0b3AgbGVmdCc6ICd0b3Atc3RhcnQnLFxuICAndG9wIHJpZ2h0JzogJ3RvcC1lbmQnLFxuICAnYm90dG9tIGNlbnRlcic6ICdib3R0b20nLFxuICAnYm90dG9tIGxlZnQnOiAnYm90dG9tLXN0YXJ0JyxcbiAgJ2JvdHRvbSByaWdodCc6ICdib3R0b20tZW5kJyxcbiAgJ3JpZ2h0IGNlbnRlcic6ICdyaWdodCcsXG4gICdsZWZ0IGNlbnRlcic6ICdsZWZ0J1xufTtcbmV4cG9ydCB2YXIgcG9zaXRpb25zID0gX2tleXMocG9zaXRpb25zTWFwcGluZyk7XG5leHBvcnQgdmFyIHBsYWNlbWVudE1hcHBpbmcgPSBfaW52ZXJ0KHBvc2l0aW9uc01hcHBpbmcpOyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfbWVtb2l6ZSBmcm9tIFwibG9kYXNoL21lbW9pemVcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgeyBpc1JlZk9iamVjdCwgdG9SZWZPYmplY3QgfSBmcm9tICdAc3RhcmR1c3QtdWkvcmVhY3QtY29tcG9uZW50LXJlZic7XG5cbnZhciBSZWZlcmVuY2VQcm94eSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlZmVyZW5jZVByb3h5KHJlZk9iamVjdCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWZlcmVuY2VQcm94eSk7XG5cbiAgICB0aGlzLnJlZiA9IHJlZk9iamVjdDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZWZlcmVuY2VQcm94eSwgW3tcbiAgICBrZXk6IFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIHtcbiAgICAgIHJldHVybiBfaW52b2tlKHRoaXMucmVmLmN1cnJlbnQsICdnZXRCb3VuZGluZ0NsaWVudFJlY3QnLCB7fSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsaWVudFdpZHRoXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xpZW50SGVpZ2h0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBhcmVudE5vZGVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZi5jdXJyZW50ID8gdGhpcy5yZWYuY3VycmVudC5wYXJlbnROb2RlIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZWZlcmVuY2VQcm94eTtcbn0oKTtcbi8qKlxuICogUG9wcGVyLmpzIGRvZXMgbm90IHN1cHBvcnQgcmVmIG9iamVjdHMgZnJvbSBgY3JlYXRlUmVmKClgIGFzIHJlZmVyZW5jZUVsZW1lbnQuIElmIHdlIHdpbGwgcGFzc1xuICogZGlyZWN0bHkgYHJlZmAsIGByZWYuY3VycmVudGAgd2lsbCBiZSBgbnVsbGAgYXQgdGhlIHJlbmRlciBwcm9jZXNzLiBXZSB1c2UgbWVtb2l6ZSB0byBrZWVwIHRoZVxuICogc2FtZSByZWZlcmVuY2UgYmV0d2VlbiByZW5kZXJzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9wb3BwZXIuanMub3JnL3BvcHBlci1kb2N1bWVudGF0aW9uLmh0bWwjcmVmZXJlbmNlT2JqZWN0XG4gKi9cblxuXG52YXIgY3JlYXRlUmVmZXJlbmNlUHJveHkgPSBfbWVtb2l6ZShmdW5jdGlvbiAocmVmZXJlbmNlKSB7XG4gIHJldHVybiBuZXcgUmVmZXJlbmNlUHJveHkoaXNSZWZPYmplY3QocmVmZXJlbmNlKSA/IHJlZmVyZW5jZSA6IHRvUmVmT2JqZWN0KHJlZmVyZW5jZSkpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVJlZmVyZW5jZVByb3h5OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGNyZWF0ZVNob3J0aGFuZEZhY3RvcnksIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBQb3B1cENvbnRlbnQgZGlzcGxheXMgdGhlIGNvbnRlbnQgYm9keSBvZiBhIFBvcG92ZXIuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUG9wdXBDb250ZW50KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQ7XG4gIHZhciBjbGFzc2VzID0gY3goJ2NvbnRlbnQnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFBvcHVwQ29udGVudCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShQb3B1cENvbnRlbnQsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5Qb3B1cENvbnRlbnQuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5Qb3B1cENvbnRlbnQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogVGhlIGNvbnRlbnQgb2YgdGhlIFBvcHVwICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQ2xhc3NlcyB0byBhZGQgdG8gdGhlIFBvcHVwIGNvbnRlbnQgY2xhc3NOYW1lLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZFxufSA6IHt9O1xuUG9wdXBDb250ZW50LmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoUG9wdXBDb250ZW50LCBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfTtcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGNyZWF0ZVNob3J0aGFuZEZhY3RvcnksIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBQb3B1cEhlYWRlciBkaXNwbGF5cyBhIGhlYWRlciBpbiBhIFBvcG92ZXIuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUG9wdXBIZWFkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudDtcbiAgdmFyIGNsYXNzZXMgPSBjeCgnaGVhZGVyJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhQb3B1cEhlYWRlciwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShQb3B1cEhlYWRlciwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblBvcHVwSGVhZGVyLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCJdO1xuUG9wdXBIZWFkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmRcbn0gOiB7fTtcblBvcHVwSGVhZGVyLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoUG9wdXBIZWFkZXIsIGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICByZXR1cm4ge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9O1xufSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9pc05pbCBmcm9tIFwibG9kYXNoL2lzTmlsXCI7XG5pbXBvcnQgX21lcmdlIGZyb20gXCJsb2Rhc2gvbWVyZ2VcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgX2lzQXJyYXkgZnJvbSBcImxvZGFzaC9pc0FycmF5XCI7XG5pbXBvcnQgX3BpY2sgZnJvbSBcImxvZGFzaC9waWNrXCI7XG5pbXBvcnQgX2luY2x1ZGVzIGZyb20gXCJsb2Rhc2gvaW5jbHVkZXNcIjtcbmltcG9ydCBfcmVkdWNlIGZyb20gXCJsb2Rhc2gvcmVkdWNlXCI7XG5pbXBvcnQgX3dpdGhvdXQgZnJvbSBcImxvZGFzaC93aXRob3V0XCI7XG5pbXBvcnQgRXZlbnRTdGFjayBmcm9tICdAc2VtYW50aWMtdWktcmVhY3QvZXZlbnQtc3RhY2snO1xuaW1wb3J0IHsgUmVmIH0gZnJvbSAnQHN0YXJkdXN0LXVpL3JlYWN0LWNvbXBvbmVudC1yZWYnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIGNyZWF0ZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBvcHBlciB9IGZyb20gJ3JlYWN0LXBvcHBlcic7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJ3NoYWxsb3dlcXVhbCc7XG5pbXBvcnQgeyBldmVudFN0YWNrLCBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VLZXlPclZhbHVlQW5kS2V5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vLi4vYWRkb25zL1BvcnRhbCc7XG5pbXBvcnQgeyBwbGFjZW1lbnRNYXBwaW5nLCBwb3NpdGlvbnMsIHBvc2l0aW9uc01hcHBpbmcgfSBmcm9tICcuL2xpYi9wb3NpdGlvbnMnO1xuaW1wb3J0IGNyZWF0ZVJlZmVyZW5jZVByb3h5IGZyb20gJy4vbGliL2NyZWF0ZVJlZmVyZW5jZVByb3h5JztcbmltcG9ydCBQb3B1cENvbnRlbnQgZnJvbSAnLi9Qb3B1cENvbnRlbnQnO1xuaW1wb3J0IFBvcHVwSGVhZGVyIGZyb20gJy4vUG9wdXBIZWFkZXInO1xuXG4vKipcbiAqIEEgUG9wdXAgZGlzcGxheXMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBvbiB0b3Agb2YgYSBwYWdlLlxuICovXG52YXIgUG9wdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBvcHVwLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3B1cCgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3B1cCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihQb3B1cCkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHt9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvcGVuXCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ0cmlnZ2VyUmVmXCIsIGNyZWF0ZVJlZigpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRQb3J0YWxQcm9wc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcG9ydGFsUHJvcHMgPSB7fTtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIG9uID0gX3RoaXMkcHJvcHMub24sXG4gICAgICAgICAgaG92ZXJhYmxlID0gX3RoaXMkcHJvcHMuaG92ZXJhYmxlO1xuICAgICAgdmFyIG5vcm1hbGl6ZWRPbiA9IF9pc0FycmF5KG9uKSA/IG9uIDogW29uXTtcblxuICAgICAgaWYgKGhvdmVyYWJsZSkge1xuICAgICAgICBwb3J0YWxQcm9wcy5jbG9zZU9uUG9ydGFsTW91c2VMZWF2ZSA9IHRydWU7XG4gICAgICAgIHBvcnRhbFByb3BzLm1vdXNlTGVhdmVEZWxheSA9IDMwMDtcbiAgICAgIH1cblxuICAgICAgaWYgKF9pbmNsdWRlcyhub3JtYWxpemVkT24sICdob3ZlcicpKSB7XG4gICAgICAgIHBvcnRhbFByb3BzLm9wZW5PblRyaWdnZXJDbGljayA9IGZhbHNlO1xuICAgICAgICBwb3J0YWxQcm9wcy5jbG9zZU9uVHJpZ2dlckNsaWNrID0gZmFsc2U7XG4gICAgICAgIHBvcnRhbFByb3BzLm9wZW5PblRyaWdnZXJNb3VzZUVudGVyID0gdHJ1ZTtcbiAgICAgICAgcG9ydGFsUHJvcHMuY2xvc2VPblRyaWdnZXJNb3VzZUxlYXZlID0gdHJ1ZTsgLy8gVGFrZW4gZnJvbSBTVUk6IGh0dHBzOi8vZ2l0LmlvL3ZQbUNtXG5cbiAgICAgICAgcG9ydGFsUHJvcHMubW91c2VMZWF2ZURlbGF5ID0gNzA7XG4gICAgICAgIHBvcnRhbFByb3BzLm1vdXNlRW50ZXJEZWxheSA9IDUwO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2luY2x1ZGVzKG5vcm1hbGl6ZWRPbiwgJ2NsaWNrJykpIHtcbiAgICAgICAgcG9ydGFsUHJvcHMub3Blbk9uVHJpZ2dlckNsaWNrID0gdHJ1ZTtcbiAgICAgICAgcG9ydGFsUHJvcHMuY2xvc2VPblRyaWdnZXJDbGljayA9IHRydWU7XG4gICAgICAgIHBvcnRhbFByb3BzLmNsb3NlT25Eb2N1bWVudENsaWNrID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9pbmNsdWRlcyhub3JtYWxpemVkT24sICdmb2N1cycpKSB7XG4gICAgICAgIHBvcnRhbFByb3BzLm9wZW5PblRyaWdnZXJGb2N1cyA9IHRydWU7XG4gICAgICAgIHBvcnRhbFByb3BzLmNsb3NlT25UcmlnZ2VyQmx1ciA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwb3J0YWxQcm9wcztcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoaWRlT25TY3JvbGxcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY2xvc2VkOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgZXZlbnRTdGFjay51bnN1Yignc2Nyb2xsJywgX3RoaXMuaGlkZU9uU2Nyb2xsLCB7XG4gICAgICAgIHRhcmdldDogd2luZG93XG4gICAgICB9KTtcbiAgICAgIF90aGlzLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY2xvc2VkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0sIDUwKTtcblxuICAgICAgX3RoaXMuaGFuZGxlQ2xvc2UoZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQ2xvc2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkNsb3NlJywgZSwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU9wZW5cIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbk9wZW4nLCBlLCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlUG9ydGFsTW91bnRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbk1vdW50JywgZSwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVBvcnRhbFVubW91bnRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnBvc2l0aW9uVXBkYXRlID0gbnVsbDtcblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uVW5tb3VudCcsIGUsIF90aGlzLnByb3BzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZW5kZXJDb250ZW50XCIsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgcG9wcGVyUGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQsXG4gICAgICAgICAgcG9wcGVyUmVmID0gX3JlZi5yZWYsXG4gICAgICAgICAgc2NoZWR1bGVVcGRhdGUgPSBfcmVmLnNjaGVkdWxlVXBkYXRlLFxuICAgICAgICAgIHBvcHBlclN0eWxlID0gX3JlZi5zdHlsZTtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNpYyA9IF90aGlzJHByb3BzMi5iYXNpYyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbnRlbnQgPSBfdGhpcyRwcm9wczIuY29udGVudCxcbiAgICAgICAgICBoaWRlT25TY3JvbGwgPSBfdGhpcyRwcm9wczIuaGlkZU9uU2Nyb2xsLFxuICAgICAgICAgIGZsb3dpbmcgPSBfdGhpcyRwcm9wczIuZmxvd2luZyxcbiAgICAgICAgICBoZWFkZXIgPSBfdGhpcyRwcm9wczIuaGVhZGVyLFxuICAgICAgICAgIGludmVydGVkID0gX3RoaXMkcHJvcHMyLmludmVydGVkLFxuICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wczIuc2l6ZSxcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzMi5zdHlsZSxcbiAgICAgICAgICB3aWRlID0gX3RoaXMkcHJvcHMyLndpZGU7XG4gICAgICB2YXIgY29udGVudFJlc3RQcm9wcyA9IF90aGlzLnN0YXRlLmNvbnRlbnRSZXN0UHJvcHM7XG4gICAgICBfdGhpcy5wb3NpdGlvblVwZGF0ZSA9IHNjaGVkdWxlVXBkYXRlO1xuICAgICAgdmFyIGNsYXNzZXMgPSBjeCgndWknLCBwbGFjZW1lbnRNYXBwaW5nW3BvcHBlclBsYWNlbWVudF0sIHNpemUsIHVzZUtleU9yVmFsdWVBbmRLZXkod2lkZSwgJ3dpZGUnKSwgdXNlS2V5T25seShiYXNpYywgJ2Jhc2ljJyksIHVzZUtleU9ubHkoZmxvd2luZywgJ2Zsb3dpbmcnKSwgdXNlS2V5T25seShpbnZlcnRlZCwgJ2ludmVydGVkJyksICdwb3B1cCB0cmFuc2l0aW9uIHZpc2libGUnLCBjbGFzc05hbWUpO1xuICAgICAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoUG9wdXAsIF90aGlzLnByb3BzKTtcblxuICAgICAgdmFyIHN0eWxlcyA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAvLyBIZWFkcyB1cCEgV2UgbmVlZCBkZWZhdWx0IHN0eWxlcyB0byBnZXQgd29ya2luZyBjb3JyZWN0bHkgYGZsb3dpbmdgXG4gICAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgICAgcmlnaHQ6ICdhdXRvJ1xuICAgICAgfSwgcG9wcGVyU3R5bGUsIHN0eWxlKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVmLCB7XG4gICAgICAgIGlubmVyUmVmOiBwb3BwZXJSZWZcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCBjb250ZW50UmVzdFByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgc3R5bGU6IHN0eWxlc1xuICAgICAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgUG9wdXBIZWFkZXIuY3JlYXRlKGhlYWRlciwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KSwgUG9wdXBDb250ZW50LmNyZWF0ZShjb250ZW50LCB7XG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pKSA6IGNoaWxkcmVuLCBoaWRlT25TY3JvbGwgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChFdmVudFN0YWNrLCB7XG4gICAgICAgIG9uOiBfdGhpcy5oaWRlT25TY3JvbGwsXG4gICAgICAgIG5hbWU6IFwic2Nyb2xsXCIsXG4gICAgICAgIHRhcmdldDogXCJ3aW5kb3dcIlxuICAgICAgfSkpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb3B1cCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciBkZXBzRXF1YWwgPSBzaGFsbG93RXF1YWwodGhpcy5wcm9wcy5wb3BwZXJEZXBlbmRlbmNpZXMsIHByZXZQcm9wcy5wb3BwZXJEZXBlbmRlbmNpZXMpO1xuXG4gICAgICBpZiAoIWRlcHNFcXVhbCkge1xuICAgICAgICB0aGlzLmhhbmRsZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhbmRsZVVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVVcGRhdGUoKSB7XG4gICAgICBpZiAodGhpcy5wb3NpdGlvblVwZGF0ZSkgdGhpcy5wb3NpdGlvblVwZGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMy5jb250ZXh0LFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMzLmRpc2FibGVkLFxuICAgICAgICAgIGV2ZW50c0VuYWJsZWQgPSBfdGhpcyRwcm9wczMuZXZlbnRzRW5hYmxlZCxcbiAgICAgICAgICBvZmZzZXQgPSBfdGhpcyRwcm9wczMub2Zmc2V0LFxuICAgICAgICAgIHBpbm5lZCA9IF90aGlzJHByb3BzMy5waW5uZWQsXG4gICAgICAgICAgcG9wcGVyTW9kaWZpZXJzID0gX3RoaXMkcHJvcHMzLnBvcHBlck1vZGlmaWVycyxcbiAgICAgICAgICBwb3NpdGlvbiA9IF90aGlzJHByb3BzMy5wb3NpdGlvbixcbiAgICAgICAgICBwb3NpdGlvbkZpeGVkID0gX3RoaXMkcHJvcHMzLnBvc2l0aW9uRml4ZWQsXG4gICAgICAgICAgdHJpZ2dlciA9IF90aGlzJHByb3BzMy50cmlnZ2VyO1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBjbG9zZWQgPSBfdGhpcyRzdGF0ZS5jbG9zZWQsXG4gICAgICAgICAgcG9ydGFsUmVzdFByb3BzID0gX3RoaXMkc3RhdGUucG9ydGFsUmVzdFByb3BzO1xuICAgICAgaWYgKGNsb3NlZCB8fCBkaXNhYmxlZCkgcmV0dXJuIHRyaWdnZXI7XG5cbiAgICAgIHZhciBtb2RpZmllcnMgPSBfbWVyZ2Uoe1xuICAgICAgICBhcnJvdzoge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGZsaXA6IHtcbiAgICAgICAgICBlbmFibGVkOiAhcGlubmVkXG4gICAgICAgIH0sXG4gICAgICAgIC8vIFRoZXJlIGFyZSBpc3N1ZXMgd2l0aCBga2VlcFRvZ2V0aGVyYCBhbmQgYG9mZnNldGBcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzU1N1xuICAgICAgICBrZWVwVG9nZXRoZXI6IHtcbiAgICAgICAgICBlbmFibGVkOiAhIW9mZnNldFxuICAgICAgICB9LFxuICAgICAgICBvZmZzZXQ6IHtcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldFxuICAgICAgICB9XG4gICAgICB9LCBwb3BwZXJNb2RpZmllcnMpO1xuXG4gICAgICB2YXIgcmVmZXJlbmNlRWxlbWVudCA9IGNyZWF0ZVJlZmVyZW5jZVByb3h5KF9pc05pbChjb250ZXh0KSA/IHRoaXMudHJpZ2dlclJlZiA6IGNvbnRleHQpO1xuXG4gICAgICB2YXIgbWVyZ2VkUG9ydGFsUHJvcHMgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmdldFBvcnRhbFByb3BzKCksIHBvcnRhbFJlc3RQcm9wcyk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBvcnRhbCwgX2V4dGVuZHMoe30sIG1lcmdlZFBvcnRhbFByb3BzLCB7XG4gICAgICAgIG9uQ2xvc2U6IHRoaXMuaGFuZGxlQ2xvc2UsXG4gICAgICAgIG9uTW91bnQ6IHRoaXMuaGFuZGxlUG9ydGFsTW91bnQsXG4gICAgICAgIG9uT3BlbjogdGhpcy5oYW5kbGVPcGVuLFxuICAgICAgICBvblVubW91bnQ6IHRoaXMuaGFuZGxlUG9ydGFsVW5tb3VudCxcbiAgICAgICAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgICAgICAgdHJpZ2dlclJlZjogdGhpcy50cmlnZ2VyUmVmXG4gICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChQb3BwZXIsIHtcbiAgICAgICAgZXZlbnRzRW5hYmxlZDogZXZlbnRzRW5hYmxlZCxcbiAgICAgICAgbW9kaWZpZXJzOiBtb2RpZmllcnMsXG4gICAgICAgIHBsYWNlbWVudDogcG9zaXRpb25zTWFwcGluZ1twb3NpdGlvbl0sXG4gICAgICAgIHBvc2l0aW9uRml4ZWQ6IHBvc2l0aW9uRml4ZWQsXG4gICAgICAgIHJlZmVyZW5jZUVsZW1lbnQ6IHJlZmVyZW5jZUVsZW1lbnRcbiAgICAgIH0sIHRoaXMucmVuZGVyQ29udGVudCkpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgICBpZiAoc3RhdGUuY2xvc2VkIHx8IHN0YXRlLmRpc2FibGVkKSByZXR1cm4ge307XG4gICAgICB2YXIgdW5oYW5kbGVkUHJvcHMgPSBnZXRVbmhhbmRsZWRQcm9wcyhQb3B1cCwgcHJvcHMpO1xuXG4gICAgICB2YXIgY29udGVudFJlc3RQcm9wcyA9IF9yZWR1Y2UodW5oYW5kbGVkUHJvcHMsIGZ1bmN0aW9uIChhY2MsIHZhbCwga2V5KSB7XG4gICAgICAgIGlmICghX2luY2x1ZGVzKFBvcnRhbC5oYW5kbGVkUHJvcHMsIGtleSkpIGFjY1trZXldID0gdmFsO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuXG4gICAgICB2YXIgcG9ydGFsUmVzdFByb3BzID0gX3BpY2sodW5oYW5kbGVkUHJvcHMsIFBvcnRhbC5oYW5kbGVkUHJvcHMpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50UmVzdFByb3BzOiBjb250ZW50UmVzdFByb3BzLFxuICAgICAgICBwb3J0YWxSZXN0UHJvcHM6IHBvcnRhbFJlc3RQcm9wc1xuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9wdXA7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShQb3B1cCwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBkaXNhYmxlZDogZmFsc2UsXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG4gIG9mZnNldDogMCxcbiAgb246IFsnY2xpY2snLCAnaG92ZXInXSxcbiAgcGlubmVkOiBmYWxzZSxcbiAgcG9zaXRpb246ICd0b3AgbGVmdCdcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoUG9wdXAsIFwiQ29udGVudFwiLCBQb3B1cENvbnRlbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoUG9wdXAsIFwiSGVhZGVyXCIsIFBvcHVwSGVhZGVyKTtcblxuX2RlZmluZVByb3BlcnR5KFBvcHVwLCBcImhhbmRsZWRQcm9wc1wiLCBbXCJhc1wiLCBcImJhc2ljXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiY29udGV4dFwiLCBcImRpc2FibGVkXCIsIFwiZXZlbnRzRW5hYmxlZFwiLCBcImZsb3dpbmdcIiwgXCJoZWFkZXJcIiwgXCJoaWRlT25TY3JvbGxcIiwgXCJob3ZlcmFibGVcIiwgXCJpbnZlcnRlZFwiLCBcIm9mZnNldFwiLCBcIm9uXCIsIFwib25DbG9zZVwiLCBcIm9uTW91bnRcIiwgXCJvbk9wZW5cIiwgXCJvblVubW91bnRcIiwgXCJwaW5uZWRcIiwgXCJwb3BwZXJEZXBlbmRlbmNpZXNcIiwgXCJwb3BwZXJNb2RpZmllcnNcIiwgXCJwb3NpdGlvblwiLCBcInBvc2l0aW9uRml4ZWRcIiwgXCJzaXplXCIsIFwic3R5bGVcIiwgXCJ0cmlnZ2VyXCIsIFwid2lkZVwiXSk7XG5cbmV4cG9ydCB7IFBvcHVwIGFzIGRlZmF1bHQgfTtcblBvcHVwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIERpc3BsYXkgdGhlIHBvcHVwIHdpdGhvdXQgdGhlIHBvaW50aW5nIGFycm93LiAqL1xuICBiYXNpYzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2ltcGxlIHRleHQgY29udGVudCBmb3IgdGhlIHBvcG92ZXIuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBFeGlzdGluZyBlbGVtZW50IHRoZSBwb3AtdXAgc2hvdWxkIGJlIGJvdW5kIHRvLiAqL1xuICBjb250ZXh0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBjdXN0b21Qcm9wVHlwZXMucmVmT2JqZWN0XSksXG5cbiAgLyoqIEEgZGlzYWJsZWQgcG9wdXAgb25seSByZW5kZXJzIGl0cyB0cmlnZ2VyLiAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEVuYWJsZXMgdGhlIFBvcHBlci5qcyBldmVudCBsaXN0ZW5lcnMuICovXG4gIGV2ZW50c0VuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGZsb3dpbmcgUG9wdXAgaGFzIG5vIG1heGltdW0gd2lkdGggYW5kIGNvbnRpbnVlcyB0byBmbG93IHRvIGZpdCBpdHMgY29udGVudC4gKi9cbiAgZmxvd2luZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFRha2VzIHVwIHRoZSBlbnRpcmUgd2lkdGggb2YgaXRzIG9mZnNldCBjb250YWluZXIuICovXG4gIC8vIFRPRE86IGltcGxlbWVudCB0aGUgUG9wdXAgZmx1aWQgbGF5b3V0XG4gIC8vIGZsdWlkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogSGVhZGVyIGRpc3BsYXllZCBhYm92ZSB0aGUgY29udGVudCBpbiBib2xkLiAqL1xuICBoZWFkZXI6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBIaWRlIHRoZSBQb3B1cCB3aGVuIHNjcm9sbGluZyB0aGUgd2luZG93LiAqL1xuICBoaWRlT25TY3JvbGw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBXaGV0aGVyIHRoZSBwb3B1cCBzaG91bGQgbm90IGNsb3NlIG9uIGhvdmVyLiAqL1xuICBob3ZlcmFibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBJbnZlcnQgdGhlIGNvbG9ycyBvZiB0aGUgUG9wdXAuICovXG4gIGludmVydGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogT2Zmc2V0IHZhbHVlIHRvIGFwcGx5IHRvIHJlbmRlcmVkIHBvcHVwLiBBY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gcHggb3IgdW5pdC1sZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSAlLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHRyaWdnZXIgZWxlbWVudFxuICAgKiAtICVwLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHVwIGVsZW1lbnRcbiAgICogLSB2dywgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSB2aCwgQ1NTIHZpZXdwb3J0IGhlaWdodCB1bml0XG4gICAqL1xuICBvZmZzZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKiogRXZlbnRzIHRyaWdnZXJpbmcgdGhlIHBvcHVwLiAqL1xuICBvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaG92ZXInLCAnY2xpY2snLCAnZm9jdXMnXSksIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihbJ2hvdmVyJywgJ2NsaWNrJywgJ2ZvY3VzJ10pKV0pLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIGNsb3NlIGV2ZW50IGhhcHBlbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHBvcnRhbCBpcyBtb3VudGVkIG9uIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVsbH1cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbk1vdW50OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYW4gb3BlbiBldmVudCBoYXBwZW5zLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHBvcnRhbCBpcyB1bm1vdW50ZWQgZnJvbSB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge251bGx9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25Vbm1vdW50OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogRGlzYWJsZXMgYXV0b21hdGljIHJlcG9zaXRpb25pbmcgb2YgdGhlIGNvbXBvbmVudCwgaXQgd2lsbCBhbHdheXMgYmUgcGxhY2VkIGFjY29yZGluZyB0byB0aGUgcG9zaXRpb24gdmFsdWUuICovXG4gIHBpbm5lZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFBvc2l0aW9uIGZvciB0aGUgcG9wb3Zlci4gKi9cbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihwb3NpdGlvbnMpLFxuXG4gIC8qKiBUZWxscyBgUG9wcGVyLmpzYCB0byB1c2UgdGhlIGBwb3NpdGlvbjogZml4ZWRgIHN0cmF0ZWd5IHRvIHBvc2l0aW9uIHRoZSBwb3BvdmVyLiAqL1xuICBwb3NpdGlvbkZpeGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQW4gb2JqZWN0IGNvbnRhaW5pbmcgY3VzdG9tIHNldHRpbmdzIGZvciB0aGUgUG9wcGVyLmpzIG1vZGlmaWVycy4gKi9cbiAgcG9wcGVyTW9kaWZpZXJzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKiBBIHBvcHVwIGNhbiBoYXZlIGRlcGVuZGVuY2llcyB3aGljaCB1cGRhdGUgd2lsbCBzY2hlZHVsZSBhIHBvc2l0aW9uIHVwZGF0ZS4gKi9cbiAgcG9wcGVyRGVwZW5kZW5jaWVzOiBQcm9wVHlwZXMuYXJyYXksXG5cbiAgLyoqIFBvcHVwIHNpemUuICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihfd2l0aG91dChTVUkuU0laRVMsICdtZWRpdW0nLCAnYmlnJywgJ21hc3NpdmUnKSksXG5cbiAgLyoqIEN1c3RvbSBQb3B1cCBzdHlsZS4gKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqIEVsZW1lbnQgdG8gYmUgcmVuZGVyZWQgaW4tcGxhY2Ugd2hlcmUgdGhlIHBvcHVwIGlzIGRlZmluZWQuICovXG4gIHRyaWdnZXI6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBQb3B1cCB3aWR0aC4gKi9cbiAgd2lkZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5vbmVPZihbJ3ZlcnknXSldKVxufSA6IHt9OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX3JvdW5kIGZyb20gXCJsb2Rhc2gvcm91bmRcIjtcbmltcG9ydCBfY2xhbXAgZnJvbSBcImxvZGFzaC9jbGFtcFwiO1xuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tIFwibG9kYXNoL2lzVW5kZWZpbmVkXCI7XG5pbXBvcnQgX3dpdGhvdXQgZnJvbSBcImxvZGFzaC93aXRob3V0XCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGNyZWF0ZUhUTUxEaXZpc2lvbiwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIFNVSSwgdXNlS2V5T25seSwgdXNlVmFsdWVBbmRLZXkgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIHByb2dyZXNzIGJhciBzaG93cyB0aGUgcHJvZ3Jlc3Npb24gb2YgYSB0YXNrLlxuICovXG5cbnZhciBQcm9ncmVzcyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUHJvZ3Jlc3MsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb2dyZXNzKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb2dyZXNzKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFByb2dyZXNzKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2FsY3VsYXRlUGVyY2VudFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBwZXJjZW50ID0gX3RoaXMkcHJvcHMucGVyY2VudCxcbiAgICAgICAgICB0b3RhbCA9IF90aGlzJHByb3BzLnRvdGFsLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcHJvcHMudmFsdWU7XG4gICAgICBpZiAoIV9pc1VuZGVmaW5lZChwZXJjZW50KSkgcmV0dXJuIHBlcmNlbnQ7XG4gICAgICBpZiAoIV9pc1VuZGVmaW5lZCh0b3RhbCkgJiYgIV9pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybiB2YWx1ZSAvIHRvdGFsICogMTAwO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNvbXB1dGVWYWx1ZVRleHRcIiwgZnVuY3Rpb24gKHBlcmNlbnQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcm9ncmVzcyA9IF90aGlzJHByb3BzMi5wcm9ncmVzcyxcbiAgICAgICAgICB0b3RhbCA9IF90aGlzJHByb3BzMi50b3RhbCxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzMi52YWx1ZTtcbiAgICAgIGlmIChwcm9ncmVzcyA9PT0gJ3ZhbHVlJykgcmV0dXJuIHZhbHVlO1xuICAgICAgaWYgKHByb2dyZXNzID09PSAncmF0aW8nKSByZXR1cm4gXCJcIi5jb25jYXQodmFsdWUsIFwiL1wiKS5jb25jYXQodG90YWwpO1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHBlcmNlbnQsIFwiJVwiKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRQZXJjZW50XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcmVjaXNpb24gPSBfdGhpcyRwcm9wczMucHJlY2lzaW9uLFxuICAgICAgICAgIHByb2dyZXNzID0gX3RoaXMkcHJvcHMzLnByb2dyZXNzLFxuICAgICAgICAgIHRvdGFsID0gX3RoaXMkcHJvcHMzLnRvdGFsLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcHJvcHMzLnZhbHVlO1xuXG4gICAgICB2YXIgcGVyY2VudCA9IF9jbGFtcChfdGhpcy5jYWxjdWxhdGVQZXJjZW50KCksIDAsIDEwMCk7XG5cbiAgICAgIGlmICghX2lzVW5kZWZpbmVkKHRvdGFsKSAmJiAhX2lzVW5kZWZpbmVkKHZhbHVlKSAmJiBwcm9ncmVzcyA9PT0gJ3ZhbHVlJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgLyB0b3RhbCAqIDEwMDtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2dyZXNzID09PSAndmFsdWUnKSByZXR1cm4gdmFsdWU7XG4gICAgICBpZiAoX2lzVW5kZWZpbmVkKHByZWNpc2lvbikpIHJldHVybiBwZXJjZW50O1xuICAgICAgcmV0dXJuIF9yb3VuZChwZXJjZW50LCBwcmVjaXNpb24pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImlzQXV0b1N1Y2Nlc3NcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGF1dG9TdWNjZXNzID0gX3RoaXMkcHJvcHM0LmF1dG9TdWNjZXNzLFxuICAgICAgICAgIHBlcmNlbnQgPSBfdGhpcyRwcm9wczQucGVyY2VudCxcbiAgICAgICAgICB0b3RhbCA9IF90aGlzJHByb3BzNC50b3RhbCxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzNC52YWx1ZTtcbiAgICAgIHJldHVybiBhdXRvU3VjY2VzcyAmJiAocGVyY2VudCA+PSAxMDAgfHwgdmFsdWUgPj0gdG90YWwpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlbmRlckxhYmVsXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNS5jaGlsZHJlbixcbiAgICAgICAgICBjb250ZW50ID0gX3RoaXMkcHJvcHM1LmNvbnRlbnQsXG4gICAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wczUubGFiZWw7XG4gICAgICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJsYWJlbFwiXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY29udGVudCkpIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImxhYmVsXCJcbiAgICAgIH0sIGNvbnRlbnQpO1xuICAgICAgcmV0dXJuIGNyZWF0ZUhUTUxEaXZpc2lvbihsYWJlbCwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlLFxuICAgICAgICBkZWZhdWx0UHJvcHM6IHtcbiAgICAgICAgICBjbGFzc05hbWU6ICdsYWJlbCdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVuZGVyUHJvZ3Jlc3NcIiwgZnVuY3Rpb24gKHBlcmNlbnQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczYgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcmVjaXNpb24gPSBfdGhpcyRwcm9wczYucHJlY2lzaW9uLFxuICAgICAgICAgIHByb2dyZXNzID0gX3RoaXMkcHJvcHM2LnByb2dyZXNzO1xuICAgICAgaWYgKCFwcm9ncmVzcyAmJiBfaXNVbmRlZmluZWQocHJlY2lzaW9uKSkgcmV0dXJuO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwicHJvZ3Jlc3NcIlxuICAgICAgfSwgX3RoaXMuY29tcHV0ZVZhbHVlVGV4dChwZXJjZW50KSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUHJvZ3Jlc3MsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhY3RpdmUgPSBfdGhpcyRwcm9wczcuYWN0aXZlLFxuICAgICAgICAgIGF0dGFjaGVkID0gX3RoaXMkcHJvcHM3LmF0dGFjaGVkLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzNy5jbGFzc05hbWUsXG4gICAgICAgICAgY29sb3IgPSBfdGhpcyRwcm9wczcuY29sb3IsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczcuZGlzYWJsZWQsXG4gICAgICAgICAgZXJyb3IgPSBfdGhpcyRwcm9wczcuZXJyb3IsXG4gICAgICAgICAgaW5kaWNhdGluZyA9IF90aGlzJHByb3BzNy5pbmRpY2F0aW5nLFxuICAgICAgICAgIGludmVydGVkID0gX3RoaXMkcHJvcHM3LmludmVydGVkLFxuICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wczcuc2l6ZSxcbiAgICAgICAgICBzdWNjZXNzID0gX3RoaXMkcHJvcHM3LnN1Y2Nlc3MsXG4gICAgICAgICAgd2FybmluZyA9IF90aGlzJHByb3BzNy53YXJuaW5nO1xuICAgICAgdmFyIGNsYXNzZXMgPSBjeCgndWknLCBjb2xvciwgc2l6ZSwgdXNlS2V5T25seShhY3RpdmUgfHwgaW5kaWNhdGluZywgJ2FjdGl2ZScpLCB1c2VLZXlPbmx5KGRpc2FibGVkLCAnZGlzYWJsZWQnKSwgdXNlS2V5T25seShlcnJvciwgJ2Vycm9yJyksIHVzZUtleU9ubHkoaW5kaWNhdGluZywgJ2luZGljYXRpbmcnKSwgdXNlS2V5T25seShpbnZlcnRlZCwgJ2ludmVydGVkJyksIHVzZUtleU9ubHkoc3VjY2VzcyB8fCB0aGlzLmlzQXV0b1N1Y2Nlc3MoKSwgJ3N1Y2Nlc3MnKSwgdXNlS2V5T25seSh3YXJuaW5nLCAnd2FybmluZycpLCB1c2VWYWx1ZUFuZEtleShhdHRhY2hlZCwgJ2F0dGFjaGVkJyksICdwcm9ncmVzcycsIGNsYXNzTmFtZSk7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFByb2dyZXNzLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFByb2dyZXNzLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBwZXJjZW50ID0gdGhpcy5nZXRQZXJjZW50KCkgfHwgMDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIFwiZGF0YS1wZXJjZW50XCI6IE1hdGguZmxvb3IocGVyY2VudClcbiAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImJhclwiLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHdpZHRoOiBcIlwiLmNvbmNhdChwZXJjZW50LCBcIiVcIilcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcy5yZW5kZXJQcm9ncmVzcyhwZXJjZW50KSksIHRoaXMucmVuZGVyTGFiZWwoKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFByb2dyZXNzO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoUHJvZ3Jlc3MsIFwiaGFuZGxlZFByb3BzXCIsIFtcImFjdGl2ZVwiLCBcImFzXCIsIFwiYXR0YWNoZWRcIiwgXCJhdXRvU3VjY2Vzc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb250ZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcImluZGljYXRpbmdcIiwgXCJpbnZlcnRlZFwiLCBcImxhYmVsXCIsIFwicGVyY2VudFwiLCBcInByZWNpc2lvblwiLCBcInByb2dyZXNzXCIsIFwic2l6ZVwiLCBcInN1Y2Nlc3NcIiwgXCJ0b3RhbFwiLCBcInZhbHVlXCIsIFwid2FybmluZ1wiXSk7XG5cblByb2dyZXNzLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEEgcHJvZ3Jlc3MgYmFyIGNhbiBzaG93IGFjdGl2aXR5LiAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHByb2dyZXNzIGJhciBjYW4gYXR0YWNoIHRvIGFuZCBzaG93IHRoZSBwcm9ncmVzcyBvZiBhbiBlbGVtZW50IChpLmUuIENhcmQgb3IgU2VnbWVudCkuICovXG4gIGF0dGFjaGVkOiBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAnYm90dG9tJ10pLFxuXG4gIC8qKiBXaGV0aGVyIHN1Y2Nlc3Mgc3RhdGUgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB3aGVuIHByb2dyZXNzIGNvbXBsZXRlcy4gKi9cbiAgYXV0b1N1Y2Nlc3M6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEEgcHJvZ3Jlc3MgYmFyIGNhbiBoYXZlIGRpZmZlcmVudCBjb2xvcnMuICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoU1VJLkNPTE9SUyksXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBwcm9ncmVzcyBiYXIgYmUgZGlzYWJsZWQuICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBwcm9ncmVzcyBiYXIgY2FuIHNob3cgYSBlcnJvciBzdGF0ZS4gKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBbiBpbmRpY2F0aW5nIHByb2dyZXNzIGJhciB2aXN1YWxseSBpbmRpY2F0ZXMgdGhlIGN1cnJlbnQgbGV2ZWwgb2YgcHJvZ3Jlc3Mgb2YgYSB0YXNrLiAqL1xuICBpbmRpY2F0aW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBwcm9ncmVzcyBiYXIgY2FuIGhhdmUgaXRzIGNvbG9ycyBpbnZlcnRlZC4gKi9cbiAgaW52ZXJ0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBDYW4gYmUgc2V0IHRvIGVpdGhlciB0byBkaXNwbGF5IHByb2dyZXNzIGFzIHBlcmNlbnQgb3IgcmF0aW8uICovXG4gIGxhYmVsOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogQ3VycmVudCBwZXJjZW50IGNvbXBsZXRlLiAqL1xuICBwZXJjZW50OiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kaXNhbGxvdyhbJ3RvdGFsJywgJ3ZhbHVlJ10pLCBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSldKSxcblxuICAvKiogRGVjaW1hbCBwb2ludCBwcmVjaXNpb24gZm9yIGNhbGN1bGF0ZWQgcHJvZ3Jlc3MuICovXG4gIHByZWNpc2lvbjogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKiogQSBwcm9ncmVzcyBiYXIgY2FuIGNvbnRhaW4gYSB0ZXh0IHZhbHVlIGluZGljYXRpbmcgY3VycmVudCBwcm9ncmVzcy4gKi9cbiAgcHJvZ3Jlc3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub25lT2YoWydwZXJjZW50JywgJ3JhdGlvJywgJ3ZhbHVlJ10pXSksXG5cbiAgLyoqIEEgcHJvZ3Jlc3MgYmFyIGNhbiB2YXJ5IGluIHNpemUuICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihfd2l0aG91dChTVUkuU0laRVMsICdtaW5pJywgJ2h1Z2UnLCAnbWFzc2l2ZScpKSxcblxuICAvKiogQSBwcm9ncmVzcyBiYXIgY2FuIHNob3cgYSBzdWNjZXNzIHN0YXRlLiAqL1xuICBzdWNjZXNzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogRm9yIHVzZSB3aXRoIHZhbHVlLiBUb2dldGhlciwgdGhlc2Ugd2lsbCBjYWxjdWxhdGUgdGhlIHBlcmNlbnQuIE11dHVhbGx5IGV4Y2x1ZGVzIHBlcmNlbnQuICovXG4gIHRvdGFsOiBjdXN0b21Qcm9wVHlwZXMuZXZlcnkoW2N1c3RvbVByb3BUeXBlcy5kZW1hbmQoWyd2YWx1ZSddKSwgY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsncGVyY2VudCddKSwgUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pXSksXG5cbiAgLyoqIEZvciB1c2Ugd2l0aCB0b3RhbC4gVG9nZXRoZXIsIHRoZXNlIHdpbGwgY2FsY3VsYXRlIHRoZSBwZXJjZW50LiBNdXR1YWxseSBleGNsdWRlcyBwZXJjZW50LiAqL1xuICB2YWx1ZTogY3VzdG9tUHJvcFR5cGVzLmV2ZXJ5KFtjdXN0b21Qcm9wVHlwZXMuZGlzYWxsb3coWydwZXJjZW50J10pLCBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSldKSxcblxuICAvKiogQSBwcm9ncmVzcyBiYXIgY2FuIHNob3cgYSB3YXJuaW5nIHN0YXRlLiAqL1xuICB3YXJuaW5nOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgUHJvZ3Jlc3M7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQga2V5Ym9hcmRLZXkgZnJvbSAna2V5Ym9hcmQta2V5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQW4gaW50ZXJuYWwgaWNvbiBzdWItY29tcG9uZW50IGZvciBSYXRpbmcgY29tcG9uZW50XG4gKi9cblxudmFyIFJhdGluZ0ljb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJhdGluZ0ljb24sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJhdGluZ0ljb24oKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmF0aW5nSWNvbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihSYXRpbmdJY29uKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQ2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkNsaWNrJywgZSwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUtleVVwXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25LZXlVcCcsIGUsIF90aGlzLnByb3BzKTtcblxuICAgICAgc3dpdGNoIChrZXlib2FyZEtleS5nZXRDb2RlKGUpKSB7XG4gICAgICAgIGNhc2Uga2V5Ym9hcmRLZXkuRW50ZXI6XG4gICAgICAgIGNhc2Uga2V5Ym9hcmRLZXkuU3BhY2ViYXI6XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uQ2xpY2snLCBlLCBfdGhpcy5wcm9wcyk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU1vdXNlRW50ZXJcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbk1vdXNlRW50ZXInLCBlLCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmF0aW5nSWNvbiwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBzZWxlY3RlZCA9IF90aGlzJHByb3BzLnNlbGVjdGVkO1xuICAgICAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KGFjdGl2ZSwgJ2FjdGl2ZScpLCB1c2VLZXlPbmx5KHNlbGVjdGVkLCAnc2VsZWN0ZWQnKSwgJ2ljb24nLCBjbGFzc05hbWUpO1xuICAgICAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhSYXRpbmdJY29uLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFJhdGluZ0ljb24sIHRoaXMucHJvcHMpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayxcbiAgICAgICAgb25LZXlVcDogdGhpcy5oYW5kbGVLZXlVcCxcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLmhhbmRsZU1vdXNlRW50ZXIsXG4gICAgICAgIHJvbGU6IFwicmFkaW9cIlxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSYXRpbmdJY29uO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoUmF0aW5nSWNvbiwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBhczogJ2knXG59KTtcblxuX2RlZmluZVByb3BlcnR5KFJhdGluZ0ljb24sIFwiaGFuZGxlZFByb3BzXCIsIFtcImFjdGl2ZVwiLCBcImFzXCIsIFwiY2xhc3NOYW1lXCIsIFwiaW5kZXhcIiwgXCJvbkNsaWNrXCIsIFwib25LZXlVcFwiLCBcIm9uTW91c2VFbnRlclwiLCBcInNlbGVjdGVkXCJdKTtcblxuZXhwb3J0IHsgUmF0aW5nSWNvbiBhcyBkZWZhdWx0IH07XG5SYXRpbmdJY29uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEluZGljYXRlcyBhY3Rpdml0eSBvZiBhbiBpY29uLiAqL1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQW4gaW5kZXggb2YgaWNvbiBpbnNpZGUgUmF0aW5nLiAqL1xuICBpbmRleDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGNsaWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBrZXl1cC5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gbW91c2VlbnRlci5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqIEluZGljYXRlcyBzZWxlY3Rpb24gb2YgYW4gaWNvbi4gKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sXG59IDoge307IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF90aW1lcyBmcm9tIFwibG9kYXNoL3RpbWVzXCI7XG5pbXBvcnQgX2ludm9rZSBmcm9tIFwibG9kYXNoL2ludm9rZVwiO1xuaW1wb3J0IF93aXRob3V0IGZyb20gXCJsb2Rhc2gvd2l0aG91dFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBdXRvQ29udHJvbGxlZENvbXBvbmVudCBhcyBDb21wb25lbnQsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBSYXRpbmdJY29uIGZyb20gJy4vUmF0aW5nSWNvbic7XG4vKipcbiAqIEEgcmF0aW5nIGluZGljYXRlcyB1c2VyIGludGVyZXN0IGluIGNvbnRlbnQuXG4gKi9cblxudmFyIFJhdGluZyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmF0aW5nLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSYXRpbmcoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmF0aW5nKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBfYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIF9hcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoUmF0aW5nKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KF9hcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUljb25DbGlja1wiLCBmdW5jdGlvbiAoZSwgX3JlZikge1xuICAgICAgdmFyIGluZGV4ID0gX3JlZi5pbmRleDtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNsZWFyYWJsZSA9IF90aGlzJHByb3BzLmNsZWFyYWJsZSxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIG1heFJhdGluZyA9IF90aGlzJHByb3BzLm1heFJhdGluZyxcbiAgICAgICAgICBvblJhdGUgPSBfdGhpcyRwcm9wcy5vblJhdGU7XG4gICAgICB2YXIgcmF0aW5nID0gX3RoaXMuc3RhdGUucmF0aW5nO1xuICAgICAgaWYgKGRpc2FibGVkKSByZXR1cm47IC8vIGRlZmF1bHQgbmV3UmF0aW5nIGlzIHRoZSBjbGlja2VkIGljb25cbiAgICAgIC8vIGFsbG93IHRvZ2dsaW5nIGEgYmluYXJ5IHJhdGluZ1xuICAgICAgLy8gYWxsb3cgY2xlYXJpbmcgcmF0aW5nc1xuXG4gICAgICB2YXIgbmV3UmF0aW5nID0gaW5kZXggKyAxO1xuXG4gICAgICBpZiAoY2xlYXJhYmxlID09PSAnYXV0bycgJiYgbWF4UmF0aW5nID09PSAxKSB7XG4gICAgICAgIG5ld1JhdGluZyA9ICshcmF0aW5nO1xuICAgICAgfSBlbHNlIGlmIChjbGVhcmFibGUgPT09IHRydWUgJiYgbmV3UmF0aW5nID09PSByYXRpbmcpIHtcbiAgICAgICAgbmV3UmF0aW5nID0gMDtcbiAgICAgIH0gLy8gc2V0IHJhdGluZ1xuXG5cbiAgICAgIF90aGlzLnRyeVNldFN0YXRlKHtcbiAgICAgICAgcmF0aW5nOiBuZXdSYXRpbmcsXG4gICAgICAgIGlzU2VsZWN0aW5nOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChvblJhdGUpIG9uUmF0ZShlLCBfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge1xuICAgICAgICByYXRpbmc6IG5ld1JhdGluZ1xuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUljb25Nb3VzZUVudGVyXCIsIGZ1bmN0aW9uIChlLCBfcmVmMikge1xuICAgICAgdmFyIGluZGV4ID0gX3JlZjIuaW5kZXg7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZGlzYWJsZWQpIHJldHVybjtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzZWxlY3RlZEluZGV4OiBpbmRleCxcbiAgICAgICAgaXNTZWxlY3Rpbmc6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU1vdXNlTGVhdmVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgX2ludm9rZS5hcHBseSh2b2lkIDAsIFtfdGhpcy5wcm9wcywgJ29uTW91c2VMZWF2ZSddLmNvbmNhdChhcmdzKSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5kaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGVkSW5kZXg6IC0xLFxuICAgICAgICBpc1NlbGVjdGluZzogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJhdGluZywgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICAgIGljb24gPSBfdGhpcyRwcm9wczIuaWNvbixcbiAgICAgICAgICBtYXhSYXRpbmcgPSBfdGhpcyRwcm9wczIubWF4UmF0aW5nLFxuICAgICAgICAgIHNpemUgPSBfdGhpcyRwcm9wczIuc2l6ZTtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgcmF0aW5nID0gX3RoaXMkc3RhdGUucmF0aW5nLFxuICAgICAgICAgIHNlbGVjdGVkSW5kZXggPSBfdGhpcyRzdGF0ZS5zZWxlY3RlZEluZGV4LFxuICAgICAgICAgIGlzU2VsZWN0aW5nID0gX3RoaXMkc3RhdGUuaXNTZWxlY3Rpbmc7XG4gICAgICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIGljb24sIHNpemUsIHVzZUtleU9ubHkoZGlzYWJsZWQsICdkaXNhYmxlZCcpLCB1c2VLZXlPbmx5KGlzU2VsZWN0aW5nICYmICFkaXNhYmxlZCAmJiBzZWxlY3RlZEluZGV4ID49IDAsICdzZWxlY3RlZCcpLCAncmF0aW5nJywgY2xhc3NOYW1lKTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoUmF0aW5nLCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFJhdGluZywgdGhpcy5wcm9wcyk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICByb2xlOiBcInJhZGlvZ3JvdXBcIixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLmhhbmRsZU1vdXNlTGVhdmUsXG4gICAgICAgIHRhYkluZGV4OiBkaXNhYmxlZCA/IDAgOiAtMVxuICAgICAgfSksIF90aW1lcyhtYXhSYXRpbmcsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJhdGluZ0ljb24sIHtcbiAgICAgICAgICB0YWJJbmRleDogZGlzYWJsZWQgPyAtMSA6IDAsXG4gICAgICAgICAgYWN0aXZlOiByYXRpbmcgPj0gaSArIDEsXG4gICAgICAgICAgXCJhcmlhLWNoZWNrZWRcIjogcmF0aW5nID09PSBpICsgMSxcbiAgICAgICAgICBcImFyaWEtcG9zaW5zZXRcIjogaSArIDEsXG4gICAgICAgICAgXCJhcmlhLXNldHNpemVcIjogbWF4UmF0aW5nLFxuICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgIGtleTogaSxcbiAgICAgICAgICBvbkNsaWNrOiBfdGhpczIuaGFuZGxlSWNvbkNsaWNrLFxuICAgICAgICAgIG9uTW91c2VFbnRlcjogX3RoaXMyLmhhbmRsZUljb25Nb3VzZUVudGVyLFxuICAgICAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZEluZGV4ID49IGkgJiYgaXNTZWxlY3RpbmdcbiAgICAgICAgfSk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJhdGluZztcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KFJhdGluZywgXCJhdXRvQ29udHJvbGxlZFByb3BzXCIsIFsncmF0aW5nJ10pO1xuXG5fZGVmaW5lUHJvcGVydHkoUmF0aW5nLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNsZWFyYWJsZTogJ2F1dG8nLFxuICBtYXhSYXRpbmc6IDFcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoUmF0aW5nLCBcIkljb25cIiwgUmF0aW5nSWNvbik7XG5cbl9kZWZpbmVQcm9wZXJ0eShSYXRpbmcsIFwiaGFuZGxlZFByb3BzXCIsIFtcImFzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xlYXJhYmxlXCIsIFwiZGVmYXVsdFJhdGluZ1wiLCBcImRpc2FibGVkXCIsIFwiaWNvblwiLCBcIm1heFJhdGluZ1wiLCBcIm9uUmF0ZVwiLCBcInJhdGluZ1wiLCBcInNpemVcIl0pO1xuXG5leHBvcnQgeyBSYXRpbmcgYXMgZGVmYXVsdCB9O1xuUmF0aW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBZb3UgY2FuIGNsZWFyIHRoZSByYXRpbmcgYnkgY2xpY2tpbmcgb24gdGhlIGN1cnJlbnQgc3RhcnQgcmF0aW5nLlxuICAgKiBCeSBkZWZhdWx0IGEgcmF0aW5nIHdpbGwgYmUgb25seSBjbGVhcmFibGUgaWYgdGhlcmUgaXMgMSBpY29uLlxuICAgKiBTZXR0aW5nIHRvIGB0cnVlYC9gZmFsc2VgIHdpbGwgYWxsb3cgb3IgZGlzYWxsb3cgYSB1c2VyIHRvIGNsZWFyIHRoZWlyIHJhdGluZy5cbiAgICovXG4gIGNsZWFyYWJsZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSldKSxcblxuICAvKiogVGhlIGluaXRpYWwgcmF0aW5nIHZhbHVlLiAqL1xuICBkZWZhdWx0UmF0aW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqIFlvdSBjYW4gZGlzYWJsZSBvciBlbmFibGUgaW50ZXJhY3RpdmUgcmF0aW5nLiAgTWFrZXMgYSByZWFkLW9ubHkgcmF0aW5nLiAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgcmF0aW5nIGNhbiB1c2UgYSBzZXQgb2Ygc3RhciBvciBoZWFydCBpY29ucy4gKi9cbiAgaWNvbjogUHJvcFR5cGVzLm9uZU9mKFsnc3RhcicsICdoZWFydCddKSxcblxuICAvKiogVGhlIHRvdGFsIG51bWJlciBvZiBpY29ucy4gKi9cbiAgbWF4UmF0aW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIENhbGxlZCBhZnRlciB1c2VyIHNlbGVjdHMgYSBuZXcgcmF0aW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzIGFuZCBwcm9wb3NlZCByYXRpbmcuXG4gICAqL1xuICBvblJhdGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKiBUaGUgY3VycmVudCBudW1iZXIgb2YgYWN0aXZlIGljb25zLiAqL1xuICByYXRpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKiogQSBwcm9ncmVzcyBiYXIgY2FuIHZhcnkgaW4gc2l6ZS4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKF93aXRob3V0KFNVSS5TSVpFUywgJ21lZGl1bScsICdiaWcnKSlcbn0gOiB7fTsiLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gU2VhcmNoQ2F0ZWdvcnlMYXlvdXQocHJvcHMpIHtcbiAgdmFyIGNhdGVnb3J5Q29udGVudCA9IHByb3BzLmNhdGVnb3J5Q29udGVudCxcbiAgICAgIHJlc3VsdHNDb250ZW50ID0gcHJvcHMucmVzdWx0c0NvbnRlbnQ7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwibmFtZVwiXG4gIH0sIGNhdGVnb3J5Q29udGVudCksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJyZXN1bHRzXCJcbiAgfSwgcmVzdWx0c0NvbnRlbnQpKTtcbn1cblxuU2VhcmNoQ2F0ZWdvcnlMYXlvdXQuaGFuZGxlZFByb3BzID0gW1wiY2F0ZWdvcnlDb250ZW50XCIsIFwicmVzdWx0c0NvbnRlbnRcIl07XG5TZWFyY2hDYXRlZ29yeUxheW91dC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBUaGUgcmVuZGVyZWQgY2F0ZWdvcnkgY29udGVudCAqL1xuICBjYXRlZ29yeUNvbnRlbnQ6IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXG5cbiAgLyoqIFRoZSByZW5kZXJlZCByZXN1bHRzIGNvbnRlbnQgKi9cbiAgcmVzdWx0c0NvbnRlbnQ6IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaENhdGVnb3J5TGF5b3V0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBTZWFyY2hDYXRlZ29yeUxheW91dCBmcm9tICcuL1NlYXJjaENhdGVnb3J5TGF5b3V0JztcblxuZnVuY3Rpb24gU2VhcmNoQ2F0ZWdvcnkocHJvcHMpIHtcbiAgdmFyIGFjdGl2ZSA9IHByb3BzLmFjdGl2ZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGxheW91dFJlbmRlcmVyID0gcHJvcHMubGF5b3V0UmVuZGVyZXIsXG4gICAgICByZW5kZXJlciA9IHByb3BzLnJlbmRlcmVyO1xuICB2YXIgY2xhc3NlcyA9IGN4KHVzZUtleU9ubHkoYWN0aXZlLCAnYWN0aXZlJyksICdjYXRlZ29yeScsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoU2VhcmNoQ2F0ZWdvcnksIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoU2VhcmNoQ2F0ZWdvcnksIHByb3BzKTtcbiAgdmFyIGNhdGVnb3J5Q29udGVudCA9IHJlbmRlcmVyKHByb3BzKTtcbiAgdmFyIHJlc3VsdHNDb250ZW50ID0gY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgbGF5b3V0UmVuZGVyZXIoe1xuICAgIGNhdGVnb3J5Q29udGVudDogY2F0ZWdvcnlDb250ZW50LFxuICAgIHJlc3VsdHNDb250ZW50OiByZXN1bHRzQ29udGVudFxuICB9KSk7XG59XG5cblNlYXJjaENhdGVnb3J5LmhhbmRsZWRQcm9wcyA9IFtcImFjdGl2ZVwiLCBcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwibGF5b3V0UmVuZGVyZXJcIiwgXCJuYW1lXCIsIFwicmVuZGVyZXJcIiwgXCJyZXN1bHRzXCJdO1xuU2VhcmNoQ2F0ZWdvcnkuZGVmYXVsdFByb3BzID0ge1xuICBsYXlvdXRSZW5kZXJlcjogU2VhcmNoQ2F0ZWdvcnlMYXlvdXQsXG4gIHJlbmRlcmVyOiBmdW5jdGlvbiByZW5kZXJlcihfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH1cbn07XG5TZWFyY2hDYXRlZ29yeS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBUaGUgaXRlbSBjdXJyZW50bHkgc2VsZWN0ZWQgYnkga2V5Ym9hcmQgc2hvcnRjdXQuICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBEaXNwbGF5IG5hbWUuICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGNhdGVnb3J5IGxheW91dCBjb250ZW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzIC0gVGhlIFNlYXJjaENhdGVnb3J5TGF5b3V0IHByb3BzIG9iamVjdC5cbiAgICogQHJldHVybnMgeyp9IC0gUmVuZGVyYWJsZSBjYXRlZ29yeSBsYXlvdXQgY29udGVudHMuXG4gICAqL1xuICBsYXlvdXRSZW5kZXJlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGNhdGVnb3J5IGNvbnRlbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSBUaGUgU2VhcmNoQ2F0ZWdvcnkgcHJvcHMgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7Kn0gLSBSZW5kZXJhYmxlIGNhdGVnb3J5IGNvbnRlbnRzLlxuICAgKi9cbiAgcmVuZGVyZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKiBBcnJheSBvZiBTZWFyY2guUmVzdWx0IHByb3BzLiAqL1xuICByZXN1bHRzOiBQcm9wVHlwZXMuYXJyYXlcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaENhdGVnb3J5OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUhUTUxJbWFnZSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIHVzZUtleU9ubHkgfSBmcm9tICcuLi8uLi9saWInOyAvLyBOb3RlOiBZb3UgdGVjaG5pY2FsbHkgb25seSBuZWVkIHRoZSAnY29udGVudCcgd3JhcHBlciB3aGVuIHRoZXJlJ3MgYW5cbi8vIGltYWdlLiBIb3dldmVyLCBvcHRpb25hbGx5IHdyYXBwaW5nIGl0IG1ha2VzIHRoaXMgZnVuY3Rpb24gYSBsb3QgbW9yZVxuLy8gY29tcGxpY2F0ZWQgYW5kIGhhcmRlciB0byByZWFkLiBTaW5jZSBhbHdheXMgd3JhcHBpbmcgaXQgZG9lc24ndCBhZmZlY3Rcbi8vIHRoZSBzdHlsZSBpbiBhbnkgd2F5IGxldCdzIGp1c3QgZG8gdGhhdC5cbi8vXG4vLyBOb3RlOiBUbyBhdm9pZCByZXF1aXJpbmcgYSB3cmFwcGluZyBkaXYsIHdlIHJldHVybiBhbiBhcnJheSBoZXJlIHNvIHRvXG4vLyBwcmV2ZW50IHJlbmRlcmluZyBpc3N1ZXMgZWFjaCBub2RlIG5lZWRzIGEgdW5pcXVlIGtleS5cblxudmFyIGRlZmF1bHRSZW5kZXJlciA9IGZ1bmN0aW9uIGRlZmF1bHRSZW5kZXJlcihfcmVmKSB7XG4gIHZhciBpbWFnZSA9IF9yZWYuaW1hZ2UsXG4gICAgICBwcmljZSA9IF9yZWYucHJpY2UsXG4gICAgICB0aXRsZSA9IF9yZWYudGl0bGUsXG4gICAgICBkZXNjcmlwdGlvbiA9IF9yZWYuZGVzY3JpcHRpb247XG4gIHJldHVybiBbaW1hZ2UgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAga2V5OiBcImltYWdlXCIsXG4gICAgY2xhc3NOYW1lOiBcImltYWdlXCJcbiAgfSwgY3JlYXRlSFRNTEltYWdlKGltYWdlLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGtleTogXCJjb250ZW50XCIsXG4gICAgY2xhc3NOYW1lOiBcImNvbnRlbnRcIlxuICB9LCBwcmljZSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwicHJpY2VcIlxuICB9LCBwcmljZSksIHRpdGxlICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJ0aXRsZVwiXG4gIH0sIHRpdGxlKSwgZGVzY3JpcHRpb24gJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcImRlc2NyaXB0aW9uXCJcbiAgfSwgZGVzY3JpcHRpb24pKV07XG59O1xuXG5kZWZhdWx0UmVuZGVyZXIuaGFuZGxlZFByb3BzID0gW107XG5cbnZhciBTZWFyY2hSZXN1bHQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNlYXJjaFJlc3VsdCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2VhcmNoUmVzdWx0KCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlYXJjaFJlc3VsdCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihTZWFyY2hSZXN1bHQpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIG9uQ2xpY2sgPSBfdGhpcy5wcm9wcy5vbkNsaWNrO1xuICAgICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZSwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNlYXJjaFJlc3VsdCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICByZW5kZXJlciA9IF90aGlzJHByb3BzLnJlbmRlcmVyO1xuICAgICAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KGFjdGl2ZSwgJ2FjdGl2ZScpLCAncmVzdWx0JywgY2xhc3NOYW1lKTtcbiAgICAgIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoU2VhcmNoUmVzdWx0LCB0aGlzLnByb3BzKTtcbiAgICAgIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFNlYXJjaFJlc3VsdCwgdGhpcy5wcm9wcyk7IC8vIE5vdGU6IFlvdSB0ZWNobmljYWxseSBvbmx5IG5lZWQgdGhlICdjb250ZW50JyB3cmFwcGVyIHdoZW4gdGhlcmUncyBhblxuICAgICAgLy8gaW1hZ2UuIEhvd2V2ZXIsIG9wdGlvbmFsbHkgd3JhcHBpbmcgaXQgbWFrZXMgdGhpcyBmdW5jdGlvbiBhIGxvdCBtb3JlXG4gICAgICAvLyBjb21wbGljYXRlZCBhbmQgaGFyZGVyIHRvIHJlYWQuIFNpbmNlIGFsd2F5cyB3cmFwcGluZyBpdCBkb2Vzbid0IGFmZmVjdFxuICAgICAgLy8gdGhlIHN0eWxlIGluIGFueSB3YXkgbGV0J3MganVzdCBkbyB0aGF0LlxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrXG4gICAgICB9KSwgcmVuZGVyZXIodGhpcy5wcm9wcykpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZWFyY2hSZXN1bHQ7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShTZWFyY2hSZXN1bHQsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgcmVuZGVyZXI6IGRlZmF1bHRSZW5kZXJlclxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShTZWFyY2hSZXN1bHQsIFwiaGFuZGxlZFByb3BzXCIsIFtcImFjdGl2ZVwiLCBcImFzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiLCBcImRlc2NyaXB0aW9uXCIsIFwiaWRcIiwgXCJpbWFnZVwiLCBcIm9uQ2xpY2tcIiwgXCJwcmljZVwiLCBcInJlbmRlcmVyXCIsIFwidGl0bGVcIl0pO1xuXG5leHBvcnQgeyBTZWFyY2hSZXN1bHQgYXMgZGVmYXVsdCB9O1xuU2VhcmNoUmVzdWx0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFRoZSBpdGVtIGN1cnJlbnRseSBzZWxlY3RlZCBieSBrZXlib2FyZCBzaG9ydGN1dC4gKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQWRkaXRpb25hbCB0ZXh0IHdpdGggbGVzcyBlbXBoYXNpcy4gKi9cbiAgZGVzY3JpcHRpb246IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEEgdW5pcXVlIGlkZW50aWZpZXIuICovXG4gIGlkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqIEFkZCBhbiBpbWFnZSB0byB0aGUgaXRlbS4gKi9cbiAgaW1hZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBjbGljay5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKiBDdXN0b21pemVkIHRleHQgZm9yIHByaWNlLiAqL1xuICBwcmljZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgcmVzdWx0IGNvbnRlbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSBUaGUgU2VhcmNoUmVzdWx0IHByb3BzIG9iamVjdC5cbiAgICogQHJldHVybnMgeyp9IC0gUmVuZGVyYWJsZSByZXN1bHQgY29udGVudHMuXG4gICAqL1xuICByZW5kZXJlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqIERpc3BsYXkgdGl0bGUuICovXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbn0gOiB7fTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG5cbmZ1bmN0aW9uIFNlYXJjaFJlc3VsdHMocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudDtcbiAgdmFyIGNsYXNzZXMgPSBjeCgncmVzdWx0cyB0cmFuc2l0aW9uJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhTZWFyY2hSZXN1bHRzLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFNlYXJjaFJlc3VsdHMsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cblNlYXJjaFJlc3VsdHMuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5TZWFyY2hSZXN1bHRzLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBTZWFyY2hSZXN1bHRzOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2dldDIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0XCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2lzRW1wdHkgZnJvbSBcImxvZGFzaC9pc0VtcHR5XCI7XG5pbXBvcnQgX3BhcnRpYWxSaWdodCBmcm9tIFwibG9kYXNoL3BhcnRpYWxSaWdodFwiO1xuaW1wb3J0IF9pblJhbmdlIGZyb20gXCJsb2Rhc2gvaW5SYW5nZVwiO1xuaW1wb3J0IF9tYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcbmltcG9ydCBfZ2V0IGZyb20gXCJsb2Rhc2gvZ2V0XCI7XG5pbXBvcnQgX3JlZHVjZSBmcm9tIFwibG9kYXNoL3JlZHVjZVwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCBfd2l0aG91dCBmcm9tIFwibG9kYXNoL3dpdGhvdXRcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBrZXlib2FyZEtleSBmcm9tICdrZXlib2FyZC1rZXknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJ3NoYWxsb3dlcXVhbCc7XG5pbXBvcnQgeyBBdXRvQ29udHJvbGxlZENvbXBvbmVudCBhcyBDb21wb25lbnQsIGN1c3RvbVByb3BUeXBlcywgZXZlbnRTdGFjaywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBodG1sSW5wdXRBdHRycywgaXNCcm93c2VyLCBvYmplY3REaWZmLCBwYXJ0aXRpb25IVE1MUHJvcHMsIFNVSSwgdXNlS2V5T25seSwgdXNlVmFsdWVBbmRLZXkgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IElucHV0IGZyb20gJy4uLy4uL2VsZW1lbnRzL0lucHV0JztcbmltcG9ydCBTZWFyY2hDYXRlZ29yeSBmcm9tICcuL1NlYXJjaENhdGVnb3J5JztcbmltcG9ydCBTZWFyY2hSZXN1bHQgZnJvbSAnLi9TZWFyY2hSZXN1bHQnO1xuaW1wb3J0IFNlYXJjaFJlc3VsdHMgZnJvbSAnLi9TZWFyY2hSZXN1bHRzJztcblxuLyoqXG4gKiBBIHNlYXJjaCBtb2R1bGUgYWxsb3dzIGEgdXNlciB0byBxdWVyeSBmb3IgcmVzdWx0cyBmcm9tIGEgc2VsZWN0aW9uIG9mIGRhdGFcbiAqL1xudmFyIFNlYXJjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2VhcmNoLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTZWFyY2goKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VhcmNoKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFNlYXJjaCkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVJlc3VsdFNlbGVjdFwiLCBmdW5jdGlvbiAoZSwgcmVzdWx0KSB7XG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25SZXN1bHRTZWxlY3QnLCBlLCBfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge1xuICAgICAgICByZXN1bHQ6IHJlc3VsdFxuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVNlbGVjdGlvbkNoYW5nZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IF90aGlzLmdldFNlbGVjdGVkUmVzdWx0KCk7XG5cbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvblNlbGVjdGlvbkNoYW5nZScsIGUsIF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzLCB7XG4gICAgICAgIHJlc3VsdDogcmVzdWx0XG4gICAgICB9KSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2xvc2VPbkVzY2FwZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGtleWJvYXJkS2V5LmdldENvZGUoZSkgIT09IGtleWJvYXJkS2V5LkVzY2FwZSkgcmV0dXJuO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBfdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm1vdmVTZWxlY3Rpb25PbktleURvd25cIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHN3aXRjaCAoa2V5Ym9hcmRLZXkuZ2V0Q29kZShlKSkge1xuICAgICAgICBjYXNlIGtleWJvYXJkS2V5LkFycm93RG93bjpcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICBfdGhpcy5tb3ZlU2VsZWN0aW9uQnkoZSwgMSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIGtleWJvYXJkS2V5LkFycm93VXA6XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgX3RoaXMubW92ZVNlbGVjdGlvbkJ5KGUsIC0xKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2VsZWN0SXRlbU9uRW50ZXJcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChrZXlib2FyZEtleS5nZXRDb2RlKGUpICE9PSBrZXlib2FyZEtleS5FbnRlcikgcmV0dXJuO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gX3RoaXMuZ2V0U2VsZWN0ZWRSZXN1bHQoKTsgLy8gcHJldmVudCBzZWxlY3RpbmcgbnVsbCBpZiB0aGVyZSB3YXMgbm8gc2VsZWN0ZWQgaXRlbSB2YWx1ZVxuXG5cbiAgICAgIGlmICghcmVzdWx0KSByZXR1cm47XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIG5vdGlmeSB0aGUgb25SZXN1bHRTZWxlY3QgcHJvcCB0aGF0IHRoZSB1c2VyIGlzIHRyeWluZyB0byBjaGFuZ2UgdmFsdWVcblxuICAgICAgX3RoaXMuc2V0VmFsdWUocmVzdWx0LnRpdGxlKTtcblxuICAgICAgX3RoaXMuaGFuZGxlUmVzdWx0U2VsZWN0KGUsIHJlc3VsdCk7XG5cbiAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2xvc2VPbkRvY3VtZW50Q2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlTW91c2VEb3duXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBfdGhpcy5pc01vdXNlRG93biA9IHRydWU7XG5cbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbk1vdXNlRG93bicsIGUsIF90aGlzLnByb3BzKTtcblxuICAgICAgZXZlbnRTdGFjay5zdWIoJ21vdXNldXAnLCBfdGhpcy5oYW5kbGVEb2N1bWVudE1vdXNlVXApO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZURvY3VtZW50TW91c2VVcFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5pc01vdXNlRG93biA9IGZhbHNlO1xuICAgICAgZXZlbnRTdGFjay51bnN1YignbW91c2V1cCcsIF90aGlzLmhhbmRsZURvY3VtZW50TW91c2VVcCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlSW5wdXRDbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgLy8gcHJldmVudCBjbG9zZU9uRG9jdW1lbnRDbGljaygpXG4gICAgICBlLm5hdGl2ZUV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXG4gICAgICBfdGhpcy50cnlPcGVuKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlSXRlbUNsaWNrXCIsIGZ1bmN0aW9uIChlLCBfcmVmKSB7XG4gICAgICB2YXIgaWQgPSBfcmVmLmlkO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gX3RoaXMuZ2V0U2VsZWN0ZWRSZXN1bHQoaWQpOyAvLyBwcmV2ZW50IGNsb3NlT25Eb2N1bWVudENsaWNrKClcblxuXG4gICAgICBlLm5hdGl2ZUV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpOyAvLyBub3RpZnkgdGhlIG9uUmVzdWx0U2VsZWN0IHByb3AgdGhhdCB0aGUgdXNlciBpcyB0cnlpbmcgdG8gY2hhbmdlIHZhbHVlXG5cbiAgICAgIF90aGlzLnNldFZhbHVlKHJlc3VsdC50aXRsZSk7XG5cbiAgICAgIF90aGlzLmhhbmRsZVJlc3VsdFNlbGVjdChlLCByZXN1bHQpO1xuXG4gICAgICBfdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUl0ZW1Nb3VzZURvd25cIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8vIEhlYWRzIHVwISBXZSBzaG91bGQgcHJldmVudCBkZWZhdWx0IHRvIHByZXZlbnQgYmx1ciBldmVudHMuXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vU2VtYW50aWMtT3JnL1NlbWFudGljLVVJLVJlYWN0L2lzc3Vlcy8zMjk4XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlRm9jdXNcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkZvY3VzJywgZSwgX3RoaXMucHJvcHMpO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVCbHVyXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25CbHVyJywgZSwgX3RoaXMucHJvcHMpO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlU2VhcmNoQ2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAvLyBwcmV2ZW50IHByb3BhZ2F0aW5nIHRvIHRoaXMucHJvcHMub25DaGFuZ2UoKVxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHZhciBtaW5DaGFyYWN0ZXJzID0gX3RoaXMucHJvcHMubWluQ2hhcmFjdGVycztcbiAgICAgIHZhciBvcGVuID0gX3RoaXMuc3RhdGUub3BlbjtcbiAgICAgIHZhciBuZXdRdWVyeSA9IGUudGFyZ2V0LnZhbHVlO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCAnb25TZWFyY2hDaGFuZ2UnLCBlLCBfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge1xuICAgICAgICB2YWx1ZTogbmV3UXVlcnlcbiAgICAgIH0pKTsgLy8gb3BlbiBzZWFyY2ggZHJvcGRvd24gb24gc2VhcmNoIHF1ZXJ5XG5cblxuICAgICAgaWYgKG5ld1F1ZXJ5Lmxlbmd0aCA8IG1pbkNoYXJhY3RlcnMpIHtcbiAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgIH0gZWxzZSBpZiAoIW9wZW4pIHtcbiAgICAgICAgX3RoaXMudHJ5T3BlbihuZXdRdWVyeSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFZhbHVlKG5ld1F1ZXJ5KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRGbGF0dGVuZWRSZXN1bHRzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNhdGVnb3J5ID0gX3RoaXMkcHJvcHMuY2F0ZWdvcnksXG4gICAgICAgICAgcmVzdWx0cyA9IF90aGlzJHByb3BzLnJlc3VsdHM7XG4gICAgICByZXR1cm4gIWNhdGVnb3J5ID8gcmVzdWx0cyA6IF9yZWR1Y2UocmVzdWx0cywgZnVuY3Rpb24gKG1lbW8sIGNhdGVnb3J5RGF0YSkge1xuICAgICAgICByZXR1cm4gbWVtby5jb25jYXQoY2F0ZWdvcnlEYXRhLnJlc3VsdHMpO1xuICAgICAgfSwgW10pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFNlbGVjdGVkUmVzdWx0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleDtcblxuICAgICAgdmFyIHJlc3VsdHMgPSBfdGhpcy5nZXRGbGF0dGVuZWRSZXN1bHRzKCk7XG5cbiAgICAgIHJldHVybiBfZ2V0KHJlc3VsdHMsIGluZGV4KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRWYWx1ZVwiLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBzZWxlY3RGaXJzdFJlc3VsdCA9IF90aGlzLnByb3BzLnNlbGVjdEZpcnN0UmVzdWx0O1xuXG4gICAgICBfdGhpcy50cnlTZXRTdGF0ZSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgc2VsZWN0ZWRJbmRleDogc2VsZWN0Rmlyc3RSZXN1bHQgPyAwIDogLTFcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm1vdmVTZWxlY3Rpb25CeVwiLCBmdW5jdGlvbiAoZSwgb2Zmc2V0KSB7XG4gICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IF90aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXg7XG5cbiAgICAgIHZhciByZXN1bHRzID0gX3RoaXMuZ2V0RmxhdHRlbmVkUmVzdWx0cygpO1xuXG4gICAgICB2YXIgbGFzdEluZGV4ID0gcmVzdWx0cy5sZW5ndGggLSAxOyAvLyBuZXh0IGlzIGFmdGVyIGxhc3QsIHdyYXAgdG8gYmVnaW5uaW5nXG4gICAgICAvLyBuZXh0IGlzIGJlZm9yZSBmaXJzdCwgd3JhcCB0byBlbmRcblxuICAgICAgdmFyIG5leHRJbmRleCA9IHNlbGVjdGVkSW5kZXggKyBvZmZzZXQ7XG4gICAgICBpZiAobmV4dEluZGV4ID4gbGFzdEluZGV4KSBuZXh0SW5kZXggPSAwO2Vsc2UgaWYgKG5leHRJbmRleCA8IDApIG5leHRJbmRleCA9IGxhc3RJbmRleDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzZWxlY3RlZEluZGV4OiBuZXh0SW5kZXhcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5zY3JvbGxTZWxlY3RlZEl0ZW1JbnRvVmlldygpO1xuXG4gICAgICBfdGhpcy5oYW5kbGVTZWxlY3Rpb25DaGFuZ2UoZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2Nyb2xsU2VsZWN0ZWRJdGVtSW50b1ZpZXdcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gRG8gbm90IGFjY2VzcyBkb2N1bWVudCB3aGVuIHNlcnZlciBzaWRlIHJlbmRlcmluZ1xuICAgICAgaWYgKCFpc0Jyb3dzZXIoKSkgcmV0dXJuO1xuICAgICAgdmFyIG1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudWkuc2VhcmNoLmFjdGl2ZS52aXNpYmxlIC5yZXN1bHRzLnZpc2libGUnKTtcbiAgICAgIHZhciBpdGVtID0gbWVudS5xdWVyeVNlbGVjdG9yKCcucmVzdWx0LmFjdGl2ZScpO1xuICAgICAgaWYgKCFpdGVtKSByZXR1cm47XG4gICAgICB2YXIgaXNPdXRPZlVwcGVyVmlldyA9IGl0ZW0ub2Zmc2V0VG9wIDwgbWVudS5zY3JvbGxUb3A7XG4gICAgICB2YXIgaXNPdXRPZkxvd2VyVmlldyA9IGl0ZW0ub2Zmc2V0VG9wICsgaXRlbS5jbGllbnRIZWlnaHQgPiBtZW51LnNjcm9sbFRvcCArIG1lbnUuY2xpZW50SGVpZ2h0O1xuXG4gICAgICBpZiAoaXNPdXRPZlVwcGVyVmlldykge1xuICAgICAgICBtZW51LnNjcm9sbFRvcCA9IGl0ZW0ub2Zmc2V0VG9wO1xuICAgICAgfSBlbHNlIGlmIChpc091dE9mTG93ZXJWaWV3KSB7XG4gICAgICAgIG1lbnUuc2Nyb2xsVG9wID0gaXRlbS5vZmZzZXRUb3AgKyBpdGVtLmNsaWVudEhlaWdodCAtIG1lbnUuY2xpZW50SGVpZ2h0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInRyeU9wZW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX3RoaXMuc3RhdGUudmFsdWU7XG4gICAgICB2YXIgbWluQ2hhcmFjdGVycyA9IF90aGlzLnByb3BzLm1pbkNoYXJhY3RlcnM7XG4gICAgICBpZiAoY3VycmVudFZhbHVlLmxlbmd0aCA8IG1pbkNoYXJhY3RlcnMpIHJldHVybjtcblxuICAgICAgX3RoaXMub3BlbigpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9wZW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudHJ5U2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjbG9zZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy50cnlTZXRTdGF0ZSh7XG4gICAgICAgIG9wZW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZW5kZXJTZWFyY2hJbnB1dFwiLCBmdW5jdGlvbiAocmVzdCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGljb24gPSBfdGhpcyRwcm9wczIuaWNvbixcbiAgICAgICAgICBpbnB1dCA9IF90aGlzJHByb3BzMi5pbnB1dDtcbiAgICAgIHZhciB2YWx1ZSA9IF90aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgcmV0dXJuIElucHV0LmNyZWF0ZShpbnB1dCwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlLFxuICAgICAgICBkZWZhdWx0UHJvcHM6IF9vYmplY3RTcHJlYWQoe30sIHJlc3QsIHtcbiAgICAgICAgICBpY29uOiBpY29uLFxuICAgICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdwcm9tcHQnLFxuICAgICAgICAgICAgdGFiSW5kZXg6ICcwJyxcbiAgICAgICAgICAgIGF1dG9Db21wbGV0ZTogJ29mZidcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5oYW5kbGVTZWFyY2hDaGFuZ2UsXG4gICAgICAgICAgb25DbGljazogX3RoaXMuaGFuZGxlSW5wdXRDbGljayxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlbmRlck5vUmVzdWx0c1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgbm9SZXN1bHRzRGVzY3JpcHRpb24gPSBfdGhpcyRwcm9wczMubm9SZXN1bHRzRGVzY3JpcHRpb24sXG4gICAgICAgICAgbm9SZXN1bHRzTWVzc2FnZSA9IF90aGlzJHByb3BzMy5ub1Jlc3VsdHNNZXNzYWdlO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwibWVzc2FnZSBlbXB0eVwiXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImhlYWRlclwiXG4gICAgICB9LCBub1Jlc3VsdHNNZXNzYWdlKSwgbm9SZXN1bHRzRGVzY3JpcHRpb24gJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJkZXNjcmlwdGlvblwiXG4gICAgICB9LCBub1Jlc3VsdHNEZXNjcmlwdGlvbikpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlbmRlclJlc3VsdFwiLCBmdW5jdGlvbiAoX3JlZjIsIGluZGV4LCBfYXJyYXkpIHtcbiAgICAgIHZhciBjaGlsZEtleSA9IF9yZWYyLmNoaWxkS2V5LFxuICAgICAgICAgIHJlc3VsdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgW1wiY2hpbGRLZXlcIl0pO1xuXG4gICAgICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAwO1xuICAgICAgdmFyIHJlc3VsdFJlbmRlcmVyID0gX3RoaXMucHJvcHMucmVzdWx0UmVuZGVyZXI7XG4gICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IF90aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXg7XG4gICAgICB2YXIgb2Zmc2V0SW5kZXggPSBpbmRleCArIG9mZnNldDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFNlYXJjaFJlc3VsdCwgX2V4dGVuZHMoe1xuICAgICAgICBrZXk6IGNoaWxkS2V5IHx8IHJlc3VsdC5pZCB8fCByZXN1bHQudGl0bGUsXG4gICAgICAgIGFjdGl2ZTogc2VsZWN0ZWRJbmRleCA9PT0gb2Zmc2V0SW5kZXgsXG4gICAgICAgIG9uQ2xpY2s6IF90aGlzLmhhbmRsZUl0ZW1DbGljayxcbiAgICAgICAgb25Nb3VzZURvd246IF90aGlzLmhhbmRsZUl0ZW1Nb3VzZURvd24sXG4gICAgICAgIHJlbmRlcmVyOiByZXN1bHRSZW5kZXJlclxuICAgICAgfSwgcmVzdWx0LCB7XG4gICAgICAgIGlkOiBvZmZzZXRJbmRleCAvLyBVc2VkIHRvIGxvb2t1cCB0aGUgcmVzdWx0IG9uIGl0ZW0gY2xpY2tcblxuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlbmRlclJlc3VsdHNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlc3VsdHMgPSBfdGhpcy5wcm9wcy5yZXN1bHRzO1xuICAgICAgcmV0dXJuIF9tYXAocmVzdWx0cywgX3RoaXMucmVuZGVyUmVzdWx0KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZW5kZXJDYXRlZ29yaWVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjYXRlZ29yeUxheW91dFJlbmRlcmVyID0gX3RoaXMkcHJvcHM0LmNhdGVnb3J5TGF5b3V0UmVuZGVyZXIsXG4gICAgICAgICAgY2F0ZWdvcnlSZW5kZXJlciA9IF90aGlzJHByb3BzNC5jYXRlZ29yeVJlbmRlcmVyLFxuICAgICAgICAgIGNhdGVnb3JpZXMgPSBfdGhpcyRwcm9wczQucmVzdWx0cztcbiAgICAgIHZhciBzZWxlY3RlZEluZGV4ID0gX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleDtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICByZXR1cm4gX21hcChjYXRlZ29yaWVzLCBmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgdmFyIGNoaWxkS2V5ID0gX3JlZjMuY2hpbGRLZXksXG4gICAgICAgICAgICBjYXRlZ29yeSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMywgW1wiY2hpbGRLZXlcIl0pO1xuXG4gICAgICAgIHZhciBjYXRlZ29yeVByb3BzID0gX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAga2V5OiBjaGlsZEtleSB8fCBjYXRlZ29yeS5uYW1lLFxuICAgICAgICAgIGFjdGl2ZTogX2luUmFuZ2Uoc2VsZWN0ZWRJbmRleCwgY291bnQsIGNvdW50ICsgY2F0ZWdvcnkucmVzdWx0cy5sZW5ndGgpLFxuICAgICAgICAgIGxheW91dFJlbmRlcmVyOiBjYXRlZ29yeUxheW91dFJlbmRlcmVyLFxuICAgICAgICAgIHJlbmRlcmVyOiBjYXRlZ29yeVJlbmRlcmVyXG4gICAgICAgIH0sIGNhdGVnb3J5KTtcblxuICAgICAgICB2YXIgcmVuZGVyRm4gPSBfcGFydGlhbFJpZ2h0KF90aGlzLnJlbmRlclJlc3VsdCwgY291bnQpO1xuXG4gICAgICAgIGNvdW50ICs9IGNhdGVnb3J5LnJlc3VsdHMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTZWFyY2hDYXRlZ29yeSwgY2F0ZWdvcnlQcm9wcywgY2F0ZWdvcnkucmVzdWx0cy5tYXAocmVuZGVyRm4pKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlbmRlck1lbnVDb250ZW50XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczUgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjYXRlZ29yeSA9IF90aGlzJHByb3BzNS5jYXRlZ29yeSxcbiAgICAgICAgICBzaG93Tm9SZXN1bHRzID0gX3RoaXMkcHJvcHM1LnNob3dOb1Jlc3VsdHMsXG4gICAgICAgICAgcmVzdWx0cyA9IF90aGlzJHByb3BzNS5yZXN1bHRzO1xuXG4gICAgICBpZiAoX2lzRW1wdHkocmVzdWx0cykpIHtcbiAgICAgICAgcmV0dXJuIHNob3dOb1Jlc3VsdHMgPyBfdGhpcy5yZW5kZXJOb1Jlc3VsdHMoKSA6IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYXRlZ29yeSA/IF90aGlzLnJlbmRlckNhdGVnb3JpZXMoKSA6IF90aGlzLnJlbmRlclJlc3VsdHMoKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZW5kZXJSZXN1bHRzTWVudVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb3BlbiA9IF90aGlzLnN0YXRlLm9wZW47XG4gICAgICB2YXIgcmVzdWx0c0NsYXNzZXMgPSBvcGVuID8gJ3Zpc2libGUnIDogJyc7XG5cbiAgICAgIHZhciBtZW51Q29udGVudCA9IF90aGlzLnJlbmRlck1lbnVDb250ZW50KCk7XG5cbiAgICAgIGlmICghbWVudUNvbnRlbnQpIHJldHVybjtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFNlYXJjaFJlc3VsdHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiByZXN1bHRzQ2xhc3Nlc1xuICAgICAgfSwgbWVudUNvbnRlbnQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNlYXJjaCwgW3tcbiAgICBrZXk6IFwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudFwiLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgICB2YWx1ZTogZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgb3BlbiA9IF90aGlzJHN0YXRlLm9wZW4sXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRzdGF0ZS52YWx1ZTtcbiAgICAgIHRoaXMuc2V0VmFsdWUodmFsdWUpO1xuICAgICAgaWYgKG9wZW4pIHRoaXMub3BlbigpO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBfZ2V0MihfZ2V0UHJvdG90eXBlT2YoU2VhcmNoLnByb3RvdHlwZSksIFwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIiwgdGhpcykuY2FsbCh0aGlzLCBuZXh0UHJvcHMpO1xuXG4gICAgICBpZiAoIXNoYWxsb3dFcXVhbChuZXh0UHJvcHMudmFsdWUsIHRoaXMucHJvcHMudmFsdWUpKSB7XG4gICAgICAgIHRoaXMuc2V0VmFsdWUobmV4dFByb3BzLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgICAgcmV0dXJuICFzaGFsbG93RXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKSB8fCAhc2hhbGxvd0VxdWFsKG5leHRTdGF0ZSwgdGhpcy5zdGF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29tcGxleGl0eVxuICAgICAgLy8gZm9jdXNlZCAvIGJsdXJyZWRcbiAgICAgIGlmICghcHJldlN0YXRlLmZvY3VzICYmIHRoaXMuc3RhdGUuZm9jdXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzTW91c2VEb3duKSB7XG4gICAgICAgICAgdGhpcy50cnlPcGVuKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICAgICAgZXZlbnRTdGFjay5zdWIoJ2tleWRvd24nLCBbdGhpcy5tb3ZlU2VsZWN0aW9uT25LZXlEb3duLCB0aGlzLnNlbGVjdEl0ZW1PbkVudGVyXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJldlN0YXRlLmZvY3VzICYmICF0aGlzLnN0YXRlLmZvY3VzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc01vdXNlRG93bikge1xuICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50U3RhY2sudW5zdWIoJ2tleWRvd24nLCBbdGhpcy5tb3ZlU2VsZWN0aW9uT25LZXlEb3duLCB0aGlzLnNlbGVjdEl0ZW1PbkVudGVyXSk7XG4gICAgICB9IC8vIG9wZW5lZCAvIGNsb3NlZFxuXG5cbiAgICAgIGlmICghcHJldlN0YXRlLm9wZW4gJiYgdGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgICBldmVudFN0YWNrLnN1YignY2xpY2snLCB0aGlzLmNsb3NlT25Eb2N1bWVudENsaWNrKTtcbiAgICAgICAgZXZlbnRTdGFjay5zdWIoJ2tleWRvd24nLCBbdGhpcy5jbG9zZU9uRXNjYXBlLCB0aGlzLm1vdmVTZWxlY3Rpb25PbktleURvd24sIHRoaXMuc2VsZWN0SXRlbU9uRW50ZXJdKTtcbiAgICAgIH0gZWxzZSBpZiAocHJldlN0YXRlLm9wZW4gJiYgIXRoaXMuc3RhdGUub3Blbikge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIGV2ZW50U3RhY2sudW5zdWIoJ2NsaWNrJywgdGhpcy5jbG9zZU9uRG9jdW1lbnRDbGljayk7XG4gICAgICAgIGV2ZW50U3RhY2sudW5zdWIoJ2tleWRvd24nLCBbdGhpcy5jbG9zZU9uRXNjYXBlLCB0aGlzLm1vdmVTZWxlY3Rpb25PbktleURvd24sIHRoaXMuc2VsZWN0SXRlbU9uRW50ZXJdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBldmVudFN0YWNrLnVuc3ViKCdjbGljaycsIHRoaXMuY2xvc2VPbkRvY3VtZW50Q2xpY2spO1xuICAgICAgZXZlbnRTdGFjay51bnN1Yigna2V5ZG93bicsIFt0aGlzLmNsb3NlT25Fc2NhcGUsIHRoaXMubW92ZVNlbGVjdGlvbk9uS2V5RG93biwgdGhpcy5zZWxlY3RJdGVtT25FbnRlcl0pO1xuICAgIH0gLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIERvY3VtZW50IEV2ZW50IEhhbmRsZXJzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIHNlYXJjaENsYXNzZXMgPSBfdGhpcyRzdGF0ZTIuc2VhcmNoQ2xhc3NlcyxcbiAgICAgICAgICBmb2N1cyA9IF90aGlzJHN0YXRlMi5mb2N1cyxcbiAgICAgICAgICBvcGVuID0gX3RoaXMkc3RhdGUyLm9wZW47XG4gICAgICB2YXIgX3RoaXMkcHJvcHM2ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhbGlnbmVkID0gX3RoaXMkcHJvcHM2LmFsaWduZWQsXG4gICAgICAgICAgY2F0ZWdvcnkgPSBfdGhpcyRwcm9wczYuY2F0ZWdvcnksXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHM2LmNsYXNzTmFtZSxcbiAgICAgICAgICBmbHVpZCA9IF90aGlzJHByb3BzNi5mbHVpZCxcbiAgICAgICAgICBsb2FkaW5nID0gX3RoaXMkcHJvcHM2LmxvYWRpbmcsXG4gICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzNi5zaXplOyAvLyBDbGFzc2VzXG5cbiAgICAgIHZhciBjbGFzc2VzID0gY3goJ3VpJywgb3BlbiAmJiAnYWN0aXZlIHZpc2libGUnLCBzaXplLCBzZWFyY2hDbGFzc2VzLCB1c2VLZXlPbmx5KGNhdGVnb3J5LCAnY2F0ZWdvcnknKSwgdXNlS2V5T25seShmb2N1cywgJ2ZvY3VzJyksIHVzZUtleU9ubHkoZmx1aWQsICdmbHVpZCcpLCB1c2VLZXlPbmx5KGxvYWRpbmcsICdsb2FkaW5nJyksIHVzZVZhbHVlQW5kS2V5KGFsaWduZWQsICdhbGlnbmVkJyksICdzZWFyY2gnLCBjbGFzc05hbWUpO1xuICAgICAgdmFyIHVuaGFuZGxlZCA9IGdldFVuaGFuZGxlZFByb3BzKFNlYXJjaCwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShTZWFyY2gsIHRoaXMucHJvcHMpO1xuXG4gICAgICB2YXIgX3BhcnRpdGlvbkhUTUxQcm9wcyA9IHBhcnRpdGlvbkhUTUxQcm9wcyh1bmhhbmRsZWQsIHtcbiAgICAgICAgaHRtbFByb3BzOiBodG1sSW5wdXRBdHRyc1xuICAgICAgfSksXG4gICAgICAgICAgX3BhcnRpdGlvbkhUTUxQcm9wczIgPSBfc2xpY2VkVG9BcnJheShfcGFydGl0aW9uSFRNTFByb3BzLCAyKSxcbiAgICAgICAgICBodG1sSW5wdXRQcm9wcyA9IF9wYXJ0aXRpb25IVE1MUHJvcHMyWzBdLFxuICAgICAgICAgIHJlc3QgPSBfcGFydGl0aW9uSFRNTFByb3BzMlsxXTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXIsXG4gICAgICAgIG9uRm9jdXM6IHRoaXMuaGFuZGxlRm9jdXMsXG4gICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93blxuICAgICAgfSksIHRoaXMucmVuZGVyU2VhcmNoSW5wdXQoaHRtbElucHV0UHJvcHMpLCB0aGlzLnJlbmRlclJlc3VsdHNNZW51KCkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZWFyY2g7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShTZWFyY2gsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgaWNvbjogJ3NlYXJjaCcsXG4gIGlucHV0OiAndGV4dCcsXG4gIG1pbkNoYXJhY3RlcnM6IDEsXG4gIG5vUmVzdWx0c01lc3NhZ2U6ICdObyByZXN1bHRzIGZvdW5kLicsXG4gIHNob3dOb1Jlc3VsdHM6IHRydWVcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoU2VhcmNoLCBcImF1dG9Db250cm9sbGVkUHJvcHNcIiwgWydvcGVuJywgJ3ZhbHVlJ10pO1xuXG5fZGVmaW5lUHJvcGVydHkoU2VhcmNoLCBcIkNhdGVnb3J5XCIsIFNlYXJjaENhdGVnb3J5KTtcblxuX2RlZmluZVByb3BlcnR5KFNlYXJjaCwgXCJSZXN1bHRcIiwgU2VhcmNoUmVzdWx0KTtcblxuX2RlZmluZVByb3BlcnR5KFNlYXJjaCwgXCJSZXN1bHRzXCIsIFNlYXJjaFJlc3VsdHMpO1xuXG5fZGVmaW5lUHJvcGVydHkoU2VhcmNoLCBcImhhbmRsZWRQcm9wc1wiLCBbXCJhbGlnbmVkXCIsIFwiYXNcIiwgXCJjYXRlZ29yeVwiLCBcImNhdGVnb3J5TGF5b3V0UmVuZGVyZXJcIiwgXCJjYXRlZ29yeVJlbmRlcmVyXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdE9wZW5cIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJmbHVpZFwiLCBcImljb25cIiwgXCJpbnB1dFwiLCBcImxvYWRpbmdcIiwgXCJtaW5DaGFyYWN0ZXJzXCIsIFwibm9SZXN1bHRzRGVzY3JpcHRpb25cIiwgXCJub1Jlc3VsdHNNZXNzYWdlXCIsIFwib25CbHVyXCIsIFwib25Gb2N1c1wiLCBcIm9uTW91c2VEb3duXCIsIFwib25SZXN1bHRTZWxlY3RcIiwgXCJvblNlYXJjaENoYW5nZVwiLCBcIm9uU2VsZWN0aW9uQ2hhbmdlXCIsIFwib3BlblwiLCBcInJlc3VsdFJlbmRlcmVyXCIsIFwicmVzdWx0c1wiLCBcInNlbGVjdEZpcnN0UmVzdWx0XCIsIFwic2hvd05vUmVzdWx0c1wiLCBcInNpemVcIiwgXCJ2YWx1ZVwiXSk7XG5cbmV4cG9ydCB7IFNlYXJjaCBhcyBkZWZhdWx0IH07XG5TZWFyY2gucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEJlaGF2aW9yXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKiBJbml0aWFsIHZhbHVlIG9mIG9wZW4uICovXG4gIGRlZmF1bHRPcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogSW5pdGlhbCB2YWx1ZS4gKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEljb24uICovXG4gIGljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqIE1pbmltdW0gY2hhcmFjdGVycyB0byBxdWVyeSBmb3IgcmVzdWx0cyAqL1xuICBtaW5DaGFyYWN0ZXJzOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKiBBZGRpdGlvbmFsIHRleHQgZm9yIFwiTm8gUmVzdWx0c1wiIG1lc3NhZ2Ugd2l0aCBsZXNzIGVtcGhhc2lzLiAqL1xuICBub1Jlc3VsdHNEZXNjcmlwdGlvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIE1lc3NhZ2UgdG8gZGlzcGxheSB3aGVuIHRoZXJlIGFyZSBubyByZXN1bHRzLiAqL1xuICBub1Jlc3VsdHNNZXNzYWdlOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQ29udHJvbHMgd2hldGhlciBvciBub3QgdGhlIHJlc3VsdHMgbWVudSBpcyBkaXNwbGF5ZWQuICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPbmUgb2Y6XG4gICAqIC0gYXJyYXkgb2YgU2VhcmNoLlJlc3VsdCBwcm9wcyBlLmcuIGB7IHRpdGxlOiAnJywgZGVzY3JpcHRpb246ICcnIH1gIG9yXG4gICAqIC0gb2JqZWN0IG9mIGNhdGVnb3JpZXMgZS5nLiBgeyBuYW1lOiAnJywgcmVzdWx0czogW3sgdGl0bGU6ICcnLCBkZXNjcmlwdGlvbjogJycgfV1gXG4gICAqL1xuICByZXN1bHRzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoU2VhcmNoUmVzdWx0LnByb3BUeXBlcykpLCBQcm9wVHlwZXMuc2hhcGUoU2VhcmNoQ2F0ZWdvcnkucHJvcFR5cGVzKV0pLFxuXG4gIC8qKiBXaGV0aGVyIHRoZSBzZWFyY2ggc2hvdWxkIGF1dG9tYXRpY2FsbHkgc2VsZWN0IHRoZSBmaXJzdCByZXN1bHQgYWZ0ZXIgc2VhcmNoaW5nLiAqL1xuICBzZWxlY3RGaXJzdFJlc3VsdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFdoZXRoZXIgYSBcIm5vIHJlc3VsdHNcIiBtZXNzYWdlIHNob3VsZCBiZSBzaG93biBpZiBubyByZXN1bHRzIGFyZSBmb3VuZC4gKi9cbiAgc2hvd05vUmVzdWx0czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEN1cnJlbnQgdmFsdWUgb2YgdGhlIHNlYXJjaCBpbnB1dC4gQ3JlYXRlcyBhIGNvbnRyb2xsZWQgY29tcG9uZW50LiAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFJlbmRlcmluZ1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgU2VhcmNoQ2F0ZWdvcnkgbGF5b3V0LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY2F0ZWdvcnlDb250ZW50IC0gVGhlIFJlbmRlcmFibGUgU2VhcmNoQ2F0ZWdvcnkgY29udGVudHMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSByZXN1bHRzQ29udGVudCAtIFRoZSBSZW5kZXJhYmxlIFNlYXJjaFJlc3VsdCBjb250ZW50cy5cbiAgICogQHJldHVybnMgeyp9IC0gUmVuZGVyYWJsZSBTZWFyY2hDYXRlZ29yeSBsYXlvdXQuXG4gICAqL1xuICBjYXRlZ29yeUxheW91dFJlbmRlcmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgU2VhcmNoQ2F0ZWdvcnkgY29udGVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyAtIFRoZSBTZWFyY2hDYXRlZ29yeSBwcm9wcyBvYmplY3QuXG4gICAqIEByZXR1cm5zIHsqfSAtIFJlbmRlcmFibGUgU2VhcmNoQ2F0ZWdvcnkgY29udGVudHMuXG4gICAqL1xuICBjYXRlZ29yeVJlbmRlcmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgU2VhcmNoUmVzdWx0IGNvbnRlbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSBUaGUgU2VhcmNoUmVzdWx0IHByb3BzIG9iamVjdC5cbiAgICogQHJldHVybnMgeyp9IC0gUmVuZGVyYWJsZSBTZWFyY2hSZXN1bHQgY29udGVudHMuXG4gICAqL1xuICByZXN1bHRSZW5kZXJlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBDYWxsYmFja3NcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBibHVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGZvY3VzLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBtb3VzZWRvd24uXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbk1vdXNlRG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgcmVzdWx0IGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25SZXN1bHRTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gc2VhcmNoIGlucHV0IGNoYW5nZS5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcywgaW5jbHVkZXMgY3VycmVudCB2YWx1ZSBvZiBzZWFyY2ggaW5wdXQuXG4gICAqL1xuICBvblNlYXJjaENoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBhY3RpdmUgc2VsZWN0aW9uIGluZGV4IGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvblNlbGVjdGlvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBTdHlsZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKiogQSBzZWFyY2ggY2FuIGhhdmUgaXRzIHJlc3VsdHMgYWxpZ25lZCB0byBpdHMgbGVmdCBvciByaWdodCBjb250YWluZXIgZWRnZS4gKi9cbiAgYWxpZ25lZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQSBzZWFyY2ggY2FuIGRpc3BsYXkgcmVzdWx0cyBmcm9tIHJlbW90ZSBjb250ZW50IG9yZGVyZWQgYnkgY2F0ZWdvcmllcy4gKi9cbiAgY2F0ZWdvcnk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQSBzZWFyY2ggY2FuIGhhdmUgaXRzIHJlc3VsdHMgdGFrZSB1cCB0aGUgd2lkdGggb2YgaXRzIGNvbnRhaW5lci4gKi9cbiAgZmx1aWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIGlucHV0IGVsZW1lbnQuICovXG4gIGlucHV0OiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogQSBzZWFyY2ggY2FuIHNob3cgYSBsb2FkaW5nIGluZGljYXRvci4gKi9cbiAgbG9hZGluZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIEEgc2VhcmNoIGNhbiBoYXZlIGRpZmZlcmVudCBzaXplcy4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKF93aXRob3V0KFNVSS5TSVpFUywgJ21lZGl1bScpKVxufSA6IHt9OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBwdXNoYWJsZSBzdWItY29tcG9uZW50IGZvciBTaWRlYmFyLlxuICovXG5cbmZ1bmN0aW9uIFNpZGViYXJQdXNoYWJsZShwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdwdXNoYWJsZScsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoU2lkZWJhclB1c2hhYmxlLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFNpZGViYXJQdXNoYWJsZSwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuU2lkZWJhclB1c2hhYmxlLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCJdO1xuU2lkZWJhclB1c2hhYmxlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBTaWRlYmFyUHVzaGFibGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIHVzZUtleU9ubHkgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIHB1c2hhYmxlIHN1Yi1jb21wb25lbnQgZm9yIFNpZGViYXIuXG4gKi9cblxuZnVuY3Rpb24gU2lkZWJhclB1c2hlcihwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZGltbWVkID0gcHJvcHMuZGltbWVkLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdwdXNoZXInLCB1c2VLZXlPbmx5KGRpbW1lZCwgJ2RpbW1lZCcpLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFNpZGViYXJQdXNoZXIsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoU2lkZWJhclB1c2hlciwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuU2lkZWJhclB1c2hlci5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiLCBcImRpbW1lZFwiXTtcblNpZGViYXJQdXNoZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIENvbnRyb2xzIHdoZXRoZXIgb3Igbm90IHRoZSBkaW0gaXMgZGlzcGxheWVkLiAqL1xuICBkaW1tZWQ6IFByb3BUeXBlcy5ib29sXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBTaWRlYmFyUHVzaGVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgeyBFdmVudExpc3RlbmVyLCBkb2N1bWVudFJlZiB9IGZyb20gJ0BzdGFyZHVzdC11aS9yZWFjdC1jb21wb25lbnQtZXZlbnQtbGlzdGVuZXInO1xuaW1wb3J0IHsgaXNSZWZPYmplY3QsIHRvUmVmT2JqZWN0LCBSZWYgfSBmcm9tICdAc3RhcmR1c3QtdWkvcmVhY3QtY29tcG9uZW50LXJlZic7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgY3JlYXRlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBkb2VzTm9kZUNvbnRhaW5DbGljaywgZ2V0VW5oYW5kbGVkUHJvcHMsIGdldEVsZW1lbnRUeXBlLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBTaWRlYmFyUHVzaGFibGUgZnJvbSAnLi9TaWRlYmFyUHVzaGFibGUnO1xuaW1wb3J0IFNpZGViYXJQdXNoZXIgZnJvbSAnLi9TaWRlYmFyUHVzaGVyJztcbi8qKlxuICogQSBzaWRlYmFyIGhpZGVzIGFkZGl0aW9uYWwgY29udGVudCBiZXNpZGUgYSBwYWdlLlxuICovXG5cbnZhciBTaWRlYmFyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTaWRlYmFyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTaWRlYmFyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpZGViYXIpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2lkZWJhcikuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlZlwiLCBjcmVhdGVSZWYoKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQW5pbWF0aW9uU3RhcnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZpc2libGUgPSBfdGhpcy5wcm9wcy52aXNpYmxlO1xuICAgICAgdmFyIGNhbGxiYWNrID0gdmlzaWJsZSA/ICdvblZpc2libGUnIDogJ29uSGlkZSc7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuYW5pbWF0aW9uVGltZXIpO1xuICAgICAgX3RoaXMuYW5pbWF0aW9uVGltZXIgPSBzZXRUaW1lb3V0KF90aGlzLmhhbmRsZUFuaW1hdGlvbkVuZCwgU2lkZWJhci5hbmltYXRpb25EdXJhdGlvbik7XG5cbiAgICAgIGlmIChfdGhpcy5za2lwTmV4dENhbGxiYWNrKSB7XG4gICAgICAgIF90aGlzLnNraXBOZXh0Q2FsbGJhY2sgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCBjYWxsYmFjaywgbnVsbCwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUFuaW1hdGlvbkVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmlzaWJsZSA9IF90aGlzLnByb3BzLnZpc2libGU7XG4gICAgICB2YXIgY2FsbGJhY2sgPSB2aXNpYmxlID8gJ29uU2hvdycgOiAnb25IaWRkZW4nO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGFuaW1hdGlvblRpY2s6IDBcbiAgICAgIH0pO1xuXG4gICAgICBfaW52b2tlKF90aGlzLnByb3BzLCBjYWxsYmFjaywgbnVsbCwgX3RoaXMucHJvcHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZURvY3VtZW50Q2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghZG9lc05vZGVDb250YWluQ2xpY2soX3RoaXMucmVmLmN1cnJlbnQsIGUpKSB7XG4gICAgICAgIF90aGlzLnNraXBOZXh0Q2FsbGJhY2sgPSB0cnVlO1xuXG4gICAgICAgIF9pbnZva2UoX3RoaXMucHJvcHMsICdvbkhpZGUnLCBlLCBfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcywge1xuICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgYW5pbWF0aW9uVGljazogMCxcbiAgICAgIHZpc2libGU6IHByb3BzLnZpc2libGVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTaWRlYmFyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5hbmltYXRpb25UaWNrID4gcHJldlN0YXRlLmFuaW1hdGlvblRpY2spIHtcbiAgICAgICAgdGhpcy5oYW5kbGVBbmltYXRpb25TdGFydCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmFuaW1hdGlvblRpbWVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYW5pbWF0aW9uID0gX3RoaXMkcHJvcHMuYW5pbWF0aW9uLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbnRlbnQgPSBfdGhpcyRwcm9wcy5jb250ZW50LFxuICAgICAgICAgIGRpcmVjdGlvbiA9IF90aGlzJHByb3BzLmRpcmVjdGlvbixcbiAgICAgICAgICB0YXJnZXQgPSBfdGhpcyRwcm9wcy50YXJnZXQsXG4gICAgICAgICAgdmlzaWJsZSA9IF90aGlzJHByb3BzLnZpc2libGUsXG4gICAgICAgICAgd2lkdGggPSBfdGhpcyRwcm9wcy53aWR0aDtcbiAgICAgIHZhciBhbmltYXRpb25UaWNrID0gdGhpcy5zdGF0ZS5hbmltYXRpb25UaWNrO1xuICAgICAgdmFyIGNsYXNzZXMgPSBjeCgndWknLCBhbmltYXRpb24sIGRpcmVjdGlvbiwgd2lkdGgsIHVzZUtleU9ubHkoYW5pbWF0aW9uVGljayA+IDAsICdhbmltYXRpbmcnKSwgdXNlS2V5T25seSh2aXNpYmxlLCAndmlzaWJsZScpLCAnc2lkZWJhcicsIGNsYXNzTmFtZSk7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFNpZGViYXIsIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoU2lkZWJhciwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgdGFyZ2V0UmVmID0gaXNSZWZPYmplY3QodGFyZ2V0KSA/IHRhcmdldCA6IHRvUmVmT2JqZWN0KHRhcmdldCk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWYsIHtcbiAgICAgICAgaW5uZXJSZWY6IHRoaXMucmVmXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICAgIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbiwgdmlzaWJsZSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KEV2ZW50TGlzdGVuZXIsIHtcbiAgICAgICAgbGlzdGVuZXI6IHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljayxcbiAgICAgICAgdGFyZ2V0UmVmOiB0YXJnZXRSZWYsXG4gICAgICAgIHR5cGU6IFwiY2xpY2tcIlxuICAgICAgfSkpKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgICAgLy8gV2UgdXNlIGBhbmltYXRpb25UaWNrYCB0byB1bmRlcnN0YW5kIHdoZW4gYW4gYW5pbWF0aW9uIHNob3VsZCBiZSBzY2hlZHVsZWRcbiAgICAgIHZhciB0aWNrSW5jcmVtZW50ID0gISFwcm9wcy52aXNpYmxlID09PSAhIXN0YXRlLnZpc2libGUgPyAwIDogMTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFuaW1hdGlvblRpY2s6IHN0YXRlLmFuaW1hdGlvblRpY2sgKyB0aWNrSW5jcmVtZW50LFxuICAgICAgICB2aXNpYmxlOiBwcm9wcy52aXNpYmxlXG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaWRlYmFyO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoU2lkZWJhciwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBkaXJlY3Rpb246ICdsZWZ0JyxcbiAgdGFyZ2V0OiBkb2N1bWVudFJlZixcbiAgdmlzaWJsZTogZmFsc2Vcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoU2lkZWJhciwgXCJhbmltYXRpb25EdXJhdGlvblwiLCA1MDApO1xuXG5fZGVmaW5lUHJvcGVydHkoU2lkZWJhciwgXCJhdXRvQ29udHJvbGxlZFByb3BzXCIsIFsndmlzaWJsZSddKTtcblxuX2RlZmluZVByb3BlcnR5KFNpZGViYXIsIFwiUHVzaGFibGVcIiwgU2lkZWJhclB1c2hhYmxlKTtcblxuX2RlZmluZVByb3BlcnR5KFNpZGViYXIsIFwiUHVzaGVyXCIsIFNpZGViYXJQdXNoZXIpO1xuXG5fZGVmaW5lUHJvcGVydHkoU2lkZWJhciwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYW5pbWF0aW9uXCIsIFwiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJkaXJlY3Rpb25cIiwgXCJvbkhpZGRlblwiLCBcIm9uSGlkZVwiLCBcIm9uU2hvd1wiLCBcIm9uVmlzaWJsZVwiLCBcInRhcmdldFwiLCBcInZpc2libGVcIiwgXCJ3aWR0aFwiXSk7XG5cblNpZGViYXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQW5pbWF0aW9uIHN0eWxlLiAqL1xuICBhbmltYXRpb246IFByb3BUeXBlcy5vbmVPZihbJ292ZXJsYXknLCAncHVzaCcsICdzY2FsZSBkb3duJywgJ3VuY292ZXInLCAnc2xpZGUgb3V0JywgJ3NsaWRlIGFsb25nJ10pLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogRGlyZWN0aW9uIHRoZSBzaWRlYmFyIHNob3VsZCBhcHBlYXIgb24uICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10pLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgYmVmb3JlIGEgc2lkZWJhciBiZWdpbnMgdG8gYW5pbWF0ZSBvdXQuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbkhpZGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgYWZ0ZXIgYSBzaWRlYmFyIGhhcyBmaW5pc2hlZCBhbmltYXRpbmcgb3V0LlxuICAgKlxuICAgKiBAcGFyYW0ge251bGx9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25IaWRkZW46IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIHNpZGViYXIgaGFzIGZpbmlzaGVkIGFuaW1hdGluZyBpbi5cbiAgICpcbiAgICogQHBhcmFtIHtudWxsfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uU2hvdzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgc2lkZWJhciBiZWdpbnMgYW5pbWF0aW5nIGluLlxuICAgKlxuICAgKiBAcGFyYW0ge251bGx9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25WaXNpYmxlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogQSBzaWRlYmFyIGNhbiBoYW5kbGUgY2xpY2tzIG9uIHRoZSBwYXNzZWQgZWxlbWVudC4gKi9cbiAgdGFyZ2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtjdXN0b21Qcm9wVHlwZXMuZG9tTm9kZSwgY3VzdG9tUHJvcFR5cGVzLnJlZk9iamVjdF0pLFxuXG4gIC8qKiBDb250cm9scyB3aGV0aGVyIG9yIG5vdCB0aGUgc2lkZWJhciBpcyB2aXNpYmxlIG9uIHRoZSBwYWdlLiAqL1xuICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogU2lkZWJhciB3aWR0aC4gKi9cbiAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZihbJ3ZlcnkgdGhpbicsICd0aGluJywgJ3dpZGUnLCAndmVyeSB3aWRlJ10pXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBTaWRlYmFyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfaW52b2tlIGZyb20gXCJsb2Rhc2gvaW52b2tlXCI7XG5pbXBvcnQgeyBpc1JlZk9iamVjdCB9IGZyb20gJ0BzdGFyZHVzdC11aS9yZWFjdC1jb21wb25lbnQtcmVmJztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBjcmVhdGVSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjdXN0b21Qcm9wVHlwZXMsIGV2ZW50U3RhY2ssIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgaXNCcm93c2VyIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogU3RpY2t5IGNvbnRlbnQgc3RheXMgZml4ZWQgdG8gdGhlIGJyb3dzZXIgdmlld3BvcnQgd2hpbGUgYW5vdGhlciBjb2x1bW4gb2YgY29udGVudCBpcyB2aXNpYmxlIG9uIHRoZSBwYWdlLlxuICovXG5cbnZhciBTdGlja3kgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0aWNreSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RpY2t5KCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0aWNreSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihTdGlja3kpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBzdGlja3k6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic3RpY2t5UmVmXCIsIGNyZWF0ZVJlZigpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ0cmlnZ2VyUmVmXCIsIGNyZWF0ZVJlZigpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJhZGRMaXN0ZW5lcnNcIiwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICB2YXIgc2Nyb2xsQ29udGV4dCA9IHByb3BzLnNjcm9sbENvbnRleHQ7XG4gICAgICB2YXIgc2Nyb2xsQ29udGV4dE5vZGUgPSBpc1JlZk9iamVjdChzY3JvbGxDb250ZXh0KSA/IHNjcm9sbENvbnRleHQuY3VycmVudCA6IHNjcm9sbENvbnRleHQ7XG5cbiAgICAgIGlmIChzY3JvbGxDb250ZXh0Tm9kZSkge1xuICAgICAgICBldmVudFN0YWNrLnN1YigncmVzaXplJywgX3RoaXMuaGFuZGxlVXBkYXRlLCB7XG4gICAgICAgICAgdGFyZ2V0OiBzY3JvbGxDb250ZXh0Tm9kZVxuICAgICAgICB9KTtcbiAgICAgICAgZXZlbnRTdGFjay5zdWIoJ3Njcm9sbCcsIF90aGlzLmhhbmRsZVVwZGF0ZSwge1xuICAgICAgICAgIHRhcmdldDogc2Nyb2xsQ29udGV4dE5vZGVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVtb3ZlTGlzdGVuZXJzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzY3JvbGxDb250ZXh0ID0gX3RoaXMucHJvcHMuc2Nyb2xsQ29udGV4dDtcbiAgICAgIHZhciBzY3JvbGxDb250ZXh0Tm9kZSA9IGlzUmVmT2JqZWN0KHNjcm9sbENvbnRleHQpID8gc2Nyb2xsQ29udGV4dC5jdXJyZW50IDogc2Nyb2xsQ29udGV4dDtcblxuICAgICAgaWYgKHNjcm9sbENvbnRleHROb2RlKSB7XG4gICAgICAgIGV2ZW50U3RhY2sudW5zdWIoJ3Jlc2l6ZScsIF90aGlzLmhhbmRsZVVwZGF0ZSwge1xuICAgICAgICAgIHRhcmdldDogc2Nyb2xsQ29udGV4dE5vZGVcbiAgICAgICAgfSk7XG4gICAgICAgIGV2ZW50U3RhY2sudW5zdWIoJ3Njcm9sbCcsIF90aGlzLmhhbmRsZVVwZGF0ZSwge1xuICAgICAgICAgIHRhcmdldDogc2Nyb2xsQ29udGV4dE5vZGVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwidXBkYXRlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgcHVzaGluZyA9IF90aGlzLnN0YXRlLnB1c2hpbmc7XG4gICAgICBfdGhpcy50aWNraW5nID0gZmFsc2U7XG5cbiAgICAgIF90aGlzLmFzc2lnblJlY3RzKCk7XG5cbiAgICAgIGlmIChwdXNoaW5nKSB7XG4gICAgICAgIGlmIChfdGhpcy5kaWRSZWFjaFN0YXJ0aW5nUG9pbnQoKSkgcmV0dXJuIF90aGlzLnN0aWNrVG9Db250ZXh0VG9wKGUpO1xuICAgICAgICBpZiAoX3RoaXMuZGlkVG91Y2hTY3JlZW5Cb3R0b20oKSkgcmV0dXJuIF90aGlzLnN0aWNrVG9TY3JlZW5Cb3R0b20oZSk7XG4gICAgICAgIHJldHVybiBfdGhpcy5zdGlja1RvQ29udGV4dEJvdHRvbShlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLmlzT3ZlcnNpemVkKCkpIHtcbiAgICAgICAgaWYgKF90aGlzLmNvbnRleHRSZWN0LnRvcCA+IDApIHJldHVybiBfdGhpcy5zdGlja1RvQ29udGV4dFRvcChlKTtcbiAgICAgICAgaWYgKF90aGlzLmNvbnRleHRSZWN0LmJvdHRvbSA8IHdpbmRvdy5pbm5lckhlaWdodCkgcmV0dXJuIF90aGlzLnN0aWNrVG9Db250ZXh0Qm90dG9tKGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuZGlkVG91Y2hTY3JlZW5Ub3AoKSkge1xuICAgICAgICBpZiAoX3RoaXMuZGlkUmVhY2hDb250ZXh0Qm90dG9tKCkpIHJldHVybiBfdGhpcy5zdGlja1RvQ29udGV4dEJvdHRvbShlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzLnN0aWNrVG9TY3JlZW5Ub3AoZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5zdGlja1RvQ29udGV4dFRvcChlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVVcGRhdGVcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghX3RoaXMudGlja2luZykge1xuICAgICAgICBfdGhpcy50aWNraW5nID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZShlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiYXNzaWduUmVjdHNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbnRleHQgPSBfdGhpcy5wcm9wcy5jb250ZXh0O1xuICAgICAgdmFyIGNvbnRleHROb2RlID0gaXNSZWZPYmplY3QoY29udGV4dCkgPyBjb250ZXh0LmN1cnJlbnQgOiBjb250ZXh0IHx8IGRvY3VtZW50LmJvZHk7XG4gICAgICBfdGhpcy50cmlnZ2VyUmVjdCA9IF90aGlzLnRyaWdnZXJSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIF90aGlzLmNvbnRleHRSZWN0ID0gY29udGV4dE5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBfdGhpcy5zdGlja3lSZWN0ID0gX3RoaXMuc3RpY2t5UmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZGlkUmVhY2hDb250ZXh0Qm90dG9tXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvZmZzZXQgPSBfdGhpcy5wcm9wcy5vZmZzZXQ7XG4gICAgICByZXR1cm4gX3RoaXMuc3RpY2t5UmVjdC5oZWlnaHQgKyBvZmZzZXQgPj0gX3RoaXMuY29udGV4dFJlY3QuYm90dG9tO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImRpZFJlYWNoU3RhcnRpbmdQb2ludFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuc3RpY2t5UmVjdC50b3AgPD0gX3RoaXMudHJpZ2dlclJlY3QudG9wO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImRpZFRvdWNoU2NyZWVuVG9wXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy50cmlnZ2VyUmVjdC50b3AgPCBfdGhpcy5wcm9wcy5vZmZzZXQ7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZGlkVG91Y2hTY3JlZW5Cb3R0b21cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJvdHRvbU9mZnNldCA9IF90aGlzLnByb3BzLmJvdHRvbU9mZnNldDtcbiAgICAgIHJldHVybiBfdGhpcy5jb250ZXh0UmVjdC5ib3R0b20gKyBib3R0b21PZmZzZXQgPiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaXNPdmVyc2l6ZWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnN0aWNreVJlY3QuaGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInB1c2hpbmdcIiwgZnVuY3Rpb24gKHB1c2hpbmcpIHtcbiAgICAgIHZhciBwb3NzaWJsZSA9IF90aGlzLnByb3BzLnB1c2hpbmc7XG4gICAgICBpZiAocG9zc2libGUpIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcHVzaGluZzogcHVzaGluZ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic3RpY2tcIiwgZnVuY3Rpb24gKGUsIGJvdW5kKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGJvdW5kOiBib3VuZCxcbiAgICAgICAgc3RpY2t5OiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uU3RpY2snLCBlLCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwidW5zdGlja1wiLCBmdW5jdGlvbiAoZSwgYm91bmQpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYm91bmQ6IGJvdW5kLFxuICAgICAgICBzdGlja3k6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uVW5zdGljaycsIGUsIF90aGlzLnByb3BzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGlja1RvQ29udGV4dEJvdHRvbVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uQm90dG9tJywgZSwgX3RoaXMucHJvcHMpO1xuXG4gICAgICBfdGhpcy5zdGljayhlLCB0cnVlKTtcblxuICAgICAgX3RoaXMucHVzaGluZyh0cnVlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGlja1RvQ29udGV4dFRvcFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uVG9wJywgZSwgX3RoaXMucHJvcHMpO1xuXG4gICAgICBfdGhpcy51bnN0aWNrKGUsIGZhbHNlKTtcblxuICAgICAgX3RoaXMucHVzaGluZyhmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic3RpY2tUb1NjcmVlbkJvdHRvbVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGJvdHRvbSA9IF90aGlzLnByb3BzLmJvdHRvbU9mZnNldDtcblxuICAgICAgX3RoaXMuc3RpY2soZSwgZmFsc2UpO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGJvdHRvbTogYm90dG9tLFxuICAgICAgICB0b3A6IG51bGxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0aWNrVG9TY3JlZW5Ub3BcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciB0b3AgPSBfdGhpcy5wcm9wcy5vZmZzZXQ7XG5cbiAgICAgIF90aGlzLnN0aWNrKGUsIGZhbHNlKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgYm90dG9tOiBudWxsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTdGlja3ksIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKCFpc0Jyb3dzZXIoKSkgcmV0dXJuO1xuICAgICAgdmFyIGFjdGl2ZSA9IHRoaXMucHJvcHMuYWN0aXZlO1xuXG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlVXBkYXRlKCk7XG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKHRoaXMucHJvcHMpO1xuICAgICAgfVxuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGN1cnJlbnQgPSBfdGhpcyRwcm9wcy5hY3RpdmUsXG4gICAgICAgICAgY3VycmVudFNjcm9sbENvbnRleHQgPSBfdGhpcyRwcm9wcy5zY3JvbGxDb250ZXh0O1xuICAgICAgdmFyIG5leHQgPSBuZXh0UHJvcHMuYWN0aXZlLFxuICAgICAgICAgIG5leHRTY3JvbGxDb250ZXh0ID0gbmV4dFByb3BzLnNjcm9sbENvbnRleHQ7XG5cbiAgICAgIGlmIChjdXJyZW50ID09PSBuZXh0KSB7XG4gICAgICAgIGlmIChjdXJyZW50U2Nyb2xsQ29udGV4dCAhPT0gbmV4dFNjcm9sbENvbnRleHQpIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKG5leHRQcm9wcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgIHRoaXMuaGFuZGxlVXBkYXRlKCk7XG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKG5leHRQcm9wcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGlja3k6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAoIWlzQnJvd3NlcigpKSByZXR1cm47XG4gICAgICB2YXIgYWN0aXZlID0gdGhpcy5wcm9wcy5hY3RpdmU7XG5cbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5mcmFtZUlkKTtcbiAgICAgIH1cbiAgICB9IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBFdmVudHNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgfSwge1xuICAgIGtleTogXCJjb21wdXRlU3R5bGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcHV0ZVN0eWxlKCkge1xuICAgICAgdmFyIHN0eWxlRWxlbWVudCA9IHRoaXMucHJvcHMuc3R5bGVFbGVtZW50O1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBib3R0b20gPSBfdGhpcyRzdGF0ZS5ib3R0b20sXG4gICAgICAgICAgYm91bmQgPSBfdGhpcyRzdGF0ZS5ib3VuZCxcbiAgICAgICAgICBzdGlja3kgPSBfdGhpcyRzdGF0ZS5zdGlja3ksXG4gICAgICAgICAgdG9wID0gX3RoaXMkc3RhdGUudG9wO1xuICAgICAgaWYgKCFzdGlja3kpIHJldHVybiBzdHlsZUVsZW1lbnQ7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7XG4gICAgICAgIGJvdHRvbTogYm91bmQgPyAwIDogYm90dG9tLFxuICAgICAgICB0b3A6IGJvdW5kID8gdW5kZWZpbmVkIDogdG9wLFxuICAgICAgICB3aWR0aDogdGhpcy50cmlnZ2VyUmVjdC53aWR0aFxuICAgICAgfSwgc3R5bGVFbGVtZW50KTtcbiAgICB9IC8vIFJldHVybiB0cnVlIHdoZW4gdGhlIGNvbXBvbmVudCByZWFjaGVkIHRoZSBib3R0b20gb2YgdGhlIGNvbnRleHRcblxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBSZW5kZXJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWU7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBib3R0b20gPSBfdGhpcyRzdGF0ZTIuYm90dG9tLFxuICAgICAgICAgIGJvdW5kID0gX3RoaXMkc3RhdGUyLmJvdW5kLFxuICAgICAgICAgIHN0aWNreSA9IF90aGlzJHN0YXRlMi5zdGlja3k7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFN0aWNreSwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShTdGlja3ksIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIGNvbnRhaW5lckNsYXNzZXMgPSBjeChzdGlja3kgJiYgJ3VpJywgc3RpY2t5ICYmICdzdHVjay1jb250YWluZXInLCBzdGlja3kgJiYgKGJvdW5kID8gJ2JvdW5kLWNvbnRhaW5lcicgOiAnZml4ZWQtY29udGFpbmVyJyksIGNsYXNzTmFtZSk7XG4gICAgICB2YXIgZWxlbWVudENsYXNzZXMgPSBjeCgndWknLCBzdGlja3kgJiYgKGJvdW5kID8gJ2JvdW5kIGJvdHRvbScgOiAnZml4ZWQnKSwgc3RpY2t5ICYmICFib3VuZCAmJiAoYm90dG9tID09PSBudWxsID8gJ3RvcCcgOiAnYm90dG9tJyksICdzdGlja3knKTtcbiAgICAgIHZhciB0cmlnZ2VyU3R5bGVzID0gc3RpY2t5ICYmIHRoaXMuc3RpY2t5UmVjdCA/IHtcbiAgICAgICAgaGVpZ2h0OiB0aGlzLnN0aWNreVJlY3QuaGVpZ2h0XG4gICAgICB9IDoge307XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjb250YWluZXJDbGFzc2VzXG4gICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHJlZjogdGhpcy50cmlnZ2VyUmVmLFxuICAgICAgICBzdHlsZTogdHJpZ2dlclN0eWxlc1xuICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGVsZW1lbnRDbGFzc2VzLFxuICAgICAgICByZWY6IHRoaXMuc3RpY2t5UmVmLFxuICAgICAgICBzdHlsZTogdGhpcy5jb21wdXRlU3R5bGUoKVxuICAgICAgfSwgY2hpbGRyZW4pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3RpY2t5O1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoU3RpY2t5LCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGFjdGl2ZTogdHJ1ZSxcbiAgYm90dG9tT2Zmc2V0OiAwLFxuICBvZmZzZXQ6IDAsXG4gIHNjcm9sbENvbnRleHQ6IGlzQnJvd3NlcigpID8gd2luZG93IDogbnVsbFxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShTdGlja3ksIFwiaGFuZGxlZFByb3BzXCIsIFtcImFjdGl2ZVwiLCBcImFzXCIsIFwiYm90dG9tT2Zmc2V0XCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZXh0XCIsIFwib2Zmc2V0XCIsIFwib25Cb3R0b21cIiwgXCJvblN0aWNrXCIsIFwib25Ub3BcIiwgXCJvblVuc3RpY2tcIiwgXCJwdXNoaW5nXCIsIFwic2Nyb2xsQ29udGV4dFwiLCBcInN0eWxlRWxlbWVudFwiXSk7XG5cbmV4cG9ydCB7IFN0aWNreSBhcyBkZWZhdWx0IH07XG5TdGlja3kucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogQSBTdGlja3kgY2FuIGJlIGFjdGl2ZS4gKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogT2Zmc2V0IGluIHBpeGVscyBmcm9tIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiB3aGVuIGZpeGluZyBlbGVtZW50IHRvIHZpZXdwb3J0LiAqL1xuICBib3R0b21PZmZzZXQ6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQ29udGV4dCB3aGljaCBzdGlja3kgZWxlbWVudCBzaG91bGQgc3RpY2sgdG8uICovXG4gIGNvbnRleHQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW2N1c3RvbVByb3BUeXBlcy5kb21Ob2RlLCBjdXN0b21Qcm9wVHlwZXMucmVmT2JqZWN0XSksXG5cbiAgLyoqIE9mZnNldCBpbiBwaXhlbHMgZnJvbSB0aGUgdG9wIG9mIHRoZSBzY3JlZW4gd2hlbiBmaXhpbmcgZWxlbWVudCB0byB2aWV3cG9ydC4gKi9cbiAgb2Zmc2V0OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB3aGVuIGVsZW1lbnQgaXMgYm91bmQgdG8gYm90dG9tIG9mIHBhcmVudCBjb250YWluZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbkJvdHRvbTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHdoZW4gZWxlbWVudCBpcyBmaXhlZCB0byBwYWdlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25TdGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHdoZW4gZWxlbWVudCBpcyBib3VuZCB0byB0b3Agb2YgcGFyZW50IGNvbnRhaW5lci5cbiAgICpcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgLSBSZWFjdCdzIG9yaWdpbmFsIFN5bnRoZXRpY0V2ZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIEFsbCBwcm9wcy5cbiAgICovXG4gIG9uVG9wOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgd2hlbiBlbGVtZW50IGlzIHVuZml4ZWQgZnJvbSBwYWdlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCAtIFJlYWN0J3Mgb3JpZ2luYWwgU3ludGhldGljRXZlbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQWxsIHByb3BzLlxuICAgKi9cbiAgb25VbnN0aWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogV2hldGhlciBlbGVtZW50IHNob3VsZCBiZSBcInB1c2hlZFwiIGJ5IHRoZSB2aWV3cG9ydCwgYXR0YWNoaW5nIHRvIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiB3aGVuIHNjcm9sbGluZyB1cC4gKi9cbiAgcHVzaGluZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIENvbnRleHQgd2hpY2ggc3RpY2t5IHNob3VsZCBhdHRhY2ggb25zY3JvbGwgZXZlbnRzLiAqL1xuICBzY3JvbGxDb250ZXh0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtjdXN0b21Qcm9wVHlwZXMuZG9tTm9kZSwgY3VzdG9tUHJvcFR5cGVzLnJlZk9iamVjdF0pLFxuXG4gIC8qKiBDdXN0b20gc3R5bGUgZm9yIHN0aWNreSBlbGVtZW50LiAqL1xuICBzdHlsZUVsZW1lbnQ6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB7fTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgdXNlS2V5T25seSB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgU2VnbWVudCBmcm9tICcuLi8uLi9lbGVtZW50cy9TZWdtZW50L1NlZ21lbnQnO1xuLyoqXG4gKiBBIHRhYiBwYW5lIGhvbGRzIHRoZSBjb250ZW50IG9mIGEgdGFiLlxuICovXG5cbmZ1bmN0aW9uIFRhYlBhbmUocHJvcHMpIHtcbiAgdmFyIGFjdGl2ZSA9IHByb3BzLmFjdGl2ZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGxvYWRpbmcgPSBwcm9wcy5sb2FkaW5nO1xuICB2YXIgY2xhc3NlcyA9IGN4KHVzZUtleU9ubHkoYWN0aXZlLCAnYWN0aXZlJyksIHVzZUtleU9ubHkobG9hZGluZywgJ2xvYWRpbmcnKSwgJ3RhYicsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoVGFiUGFuZSwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShUYWJQYW5lLCBwcm9wcyk7XG4gIHZhciBjYWxjdWxhdGVkRGVmYXVsdFByb3BzID0ge307XG5cbiAgaWYgKEVsZW1lbnRUeXBlID09PSBTZWdtZW50KSB7XG4gICAgY2FsY3VsYXRlZERlZmF1bHRQcm9wcy5hdHRhY2hlZCA9ICdib3R0b20nO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCBjYWxjdWxhdGVkRGVmYXVsdFByb3BzLCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cblRhYlBhbmUuaGFuZGxlZFByb3BzID0gW1wiYWN0aXZlXCIsIFwiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJsb2FkaW5nXCJdO1xuVGFiUGFuZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiBTZWdtZW50LFxuICBhY3RpdmU6IHRydWVcbn07XG5UYWJQYW5lLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEEgdGFiIHBhbmUgY2FuIGJlIGFjdGl2ZS4gKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIEEgVGFiLlBhbmUgY2FuIGRpc3BsYXkgYSBsb2FkaW5nIGluZGljYXRvci4gKi9cbiAgbG9hZGluZzogUHJvcFR5cGVzLmJvb2xcbn0gOiB7fTtcblRhYlBhbmUuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShUYWJQYW5lLCBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgVGFiUGFuZTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfbWFwIGZyb20gXCJsb2Rhc2gvbWFwXCI7XG5pbXBvcnQgX2dldCBmcm9tIFwibG9kYXNoL2dldFwiO1xuaW1wb3J0IF9pbnZva2UgZnJvbSBcImxvZGFzaC9pbnZva2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQXV0b0NvbnRyb2xsZWRDb21wb25lbnQgYXMgQ29tcG9uZW50LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgR3JpZCBmcm9tICcuLi8uLi9jb2xsZWN0aW9ucy9HcmlkL0dyaWQnO1xuaW1wb3J0IEdyaWRDb2x1bW4gZnJvbSAnLi4vLi4vY29sbGVjdGlvbnMvR3JpZC9HcmlkQ29sdW1uJztcbmltcG9ydCBNZW51IGZyb20gJy4uLy4uL2NvbGxlY3Rpb25zL01lbnUvTWVudSc7XG5pbXBvcnQgVGFiUGFuZSBmcm9tICcuL1RhYlBhbmUnO1xuLyoqXG4gKiBBIFRhYiBpcyBhIGhpZGRlbiBzZWN0aW9uIG9mIGNvbnRlbnQgYWN0aXZhdGVkIGJ5IGEgTWVudS5cbiAqIEBzZWUgTWVudVxuICogQHNlZSBTZWdtZW50XG4gKi9cblxudmFyIFRhYiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGFiLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWIoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFiKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFRhYikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUl0ZW1DbGlja1wiLCBmdW5jdGlvbiAoZSwgX3JlZikge1xuICAgICAgdmFyIGluZGV4ID0gX3JlZi5pbmRleDtcblxuICAgICAgX2ludm9rZShfdGhpcy5wcm9wcywgJ29uVGFiQ2hhbmdlJywgZSwgX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMsIHtcbiAgICAgICAgYWN0aXZlSW5kZXg6IGluZGV4XG4gICAgICB9KSk7XG5cbiAgICAgIF90aGlzLnRyeVNldFN0YXRlKHtcbiAgICAgICAgYWN0aXZlSW5kZXg6IGluZGV4XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUYWIsIFt7XG4gICAga2V5OiBcImdldEluaXRpYWxBdXRvQ29udHJvbGxlZFN0YXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEluaXRpYWxBdXRvQ29udHJvbGxlZFN0YXRlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWN0aXZlSW5kZXg6IDBcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckl0ZW1zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckl0ZW1zKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBwYW5lcyA9IF90aGlzJHByb3BzLnBhbmVzLFxuICAgICAgICAgIHJlbmRlckFjdGl2ZU9ubHkgPSBfdGhpcyRwcm9wcy5yZW5kZXJBY3RpdmVPbmx5O1xuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5zdGF0ZS5hY3RpdmVJbmRleDtcbiAgICAgIGlmIChyZW5kZXJBY3RpdmVPbmx5KSByZXR1cm4gX2ludm9rZShfZ2V0KHBhbmVzLCBcIltcIi5jb25jYXQoYWN0aXZlSW5kZXgsIFwiXVwiKSksICdyZW5kZXInLCB0aGlzLnByb3BzKTtcbiAgICAgIHJldHVybiBfbWFwKHBhbmVzLCBmdW5jdGlvbiAoX3JlZjIsIGluZGV4KSB7XG4gICAgICAgIHZhciBwYW5lID0gX3JlZjIucGFuZTtcbiAgICAgICAgcmV0dXJuIFRhYlBhbmUuY3JlYXRlKHBhbmUsIHtcbiAgICAgICAgICBvdmVycmlkZVByb3BzOiB7XG4gICAgICAgICAgICBhY3RpdmU6IGluZGV4ID09PSBhY3RpdmVJbmRleFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyTWVudVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJNZW51KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgbWVudSA9IF90aGlzJHByb3BzMi5tZW51LFxuICAgICAgICAgIHBhbmVzID0gX3RoaXMkcHJvcHMyLnBhbmVzLFxuICAgICAgICAgIG1lbnVQb3NpdGlvbiA9IF90aGlzJHByb3BzMi5tZW51UG9zaXRpb247XG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLnN0YXRlLmFjdGl2ZUluZGV4O1xuXG4gICAgICBpZiAobWVudS50YWJ1bGFyID09PSB0cnVlICYmIG1lbnVQb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICBtZW51LnRhYnVsYXIgPSAncmlnaHQnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gTWVudS5jcmVhdGUobWVudSwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlLFxuICAgICAgICBvdmVycmlkZVByb3BzOiB7XG4gICAgICAgICAgaXRlbXM6IF9tYXAocGFuZXMsICdtZW51SXRlbScpLFxuICAgICAgICAgIG9uSXRlbUNsaWNrOiB0aGlzLmhhbmRsZUl0ZW1DbGljayxcbiAgICAgICAgICBhY3RpdmVJbmRleDogYWN0aXZlSW5kZXhcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclZlcnRpY2FsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclZlcnRpY2FsKG1lbnUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGdyaWQgPSBfdGhpcyRwcm9wczMuZ3JpZCxcbiAgICAgICAgICBtZW51UG9zaXRpb24gPSBfdGhpcyRwcm9wczMubWVudVBvc2l0aW9uO1xuXG4gICAgICB2YXIgcGFuZVdpZHRoID0gZ3JpZC5wYW5lV2lkdGgsXG4gICAgICAgICAgdGFiV2lkdGggPSBncmlkLnRhYldpZHRoLFxuICAgICAgICAgIGdyaWRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhncmlkLCBbXCJwYW5lV2lkdGhcIiwgXCJ0YWJXaWR0aFwiXSk7XG5cbiAgICAgIHZhciBwb3NpdGlvbiA9IG1lbnVQb3NpdGlvbiB8fCBtZW51LnByb3BzLnRhYnVsYXIgPT09ICdyaWdodCcgJiYgJ3JpZ2h0JyB8fCAnbGVmdCc7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChHcmlkLCBncmlkUHJvcHMsIHBvc2l0aW9uID09PSAnbGVmdCcgJiYgR3JpZENvbHVtbi5jcmVhdGUoe1xuICAgICAgICB3aWR0aDogdGFiV2lkdGgsXG4gICAgICAgIGNoaWxkcmVuOiBtZW51XG4gICAgICB9LCB7XG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pLCBHcmlkQ29sdW1uLmNyZWF0ZSh7XG4gICAgICAgIHdpZHRoOiBwYW5lV2lkdGgsXG4gICAgICAgIGNoaWxkcmVuOiB0aGlzLnJlbmRlckl0ZW1zKCksXG4gICAgICAgIHN0cmV0Y2hlZDogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gICAgICB9KSwgcG9zaXRpb24gPT09ICdyaWdodCcgJiYgR3JpZENvbHVtbi5jcmVhdGUoe1xuICAgICAgICB3aWR0aDogdGFiV2lkdGgsXG4gICAgICAgIGNoaWxkcmVuOiBtZW51XG4gICAgICB9LCB7XG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBtZW51ID0gdGhpcy5yZW5kZXJNZW51KCk7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFRhYiwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShUYWIsIHRoaXMucHJvcHMpO1xuXG4gICAgICBpZiAobWVudS5wcm9wcy52ZXJ0aWNhbCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgcmVzdCwgdGhpcy5yZW5kZXJWZXJ0aWNhbChtZW51KSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCByZXN0LCBtZW51LnByb3BzLmF0dGFjaGVkICE9PSAnYm90dG9tJyAmJiBtZW51LCB0aGlzLnJlbmRlckl0ZW1zKCksIG1lbnUucHJvcHMuYXR0YWNoZWQgPT09ICdib3R0b20nICYmIG1lbnUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUYWI7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShUYWIsIFwiYXV0b0NvbnRyb2xsZWRQcm9wc1wiLCBbJ2FjdGl2ZUluZGV4J10pO1xuXG5fZGVmaW5lUHJvcGVydHkoVGFiLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGdyaWQ6IHtcbiAgICBwYW5lV2lkdGg6IDEyLFxuICAgIHRhYldpZHRoOiA0XG4gIH0sXG4gIG1lbnU6IHtcbiAgICBhdHRhY2hlZDogdHJ1ZSxcbiAgICB0YWJ1bGFyOiB0cnVlXG4gIH0sXG4gIHJlbmRlckFjdGl2ZU9ubHk6IHRydWVcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoVGFiLCBcIlBhbmVcIiwgVGFiUGFuZSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShUYWIsIFwiaGFuZGxlZFByb3BzXCIsIFtcImFjdGl2ZUluZGV4XCIsIFwiYXNcIiwgXCJkZWZhdWx0QWN0aXZlSW5kZXhcIiwgXCJncmlkXCIsIFwibWVudVwiLCBcIm1lbnVQb3NpdGlvblwiLCBcIm9uVGFiQ2hhbmdlXCIsIFwicGFuZXNcIiwgXCJyZW5kZXJBY3RpdmVPbmx5XCJdKTtcblxuVGFiLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFRoZSBpbml0aWFsIGFjdGl2ZUluZGV4LiAqL1xuICBkZWZhdWx0QWN0aXZlSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKiogSW5kZXggb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgdGFiLiAqL1xuICBhY3RpdmVJbmRleDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTaG9ydGhhbmQgcHJvcHMgZm9yIHRoZSBNZW51LlxuICAgKiB0YWJ1bGFyLCBpZiB0cnVlLCB3aWxsIGRlcml2ZSBmaW5hbCB2YWx1ZSBmcm9tIGBtZW51UG9zaXRpb25gLCBvdGhlcndpc2Ugc2V0ICdsZWZ0JyBvciAncmlnaHQnIGV4cGxpY2l0bHkuXG4gICAqL1xuICBtZW51OiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKiBBbGlnbiB2ZXJ0aWNhbCBtZW51ICovXG4gIG1lbnVQb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKSxcblxuICAvKiogU2hvcnRoYW5kIHByb3BzIGZvciB0aGUgR3JpZC4gKi9cbiAgZ3JpZDogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIHRhYiBjaGFuZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMgYW5kIHByb3Bvc2VkIG5ldyBhY3RpdmVJbmRleC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEuYWN0aXZlSW5kZXggLSBUaGUgbmV3IHByb3Bvc2VkIGFjdGl2ZUluZGV4LlxuICAgKi9cbiAgb25UYWJDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBcnJheSBvZiBvYmplY3RzIGRlc2NyaWJpbmcgZWFjaCBNZW51Lkl0ZW0gYW5kIFRhYi5QYW5lOlxuICAgKiB7IG1lbnVJdGVtOiAnSG9tZScsIHJlbmRlcjogKCkgPT4gPFRhYi5QYW5lIC8+IH1cbiAgICogb3JcbiAgICogeyBtZW51SXRlbTogJ0hvbWUnLCBwYW5lOiAnV2VsY29tZScgfVxuICAgKi9cbiAgcGFuZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbWVudUl0ZW06IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuICAgIHBhbmU6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmNcbiAgfSkpLFxuXG4gIC8qKiBBIFRhYiBjYW4gcmVuZGVyIG9ubHkgYWN0aXZlIHBhbmUuICovXG4gIHJlbmRlckFjdGl2ZU9ubHk6IFByb3BUeXBlcy5ib29sXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBUYWI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIHVzZUtleU9ubHkgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBbiBhZCBkaXNwbGF5cyB0aGlyZC1wYXJ0eSBwcm9tb3Rpb25hbCBjb250ZW50LlxuICovXG5cbmZ1bmN0aW9uIEFkdmVydGlzZW1lbnQocHJvcHMpIHtcbiAgdmFyIGNlbnRlcmVkID0gcHJvcHMuY2VudGVyZWQsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICB0ZXN0ID0gcHJvcHMudGVzdCxcbiAgICAgIHVuaXQgPSBwcm9wcy51bml0O1xuICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIHVuaXQsIHVzZUtleU9ubHkoY2VudGVyZWQsICdjZW50ZXJlZCcpLCB1c2VLZXlPbmx5KHRlc3QsICd0ZXN0JyksICdhZCcsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoQWR2ZXJ0aXNlbWVudCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShBZHZlcnRpc2VtZW50LCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICBcImRhdGEtdGV4dFwiOiB0ZXN0XG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cbkFkdmVydGlzZW1lbnQuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjZW50ZXJlZFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiLCBcInRlc3RcIiwgXCJ1bml0XCJdO1xuQWR2ZXJ0aXNlbWVudC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBDZW50ZXIgdGhlIGFkdmVydGlzZW1lbnQuICovXG4gIGNlbnRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIFRleHQgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSBhZHZlcnRpc2VtZW50LiAqL1xuICB0ZXN0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKiBWYXJpZXMgdGhlIHNpemUgb2YgdGhlIGFkdmVydGlzZW1lbnQuICovXG4gIHVuaXQ6IFByb3BUeXBlcy5vbmVPZihbJ21lZGl1bSByZWN0YW5nbGUnLCAnbGFyZ2UgcmVjdGFuZ2xlJywgJ3ZlcnRpY2FsIHJlY3RhbmdsZScsICdzbWFsbCByZWN0YW5nbGUnLCAnbW9iaWxlIGJhbm5lcicsICdiYW5uZXInLCAndmVydGljYWwgYmFubmVyJywgJ3RvcCBiYW5uZXInLCAnaGFsZiBiYW5uZXInLCAnYnV0dG9uJywgJ3NxdWFyZSBidXR0b24nLCAnc21hbGwgYnV0dG9uJywgJ3NreXNjcmFwZXInLCAnd2lkZSBza3lzY3JhcGVyJywgJ2xlYWRlcmJvYXJkJywgJ2xhcmdlIGxlYWRlcmJvYXJkJywgJ21vYmlsZSBsZWFkZXJib2FyZCcsICdiaWxsYm9hcmQnLCAncGFub3JhbWEnLCAnbmV0Ym9hcmQnLCAnaGFsZiBwYWdlJywgJ3NxdWFyZScsICdzbWFsbCBzcXVhcmUnXSkuaXNSZXF1aXJlZFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgQWR2ZXJ0aXNlbWVudDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF93aXRob3V0IGZyb20gXCJsb2Rhc2gvd2l0aG91dFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VUZXh0QWxpZ25Qcm9wIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBjYXJkIGNhbiBjb250YWluIGEgZGVzY3JpcHRpb24gd2l0aCBvbmUgb3IgbW9yZSBwYXJhZ3JhcGhzLlxuICovXG5cbmZ1bmN0aW9uIENhcmREZXNjcmlwdGlvbihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgdGV4dEFsaWduID0gcHJvcHMudGV4dEFsaWduO1xuICB2YXIgY2xhc3NlcyA9IGN4KHVzZVRleHRBbGlnblByb3AodGV4dEFsaWduKSwgJ2Rlc2NyaXB0aW9uJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhDYXJkRGVzY3JpcHRpb24sIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoQ2FyZERlc2NyaXB0aW9uLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5DYXJkRGVzY3JpcHRpb24uaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJ0ZXh0QWxpZ25cIl07XG5DYXJkRGVzY3JpcHRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIEEgY2FyZCBjb250ZW50IGNhbiBhZGp1c3QgaXRzIHRleHQgYWxpZ25tZW50LiAqL1xuICB0ZXh0QWxpZ246IFByb3BUeXBlcy5vbmVPZihfd2l0aG91dChTVUkuVEVYVF9BTElHTk1FTlRTLCAnanVzdGlmaWVkJykpXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBDYXJkRGVzY3JpcHRpb247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfd2l0aG91dCBmcm9tIFwibG9kYXNoL3dpdGhvdXRcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIFNVSSwgdXNlVGV4dEFsaWduUHJvcCB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgY2FyZCBjYW4gY29udGFpbiBhIGhlYWRlci5cbiAqL1xuXG5mdW5jdGlvbiBDYXJkSGVhZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICB0ZXh0QWxpZ24gPSBwcm9wcy50ZXh0QWxpZ247XG4gIHZhciBjbGFzc2VzID0gY3godXNlVGV4dEFsaWduUHJvcCh0ZXh0QWxpZ24pLCAnaGVhZGVyJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhDYXJkSGVhZGVyLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKENhcmRIZWFkZXIsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cbkNhcmRIZWFkZXIuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJ0ZXh0QWxpZ25cIl07XG5DYXJkSGVhZGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBBIGNhcmQgaGVhZGVyIGNhbiBhZGp1c3QgaXRzIHRleHQgYWxpZ25tZW50LiAqL1xuICB0ZXh0QWxpZ246IFByb3BUeXBlcy5vbmVPZihfd2l0aG91dChTVUkuVEVYVF9BTElHTk1FTlRTLCAnanVzdGlmaWVkJykpXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBDYXJkSGVhZGVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3dpdGhvdXQgZnJvbSBcImxvZGFzaC93aXRob3V0XCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZVRleHRBbGlnblByb3AgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGNhcmQgY2FuIGNvbnRhaW4gY29udGVudCBtZXRhZGF0YS5cbiAqL1xuXG5mdW5jdGlvbiBDYXJkTWV0YShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgdGV4dEFsaWduID0gcHJvcHMudGV4dEFsaWduO1xuICB2YXIgY2xhc3NlcyA9IGN4KHVzZVRleHRBbGlnblByb3AodGV4dEFsaWduKSwgJ21ldGEnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKENhcmRNZXRhLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKENhcmRNZXRhLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5DYXJkTWV0YS5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiLCBcInRleHRBbGlnblwiXTtcbkNhcmRNZXRhLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBBIGNhcmQgbWV0YSBjYW4gYWRqdXN0IGl0cyB0ZXh0IGFsaWdubWVudC4gKi9cbiAgdGV4dEFsaWduOiBQcm9wVHlwZXMub25lT2YoX3dpdGhvdXQoU1VJLlRFWFRfQUxJR05NRU5UUywgJ2p1c3RpZmllZCcpKVxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgQ2FyZE1ldGE7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfd2l0aG91dCBmcm9tIFwibG9kYXNoL3dpdGhvdXRcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VUZXh0QWxpZ25Qcm9wIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBDYXJkRGVzY3JpcHRpb24gZnJvbSAnLi9DYXJkRGVzY3JpcHRpb24nO1xuaW1wb3J0IENhcmRIZWFkZXIgZnJvbSAnLi9DYXJkSGVhZGVyJztcbmltcG9ydCBDYXJkTWV0YSBmcm9tICcuL0NhcmRNZXRhJztcbi8qKlxuICogQSBjYXJkIGNhbiBjb250YWluIGJsb2NrcyBvZiBjb250ZW50IG9yIGV4dHJhIGNvbnRlbnQgbWVhbnQgdG8gYmUgZm9ybWF0dGVkIHNlcGFyYXRlbHkgZnJvbSB0aGUgbWFpbiBjb250ZW50LlxuICovXG5cbmZ1bmN0aW9uIENhcmRDb250ZW50KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICBkZXNjcmlwdGlvbiA9IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgZXh0cmEgPSBwcm9wcy5leHRyYSxcbiAgICAgIGhlYWRlciA9IHByb3BzLmhlYWRlcixcbiAgICAgIG1ldGEgPSBwcm9wcy5tZXRhLFxuICAgICAgdGV4dEFsaWduID0gcHJvcHMudGV4dEFsaWduO1xuICB2YXIgY2xhc3NlcyA9IGN4KHVzZUtleU9ubHkoZXh0cmEsICdleHRyYScpLCB1c2VUZXh0QWxpZ25Qcm9wKHRleHRBbGlnbiksICdjb250ZW50JywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhDYXJkQ29udGVudCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShDYXJkQ29udGVudCwgcHJvcHMpO1xuXG4gIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICAgIH0pLCBjaGlsZHJlbik7XG4gIH1cblxuICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY29udGVudCkpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICAgIH0pLCBjb250ZW50KTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY3JlYXRlU2hvcnRoYW5kKENhcmRIZWFkZXIsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGVudDogdmFsXG4gICAgfTtcbiAgfSwgaGVhZGVyLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSwgY3JlYXRlU2hvcnRoYW5kKENhcmRNZXRhLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQ6IHZhbFxuICAgIH07XG4gIH0sIG1ldGEsIHtcbiAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gIH0pLCBjcmVhdGVTaG9ydGhhbmQoQ2FyZERlc2NyaXB0aW9uLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQ6IHZhbFxuICAgIH07XG4gIH0sIGRlc2NyaXB0aW9uLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSk7XG59XG5cbkNhcmRDb250ZW50LmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiZGVzY3JpcHRpb25cIiwgXCJleHRyYVwiLCBcImhlYWRlclwiLCBcIm1ldGFcIiwgXCJ0ZXh0QWxpZ25cIl07XG5DYXJkQ29udGVudC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBDYXJkRGVzY3JpcHRpb24uICovXG4gIGRlc2NyaXB0aW9uOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogQSBjYXJkIGNhbiBjb250YWluIGV4dHJhIGNvbnRlbnQgbWVhbnQgdG8gYmUgZm9ybWF0dGVkIHNlcGFyYXRlbHkgZnJvbSB0aGUgbWFpbiBjb250ZW50LiAqL1xuICBleHRyYTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgQ2FyZEhlYWRlci4gKi9cbiAgaGVhZGVyOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBDYXJkTWV0YS4gKi9cbiAgbWV0YTogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIEEgY2FyZCBjb250ZW50IGNhbiBhZGp1c3QgaXRzIHRleHQgYWxpZ25tZW50LiAqL1xuICB0ZXh0QWxpZ246IFByb3BUeXBlcy5vbmVPZihfd2l0aG91dChTVUkuVEVYVF9BTElHTk1FTlRTLCAnanVzdGlmaWVkJykpXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBDYXJkQ29udGVudDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF93aXRob3V0IGZyb20gXCJsb2Rhc2gvd2l0aG91dFwiO1xuaW1wb3J0IF9tYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIFNVSSwgdXNlS2V5T25seSwgdXNlVGV4dEFsaWduUHJvcCwgdXNlV2lkdGhQcm9wIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBDYXJkIGZyb20gJy4vQ2FyZCc7XG4vKipcbiAqIEEgZ3JvdXAgb2YgY2FyZHMuXG4gKi9cblxuZnVuY3Rpb24gQ2FyZEdyb3VwKHByb3BzKSB7XG4gIHZhciBjZW50ZXJlZCA9IHByb3BzLmNlbnRlcmVkLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgZG91YmxpbmcgPSBwcm9wcy5kb3VibGluZyxcbiAgICAgIGl0ZW1zID0gcHJvcHMuaXRlbXMsXG4gICAgICBpdGVtc1BlclJvdyA9IHByb3BzLml0ZW1zUGVyUm93LFxuICAgICAgc3RhY2thYmxlID0gcHJvcHMuc3RhY2thYmxlLFxuICAgICAgdGV4dEFsaWduID0gcHJvcHMudGV4dEFsaWduO1xuICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIHVzZUtleU9ubHkoY2VudGVyZWQsICdjZW50ZXJlZCcpLCB1c2VLZXlPbmx5KGRvdWJsaW5nLCAnZG91YmxpbmcnKSwgdXNlS2V5T25seShzdGFja2FibGUsICdzdGFja2FibGUnKSwgdXNlVGV4dEFsaWduUHJvcCh0ZXh0QWxpZ24pLCB1c2VXaWR0aFByb3AoaXRlbXNQZXJSb3cpLCAnY2FyZHMnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKENhcmRHcm91cCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShDYXJkR3JvdXAsIHByb3BzKTtcblxuICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNvbnRlbnQpKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY29udGVudCk7XG4gIH1cblxuICB2YXIgaXRlbXNKU1ggPSBfbWFwKGl0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBrZXkgPSBpdGVtLmtleSB8fCBbaXRlbS5oZWFkZXIsIGl0ZW0uZGVzY3JpcHRpb25dLmpvaW4oJy0nKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDYXJkLCBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIGl0ZW0pKTtcbiAgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBpdGVtc0pTWCk7XG59XG5cbkNhcmRHcm91cC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNlbnRlcmVkXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiZG91YmxpbmdcIiwgXCJpdGVtc1wiLCBcIml0ZW1zUGVyUm93XCIsIFwic3RhY2thYmxlXCIsIFwidGV4dEFsaWduXCJdO1xuQ2FyZEdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEEgZ3JvdXAgb2YgY2FyZHMgY2FuIGNlbnRlciBpdHNlbGYgaW5zaWRlIGl0cyBjb250YWluZXIuICovXG4gIGNlbnRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIEEgZ3JvdXAgb2YgY2FyZHMgY2FuIGRvdWJsZSBpdHMgY29sdW1uIHdpZHRoIGZvciBtb2JpbGUuICovXG4gIGRvdWJsaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogU2hvcnRoYW5kIGFycmF5IG9mIHByb3BzIGZvciBDYXJkLiAqL1xuICBpdGVtczogY3VzdG9tUHJvcFR5cGVzLmNvbGxlY3Rpb25TaG9ydGhhbmQsXG5cbiAgLyoqIEEgZ3JvdXAgb2YgY2FyZHMgY2FuIHNldCBob3cgbWFueSBjYXJkcyBzaG91bGQgZXhpc3QgaW4gYSByb3cuICovXG4gIGl0ZW1zUGVyUm93OiBQcm9wVHlwZXMub25lT2YoU1VJLldJRFRIUyksXG5cbiAgLyoqIEEgZ3JvdXAgb2YgY2FyZHMgY2FuIGF1dG9tYXRpY2FsbHkgc3RhY2sgcm93cyB0byBhIHNpbmdsZSBjb2x1bW5zIG9uIG1vYmlsZSBkZXZpY2VzLiAqL1xuICBzdGFja2FibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGNhcmQgZ3JvdXAgY2FuIGFkanVzdCBpdHMgdGV4dCBhbGlnbm1lbnQuICovXG4gIHRleHRBbGlnbjogUHJvcFR5cGVzLm9uZU9mKF93aXRob3V0KFNVSS5URVhUX0FMSUdOTUVOVFMsICdqdXN0aWZpZWQnKSlcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IENhcmRHcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJbWFnZSBmcm9tICcuLi8uLi9lbGVtZW50cy9JbWFnZSc7XG5pbXBvcnQgQ2FyZENvbnRlbnQgZnJvbSAnLi9DYXJkQ29udGVudCc7XG5pbXBvcnQgQ2FyZERlc2NyaXB0aW9uIGZyb20gJy4vQ2FyZERlc2NyaXB0aW9uJztcbmltcG9ydCBDYXJkR3JvdXAgZnJvbSAnLi9DYXJkR3JvdXAnO1xuaW1wb3J0IENhcmRIZWFkZXIgZnJvbSAnLi9DYXJkSGVhZGVyJztcbmltcG9ydCBDYXJkTWV0YSBmcm9tICcuL0NhcmRNZXRhJztcbi8qKlxuICogQSBjYXJkIGRpc3BsYXlzIHNpdGUgY29udGVudCBpbiBhIG1hbm5lciBzaW1pbGFyIHRvIGEgcGxheWluZyBjYXJkLlxuICovXG5cbnZhciBDYXJkID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDYXJkLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDYXJkKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhcmQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoQ2FyZCkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgb25DbGljayA9IF90aGlzLnByb3BzLm9uQ2xpY2s7XG4gICAgICBpZiAob25DbGljaykgb25DbGljayhlLCBfdGhpcy5wcm9wcyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2FyZCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2VudGVyZWQgPSBfdGhpcyRwcm9wcy5jZW50ZXJlZCxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjb2xvciA9IF90aGlzJHByb3BzLmNvbG9yLFxuICAgICAgICAgIGNvbnRlbnQgPSBfdGhpcyRwcm9wcy5jb250ZW50LFxuICAgICAgICAgIGRlc2NyaXB0aW9uID0gX3RoaXMkcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgZXh0cmEgPSBfdGhpcyRwcm9wcy5leHRyYSxcbiAgICAgICAgICBmbHVpZCA9IF90aGlzJHByb3BzLmZsdWlkLFxuICAgICAgICAgIGhlYWRlciA9IF90aGlzJHByb3BzLmhlYWRlcixcbiAgICAgICAgICBocmVmID0gX3RoaXMkcHJvcHMuaHJlZixcbiAgICAgICAgICBpbWFnZSA9IF90aGlzJHByb3BzLmltYWdlLFxuICAgICAgICAgIGxpbmsgPSBfdGhpcyRwcm9wcy5saW5rLFxuICAgICAgICAgIG1ldGEgPSBfdGhpcyRwcm9wcy5tZXRhLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrLFxuICAgICAgICAgIHJhaXNlZCA9IF90aGlzJHByb3BzLnJhaXNlZDtcbiAgICAgIHZhciBjbGFzc2VzID0gY3goJ3VpJywgY29sb3IsIHVzZUtleU9ubHkoY2VudGVyZWQsICdjZW50ZXJlZCcpLCB1c2VLZXlPbmx5KGZsdWlkLCAnZmx1aWQnKSwgdXNlS2V5T25seShsaW5rLCAnbGluaycpLCB1c2VLZXlPbmx5KHJhaXNlZCwgJ3JhaXNlZCcpLCAnY2FyZCcsIGNsYXNzTmFtZSk7XG4gICAgICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKENhcmQsIHRoaXMucHJvcHMpO1xuICAgICAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoQ2FyZCwgdGhpcy5wcm9wcywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAob25DbGljaykgcmV0dXJuICdhJztcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgICBocmVmOiBocmVmLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICAgICAgfSksIGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNvbnRlbnQpKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgICBocmVmOiBocmVmLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICAgICAgfSksIGNvbnRlbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICBocmVmOiBocmVmLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrXG4gICAgICB9KSwgSW1hZ2UuY3JlYXRlKGltYWdlLCB7XG4gICAgICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2UsXG4gICAgICAgIGRlZmF1bHRQcm9wczoge1xuICAgICAgICAgIHVpOiBmYWxzZSxcbiAgICAgICAgICB3cmFwcGVkOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pLCAoZGVzY3JpcHRpb24gfHwgaGVhZGVyIHx8IG1ldGEpICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2FyZENvbnRlbnQsIHtcbiAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgICBoZWFkZXI6IGhlYWRlcixcbiAgICAgICAgbWV0YTogbWV0YVxuICAgICAgfSksIGV4dHJhICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2FyZENvbnRlbnQsIHtcbiAgICAgICAgZXh0cmE6IHRydWVcbiAgICAgIH0sIGV4dHJhKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENhcmQ7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShDYXJkLCBcIkNvbnRlbnRcIiwgQ2FyZENvbnRlbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoQ2FyZCwgXCJEZXNjcmlwdGlvblwiLCBDYXJkRGVzY3JpcHRpb24pO1xuXG5fZGVmaW5lUHJvcGVydHkoQ2FyZCwgXCJHcm91cFwiLCBDYXJkR3JvdXApO1xuXG5fZGVmaW5lUHJvcGVydHkoQ2FyZCwgXCJIZWFkZXJcIiwgQ2FyZEhlYWRlcik7XG5cbl9kZWZpbmVQcm9wZXJ0eShDYXJkLCBcIk1ldGFcIiwgQ2FyZE1ldGEpO1xuXG5fZGVmaW5lUHJvcGVydHkoQ2FyZCwgXCJoYW5kbGVkUHJvcHNcIiwgW1wiYXNcIiwgXCJjZW50ZXJlZFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb250ZW50XCIsIFwiZGVzY3JpcHRpb25cIiwgXCJleHRyYVwiLCBcImZsdWlkXCIsIFwiaGVhZGVyXCIsIFwiaHJlZlwiLCBcImltYWdlXCIsIFwibGlua1wiLCBcIm1ldGFcIiwgXCJvbkNsaWNrXCIsIFwicmFpc2VkXCJdKTtcblxuZXhwb3J0IHsgQ2FyZCBhcyBkZWZhdWx0IH07XG5DYXJkLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIEEgQ2FyZCBjYW4gY2VudGVyIGl0c2VsZiBpbnNpZGUgaXRzIGNvbnRhaW5lci4gKi9cbiAgY2VudGVyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEEgQ2FyZCBjYW4gYmUgZm9ybWF0dGVkIHRvIGRpc3BsYXkgZGlmZmVyZW50IGNvbG9ycy4gKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihTVUkuQ09MT1JTKSxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIENhcmREZXNjcmlwdGlvbi4gKi9cbiAgZGVzY3JpcHRpb246IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudCBvZiBDYXJkQ29udGVudC4gKi9cbiAgZXh0cmE6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBBIENhcmQgY2FuIGJlIGZvcm1hdHRlZCB0byB0YWtlIHVwIHRoZSB3aWR0aCBvZiBpdHMgY29udGFpbmVyLiAqL1xuICBmbHVpZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgQ2FyZEhlYWRlci4gKi9cbiAgaGVhZGVyOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogUmVuZGVyIGFzIGFuIGBhYCB0YWcgaW5zdGVhZCBvZiBhIGBkaXZgIGFuZCBhZGRzIHRoZSBocmVmIGF0dHJpYnV0ZS4gKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQSBjYXJkIGNhbiBjb250YWluIGFuIEltYWdlIGNvbXBvbmVudC4gKi9cbiAgaW1hZ2U6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBBIGNhcmQgY2FuIGJlIGZvcm1hdHRlZCB0byBsaW5rIHRvIG90aGVyIGNvbnRlbnQuICovXG4gIGxpbms6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIENhcmRNZXRhLiAqL1xuICBtZXRhOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGNsaWNrLiBXaGVuIHBhc3NlZCwgdGhlIGNvbXBvbmVudCByZW5kZXJzIGFzIGFuIGBhYFxuICAgKiB0YWcgYnkgZGVmYXVsdCBpbnN0ZWFkIG9mIGEgYGRpdmAuXG4gICAqXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IC0gUmVhY3QncyBvcmlnaW5hbCBTeW50aGV0aWNFdmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBBbGwgcHJvcHMuXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKiogQSBDYXJkIGNhbiBiZSBmb3JtYXR0ZWQgdG8gcmFpc2UgYWJvdmUgdGhlIHBhZ2UuICovXG4gIHJhaXNlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB7fTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgdXNlS2V5T25seSB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgY29tbWVudCBjYW4gY29udGFpbiBhbiBhY3Rpb24uXG4gKi9cblxuZnVuY3Rpb24gQ29tbWVudEFjdGlvbihwcm9wcykge1xuICB2YXIgYWN0aXZlID0gcHJvcHMuYWN0aXZlLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KHVzZUtleU9ubHkoYWN0aXZlLCAnYWN0aXZlJyksIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoQ29tbWVudEFjdGlvbiwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShDb21tZW50QWN0aW9uLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5Db21tZW50QWN0aW9uLmhhbmRsZWRQcm9wcyA9IFtcImFjdGl2ZVwiLCBcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCJdO1xuQ29tbWVudEFjdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnYSdcbn07XG5Db21tZW50QWN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFN0eWxlIGFzIHRoZSBjdXJyZW50bHkgYWN0aXZlIGFjdGlvbi4gKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmRcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IENvbW1lbnRBY3Rpb247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGNvbW1lbnQgY2FuIGNvbnRhaW4gYW4gbGlzdCBvZiBhY3Rpb25zIGEgdXNlciBtYXkgcGVyZm9ybSByZWxhdGVkIHRvIHRoaXMgY29tbWVudC5cbiAqL1xuXG5mdW5jdGlvbiBDb21tZW50QWN0aW9ucyhwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdhY3Rpb25zJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhDb21tZW50QWN0aW9ucywgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShDb21tZW50QWN0aW9ucywgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuQ29tbWVudEFjdGlvbnMuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5Db21tZW50QWN0aW9ucy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgQ29tbWVudEFjdGlvbnM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGNvbW1lbnQgY2FuIGNvbnRhaW4gYW4gYXV0aG9yLlxuICovXG5cbmZ1bmN0aW9uIENvbW1lbnRBdXRob3IocHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudDtcbiAgdmFyIGNsYXNzZXMgPSBjeCgnYXV0aG9yJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhDb21tZW50QXV0aG9yLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKENvbW1lbnRBdXRob3IsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cbkNvbW1lbnRBdXRob3IuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5Db21tZW50QXV0aG9yLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBDb21tZW50QXV0aG9yOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVIVE1MSW1hZ2UsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgaHRtbEltYWdlUHJvcHMsIHBhcnRpdGlvbkhUTUxQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgY29tbWVudCBjYW4gY29udGFpbiBhbiBpbWFnZSBvciBhdmF0YXIuXG4gKi9cblxuZnVuY3Rpb24gQ29tbWVudEF2YXRhcihwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgc3JjID0gcHJvcHMuc3JjO1xuICB2YXIgY2xhc3NlcyA9IGN4KCdhdmF0YXInLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKENvbW1lbnRBdmF0YXIsIHByb3BzKTtcblxuICB2YXIgX3BhcnRpdGlvbkhUTUxQcm9wcyA9IHBhcnRpdGlvbkhUTUxQcm9wcyhyZXN0LCB7XG4gICAgaHRtbFByb3BzOiBodG1sSW1hZ2VQcm9wc1xuICB9KSxcbiAgICAgIF9wYXJ0aXRpb25IVE1MUHJvcHMyID0gX3NsaWNlZFRvQXJyYXkoX3BhcnRpdGlvbkhUTUxQcm9wcywgMiksXG4gICAgICBpbWFnZVByb3BzID0gX3BhcnRpdGlvbkhUTUxQcm9wczJbMF0sXG4gICAgICByb290UHJvcHMgPSBfcGFydGl0aW9uSFRNTFByb3BzMlsxXTtcblxuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShDb21tZW50QXZhdGFyLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjcmVhdGVIVE1MSW1hZ2Uoc3JjLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZSxcbiAgICBkZWZhdWx0UHJvcHM6IGltYWdlUHJvcHNcbiAgfSkpO1xufVxuXG5Db21tZW50QXZhdGFyLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2xhc3NOYW1lXCIsIFwic3JjXCJdO1xuQ29tbWVudEF2YXRhci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU3BlY2lmaWVzIHRoZSBVUkwgb2YgdGhlIGltYWdlLiAqL1xuICBzcmM6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IENvbW1lbnRBdmF0YXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGNvbW1lbnQgY2FuIGNvbnRhaW4gY29udGVudC5cbiAqL1xuXG5mdW5jdGlvbiBDb21tZW50Q29udGVudChwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KGNsYXNzTmFtZSwgJ2NvbnRlbnQnKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhDb21tZW50Q29udGVudCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShDb21tZW50Q29udGVudCwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuQ29tbWVudENvbnRlbnQuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5Db21tZW50Q29udGVudC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgQ29tbWVudENvbnRlbnQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfd2l0aG91dCBmcm9tIFwibG9kYXNoL3dpdGhvdXRcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIFNVSSwgdXNlS2V5T25seSB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIENvbW1lbnRzIGNhbiBiZSBncm91cGVkLlxuICovXG5cbmZ1bmN0aW9uIENvbW1lbnRHcm91cChwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNvbGxhcHNlZCA9IHByb3BzLmNvbGxhcHNlZCxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgbWluaW1hbCA9IHByb3BzLm1pbmltYWwsXG4gICAgICBzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHRocmVhZGVkID0gcHJvcHMudGhyZWFkZWQ7XG4gIHZhciBjbGFzc2VzID0gY3goJ3VpJywgc2l6ZSwgdXNlS2V5T25seShjb2xsYXBzZWQsICdjb2xsYXBzZWQnKSwgdXNlS2V5T25seShtaW5pbWFsLCAnbWluaW1hbCcpLCB1c2VLZXlPbmx5KHRocmVhZGVkLCAndGhyZWFkZWQnKSwgJ2NvbW1lbnRzJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhDb21tZW50R3JvdXAsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoQ29tbWVudEdyb3VwLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5Db21tZW50R3JvdXAuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbGxhcHNlZFwiLCBcImNvbnRlbnRcIiwgXCJtaW5pbWFsXCIsIFwic2l6ZVwiLCBcInRocmVhZGVkXCJdO1xuQ29tbWVudEdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogQ29tbWVudHMgY2FuIGJlIGNvbGxhcHNlZCwgb3IgaGlkZGVuIGZyb20gdmlldy4gKi9cbiAgY29sbGFwc2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBDb21tZW50cyBjYW4gaGlkZSBleHRyYSBpbmZvcm1hdGlvbiB1bmxlc3MgYSB1c2VyIHNob3dzIGludGVudCB0byBpbnRlcmFjdCB3aXRoIGEgY29tbWVudC4gKi9cbiAgbWluaW1hbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqIENvbW1lbnRzIGNhbiBoYXZlIGRpZmZlcmVudCBzaXplcy4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKF93aXRob3V0KFNVSS5TSVpFUywgJ21lZGl1bScpKSxcblxuICAvKiogQSBjb21tZW50IGxpc3QgY2FuIGJlIHRocmVhZGVkIHRvIHNob3dpbmcgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGNvbnZlcnNhdGlvbnMuICovXG4gIHRocmVhZGVkOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgQ29tbWVudEdyb3VwOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbi8qKlxuICogQSBjb21tZW50IGNhbiBjb250YWluIG1ldGFkYXRhIGFib3V0IHRoZSBjb21tZW50LCBhbiBhcmJpdHJhcnkgYW1vdW50IG9mIG1ldGFkYXRhIG1heSBiZSBkZWZpbmVkLlxuICovXG5cbmZ1bmN0aW9uIENvbW1lbnRNZXRhZGF0YShwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdtZXRhZGF0YScsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoQ29tbWVudE1ldGFkYXRhLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKENvbW1lbnRNZXRhZGF0YSwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuQ29tbWVudE1ldGFkYXRhLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCJdO1xuQ29tbWVudE1ldGFkYXRhLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBDb21tZW50TWV0YWRhdGE7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGNvbW1lbnQgY2FuIGNvbnRhaW4gdGV4dC5cbiAqL1xuXG5mdW5jdGlvbiBDb21tZW50VGV4dChwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KGNsYXNzTmFtZSwgJ3RleHQnKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhDb21tZW50VGV4dCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShDb21tZW50VGV4dCwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuQ29tbWVudFRleHQuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5Db21tZW50VGV4dC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgQ29tbWVudFRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIHVzZUtleU9ubHkgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IENvbW1lbnRBY3Rpb24gZnJvbSAnLi9Db21tZW50QWN0aW9uJztcbmltcG9ydCBDb21tZW50QWN0aW9ucyBmcm9tICcuL0NvbW1lbnRBY3Rpb25zJztcbmltcG9ydCBDb21tZW50QXV0aG9yIGZyb20gJy4vQ29tbWVudEF1dGhvcic7XG5pbXBvcnQgQ29tbWVudEF2YXRhciBmcm9tICcuL0NvbW1lbnRBdmF0YXInO1xuaW1wb3J0IENvbW1lbnRDb250ZW50IGZyb20gJy4vQ29tbWVudENvbnRlbnQnO1xuaW1wb3J0IENvbW1lbnRHcm91cCBmcm9tICcuL0NvbW1lbnRHcm91cCc7XG5pbXBvcnQgQ29tbWVudE1ldGFkYXRhIGZyb20gJy4vQ29tbWVudE1ldGFkYXRhJztcbmltcG9ydCBDb21tZW50VGV4dCBmcm9tICcuL0NvbW1lbnRUZXh0Jztcbi8qKlxuICogQSBjb21tZW50IGRpc3BsYXlzIHVzZXIgZmVlZGJhY2sgdG8gc2l0ZSBjb250ZW50LlxuICovXG5cbmZ1bmN0aW9uIENvbW1lbnQocHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjb2xsYXBzZWQgPSBwcm9wcy5jb2xsYXBzZWQsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudDtcbiAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KGNvbGxhcHNlZCwgJ2NvbGxhcHNlZCcpLCAnY29tbWVudCcsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoQ29tbWVudCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShDb21tZW50LCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5Db21tZW50LmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xsYXBzZWRcIiwgXCJjb250ZW50XCJdO1xuQ29tbWVudC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIENvbW1lbnQgY2FuIGJlIGNvbGxhcHNlZCwgb3IgaGlkZGVuIGZyb20gdmlldy4gKi9cbiAgY29sbGFwc2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5Db21tZW50LkF1dGhvciA9IENvbW1lbnRBdXRob3I7XG5Db21tZW50LkFjdGlvbiA9IENvbW1lbnRBY3Rpb247XG5Db21tZW50LkFjdGlvbnMgPSBDb21tZW50QWN0aW9ucztcbkNvbW1lbnQuQXZhdGFyID0gQ29tbWVudEF2YXRhcjtcbkNvbW1lbnQuQ29udGVudCA9IENvbW1lbnRDb250ZW50O1xuQ29tbWVudC5Hcm91cCA9IENvbW1lbnRHcm91cDtcbkNvbW1lbnQuTWV0YWRhdGEgPSBDb21tZW50TWV0YWRhdGE7XG5Db21tZW50LlRleHQgPSBDb21tZW50VGV4dDtcbmV4cG9ydCBkZWZhdWx0IENvbW1lbnQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBbiBldmVudCBvciBhbiBldmVudCBzdW1tYXJ5IGNhbiBjb250YWluIGEgZGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBGZWVkRGF0ZShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdkYXRlJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhGZWVkRGF0ZSwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShGZWVkRGF0ZSwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuRmVlZERhdGUuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5GZWVkRGF0ZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgRmVlZERhdGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfbWFwIGZyb20gXCJsb2Rhc2gvbWFwXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGNyZWF0ZUhUTUxJbWFnZSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIHVzZUtleU9ubHkgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIGZlZWQgY2FuIGNvbnRhaW4gYW4gZXh0cmEgY29udGVudC5cbiAqL1xuXG5mdW5jdGlvbiBGZWVkRXh0cmEocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGltYWdlcyA9IHByb3BzLmltYWdlcyxcbiAgICAgIHRleHQgPSBwcm9wcy50ZXh0O1xuICB2YXIgY2xhc3NlcyA9IGN4KHVzZUtleU9ubHkoaW1hZ2VzLCAnaW1hZ2VzJyksIHVzZUtleU9ubHkoY29udGVudCB8fCB0ZXh0LCAndGV4dCcpLCAnZXh0cmEnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEZlZWRFeHRyYSwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShGZWVkRXh0cmEsIHByb3BzKTtcblxuICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9IC8vIFRPRE8gbmVlZCBhIFwiY29sbGVjdGlvbiBmYWN0b3J5XCIgdG8gaGFuZGxlIGNyZWF0aW5nIG11bHRpcGxlIGltYWdlIGVsZW1lbnRzIGFuZCB0aGVpciBrZXlzXG5cblxuICB2YXIgaW1hZ2VFbGVtZW50cyA9IF9tYXAoaW1hZ2VzLCBmdW5jdGlvbiAoaW1hZ2UsIGluZGV4KSB7XG4gICAgdmFyIGtleSA9IFtpbmRleCwgaW1hZ2VdLmpvaW4oJy0nKTtcbiAgICByZXR1cm4gY3JlYXRlSFRNTEltYWdlKGltYWdlLCB7XG4gICAgICBrZXk6IGtleVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNvbnRlbnQsIGltYWdlRWxlbWVudHMpO1xufVxuXG5GZWVkRXh0cmEuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJpbWFnZXNcIiwgXCJ0ZXh0XCJdO1xuRmVlZEV4dHJhLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBBbiBldmVudCBjYW4gY29udGFpbiBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGxpa2UgYSBzZXQgb2YgaW1hZ2VzLiAqL1xuICBpbWFnZXM6IGN1c3RvbVByb3BUeXBlcy5ldmVyeShbY3VzdG9tUHJvcFR5cGVzLmRpc2FsbG93KFsndGV4dCddKSwgUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIGN1c3RvbVByb3BUeXBlcy5jb2xsZWN0aW9uU2hvcnRoYW5kXSldKSxcblxuICAvKiogQW4gZXZlbnQgY2FuIGNvbnRhaW4gYWRkaXRpb25hbCB0ZXh0IGluZm9ybWF0aW9uLiAqL1xuICB0ZXh0OiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgRmVlZEV4dHJhOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL2VsZW1lbnRzL0ljb24nO1xuLyoqXG4gKiBBIGZlZWQgY2FuIGNvbnRhaW4gYSBsaWtlIGVsZW1lbnQuXG4gKi9cblxuZnVuY3Rpb24gRmVlZExpa2UocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uO1xuICB2YXIgY2xhc3NlcyA9IGN4KCdsaWtlJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhGZWVkTGlrZSwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShGZWVkTGlrZSwgcHJvcHMpO1xuXG4gIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICAgIH0pLCBjaGlsZHJlbik7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIEljb24uY3JlYXRlKGljb24sIHtcbiAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gIH0pLCBjb250ZW50KTtcbn1cblxuRmVlZExpa2UuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJpY29uXCJdO1xuRmVlZExpa2UuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2EnXG59O1xuRmVlZExpa2UucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgaWNvbi4gTXV0dWFsbHkgZXhjbHVzaXZlIHdpdGggY2hpbGRyZW4uICovXG4gIGljb246IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBGZWVkTGlrZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmQsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBGZWVkTGlrZSBmcm9tICcuL0ZlZWRMaWtlJztcbi8qKlxuICogQSBmZWVkIGNhbiBjb250YWluIGEgbWV0YS5cbiAqL1xuXG5mdW5jdGlvbiBGZWVkTWV0YShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgbGlrZSA9IHByb3BzLmxpa2U7XG4gIHZhciBjbGFzc2VzID0gY3goJ21ldGEnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEZlZWRNZXRhLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEZlZWRNZXRhLCBwcm9wcyk7XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY3JlYXRlU2hvcnRoYW5kKEZlZWRMaWtlLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQ6IHZhbFxuICAgIH07XG4gIH0sIGxpa2UsIHtcbiAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gIH0pLCBjb250ZW50KTtcbn1cblxuRmVlZE1ldGEuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJsaWtlXCJdO1xuRmVlZE1ldGEucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgRmVlZExpa2UuICovXG4gIGxpa2U6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBGZWVkTWV0YTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgZmVlZCBjYW4gY29udGFpbiBhIHVzZXIgZWxlbWVudC5cbiAqL1xuXG5mdW5jdGlvbiBGZWVkVXNlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCd1c2VyJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhGZWVkVXNlciwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShGZWVkVXNlciwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuRmVlZFVzZXIuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5GZWVkVXNlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZFxufSA6IHt9O1xuRmVlZFVzZXIuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2EnXG59O1xuZXhwb3J0IGRlZmF1bHQgRmVlZFVzZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgRmVlZERhdGUgZnJvbSAnLi9GZWVkRGF0ZSc7XG5pbXBvcnQgRmVlZFVzZXIgZnJvbSAnLi9GZWVkVXNlcic7XG4vKipcbiAqIEEgZmVlZCBjYW4gY29udGFpbiBhIHN1bW1hcnkuXG4gKi9cblxuZnVuY3Rpb24gRmVlZFN1bW1hcnkocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGRhdGUgPSBwcm9wcy5kYXRlLFxuICAgICAgdXNlciA9IHByb3BzLnVzZXI7XG4gIHZhciBjbGFzc2VzID0gY3goJ3N1bW1hcnknLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEZlZWRTdW1tYXJ5LCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEZlZWRTdW1tYXJ5LCBwcm9wcyk7XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY3JlYXRlU2hvcnRoYW5kKEZlZWRVc2VyLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQ6IHZhbFxuICAgIH07XG4gIH0sIHVzZXIsIHtcbiAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gIH0pLCBjb250ZW50ICYmICcgJywgY29udGVudCwgY29udGVudCAmJiAnICcsIGNyZWF0ZVNob3J0aGFuZChGZWVkRGF0ZSwgZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiB2YWxcbiAgICB9O1xuICB9LCBkYXRlLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSk7XG59XG5cbkZlZWRTdW1tYXJ5LmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiZGF0ZVwiLCBcInVzZXJcIl07XG5GZWVkU3VtbWFyeS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBGZWVkRGF0ZS4gKi9cbiAgZGF0ZTogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgRmVlZFVzZXIuICovXG4gIHVzZXI6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBGZWVkU3VtbWFyeTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmQsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBGZWVkRGF0ZSBmcm9tICcuL0ZlZWREYXRlJztcbmltcG9ydCBGZWVkRXh0cmEgZnJvbSAnLi9GZWVkRXh0cmEnO1xuaW1wb3J0IEZlZWRNZXRhIGZyb20gJy4vRmVlZE1ldGEnO1xuaW1wb3J0IEZlZWRTdW1tYXJ5IGZyb20gJy4vRmVlZFN1bW1hcnknO1xuXG5mdW5jdGlvbiBGZWVkQ29udGVudChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgZXh0cmFJbWFnZXMgPSBwcm9wcy5leHRyYUltYWdlcyxcbiAgICAgIGV4dHJhVGV4dCA9IHByb3BzLmV4dHJhVGV4dCxcbiAgICAgIGRhdGUgPSBwcm9wcy5kYXRlLFxuICAgICAgbWV0YSA9IHByb3BzLm1ldGEsXG4gICAgICBzdW1tYXJ5ID0gcHJvcHMuc3VtbWFyeTtcbiAgdmFyIGNsYXNzZXMgPSBjeCgnY29udGVudCcsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoRmVlZENvbnRlbnQsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoRmVlZENvbnRlbnQsIHByb3BzKTtcblxuICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjcmVhdGVTaG9ydGhhbmQoRmVlZERhdGUsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGVudDogdmFsXG4gICAgfTtcbiAgfSwgZGF0ZSwge1xuICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgfSksIGNyZWF0ZVNob3J0aGFuZChGZWVkU3VtbWFyeSwgZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiB2YWxcbiAgICB9O1xuICB9LCBzdW1tYXJ5LCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSwgY29udGVudCwgY3JlYXRlU2hvcnRoYW5kKEZlZWRFeHRyYSwgZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0OiB0cnVlLFxuICAgICAgY29udGVudDogdmFsXG4gICAgfTtcbiAgfSwgZXh0cmFUZXh0LCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSwgY3JlYXRlU2hvcnRoYW5kKEZlZWRFeHRyYSwgZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbWFnZXM6IHZhbFxuICAgIH07XG4gIH0sIGV4dHJhSW1hZ2VzLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSwgY3JlYXRlU2hvcnRoYW5kKEZlZWRNZXRhLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQ6IHZhbFxuICAgIH07XG4gIH0sIG1ldGEsIHtcbiAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gIH0pKTtcbn1cblxuRmVlZENvbnRlbnQuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJkYXRlXCIsIFwiZXh0cmFJbWFnZXNcIiwgXCJleHRyYVRleHRcIiwgXCJtZXRhXCIsIFwic3VtbWFyeVwiXTtcbkZlZWRDb250ZW50LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBBbiBldmVudCBjYW4gY29udGFpbiBhIGRhdGUuICovXG4gIGRhdGU6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEZlZWRFeHRyYSB3aXRoIGltYWdlcy4gKi9cbiAgZXh0cmFJbWFnZXM6IEZlZWRFeHRyYS5wcm9wVHlwZXMuaW1hZ2VzLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEZlZWRFeHRyYSB3aXRoIHRleHQuICovXG4gIGV4dHJhVGV4dDogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgRmVlZE1ldGEuICovXG4gIG1ldGE6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEZlZWRTdW1tYXJ5LiAqL1xuICBzdW1tYXJ5OiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgRmVlZENvbnRlbnQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlSFRNTEltYWdlLCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi8uLi9lbGVtZW50cy9JY29uJztcbi8qKlxuICogQW4gZXZlbnQgY2FuIGNvbnRhaW4gYW4gaW1hZ2Ugb3IgaWNvbiBsYWJlbC5cbiAqL1xuXG5mdW5jdGlvbiBGZWVkTGFiZWwocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgaW1hZ2UgPSBwcm9wcy5pbWFnZTtcbiAgdmFyIGNsYXNzZXMgPSBjeCgnbGFiZWwnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEZlZWRMYWJlbCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShGZWVkTGFiZWwsIHByb3BzKTtcblxuICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjb250ZW50LCBJY29uLmNyZWF0ZShpY29uLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSwgY3JlYXRlSFRNTEltYWdlKGltYWdlKSk7XG59XG5cbkZlZWRMYWJlbC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiLCBcImljb25cIiwgXCJpbWFnZVwiXTtcbkZlZWRMYWJlbC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQW4gZXZlbnQgY2FuIGNvbnRhaW4gaWNvbiBsYWJlbC4gKi9cbiAgaWNvbjogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIEFuIGV2ZW50IGNhbiBjb250YWluIGltYWdlIGxhYmVsLiAqL1xuICBpbWFnZTogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmRcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IEZlZWRMYWJlbDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVTaG9ydGhhbmQsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBGZWVkQ29udGVudCBmcm9tICcuL0ZlZWRDb250ZW50JztcbmltcG9ydCBGZWVkTGFiZWwgZnJvbSAnLi9GZWVkTGFiZWwnO1xuLyoqXG4gKiBBIGZlZWQgY29udGFpbnMgYW4gZXZlbnQuXG4gKi9cblxuZnVuY3Rpb24gRmVlZEV2ZW50KHByb3BzKSB7XG4gIHZhciBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkYXRlID0gcHJvcHMuZGF0ZSxcbiAgICAgIGV4dHJhSW1hZ2VzID0gcHJvcHMuZXh0cmFJbWFnZXMsXG4gICAgICBleHRyYVRleHQgPSBwcm9wcy5leHRyYVRleHQsXG4gICAgICBpbWFnZSA9IHByb3BzLmltYWdlLFxuICAgICAgaWNvbiA9IHByb3BzLmljb24sXG4gICAgICBtZXRhID0gcHJvcHMubWV0YSxcbiAgICAgIHN1bW1hcnkgPSBwcm9wcy5zdW1tYXJ5O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdldmVudCcsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoRmVlZEV2ZW50LCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEZlZWRFdmVudCwgcHJvcHMpO1xuICB2YXIgaGFzQ29udGVudFByb3AgPSBjb250ZW50IHx8IGRhdGUgfHwgZXh0cmFJbWFnZXMgfHwgZXh0cmFUZXh0IHx8IG1ldGEgfHwgc3VtbWFyeTtcbiAgdmFyIGNvbnRlbnRQcm9wcyA9IHtcbiAgICBjb250ZW50OiBjb250ZW50LFxuICAgIGRhdGU6IGRhdGUsXG4gICAgZXh0cmFJbWFnZXM6IGV4dHJhSW1hZ2VzLFxuICAgIGV4dHJhVGV4dDogZXh0cmFUZXh0LFxuICAgIG1ldGE6IG1ldGEsXG4gICAgc3VtbWFyeTogc3VtbWFyeVxuICB9O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNyZWF0ZVNob3J0aGFuZChGZWVkTGFiZWwsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbjogdmFsXG4gICAgfTtcbiAgfSwgaWNvbiwge1xuICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgfSksIGNyZWF0ZVNob3J0aGFuZChGZWVkTGFiZWwsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW1hZ2U6IHZhbFxuICAgIH07XG4gIH0sIGltYWdlLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSwgaGFzQ29udGVudFByb3AgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChGZWVkQ29udGVudCwgY29udGVudFByb3BzKSwgY2hpbGRyZW4pO1xufVxuXG5GZWVkRXZlbnQuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJkYXRlXCIsIFwiZXh0cmFJbWFnZXNcIiwgXCJleHRyYVRleHRcIiwgXCJpY29uXCIsIFwiaW1hZ2VcIiwgXCJtZXRhXCIsIFwic3VtbWFyeVwiXTtcbkZlZWRFdmVudC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgRmVlZENvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEZlZWREYXRlLiAqL1xuICBkYXRlOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBGZWVkRXh0cmEgd2l0aCBpbWFnZXMuICovXG4gIGV4dHJhSW1hZ2VzOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBGZWVkRXh0cmEgd2l0aCBjb250ZW50LiAqL1xuICBleHRyYVRleHQ6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBBbiBldmVudCBjYW4gY29udGFpbiBpY29uIGxhYmVsLiAqL1xuICBpY29uOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogQW4gZXZlbnQgY2FuIGNvbnRhaW4gaW1hZ2UgbGFiZWwuICovXG4gIGltYWdlOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBGZWVkTWV0YS4gKi9cbiAgbWV0YTogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgRmVlZFN1bW1hcnkuICovXG4gIHN1bW1hcnk6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBGZWVkRXZlbnQ7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfd2l0aG91dCBmcm9tIFwibG9kYXNoL3dpdGhvdXRcIjtcbmltcG9ydCBfbWFwIGZyb20gXCJsb2Rhc2gvbWFwXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUkgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IEZlZWRDb250ZW50IGZyb20gJy4vRmVlZENvbnRlbnQnO1xuaW1wb3J0IEZlZWREYXRlIGZyb20gJy4vRmVlZERhdGUnO1xuaW1wb3J0IEZlZWRFdmVudCBmcm9tICcuL0ZlZWRFdmVudCc7XG5pbXBvcnQgRmVlZEV4dHJhIGZyb20gJy4vRmVlZEV4dHJhJztcbmltcG9ydCBGZWVkTGFiZWwgZnJvbSAnLi9GZWVkTGFiZWwnO1xuaW1wb3J0IEZlZWRMaWtlIGZyb20gJy4vRmVlZExpa2UnO1xuaW1wb3J0IEZlZWRNZXRhIGZyb20gJy4vRmVlZE1ldGEnO1xuaW1wb3J0IEZlZWRTdW1tYXJ5IGZyb20gJy4vRmVlZFN1bW1hcnknO1xuaW1wb3J0IEZlZWRVc2VyIGZyb20gJy4vRmVlZFVzZXInO1xuLyoqXG4gKiBBIGZlZWQgcHJlc2VudHMgdXNlciBhY3Rpdml0eSBjaHJvbm9sb2dpY2FsbHkuXG4gKi9cblxuZnVuY3Rpb24gRmVlZChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGV2ZW50cyA9IHByb3BzLmV2ZW50cyxcbiAgICAgIHNpemUgPSBwcm9wcy5zaXplO1xuICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIHNpemUsICdmZWVkJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhGZWVkLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEZlZWQsIHByb3BzKTtcblxuICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgdmFyIGV2ZW50RWxlbWVudHMgPSBfbWFwKGV2ZW50cywgZnVuY3Rpb24gKGV2ZW50UHJvcHMpIHtcbiAgICB2YXIgY2hpbGRLZXkgPSBldmVudFByb3BzLmNoaWxkS2V5LFxuICAgICAgICBkYXRlID0gZXZlbnRQcm9wcy5kYXRlLFxuICAgICAgICBtZXRhID0gZXZlbnRQcm9wcy5tZXRhLFxuICAgICAgICBzdW1tYXJ5ID0gZXZlbnRQcm9wcy5zdW1tYXJ5LFxuICAgICAgICBldmVudERhdGEgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoZXZlbnRQcm9wcywgW1wiY2hpbGRLZXlcIiwgXCJkYXRlXCIsIFwibWV0YVwiLCBcInN1bW1hcnlcIl0pO1xuXG4gICAgdmFyIGZpbmFsS2V5ID0gY2hpbGRLZXkgfHwgW2RhdGUsIG1ldGEsIHN1bW1hcnldLmpvaW4oJy0nKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGZWVkRXZlbnQsIF9leHRlbmRzKHtcbiAgICAgIGRhdGU6IGRhdGUsXG4gICAgICBrZXk6IGZpbmFsS2V5LFxuICAgICAgbWV0YTogbWV0YSxcbiAgICAgIHN1bW1hcnk6IHN1bW1hcnlcbiAgICB9LCBldmVudERhdGEpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBldmVudEVsZW1lbnRzKTtcbn1cblxuRmVlZC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXZlbnRzXCIsIFwic2l6ZVwiXTtcbkZlZWQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgYXJyYXkgb2YgcHJvcHMgZm9yIEZlZWRFdmVudC4gKi9cbiAgZXZlbnRzOiBjdXN0b21Qcm9wVHlwZXMuY29sbGVjdGlvblNob3J0aGFuZCxcblxuICAvKiogQSBmZWVkIGNhbiBoYXZlIGRpZmZlcmVudCBzaXplcy4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKF93aXRob3V0KFNVSS5TSVpFUywgJ21pbmknLCAndGlueScsICdtZWRpdW0nLCAnYmlnJywgJ2h1Z2UnLCAnbWFzc2l2ZScpKVxufSA6IHt9O1xuRmVlZC5Db250ZW50ID0gRmVlZENvbnRlbnQ7XG5GZWVkLkRhdGUgPSBGZWVkRGF0ZTtcbkZlZWQuRXZlbnQgPSBGZWVkRXZlbnQ7XG5GZWVkLkV4dHJhID0gRmVlZEV4dHJhO1xuRmVlZC5MYWJlbCA9IEZlZWRMYWJlbDtcbkZlZWQuTGlrZSA9IEZlZWRMaWtlO1xuRmVlZC5NZXRhID0gRmVlZE1ldGE7XG5GZWVkLlN1bW1hcnkgPSBGZWVkU3VtbWFyeTtcbkZlZWQuVXNlciA9IEZlZWRVc2VyO1xuZXhwb3J0IGRlZmF1bHQgRmVlZDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEFuIGl0ZW0gY2FuIGNvbnRhaW4gYSBoZWFkZXIuXG4gKi9cblxuZnVuY3Rpb24gSXRlbUhlYWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdoZWFkZXInLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEl0ZW1IZWFkZXIsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoSXRlbUhlYWRlciwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuSXRlbUhlYWRlci5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiXTtcbkl0ZW1IZWFkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmRcbn0gOiB7fTtcbkl0ZW1IZWFkZXIuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShJdGVtSGVhZGVyLCBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgSXRlbUhlYWRlcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEFuIGl0ZW0gY2FuIGNvbnRhaW4gYSBkZXNjcmlwdGlvbiB3aXRoIGEgc2luZ2xlIG9yIG11bHRpcGxlIHBhcmFncmFwaHMuXG4gKi9cblxuZnVuY3Rpb24gSXRlbURlc2NyaXB0aW9uKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQ7XG4gIHZhciBjbGFzc2VzID0gY3goJ2Rlc2NyaXB0aW9uJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhJdGVtRGVzY3JpcHRpb24sIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoSXRlbURlc2NyaXB0aW9uLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5JdGVtRGVzY3JpcHRpb24uaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5JdGVtRGVzY3JpcHRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmRcbn0gOiB7fTtcbkl0ZW1EZXNjcmlwdGlvbi5jcmVhdGUgPSBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KEl0ZW1EZXNjcmlwdGlvbiwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IEl0ZW1EZXNjcmlwdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEFuIGl0ZW0gY2FuIGNvbnRhaW4gZXh0cmEgY29udGVudCBtZWFudCB0byBiZSBmb3JtYXR0ZWQgc2VwYXJhdGVseSBmcm9tIHRoZSBtYWluIGNvbnRlbnQuXG4gKi9cblxuZnVuY3Rpb24gSXRlbUV4dHJhKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQ7XG4gIHZhciBjbGFzc2VzID0gY3goJ2V4dHJhJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhJdGVtRXh0cmEsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoSXRlbUV4dHJhLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5JdGVtRXh0cmEuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5JdGVtRXh0cmEucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIHByaW1hcnkgY29udGVudC4gKi9cbiAgY29udGVudDogY3VzdG9tUHJvcFR5cGVzLmNvbnRlbnRTaG9ydGhhbmRcbn0gOiB7fTtcbkl0ZW1FeHRyYS5jcmVhdGUgPSBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KEl0ZW1FeHRyYSwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IEl0ZW1FeHRyYTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEFuIGl0ZW0gY2FuIGNvbnRhaW4gY29udGVudCBtZXRhZGF0YS5cbiAqL1xuXG5mdW5jdGlvbiBJdGVtTWV0YShwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICB2YXIgY2xhc3NlcyA9IGN4KCdtZXRhJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhJdGVtTWV0YSwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShJdGVtTWV0YSwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pID8gY29udGVudCA6IGNoaWxkcmVuKTtcbn1cblxuSXRlbU1ldGEuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIl07XG5JdGVtTWV0YS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZFxufSA6IHt9O1xuSXRlbU1ldGEuY3JlYXRlID0gY3JlYXRlU2hvcnRoYW5kRmFjdG9yeShJdGVtTWV0YSwgZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH07XG59KTtcbmV4cG9ydCBkZWZhdWx0IEl0ZW1NZXRhOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZVZlcnRpY2FsQWxpZ25Qcm9wIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJdGVtSGVhZGVyIGZyb20gJy4vSXRlbUhlYWRlcic7XG5pbXBvcnQgSXRlbURlc2NyaXB0aW9uIGZyb20gJy4vSXRlbURlc2NyaXB0aW9uJztcbmltcG9ydCBJdGVtRXh0cmEgZnJvbSAnLi9JdGVtRXh0cmEnO1xuaW1wb3J0IEl0ZW1NZXRhIGZyb20gJy4vSXRlbU1ldGEnO1xuLyoqXG4gKiBBbiBpdGVtIGNhbiBjb250YWluIGNvbnRlbnQuXG4gKi9cblxuZnVuY3Rpb24gSXRlbUNvbnRlbnQocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGRlc2NyaXB0aW9uID0gcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICBleHRyYSA9IHByb3BzLmV4dHJhLFxuICAgICAgaGVhZGVyID0gcHJvcHMuaGVhZGVyLFxuICAgICAgbWV0YSA9IHByb3BzLm1ldGEsXG4gICAgICB2ZXJ0aWNhbEFsaWduID0gcHJvcHMudmVydGljYWxBbGlnbjtcbiAgdmFyIGNsYXNzZXMgPSBjeCh1c2VWZXJ0aWNhbEFsaWduUHJvcCh2ZXJ0aWNhbEFsaWduKSwgJ2NvbnRlbnQnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEl0ZW1Db250ZW50LCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKEl0ZW1Db250ZW50LCBwcm9wcyk7XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgSXRlbUhlYWRlci5jcmVhdGUoaGVhZGVyLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSwgSXRlbU1ldGEuY3JlYXRlKG1ldGEsIHtcbiAgICBhdXRvR2VuZXJhdGVLZXk6IGZhbHNlXG4gIH0pLCBJdGVtRGVzY3JpcHRpb24uY3JlYXRlKGRlc2NyaXB0aW9uLCB7XG4gICAgYXV0b0dlbmVyYXRlS2V5OiBmYWxzZVxuICB9KSwgSXRlbUV4dHJhLmNyZWF0ZShleHRyYSwge1xuICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgfSksIGNvbnRlbnQpO1xufVxuXG5JdGVtQ29udGVudC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiLCBcImRlc2NyaXB0aW9uXCIsIFwiZXh0cmFcIiwgXCJoZWFkZXJcIiwgXCJtZXRhXCIsIFwidmVydGljYWxBbGlnblwiXTtcbkl0ZW1Db250ZW50LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEl0ZW1EZXNjcmlwdGlvbiBjb21wb25lbnQuICovXG4gIGRlc2NyaXB0aW9uOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBJdGVtRXh0cmEgY29tcG9uZW50LiAqL1xuICBleHRyYTogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgSXRlbUhlYWRlciBjb21wb25lbnQuICovXG4gIGhlYWRlcjogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgSXRlbU1ldGEgY29tcG9uZW50LiAqL1xuICBtZXRhOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogQ29udGVudCBjYW4gc3BlY2lmeSBpdHMgdmVydGljYWwgYWxpZ25tZW50LiAqL1xuICB2ZXJ0aWNhbEFsaWduOiBQcm9wVHlwZXMub25lT2YoU1VJLlZFUlRJQ0FMX0FMSUdOTUVOVFMpXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBJdGVtQ29udGVudDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9tYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIHVzZUtleU9ubHksIHVzZUtleU9yVmFsdWVBbmRLZXkgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IEl0ZW0gZnJvbSAnLi9JdGVtJztcbi8qKlxuICogQSBncm91cCBvZiBpdGVtcy5cbiAqL1xuXG5mdW5jdGlvbiBJdGVtR3JvdXAocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGRpdmlkZWQgPSBwcm9wcy5kaXZpZGVkLFxuICAgICAgaXRlbXMgPSBwcm9wcy5pdGVtcyxcbiAgICAgIGxpbmsgPSBwcm9wcy5saW5rLFxuICAgICAgcmVsYXhlZCA9IHByb3BzLnJlbGF4ZWQsXG4gICAgICB1bnN0YWNrYWJsZSA9IHByb3BzLnVuc3RhY2thYmxlO1xuICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIHVzZUtleU9ubHkoZGl2aWRlZCwgJ2RpdmlkZWQnKSwgdXNlS2V5T25seShsaW5rLCAnbGluaycpLCB1c2VLZXlPbmx5KHVuc3RhY2thYmxlLCAndW5zdGFja2FibGUnKSwgdXNlS2V5T3JWYWx1ZUFuZEtleShyZWxheGVkLCAncmVsYXhlZCcpLCAnaXRlbXMnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEl0ZW1Hcm91cCwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShJdGVtR3JvdXAsIHByb3BzKTtcblxuICBpZiAoIWNoaWxkcmVuVXRpbHMuaXNOaWwoY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNvbnRlbnQpKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSwgY29udGVudCk7XG4gIH1cblxuICB2YXIgaXRlbXNKU1ggPSBfbWFwKGl0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBjaGlsZEtleSA9IGl0ZW0uY2hpbGRLZXksXG4gICAgICAgIGl0ZW1Qcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhpdGVtLCBbXCJjaGlsZEtleVwiXSk7XG5cbiAgICB2YXIgZmluYWxLZXkgPSBjaGlsZEtleSB8fCBbaXRlbVByb3BzLmNvbnRlbnQsIGl0ZW1Qcm9wcy5kZXNjcmlwdGlvbiwgaXRlbVByb3BzLmhlYWRlciwgaXRlbVByb3BzLm1ldGFdLmpvaW4oJy0nKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJdGVtLCBfZXh0ZW5kcyh7fSwgaXRlbVByb3BzLCB7XG4gICAgICBrZXk6IGZpbmFsS2V5XG4gICAgfSkpO1xuICB9KTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbGVtZW50VHlwZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSksIGl0ZW1zSlNYKTtcbn1cblxuSXRlbUdyb3VwLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwiZGl2aWRlZFwiLCBcIml0ZW1zXCIsIFwibGlua1wiLCBcInJlbGF4ZWRcIiwgXCJ1bnN0YWNrYWJsZVwiXTtcbkl0ZW1Hcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogSXRlbXMgY2FuIGJlIGRpdmlkZWQgdG8gYmV0dGVyIGRpc3Rpbmd1aXNoIGJldHdlZW4gZ3JvdXBlZCBjb250ZW50LiAqL1xuICBkaXZpZGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogU2hvcnRoYW5kIGFycmF5IG9mIHByb3BzIGZvciBJdGVtLiAqL1xuICBpdGVtczogY3VzdG9tUHJvcFR5cGVzLmNvbGxlY3Rpb25TaG9ydGhhbmQsXG5cbiAgLyoqIEFuIGl0ZW0gY2FuIGJlIGZvcm1hdHRlZCBzbyB0aGF0IHRoZSBlbnRpcmUgY29udGVudHMgbGluayB0byBhbm90aGVyIHBhZ2UuICovXG4gIGxpbms6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIGdyb3VwIG9mIGl0ZW1zIGNhbiByZWxheCBpdHMgcGFkZGluZyB0byBwcm92aWRlIG1vcmUgbmVnYXRpdmUgc3BhY2UuICovXG4gIHJlbGF4ZWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub25lT2YoWyd2ZXJ5J10pXSksXG5cbiAgLyoqIFByZXZlbnQgaXRlbXMgZnJvbSBzdGFja2luZyBvbiBtb2JpbGUuICovXG4gIHVuc3RhY2thYmxlOiBQcm9wVHlwZXMuYm9vbFxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgSXRlbUdyb3VwOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgZ2V0VW5oYW5kbGVkUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IEltYWdlIGZyb20gJy4uLy4uL2VsZW1lbnRzL0ltYWdlJztcbi8qKlxuICogQW4gaXRlbSBjYW4gY29udGFpbiBhbiBpbWFnZS5cbiAqL1xuXG5mdW5jdGlvbiBJdGVtSW1hZ2UocHJvcHMpIHtcbiAgdmFyIHNpemUgPSBwcm9wcy5zaXplO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKEl0ZW1JbWFnZSwgcHJvcHMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbWFnZSwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBzaXplOiBzaXplLFxuICAgIHVpOiAhIXNpemUsXG4gICAgd3JhcHBlZDogdHJ1ZVxuICB9KSk7XG59XG5cbkl0ZW1JbWFnZS5oYW5kbGVkUHJvcHMgPSBbXCJzaXplXCJdO1xuSXRlbUltYWdlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGltYWdlIG1heSBhcHBlYXIgYXQgZGlmZmVyZW50IHNpemVzLiAqL1xuICBzaXplOiBJbWFnZS5wcm9wVHlwZXMuc2l6ZVxufSA6IHt9O1xuSXRlbUltYWdlLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoSXRlbUltYWdlLCBmdW5jdGlvbiAoc3JjKSB7XG4gIHJldHVybiB7XG4gICAgc3JjOiBzcmNcbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgSXRlbUltYWdlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCBJdGVtQ29udGVudCBmcm9tICcuL0l0ZW1Db250ZW50JztcbmltcG9ydCBJdGVtRGVzY3JpcHRpb24gZnJvbSAnLi9JdGVtRGVzY3JpcHRpb24nO1xuaW1wb3J0IEl0ZW1FeHRyYSBmcm9tICcuL0l0ZW1FeHRyYSc7XG5pbXBvcnQgSXRlbUdyb3VwIGZyb20gJy4vSXRlbUdyb3VwJztcbmltcG9ydCBJdGVtSGVhZGVyIGZyb20gJy4vSXRlbUhlYWRlcic7XG5pbXBvcnQgSXRlbUltYWdlIGZyb20gJy4vSXRlbUltYWdlJztcbmltcG9ydCBJdGVtTWV0YSBmcm9tICcuL0l0ZW1NZXRhJztcbi8qKlxuICogQW4gaXRlbSB2aWV3IHByZXNlbnRzIGxhcmdlIGNvbGxlY3Rpb25zIG9mIHNpdGUgY29udGVudCBmb3IgZGlzcGxheS5cbiAqL1xuXG5mdW5jdGlvbiBJdGVtKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICBkZXNjcmlwdGlvbiA9IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgZXh0cmEgPSBwcm9wcy5leHRyYSxcbiAgICAgIGhlYWRlciA9IHByb3BzLmhlYWRlcixcbiAgICAgIGltYWdlID0gcHJvcHMuaW1hZ2UsXG4gICAgICBtZXRhID0gcHJvcHMubWV0YTtcbiAgdmFyIGNsYXNzZXMgPSBjeCgnaXRlbScsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoSXRlbSwgcHJvcHMpO1xuICB2YXIgRWxlbWVudFR5cGUgPSBnZXRFbGVtZW50VHlwZShJdGVtLCBwcm9wcyk7XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgSXRlbUltYWdlLmNyZWF0ZShpbWFnZSwge1xuICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSXRlbUNvbnRlbnQsIHtcbiAgICBjb250ZW50OiBjb250ZW50LFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICBleHRyYTogZXh0cmEsXG4gICAgaGVhZGVyOiBoZWFkZXIsXG4gICAgbWV0YTogbWV0YVxuICB9KSk7XG59XG5cbkl0ZW0uaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRlbnRcIiwgXCJkZXNjcmlwdGlvblwiLCBcImV4dHJhXCIsIFwiaGVhZGVyXCIsIFwiaW1hZ2VcIiwgXCJtZXRhXCJdO1xuSXRlbS5Db250ZW50ID0gSXRlbUNvbnRlbnQ7XG5JdGVtLkRlc2NyaXB0aW9uID0gSXRlbURlc2NyaXB0aW9uO1xuSXRlbS5FeHRyYSA9IEl0ZW1FeHRyYTtcbkl0ZW0uR3JvdXAgPSBJdGVtR3JvdXA7XG5JdGVtLkhlYWRlciA9IEl0ZW1IZWFkZXI7XG5JdGVtLkltYWdlID0gSXRlbUltYWdlO1xuSXRlbS5NZXRhID0gSXRlbU1ldGE7XG5JdGVtLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBJdGVtQ29udGVudCBjb21wb25lbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEl0ZW1EZXNjcmlwdGlvbiBjb21wb25lbnQuICovXG4gIGRlc2NyaXB0aW9uOiBjdXN0b21Qcm9wVHlwZXMuaXRlbVNob3J0aGFuZCxcblxuICAvKiogU2hvcnRoYW5kIGZvciBJdGVtRXh0cmEgY29tcG9uZW50LiAqL1xuICBleHRyYTogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgSXRlbUhlYWRlciBjb21wb25lbnQuICovXG4gIGhlYWRlcjogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmQsXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgSXRlbUltYWdlIGNvbXBvbmVudC4gKi9cbiAgaW1hZ2U6IGN1c3RvbVByb3BUeXBlcy5pdGVtU2hvcnRoYW5kLFxuXG4gIC8qKiBTaG9ydGhhbmQgZm9yIEl0ZW1NZXRhIGNvbXBvbmVudC4gKi9cbiAgbWV0YTogY3VzdG9tUHJvcFR5cGVzLml0ZW1TaG9ydGhhbmRcbn0gOiB7fTtcbmV4cG9ydCBkZWZhdWx0IEl0ZW07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfd2l0aG91dCBmcm9tIFwibG9kYXNoL3dpdGhvdXRcIjtcbmltcG9ydCBfbWFwIGZyb20gXCJsb2Rhc2gvbWFwXCI7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoaWxkcmVuVXRpbHMsIGN1c3RvbVByb3BUeXBlcywgZ2V0RWxlbWVudFR5cGUsIGdldFVuaGFuZGxlZFByb3BzLCBTVUksIHVzZUtleU9ubHksIHVzZVdpZHRoUHJvcCB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgU3RhdGlzdGljIGZyb20gJy4vU3RhdGlzdGljJztcbi8qKlxuICogQSBncm91cCBvZiBzdGF0aXN0aWNzLlxuICovXG5cbmZ1bmN0aW9uIFN0YXRpc3RpY0dyb3VwKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50LFxuICAgICAgaG9yaXpvbnRhbCA9IHByb3BzLmhvcml6b250YWwsXG4gICAgICBpbnZlcnRlZCA9IHByb3BzLmludmVydGVkLFxuICAgICAgaXRlbXMgPSBwcm9wcy5pdGVtcyxcbiAgICAgIHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgd2lkdGhzID0gcHJvcHMud2lkdGhzO1xuICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIGNvbG9yLCBzaXplLCB1c2VLZXlPbmx5KGhvcml6b250YWwsICdob3Jpem9udGFsJyksIHVzZUtleU9ubHkoaW52ZXJ0ZWQsICdpbnZlcnRlZCcpLCB1c2VXaWR0aFByb3Aod2lkdGhzKSwgJ3N0YXRpc3RpY3MnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFN0YXRpc3RpY0dyb3VwLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFN0YXRpc3RpY0dyb3VwLCBwcm9wcyk7XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfVxuXG4gIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjb250ZW50KSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNvbnRlbnQpO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBfbWFwKGl0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiBTdGF0aXN0aWMuY3JlYXRlKGl0ZW0pO1xuICB9KSk7XG59XG5cblN0YXRpc3RpY0dyb3VwLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbnRlbnRcIiwgXCJob3Jpem9udGFsXCIsIFwiaW52ZXJ0ZWRcIiwgXCJpdGVtc1wiLCBcInNpemVcIiwgXCJ3aWR0aHNcIl07XG5TdGF0aXN0aWNHcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKiBBbiBlbGVtZW50IHR5cGUgdG8gcmVuZGVyIGFzIChzdHJpbmcgb3IgZnVuY3Rpb24pLiAqL1xuICBhczogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKiBQcmltYXJ5IGNvbnRlbnQuICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKiogQWRkaXRpb25hbCBjbGFzc2VzLiAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIEEgc3RhdGlzdGljIGdyb3VwIGNhbiBiZSBmb3JtYXR0ZWQgdG8gYmUgZGlmZmVyZW50IGNvbG9ycy4gKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihTVUkuQ09MT1JTKSxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBBIHN0YXRpc3RpYyBncm91cCBjYW4gcHJlc2VudCBpdHMgbWVhc3VyZW1lbnQgaG9yaXpvbnRhbGx5LiAqL1xuICBob3Jpem9udGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQSBzdGF0aXN0aWMgZ3JvdXAgY2FuIGJlIGZvcm1hdHRlZCB0byBmaXQgb24gYSBkYXJrIGJhY2tncm91bmQuICovXG4gIGludmVydGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQXJyYXkgb2YgcHJvcHMgZm9yIFN0YXRpc3RpYy4gKi9cbiAgaXRlbXM6IGN1c3RvbVByb3BUeXBlcy5jb2xsZWN0aW9uU2hvcnRoYW5kLFxuXG4gIC8qKiBBIHN0YXRpc3RpYyBncm91cCBjYW4gdmFyeSBpbiBzaXplLiAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoX3dpdGhvdXQoU1VJLlNJWkVTLCAnYmlnJywgJ21hc3NpdmUnLCAnbWVkaXVtJykpLFxuXG4gIC8qKiBBIHN0YXRpc3RpYyBncm91cCBjYW4gaGF2ZSBpdHMgaXRlbXMgZGl2aWRlZCBldmVubHkuICovXG4gIHdpZHRoczogUHJvcFR5cGVzLm9uZU9mKFNVSS5XSURUSFMpXG59IDoge307XG5leHBvcnQgZGVmYXVsdCBTdGF0aXN0aWNHcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcyB9IGZyb20gJy4uLy4uL2xpYic7XG4vKipcbiAqIEEgc3RhdGlzdGljIGNhbiBjb250YWluIGEgbGFiZWwgdG8gaGVscCBwcm92aWRlIGNvbnRleHQgZm9yIHRoZSBwcmVzZW50ZWQgdmFsdWUuXG4gKi9cblxuZnVuY3Rpb24gU3RhdGlzdGljTGFiZWwocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudDtcbiAgdmFyIGNsYXNzZXMgPSBjeCgnbGFiZWwnLCBjbGFzc05hbWUpO1xuICB2YXIgcmVzdCA9IGdldFVuaGFuZGxlZFByb3BzKFN0YXRpc3RpY0xhYmVsLCBwcm9wcyk7XG4gIHZhciBFbGVtZW50VHlwZSA9IGdldEVsZW1lbnRUeXBlKFN0YXRpc3RpY0xhYmVsLCBwcm9wcyk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSwgY2hpbGRyZW5VdGlscy5pc05pbChjaGlsZHJlbikgPyBjb250ZW50IDogY2hpbGRyZW4pO1xufVxuXG5TdGF0aXN0aWNMYWJlbC5oYW5kbGVkUHJvcHMgPSBbXCJhc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGVudFwiXTtcblN0YXRpc3RpY0xhYmVsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kXG59IDoge307XG5TdGF0aXN0aWNMYWJlbC5jcmVhdGUgPSBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5KFN0YXRpc3RpY0xhYmVsLCBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgU3RhdGlzdGljTGFiZWw7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2hpbGRyZW5VdGlscywgY3JlYXRlU2hvcnRoYW5kRmFjdG9yeSwgY3VzdG9tUHJvcFR5cGVzLCBnZXRFbGVtZW50VHlwZSwgZ2V0VW5oYW5kbGVkUHJvcHMsIHVzZUtleU9ubHkgfSBmcm9tICcuLi8uLi9saWInO1xuLyoqXG4gKiBBIHN0YXRpc3RpYyBjYW4gY29udGFpbiBhIG51bWVyaWMsIGljb24sIGltYWdlLCBvciB0ZXh0IHZhbHVlLlxuICovXG5cbmZ1bmN0aW9uIFN0YXRpc3RpY1ZhbHVlKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29udGVudCA9IHByb3BzLmNvbnRlbnQsXG4gICAgICB0ZXh0ID0gcHJvcHMudGV4dDtcbiAgdmFyIGNsYXNzZXMgPSBjeCh1c2VLZXlPbmx5KHRleHQsICd0ZXh0JyksICd2YWx1ZScsIGNsYXNzTmFtZSk7XG4gIHZhciByZXN0ID0gZ2V0VW5oYW5kbGVkUHJvcHMoU3RhdGlzdGljVmFsdWUsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoU3RhdGlzdGljVmFsdWUsIHByb3BzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSA/IGNvbnRlbnQgOiBjaGlsZHJlbik7XG59XG5cblN0YXRpc3RpY1ZhbHVlLmhhbmRsZWRQcm9wcyA9IFtcImFzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250ZW50XCIsIFwidGV4dFwiXTtcblN0YXRpc3RpY1ZhbHVlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqIEFuIGVsZW1lbnQgdHlwZSB0byByZW5kZXIgYXMgKHN0cmluZyBvciBmdW5jdGlvbikuICovXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqIFByaW1hcnkgY29udGVudC4gKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKiBBZGRpdGlvbmFsIGNsYXNzZXMuICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKiogU2hvcnRoYW5kIGZvciBwcmltYXJ5IGNvbnRlbnQuICovXG4gIGNvbnRlbnQ6IGN1c3RvbVByb3BUeXBlcy5jb250ZW50U2hvcnRoYW5kLFxuXG4gIC8qKiBGb3JtYXQgdGhlIHZhbHVlIHdpdGggc21hbGxlciBmb250IHNpemUgdG8gZml0IG5pY2VseSBiZXNpZGUgbnVtYmVyIHZhbHVlcy4gKi9cbiAgdGV4dDogUHJvcFR5cGVzLmJvb2xcbn0gOiB7fTtcblN0YXRpc3RpY1ZhbHVlLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoU3RhdGlzdGljVmFsdWUsIGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiB7XG4gICAgY29udGVudDogY29udGVudFxuICB9O1xufSk7XG5leHBvcnQgZGVmYXVsdCBTdGF0aXN0aWNWYWx1ZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF93aXRob3V0IGZyb20gXCJsb2Rhc2gvd2l0aG91dFwiO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGlsZHJlblV0aWxzLCBjcmVhdGVTaG9ydGhhbmRGYWN0b3J5LCBjdXN0b21Qcm9wVHlwZXMsIGdldEVsZW1lbnRUeXBlLCBnZXRVbmhhbmRsZWRQcm9wcywgU1VJLCB1c2VLZXlPbmx5LCB1c2VWYWx1ZUFuZEtleSB9IGZyb20gJy4uLy4uL2xpYic7XG5pbXBvcnQgU3RhdGlzdGljR3JvdXAgZnJvbSAnLi9TdGF0aXN0aWNHcm91cCc7XG5pbXBvcnQgU3RhdGlzdGljTGFiZWwgZnJvbSAnLi9TdGF0aXN0aWNMYWJlbCc7XG5pbXBvcnQgU3RhdGlzdGljVmFsdWUgZnJvbSAnLi9TdGF0aXN0aWNWYWx1ZSc7XG4vKipcbiAqIEEgc3RhdGlzdGljIGVtcGhhc2l6ZXMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYW4gYXR0cmlidXRlLlxuICovXG5cbmZ1bmN0aW9uIFN0YXRpc3RpYyhwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb250ZW50ID0gcHJvcHMuY29udGVudCxcbiAgICAgIGZsb2F0ZWQgPSBwcm9wcy5mbG9hdGVkLFxuICAgICAgaG9yaXpvbnRhbCA9IHByb3BzLmhvcml6b250YWwsXG4gICAgICBpbnZlcnRlZCA9IHByb3BzLmludmVydGVkLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgdGV4dCA9IHByb3BzLnRleHQsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlO1xuICB2YXIgY2xhc3NlcyA9IGN4KCd1aScsIGNvbG9yLCBzaXplLCB1c2VWYWx1ZUFuZEtleShmbG9hdGVkLCAnZmxvYXRlZCcpLCB1c2VLZXlPbmx5KGhvcml6b250YWwsICdob3Jpem9udGFsJyksIHVzZUtleU9ubHkoaW52ZXJ0ZWQsICdpbnZlcnRlZCcpLCAnc3RhdGlzdGljJywgY2xhc3NOYW1lKTtcbiAgdmFyIHJlc3QgPSBnZXRVbmhhbmRsZWRQcm9wcyhTdGF0aXN0aWMsIHByb3BzKTtcbiAgdmFyIEVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFR5cGUoU3RhdGlzdGljLCBwcm9wcyk7XG5cbiAgaWYgKCFjaGlsZHJlblV0aWxzLmlzTmlsKGNoaWxkcmVuKSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfVxuXG4gIGlmICghY2hpbGRyZW5VdGlscy5pc05pbChjb250ZW50KSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSksIGNvbnRlbnQpO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBTdGF0aXN0aWNWYWx1ZS5jcmVhdGUodmFsdWUsIHtcbiAgICBkZWZhdWx0UHJvcHM6IHtcbiAgICAgIHRleHQ6IHRleHRcbiAgICB9LFxuICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgfSksIFN0YXRpc3RpY0xhYmVsLmNyZWF0ZShsYWJlbCwge1xuICAgIGF1dG9HZW5lcmF0ZUtleTogZmFsc2VcbiAgfSkpO1xufVxuXG5TdGF0aXN0aWMuaGFuZGxlZFByb3BzID0gW1wiYXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29udGVudFwiLCBcImZsb2F0ZWRcIiwgXCJob3Jpem9udGFsXCIsIFwiaW52ZXJ0ZWRcIiwgXCJsYWJlbFwiLCBcInNpemVcIiwgXCJ0ZXh0XCIsIFwidmFsdWVcIl07XG5TdGF0aXN0aWMucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKiogQW4gZWxlbWVudCB0eXBlIHRvIHJlbmRlciBhcyAoc3RyaW5nIG9yIGZ1bmN0aW9uKS4gKi9cbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKiogUHJpbWFyeSBjb250ZW50LiAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqIEFkZGl0aW9uYWwgY2xhc3Nlcy4gKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKiBBIHN0YXRpc3RpYyBjYW4gYmUgZm9ybWF0dGVkIHRvIGJlIGRpZmZlcmVudCBjb2xvcnMuICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoU1VJLkNPTE9SUyksXG5cbiAgLyoqIFNob3J0aGFuZCBmb3IgcHJpbWFyeSBjb250ZW50LiAqL1xuICBjb250ZW50OiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBzdGF0aXN0aWMgY2FuIHNpdCB0byB0aGUgbGVmdCBvciByaWdodCBvZiBvdGhlciBjb250ZW50LiAqL1xuICBmbG9hdGVkOiBQcm9wVHlwZXMub25lT2YoU1VJLkZMT0FUUyksXG5cbiAgLyoqIEEgc3RhdGlzdGljIGNhbiBwcmVzZW50IGl0cyBtZWFzdXJlbWVudCBob3Jpem9udGFsbHkuICovXG4gIGhvcml6b250YWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBBIHN0YXRpc3RpYyBjYW4gYmUgZm9ybWF0dGVkIHRvIGZpdCBvbiBhIGRhcmsgYmFja2dyb3VuZC4gKi9cbiAgaW52ZXJ0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBMYWJlbCBjb250ZW50IG9mIHRoZSBTdGF0aXN0aWMuICovXG4gIGxhYmVsOiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZCxcblxuICAvKiogQSBzdGF0aXN0aWMgY2FuIHZhcnkgaW4gc2l6ZS4gKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKF93aXRob3V0KFNVSS5TSVpFUywgJ2JpZycsICdtYXNzaXZlJywgJ21lZGl1bScpKSxcblxuICAvKiogRm9ybWF0IHRoZSBTdGF0aXN0aWNWYWx1ZSB3aXRoIHNtYWxsZXIgZm9udCBzaXplIHRvIGZpdCBuaWNlbHkgYmVzaWRlIG51bWJlciB2YWx1ZXMuICovXG4gIHRleHQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBWYWx1ZSBjb250ZW50IG9mIHRoZSBTdGF0aXN0aWMuICovXG4gIHZhbHVlOiBjdXN0b21Qcm9wVHlwZXMuY29udGVudFNob3J0aGFuZFxufSA6IHt9O1xuU3RhdGlzdGljLkdyb3VwID0gU3RhdGlzdGljR3JvdXA7XG5TdGF0aXN0aWMuTGFiZWwgPSBTdGF0aXN0aWNMYWJlbDtcblN0YXRpc3RpYy5WYWx1ZSA9IFN0YXRpc3RpY1ZhbHVlO1xuU3RhdGlzdGljLmNyZWF0ZSA9IGNyZWF0ZVNob3J0aGFuZEZhY3RvcnkoU3RhdGlzdGljLCBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgfTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgU3RhdGlzdGljOyIsIi8vIFRoaXJkIHBhcnR5XG5leHBvcnQgeyBSZWYgfSBmcm9tICdAc3RhcmR1c3QtdWkvcmVhY3QtY29tcG9uZW50LXJlZic7IC8vIEFkZG9uc1xuXG5pbXBvcnQgX0NvbmZpcm0gZnJvbSAnLi9hZGRvbnMvQ29uZmlybSc7XG5leHBvcnQgeyBfQ29uZmlybSBhcyBDb25maXJtIH07XG5pbXBvcnQgX01vdW50Tm9kZSBmcm9tICcuL2FkZG9ucy9Nb3VudE5vZGUnO1xuZXhwb3J0IHsgX01vdW50Tm9kZSBhcyBNb3VudE5vZGUgfTtcbmltcG9ydCBfUGFnaW5hdGlvbiBmcm9tICcuL2FkZG9ucy9QYWdpbmF0aW9uJztcbmV4cG9ydCB7IF9QYWdpbmF0aW9uIGFzIFBhZ2luYXRpb24gfTtcbmltcG9ydCBfUGFnaW5hdGlvbkl0ZW0gZnJvbSAnLi9hZGRvbnMvUGFnaW5hdGlvbi9QYWdpbmF0aW9uSXRlbSc7XG5leHBvcnQgeyBfUGFnaW5hdGlvbkl0ZW0gYXMgUGFnaW5hdGlvbkl0ZW0gfTtcbmltcG9ydCBfUG9ydGFsIGZyb20gJy4vYWRkb25zL1BvcnRhbCc7XG5leHBvcnQgeyBfUG9ydGFsIGFzIFBvcnRhbCB9O1xuaW1wb3J0IF9Qb3J0YWxJbm5lciBmcm9tICcuL2FkZG9ucy9Qb3J0YWwvUG9ydGFsSW5uZXInO1xuZXhwb3J0IHsgX1BvcnRhbElubmVyIGFzIFBvcnRhbElubmVyIH07XG5pbXBvcnQgX1JhZGlvIGZyb20gJy4vYWRkb25zL1JhZGlvJztcbmV4cG9ydCB7IF9SYWRpbyBhcyBSYWRpbyB9O1xuaW1wb3J0IF9SZXNwb25zaXZlIGZyb20gJy4vYWRkb25zL1Jlc3BvbnNpdmUnO1xuZXhwb3J0IHsgX1Jlc3BvbnNpdmUgYXMgUmVzcG9uc2l2ZSB9O1xuaW1wb3J0IF9TZWxlY3QgZnJvbSAnLi9hZGRvbnMvU2VsZWN0JztcbmV4cG9ydCB7IF9TZWxlY3QgYXMgU2VsZWN0IH07XG5pbXBvcnQgX1RleHRBcmVhIGZyb20gJy4vYWRkb25zL1RleHRBcmVhJztcbmV4cG9ydCB7IF9UZXh0QXJlYSBhcyBUZXh0QXJlYSB9O1xuaW1wb3J0IF9UcmFuc2l0aW9uYWJsZVBvcnRhbCBmcm9tICcuL2FkZG9ucy9UcmFuc2l0aW9uYWJsZVBvcnRhbCc7XG5leHBvcnQgeyBfVHJhbnNpdGlvbmFibGVQb3J0YWwgYXMgVHJhbnNpdGlvbmFibGVQb3J0YWwgfTsgLy8gQmVoYXZpb3JzXG5cbmltcG9ydCBfVmlzaWJpbGl0eSBmcm9tICcuL2JlaGF2aW9ycy9WaXNpYmlsaXR5JztcbmV4cG9ydCB7IF9WaXNpYmlsaXR5IGFzIFZpc2liaWxpdHkgfTsgLy8gQ29sbGVjdGlvbnNcblxuaW1wb3J0IF9CcmVhZGNydW1iIGZyb20gJy4vY29sbGVjdGlvbnMvQnJlYWRjcnVtYic7XG5leHBvcnQgeyBfQnJlYWRjcnVtYiBhcyBCcmVhZGNydW1iIH07XG5pbXBvcnQgX0JyZWFkY3J1bWJEaXZpZGVyIGZyb20gJy4vY29sbGVjdGlvbnMvQnJlYWRjcnVtYi9CcmVhZGNydW1iRGl2aWRlcic7XG5leHBvcnQgeyBfQnJlYWRjcnVtYkRpdmlkZXIgYXMgQnJlYWRjcnVtYkRpdmlkZXIgfTtcbmltcG9ydCBfQnJlYWRjcnVtYlNlY3Rpb24gZnJvbSAnLi9jb2xsZWN0aW9ucy9CcmVhZGNydW1iL0JyZWFkY3J1bWJTZWN0aW9uJztcbmV4cG9ydCB7IF9CcmVhZGNydW1iU2VjdGlvbiBhcyBCcmVhZGNydW1iU2VjdGlvbiB9O1xuaW1wb3J0IF9Gb3JtIGZyb20gJy4vY29sbGVjdGlvbnMvRm9ybSc7XG5leHBvcnQgeyBfRm9ybSBhcyBGb3JtIH07XG5pbXBvcnQgX0Zvcm1CdXR0b24gZnJvbSAnLi9jb2xsZWN0aW9ucy9Gb3JtL0Zvcm1CdXR0b24nO1xuZXhwb3J0IHsgX0Zvcm1CdXR0b24gYXMgRm9ybUJ1dHRvbiB9O1xuaW1wb3J0IF9Gb3JtQ2hlY2tib3ggZnJvbSAnLi9jb2xsZWN0aW9ucy9Gb3JtL0Zvcm1DaGVja2JveCc7XG5leHBvcnQgeyBfRm9ybUNoZWNrYm94IGFzIEZvcm1DaGVja2JveCB9O1xuaW1wb3J0IF9Gb3JtRHJvcGRvd24gZnJvbSAnLi9jb2xsZWN0aW9ucy9Gb3JtL0Zvcm1Ecm9wZG93bic7XG5leHBvcnQgeyBfRm9ybURyb3Bkb3duIGFzIEZvcm1Ecm9wZG93biB9O1xuaW1wb3J0IF9Gb3JtRmllbGQgZnJvbSAnLi9jb2xsZWN0aW9ucy9Gb3JtL0Zvcm1GaWVsZCc7XG5leHBvcnQgeyBfRm9ybUZpZWxkIGFzIEZvcm1GaWVsZCB9O1xuaW1wb3J0IF9Gb3JtR3JvdXAgZnJvbSAnLi9jb2xsZWN0aW9ucy9Gb3JtL0Zvcm1Hcm91cCc7XG5leHBvcnQgeyBfRm9ybUdyb3VwIGFzIEZvcm1Hcm91cCB9O1xuaW1wb3J0IF9Gb3JtSW5wdXQgZnJvbSAnLi9jb2xsZWN0aW9ucy9Gb3JtL0Zvcm1JbnB1dCc7XG5leHBvcnQgeyBfRm9ybUlucHV0IGFzIEZvcm1JbnB1dCB9O1xuaW1wb3J0IF9Gb3JtUmFkaW8gZnJvbSAnLi9jb2xsZWN0aW9ucy9Gb3JtL0Zvcm1SYWRpbyc7XG5leHBvcnQgeyBfRm9ybVJhZGlvIGFzIEZvcm1SYWRpbyB9O1xuaW1wb3J0IF9Gb3JtU2VsZWN0IGZyb20gJy4vY29sbGVjdGlvbnMvRm9ybS9Gb3JtU2VsZWN0JztcbmV4cG9ydCB7IF9Gb3JtU2VsZWN0IGFzIEZvcm1TZWxlY3QgfTtcbmltcG9ydCBfRm9ybVRleHRBcmVhIGZyb20gJy4vY29sbGVjdGlvbnMvRm9ybS9Gb3JtVGV4dEFyZWEnO1xuZXhwb3J0IHsgX0Zvcm1UZXh0QXJlYSBhcyBGb3JtVGV4dEFyZWEgfTtcbmltcG9ydCBfR3JpZCBmcm9tICcuL2NvbGxlY3Rpb25zL0dyaWQnO1xuZXhwb3J0IHsgX0dyaWQgYXMgR3JpZCB9O1xuaW1wb3J0IF9HcmlkQ29sdW1uIGZyb20gJy4vY29sbGVjdGlvbnMvR3JpZC9HcmlkQ29sdW1uJztcbmV4cG9ydCB7IF9HcmlkQ29sdW1uIGFzIEdyaWRDb2x1bW4gfTtcbmltcG9ydCBfR3JpZFJvdyBmcm9tICcuL2NvbGxlY3Rpb25zL0dyaWQvR3JpZFJvdyc7XG5leHBvcnQgeyBfR3JpZFJvdyBhcyBHcmlkUm93IH07XG5pbXBvcnQgX01lbnUgZnJvbSAnLi9jb2xsZWN0aW9ucy9NZW51JztcbmV4cG9ydCB7IF9NZW51IGFzIE1lbnUgfTtcbmltcG9ydCBfTWVudUhlYWRlciBmcm9tICcuL2NvbGxlY3Rpb25zL01lbnUvTWVudUhlYWRlcic7XG5leHBvcnQgeyBfTWVudUhlYWRlciBhcyBNZW51SGVhZGVyIH07XG5pbXBvcnQgX01lbnVJdGVtIGZyb20gJy4vY29sbGVjdGlvbnMvTWVudS9NZW51SXRlbSc7XG5leHBvcnQgeyBfTWVudUl0ZW0gYXMgTWVudUl0ZW0gfTtcbmltcG9ydCBfTWVudU1lbnUgZnJvbSAnLi9jb2xsZWN0aW9ucy9NZW51L01lbnVNZW51JztcbmV4cG9ydCB7IF9NZW51TWVudSBhcyBNZW51TWVudSB9O1xuaW1wb3J0IF9NZXNzYWdlIGZyb20gJy4vY29sbGVjdGlvbnMvTWVzc2FnZSc7XG5leHBvcnQgeyBfTWVzc2FnZSBhcyBNZXNzYWdlIH07XG5pbXBvcnQgX01lc3NhZ2VDb250ZW50IGZyb20gJy4vY29sbGVjdGlvbnMvTWVzc2FnZS9NZXNzYWdlQ29udGVudCc7XG5leHBvcnQgeyBfTWVzc2FnZUNvbnRlbnQgYXMgTWVzc2FnZUNvbnRlbnQgfTtcbmltcG9ydCBfTWVzc2FnZUhlYWRlciBmcm9tICcuL2NvbGxlY3Rpb25zL01lc3NhZ2UvTWVzc2FnZUhlYWRlcic7XG5leHBvcnQgeyBfTWVzc2FnZUhlYWRlciBhcyBNZXNzYWdlSGVhZGVyIH07XG5pbXBvcnQgX01lc3NhZ2VJdGVtIGZyb20gJy4vY29sbGVjdGlvbnMvTWVzc2FnZS9NZXNzYWdlSXRlbSc7XG5leHBvcnQgeyBfTWVzc2FnZUl0ZW0gYXMgTWVzc2FnZUl0ZW0gfTtcbmltcG9ydCBfTWVzc2FnZUxpc3QgZnJvbSAnLi9jb2xsZWN0aW9ucy9NZXNzYWdlL01lc3NhZ2VMaXN0JztcbmV4cG9ydCB7IF9NZXNzYWdlTGlzdCBhcyBNZXNzYWdlTGlzdCB9O1xuaW1wb3J0IF9UYWJsZSBmcm9tICcuL2NvbGxlY3Rpb25zL1RhYmxlJztcbmV4cG9ydCB7IF9UYWJsZSBhcyBUYWJsZSB9O1xuaW1wb3J0IF9UYWJsZUJvZHkgZnJvbSAnLi9jb2xsZWN0aW9ucy9UYWJsZS9UYWJsZUJvZHknO1xuZXhwb3J0IHsgX1RhYmxlQm9keSBhcyBUYWJsZUJvZHkgfTtcbmltcG9ydCBfVGFibGVDZWxsIGZyb20gJy4vY29sbGVjdGlvbnMvVGFibGUvVGFibGVDZWxsJztcbmV4cG9ydCB7IF9UYWJsZUNlbGwgYXMgVGFibGVDZWxsIH07XG5pbXBvcnQgX1RhYmxlRm9vdGVyIGZyb20gJy4vY29sbGVjdGlvbnMvVGFibGUvVGFibGVGb290ZXInO1xuZXhwb3J0IHsgX1RhYmxlRm9vdGVyIGFzIFRhYmxlRm9vdGVyIH07XG5pbXBvcnQgX1RhYmxlSGVhZGVyIGZyb20gJy4vY29sbGVjdGlvbnMvVGFibGUvVGFibGVIZWFkZXInO1xuZXhwb3J0IHsgX1RhYmxlSGVhZGVyIGFzIFRhYmxlSGVhZGVyIH07XG5pbXBvcnQgX1RhYmxlSGVhZGVyQ2VsbCBmcm9tICcuL2NvbGxlY3Rpb25zL1RhYmxlL1RhYmxlSGVhZGVyQ2VsbCc7XG5leHBvcnQgeyBfVGFibGVIZWFkZXJDZWxsIGFzIFRhYmxlSGVhZGVyQ2VsbCB9O1xuaW1wb3J0IF9UYWJsZVJvdyBmcm9tICcuL2NvbGxlY3Rpb25zL1RhYmxlL1RhYmxlUm93JztcbmV4cG9ydCB7IF9UYWJsZVJvdyBhcyBUYWJsZVJvdyB9OyAvLyBFbGVtZW50c1xuXG5pbXBvcnQgX0J1dHRvbiBmcm9tICcuL2VsZW1lbnRzL0J1dHRvbi9CdXR0b24nO1xuZXhwb3J0IHsgX0J1dHRvbiBhcyBCdXR0b24gfTtcbmltcG9ydCBfQnV0dG9uQ29udGVudCBmcm9tICcuL2VsZW1lbnRzL0J1dHRvbi9CdXR0b25Db250ZW50JztcbmV4cG9ydCB7IF9CdXR0b25Db250ZW50IGFzIEJ1dHRvbkNvbnRlbnQgfTtcbmltcG9ydCBfQnV0dG9uR3JvdXAgZnJvbSAnLi9lbGVtZW50cy9CdXR0b24vQnV0dG9uR3JvdXAnO1xuZXhwb3J0IHsgX0J1dHRvbkdyb3VwIGFzIEJ1dHRvbkdyb3VwIH07XG5pbXBvcnQgX0J1dHRvbk9yIGZyb20gJy4vZWxlbWVudHMvQnV0dG9uL0J1dHRvbk9yJztcbmV4cG9ydCB7IF9CdXR0b25PciBhcyBCdXR0b25PciB9O1xuaW1wb3J0IF9Db250YWluZXIgZnJvbSAnLi9lbGVtZW50cy9Db250YWluZXInO1xuZXhwb3J0IHsgX0NvbnRhaW5lciBhcyBDb250YWluZXIgfTtcbmltcG9ydCBfRGl2aWRlciBmcm9tICcuL2VsZW1lbnRzL0RpdmlkZXInO1xuZXhwb3J0IHsgX0RpdmlkZXIgYXMgRGl2aWRlciB9O1xuaW1wb3J0IF9GbGFnIGZyb20gJy4vZWxlbWVudHMvRmxhZyc7XG5leHBvcnQgeyBfRmxhZyBhcyBGbGFnIH07XG5pbXBvcnQgX0hlYWRlciBmcm9tICcuL2VsZW1lbnRzL0hlYWRlcic7XG5leHBvcnQgeyBfSGVhZGVyIGFzIEhlYWRlciB9O1xuaW1wb3J0IF9IZWFkZXJDb250ZW50IGZyb20gJy4vZWxlbWVudHMvSGVhZGVyL0hlYWRlckNvbnRlbnQnO1xuZXhwb3J0IHsgX0hlYWRlckNvbnRlbnQgYXMgSGVhZGVyQ29udGVudCB9O1xuaW1wb3J0IF9IZWFkZXJTdWJoZWFkZXIgZnJvbSAnLi9lbGVtZW50cy9IZWFkZXIvSGVhZGVyU3ViaGVhZGVyJztcbmV4cG9ydCB7IF9IZWFkZXJTdWJoZWFkZXIgYXMgSGVhZGVyU3ViaGVhZGVyIH07XG5pbXBvcnQgX0ljb24gZnJvbSAnLi9lbGVtZW50cy9JY29uJztcbmV4cG9ydCB7IF9JY29uIGFzIEljb24gfTtcbmltcG9ydCBfSWNvbkdyb3VwIGZyb20gJy4vZWxlbWVudHMvSWNvbi9JY29uR3JvdXAnO1xuZXhwb3J0IHsgX0ljb25Hcm91cCBhcyBJY29uR3JvdXAgfTtcbmltcG9ydCBfSW1hZ2UgZnJvbSAnLi9lbGVtZW50cy9JbWFnZSc7XG5leHBvcnQgeyBfSW1hZ2UgYXMgSW1hZ2UgfTtcbmltcG9ydCBfSW1hZ2VHcm91cCBmcm9tICcuL2VsZW1lbnRzL0ltYWdlL0ltYWdlR3JvdXAnO1xuZXhwb3J0IHsgX0ltYWdlR3JvdXAgYXMgSW1hZ2VHcm91cCB9O1xuaW1wb3J0IF9JbnB1dCBmcm9tICcuL2VsZW1lbnRzL0lucHV0JztcbmV4cG9ydCB7IF9JbnB1dCBhcyBJbnB1dCB9O1xuaW1wb3J0IF9MYWJlbCBmcm9tICcuL2VsZW1lbnRzL0xhYmVsJztcbmV4cG9ydCB7IF9MYWJlbCBhcyBMYWJlbCB9O1xuaW1wb3J0IF9MYWJlbERldGFpbCBmcm9tICcuL2VsZW1lbnRzL0xhYmVsL0xhYmVsRGV0YWlsJztcbmV4cG9ydCB7IF9MYWJlbERldGFpbCBhcyBMYWJlbERldGFpbCB9O1xuaW1wb3J0IF9MYWJlbEdyb3VwIGZyb20gJy4vZWxlbWVudHMvTGFiZWwvTGFiZWxHcm91cCc7XG5leHBvcnQgeyBfTGFiZWxHcm91cCBhcyBMYWJlbEdyb3VwIH07XG5pbXBvcnQgX0xpc3QgZnJvbSAnLi9lbGVtZW50cy9MaXN0JztcbmV4cG9ydCB7IF9MaXN0IGFzIExpc3QgfTtcbmltcG9ydCBfTGlzdENvbnRlbnQgZnJvbSAnLi9lbGVtZW50cy9MaXN0L0xpc3RDb250ZW50JztcbmV4cG9ydCB7IF9MaXN0Q29udGVudCBhcyBMaXN0Q29udGVudCB9O1xuaW1wb3J0IF9MaXN0RGVzY3JpcHRpb24gZnJvbSAnLi9lbGVtZW50cy9MaXN0L0xpc3REZXNjcmlwdGlvbic7XG5leHBvcnQgeyBfTGlzdERlc2NyaXB0aW9uIGFzIExpc3REZXNjcmlwdGlvbiB9O1xuaW1wb3J0IF9MaXN0SGVhZGVyIGZyb20gJy4vZWxlbWVudHMvTGlzdC9MaXN0SGVhZGVyJztcbmV4cG9ydCB7IF9MaXN0SGVhZGVyIGFzIExpc3RIZWFkZXIgfTtcbmltcG9ydCBfTGlzdEljb24gZnJvbSAnLi9lbGVtZW50cy9MaXN0L0xpc3RJY29uJztcbmV4cG9ydCB7IF9MaXN0SWNvbiBhcyBMaXN0SWNvbiB9O1xuaW1wb3J0IF9MaXN0SXRlbSBmcm9tICcuL2VsZW1lbnRzL0xpc3QvTGlzdEl0ZW0nO1xuZXhwb3J0IHsgX0xpc3RJdGVtIGFzIExpc3RJdGVtIH07XG5pbXBvcnQgX0xpc3RMaXN0IGZyb20gJy4vZWxlbWVudHMvTGlzdC9MaXN0TGlzdCc7XG5leHBvcnQgeyBfTGlzdExpc3QgYXMgTGlzdExpc3QgfTtcbmltcG9ydCBfTG9hZGVyIGZyb20gJy4vZWxlbWVudHMvTG9hZGVyJztcbmV4cG9ydCB7IF9Mb2FkZXIgYXMgTG9hZGVyIH07XG5pbXBvcnQgX1BsYWNlaG9sZGVyIGZyb20gJy4vZWxlbWVudHMvUGxhY2Vob2xkZXInO1xuZXhwb3J0IHsgX1BsYWNlaG9sZGVyIGFzIFBsYWNlaG9sZGVyIH07XG5pbXBvcnQgX1BsYWNlaG9sZGVySGVhZGVyIGZyb20gJy4vZWxlbWVudHMvUGxhY2Vob2xkZXIvUGxhY2Vob2xkZXJIZWFkZXInO1xuZXhwb3J0IHsgX1BsYWNlaG9sZGVySGVhZGVyIGFzIFBsYWNlaG9sZGVySGVhZGVyIH07XG5pbXBvcnQgX1BsYWNlaG9sZGVySW1hZ2UgZnJvbSAnLi9lbGVtZW50cy9QbGFjZWhvbGRlci9QbGFjZWhvbGRlckltYWdlJztcbmV4cG9ydCB7IF9QbGFjZWhvbGRlckltYWdlIGFzIFBsYWNlaG9sZGVySW1hZ2UgfTtcbmltcG9ydCBfUGxhY2Vob2xkZXJMaW5lIGZyb20gJy4vZWxlbWVudHMvUGxhY2Vob2xkZXIvUGxhY2Vob2xkZXJMaW5lJztcbmV4cG9ydCB7IF9QbGFjZWhvbGRlckxpbmUgYXMgUGxhY2Vob2xkZXJMaW5lIH07XG5pbXBvcnQgX1BsYWNlaG9sZGVyUGFyYWdyYXBoIGZyb20gJy4vZWxlbWVudHMvUGxhY2Vob2xkZXIvUGxhY2Vob2xkZXJQYXJhZ3JhcGgnO1xuZXhwb3J0IHsgX1BsYWNlaG9sZGVyUGFyYWdyYXBoIGFzIFBsYWNlaG9sZGVyUGFyYWdyYXBoIH07XG5pbXBvcnQgX1JhaWwgZnJvbSAnLi9lbGVtZW50cy9SYWlsJztcbmV4cG9ydCB7IF9SYWlsIGFzIFJhaWwgfTtcbmltcG9ydCBfUmV2ZWFsIGZyb20gJy4vZWxlbWVudHMvUmV2ZWFsJztcbmV4cG9ydCB7IF9SZXZlYWwgYXMgUmV2ZWFsIH07XG5pbXBvcnQgX1JldmVhbENvbnRlbnQgZnJvbSAnLi9lbGVtZW50cy9SZXZlYWwvUmV2ZWFsQ29udGVudCc7XG5leHBvcnQgeyBfUmV2ZWFsQ29udGVudCBhcyBSZXZlYWxDb250ZW50IH07XG5pbXBvcnQgX1NlZ21lbnQgZnJvbSAnLi9lbGVtZW50cy9TZWdtZW50JztcbmV4cG9ydCB7IF9TZWdtZW50IGFzIFNlZ21lbnQgfTtcbmltcG9ydCBfU2VnbWVudEdyb3VwIGZyb20gJy4vZWxlbWVudHMvU2VnbWVudC9TZWdtZW50R3JvdXAnO1xuZXhwb3J0IHsgX1NlZ21lbnRHcm91cCBhcyBTZWdtZW50R3JvdXAgfTtcbmltcG9ydCBfU2VnbWVudElubGluZSBmcm9tICcuL2VsZW1lbnRzL1NlZ21lbnQvU2VnbWVudElubGluZSc7XG5leHBvcnQgeyBfU2VnbWVudElubGluZSBhcyBTZWdtZW50SW5saW5lIH07XG5pbXBvcnQgX1N0ZXAgZnJvbSAnLi9lbGVtZW50cy9TdGVwJztcbmV4cG9ydCB7IF9TdGVwIGFzIFN0ZXAgfTtcbmltcG9ydCBfU3RlcENvbnRlbnQgZnJvbSAnLi9lbGVtZW50cy9TdGVwL1N0ZXBDb250ZW50JztcbmV4cG9ydCB7IF9TdGVwQ29udGVudCBhcyBTdGVwQ29udGVudCB9O1xuaW1wb3J0IF9TdGVwRGVzY3JpcHRpb24gZnJvbSAnLi9lbGVtZW50cy9TdGVwL1N0ZXBEZXNjcmlwdGlvbic7XG5leHBvcnQgeyBfU3RlcERlc2NyaXB0aW9uIGFzIFN0ZXBEZXNjcmlwdGlvbiB9O1xuaW1wb3J0IF9TdGVwR3JvdXAgZnJvbSAnLi9lbGVtZW50cy9TdGVwL1N0ZXBHcm91cCc7XG5leHBvcnQgeyBfU3RlcEdyb3VwIGFzIFN0ZXBHcm91cCB9O1xuaW1wb3J0IF9TdGVwVGl0bGUgZnJvbSAnLi9lbGVtZW50cy9TdGVwL1N0ZXBUaXRsZSc7XG5leHBvcnQgeyBfU3RlcFRpdGxlIGFzIFN0ZXBUaXRsZSB9OyAvLyBNb2R1bGVzXG5cbmltcG9ydCBfQWNjb3JkaW9uIGZyb20gJy4vbW9kdWxlcy9BY2NvcmRpb24vQWNjb3JkaW9uJztcbmV4cG9ydCB7IF9BY2NvcmRpb24gYXMgQWNjb3JkaW9uIH07XG5pbXBvcnQgX0FjY29yZGlvbkFjY29yZGlvbiBmcm9tICcuL21vZHVsZXMvQWNjb3JkaW9uL0FjY29yZGlvbkFjY29yZGlvbic7XG5leHBvcnQgeyBfQWNjb3JkaW9uQWNjb3JkaW9uIGFzIEFjY29yZGlvbkFjY29yZGlvbiB9O1xuaW1wb3J0IF9BY2NvcmRpb25Db250ZW50IGZyb20gJy4vbW9kdWxlcy9BY2NvcmRpb24vQWNjb3JkaW9uQ29udGVudCc7XG5leHBvcnQgeyBfQWNjb3JkaW9uQ29udGVudCBhcyBBY2NvcmRpb25Db250ZW50IH07XG5pbXBvcnQgX0FjY29yZGlvblBhbmVsIGZyb20gJy4vbW9kdWxlcy9BY2NvcmRpb24vQWNjb3JkaW9uUGFuZWwnO1xuZXhwb3J0IHsgX0FjY29yZGlvblBhbmVsIGFzIEFjY29yZGlvblBhbmVsIH07XG5pbXBvcnQgX0FjY29yZGlvblRpdGxlIGZyb20gJy4vbW9kdWxlcy9BY2NvcmRpb24vQWNjb3JkaW9uVGl0bGUnO1xuZXhwb3J0IHsgX0FjY29yZGlvblRpdGxlIGFzIEFjY29yZGlvblRpdGxlIH07XG5pbXBvcnQgX0NoZWNrYm94IGZyb20gJy4vbW9kdWxlcy9DaGVja2JveCc7XG5leHBvcnQgeyBfQ2hlY2tib3ggYXMgQ2hlY2tib3ggfTtcbmltcG9ydCBfRGltbWVyIGZyb20gJy4vbW9kdWxlcy9EaW1tZXInO1xuZXhwb3J0IHsgX0RpbW1lciBhcyBEaW1tZXIgfTtcbmltcG9ydCBfRGltbWVyRGltbWFibGUgZnJvbSAnLi9tb2R1bGVzL0RpbW1lci9EaW1tZXJEaW1tYWJsZSc7XG5leHBvcnQgeyBfRGltbWVyRGltbWFibGUgYXMgRGltbWVyRGltbWFibGUgfTtcbmltcG9ydCBfRGltbWVySW5uZXIgZnJvbSAnLi9tb2R1bGVzL0RpbW1lci9EaW1tZXJJbm5lcic7XG5leHBvcnQgeyBfRGltbWVySW5uZXIgYXMgRGltbWVySW5uZXIgfTtcbmltcG9ydCBfRHJvcGRvd24gZnJvbSAnLi9tb2R1bGVzL0Ryb3Bkb3duJztcbmV4cG9ydCB7IF9Ecm9wZG93biBhcyBEcm9wZG93biB9O1xuaW1wb3J0IF9Ecm9wZG93bkRpdmlkZXIgZnJvbSAnLi9tb2R1bGVzL0Ryb3Bkb3duL0Ryb3Bkb3duRGl2aWRlcic7XG5leHBvcnQgeyBfRHJvcGRvd25EaXZpZGVyIGFzIERyb3Bkb3duRGl2aWRlciB9O1xuaW1wb3J0IF9Ecm9wZG93bkhlYWRlciBmcm9tICcuL21vZHVsZXMvRHJvcGRvd24vRHJvcGRvd25IZWFkZXInO1xuZXhwb3J0IHsgX0Ryb3Bkb3duSGVhZGVyIGFzIERyb3Bkb3duSGVhZGVyIH07XG5pbXBvcnQgX0Ryb3Bkb3duSXRlbSBmcm9tICcuL21vZHVsZXMvRHJvcGRvd24vRHJvcGRvd25JdGVtJztcbmV4cG9ydCB7IF9Ecm9wZG93bkl0ZW0gYXMgRHJvcGRvd25JdGVtIH07XG5pbXBvcnQgX0Ryb3Bkb3duTWVudSBmcm9tICcuL21vZHVsZXMvRHJvcGRvd24vRHJvcGRvd25NZW51JztcbmV4cG9ydCB7IF9Ecm9wZG93bk1lbnUgYXMgRHJvcGRvd25NZW51IH07XG5pbXBvcnQgX0Ryb3Bkb3duU2VhcmNoSW5wdXQgZnJvbSAnLi9tb2R1bGVzL0Ryb3Bkb3duL0Ryb3Bkb3duU2VhcmNoSW5wdXQnO1xuZXhwb3J0IHsgX0Ryb3Bkb3duU2VhcmNoSW5wdXQgYXMgRHJvcGRvd25TZWFyY2hJbnB1dCB9O1xuaW1wb3J0IF9FbWJlZCBmcm9tICcuL21vZHVsZXMvRW1iZWQnO1xuZXhwb3J0IHsgX0VtYmVkIGFzIEVtYmVkIH07XG5pbXBvcnQgX01vZGFsIGZyb20gJy4vbW9kdWxlcy9Nb2RhbCc7XG5leHBvcnQgeyBfTW9kYWwgYXMgTW9kYWwgfTtcbmltcG9ydCBfTW9kYWxBY3Rpb25zIGZyb20gJy4vbW9kdWxlcy9Nb2RhbC9Nb2RhbEFjdGlvbnMnO1xuZXhwb3J0IHsgX01vZGFsQWN0aW9ucyBhcyBNb2RhbEFjdGlvbnMgfTtcbmltcG9ydCBfTW9kYWxDb250ZW50IGZyb20gJy4vbW9kdWxlcy9Nb2RhbC9Nb2RhbENvbnRlbnQnO1xuZXhwb3J0IHsgX01vZGFsQ29udGVudCBhcyBNb2RhbENvbnRlbnQgfTtcbmltcG9ydCBfTW9kYWxEZXNjcmlwdGlvbiBmcm9tICcuL21vZHVsZXMvTW9kYWwvTW9kYWxEZXNjcmlwdGlvbic7XG5leHBvcnQgeyBfTW9kYWxEZXNjcmlwdGlvbiBhcyBNb2RhbERlc2NyaXB0aW9uIH07XG5pbXBvcnQgX01vZGFsSGVhZGVyIGZyb20gJy4vbW9kdWxlcy9Nb2RhbC9Nb2RhbEhlYWRlcic7XG5leHBvcnQgeyBfTW9kYWxIZWFkZXIgYXMgTW9kYWxIZWFkZXIgfTtcbmltcG9ydCBfUG9wdXAgZnJvbSAnLi9tb2R1bGVzL1BvcHVwJztcbmV4cG9ydCB7IF9Qb3B1cCBhcyBQb3B1cCB9O1xuaW1wb3J0IF9Qb3B1cENvbnRlbnQgZnJvbSAnLi9tb2R1bGVzL1BvcHVwL1BvcHVwQ29udGVudCc7XG5leHBvcnQgeyBfUG9wdXBDb250ZW50IGFzIFBvcHVwQ29udGVudCB9O1xuaW1wb3J0IF9Qb3B1cEhlYWRlciBmcm9tICcuL21vZHVsZXMvUG9wdXAvUG9wdXBIZWFkZXInO1xuZXhwb3J0IHsgX1BvcHVwSGVhZGVyIGFzIFBvcHVwSGVhZGVyIH07XG5pbXBvcnQgX1Byb2dyZXNzIGZyb20gJy4vbW9kdWxlcy9Qcm9ncmVzcyc7XG5leHBvcnQgeyBfUHJvZ3Jlc3MgYXMgUHJvZ3Jlc3MgfTtcbmltcG9ydCBfUmF0aW5nIGZyb20gJy4vbW9kdWxlcy9SYXRpbmcnO1xuZXhwb3J0IHsgX1JhdGluZyBhcyBSYXRpbmcgfTtcbmltcG9ydCBfUmF0aW5nSWNvbiBmcm9tICcuL21vZHVsZXMvUmF0aW5nL1JhdGluZ0ljb24nO1xuZXhwb3J0IHsgX1JhdGluZ0ljb24gYXMgUmF0aW5nSWNvbiB9O1xuaW1wb3J0IF9TZWFyY2ggZnJvbSAnLi9tb2R1bGVzL1NlYXJjaCc7XG5leHBvcnQgeyBfU2VhcmNoIGFzIFNlYXJjaCB9O1xuaW1wb3J0IF9TZWFyY2hDYXRlZ29yeSBmcm9tICcuL21vZHVsZXMvU2VhcmNoL1NlYXJjaENhdGVnb3J5JztcbmV4cG9ydCB7IF9TZWFyY2hDYXRlZ29yeSBhcyBTZWFyY2hDYXRlZ29yeSB9O1xuaW1wb3J0IF9TZWFyY2hSZXN1bHQgZnJvbSAnLi9tb2R1bGVzL1NlYXJjaC9TZWFyY2hSZXN1bHQnO1xuZXhwb3J0IHsgX1NlYXJjaFJlc3VsdCBhcyBTZWFyY2hSZXN1bHQgfTtcbmltcG9ydCBfU2VhcmNoUmVzdWx0cyBmcm9tICcuL21vZHVsZXMvU2VhcmNoL1NlYXJjaFJlc3VsdHMnO1xuZXhwb3J0IHsgX1NlYXJjaFJlc3VsdHMgYXMgU2VhcmNoUmVzdWx0cyB9O1xuaW1wb3J0IF9TaWRlYmFyIGZyb20gJy4vbW9kdWxlcy9TaWRlYmFyJztcbmV4cG9ydCB7IF9TaWRlYmFyIGFzIFNpZGViYXIgfTtcbmltcG9ydCBfU2lkZWJhclB1c2hhYmxlIGZyb20gJy4vbW9kdWxlcy9TaWRlYmFyL1NpZGViYXJQdXNoYWJsZSc7XG5leHBvcnQgeyBfU2lkZWJhclB1c2hhYmxlIGFzIFNpZGViYXJQdXNoYWJsZSB9O1xuaW1wb3J0IF9TaWRlYmFyUHVzaGVyIGZyb20gJy4vbW9kdWxlcy9TaWRlYmFyL1NpZGViYXJQdXNoZXInO1xuZXhwb3J0IHsgX1NpZGViYXJQdXNoZXIgYXMgU2lkZWJhclB1c2hlciB9O1xuaW1wb3J0IF9TdGlja3kgZnJvbSAnLi9tb2R1bGVzL1N0aWNreSc7XG5leHBvcnQgeyBfU3RpY2t5IGFzIFN0aWNreSB9O1xuaW1wb3J0IF9UYWIgZnJvbSAnLi9tb2R1bGVzL1RhYic7XG5leHBvcnQgeyBfVGFiIGFzIFRhYiB9O1xuaW1wb3J0IF9UYWJQYW5lIGZyb20gJy4vbW9kdWxlcy9UYWIvVGFiUGFuZSc7XG5leHBvcnQgeyBfVGFiUGFuZSBhcyBUYWJQYW5lIH07XG5pbXBvcnQgX1RyYW5zaXRpb24gZnJvbSAnLi9tb2R1bGVzL1RyYW5zaXRpb24nO1xuZXhwb3J0IHsgX1RyYW5zaXRpb24gYXMgVHJhbnNpdGlvbiB9O1xuaW1wb3J0IF9UcmFuc2l0aW9uR3JvdXAgZnJvbSAnLi9tb2R1bGVzL1RyYW5zaXRpb24vVHJhbnNpdGlvbkdyb3VwJztcbmV4cG9ydCB7IF9UcmFuc2l0aW9uR3JvdXAgYXMgVHJhbnNpdGlvbkdyb3VwIH07IC8vIFZpZXdzXG5cbmltcG9ydCBfQWR2ZXJ0aXNlbWVudCBmcm9tICcuL3ZpZXdzL0FkdmVydGlzZW1lbnQnO1xuZXhwb3J0IHsgX0FkdmVydGlzZW1lbnQgYXMgQWR2ZXJ0aXNlbWVudCB9O1xuaW1wb3J0IF9DYXJkIGZyb20gJy4vdmlld3MvQ2FyZC9DYXJkJztcbmV4cG9ydCB7IF9DYXJkIGFzIENhcmQgfTtcbmltcG9ydCBfQ2FyZENvbnRlbnQgZnJvbSAnLi92aWV3cy9DYXJkL0NhcmRDb250ZW50JztcbmV4cG9ydCB7IF9DYXJkQ29udGVudCBhcyBDYXJkQ29udGVudCB9O1xuaW1wb3J0IF9DYXJkRGVzY3JpcHRpb24gZnJvbSAnLi92aWV3cy9DYXJkL0NhcmREZXNjcmlwdGlvbic7XG5leHBvcnQgeyBfQ2FyZERlc2NyaXB0aW9uIGFzIENhcmREZXNjcmlwdGlvbiB9O1xuaW1wb3J0IF9DYXJkR3JvdXAgZnJvbSAnLi92aWV3cy9DYXJkL0NhcmRHcm91cCc7XG5leHBvcnQgeyBfQ2FyZEdyb3VwIGFzIENhcmRHcm91cCB9O1xuaW1wb3J0IF9DYXJkSGVhZGVyIGZyb20gJy4vdmlld3MvQ2FyZC9DYXJkSGVhZGVyJztcbmV4cG9ydCB7IF9DYXJkSGVhZGVyIGFzIENhcmRIZWFkZXIgfTtcbmltcG9ydCBfQ2FyZE1ldGEgZnJvbSAnLi92aWV3cy9DYXJkL0NhcmRNZXRhJztcbmV4cG9ydCB7IF9DYXJkTWV0YSBhcyBDYXJkTWV0YSB9O1xuaW1wb3J0IF9Db21tZW50IGZyb20gJy4vdmlld3MvQ29tbWVudCc7XG5leHBvcnQgeyBfQ29tbWVudCBhcyBDb21tZW50IH07XG5pbXBvcnQgX0NvbW1lbnRBY3Rpb24gZnJvbSAnLi92aWV3cy9Db21tZW50L0NvbW1lbnRBY3Rpb24nO1xuZXhwb3J0IHsgX0NvbW1lbnRBY3Rpb24gYXMgQ29tbWVudEFjdGlvbiB9O1xuaW1wb3J0IF9Db21tZW50QWN0aW9ucyBmcm9tICcuL3ZpZXdzL0NvbW1lbnQvQ29tbWVudEFjdGlvbnMnO1xuZXhwb3J0IHsgX0NvbW1lbnRBY3Rpb25zIGFzIENvbW1lbnRBY3Rpb25zIH07XG5pbXBvcnQgX0NvbW1lbnRBdXRob3IgZnJvbSAnLi92aWV3cy9Db21tZW50L0NvbW1lbnRBdXRob3InO1xuZXhwb3J0IHsgX0NvbW1lbnRBdXRob3IgYXMgQ29tbWVudEF1dGhvciB9O1xuaW1wb3J0IF9Db21tZW50QXZhdGFyIGZyb20gJy4vdmlld3MvQ29tbWVudC9Db21tZW50QXZhdGFyJztcbmV4cG9ydCB7IF9Db21tZW50QXZhdGFyIGFzIENvbW1lbnRBdmF0YXIgfTtcbmltcG9ydCBfQ29tbWVudENvbnRlbnQgZnJvbSAnLi92aWV3cy9Db21tZW50L0NvbW1lbnRDb250ZW50JztcbmV4cG9ydCB7IF9Db21tZW50Q29udGVudCBhcyBDb21tZW50Q29udGVudCB9O1xuaW1wb3J0IF9Db21tZW50R3JvdXAgZnJvbSAnLi92aWV3cy9Db21tZW50L0NvbW1lbnRHcm91cCc7XG5leHBvcnQgeyBfQ29tbWVudEdyb3VwIGFzIENvbW1lbnRHcm91cCB9O1xuaW1wb3J0IF9Db21tZW50TWV0YWRhdGEgZnJvbSAnLi92aWV3cy9Db21tZW50L0NvbW1lbnRNZXRhZGF0YSc7XG5leHBvcnQgeyBfQ29tbWVudE1ldGFkYXRhIGFzIENvbW1lbnRNZXRhZGF0YSB9O1xuaW1wb3J0IF9Db21tZW50VGV4dCBmcm9tICcuL3ZpZXdzL0NvbW1lbnQvQ29tbWVudFRleHQnO1xuZXhwb3J0IHsgX0NvbW1lbnRUZXh0IGFzIENvbW1lbnRUZXh0IH07XG5pbXBvcnQgX0ZlZWQgZnJvbSAnLi92aWV3cy9GZWVkJztcbmV4cG9ydCB7IF9GZWVkIGFzIEZlZWQgfTtcbmltcG9ydCBfRmVlZENvbnRlbnQgZnJvbSAnLi92aWV3cy9GZWVkL0ZlZWRDb250ZW50JztcbmV4cG9ydCB7IF9GZWVkQ29udGVudCBhcyBGZWVkQ29udGVudCB9O1xuaW1wb3J0IF9GZWVkRGF0ZSBmcm9tICcuL3ZpZXdzL0ZlZWQvRmVlZERhdGUnO1xuZXhwb3J0IHsgX0ZlZWREYXRlIGFzIEZlZWREYXRlIH07XG5pbXBvcnQgX0ZlZWRFdmVudCBmcm9tICcuL3ZpZXdzL0ZlZWQvRmVlZEV2ZW50JztcbmV4cG9ydCB7IF9GZWVkRXZlbnQgYXMgRmVlZEV2ZW50IH07XG5pbXBvcnQgX0ZlZWRFeHRyYSBmcm9tICcuL3ZpZXdzL0ZlZWQvRmVlZEV4dHJhJztcbmV4cG9ydCB7IF9GZWVkRXh0cmEgYXMgRmVlZEV4dHJhIH07XG5pbXBvcnQgX0ZlZWRMYWJlbCBmcm9tICcuL3ZpZXdzL0ZlZWQvRmVlZExhYmVsJztcbmV4cG9ydCB7IF9GZWVkTGFiZWwgYXMgRmVlZExhYmVsIH07XG5pbXBvcnQgX0ZlZWRMaWtlIGZyb20gJy4vdmlld3MvRmVlZC9GZWVkTGlrZSc7XG5leHBvcnQgeyBfRmVlZExpa2UgYXMgRmVlZExpa2UgfTtcbmltcG9ydCBfRmVlZE1ldGEgZnJvbSAnLi92aWV3cy9GZWVkL0ZlZWRNZXRhJztcbmV4cG9ydCB7IF9GZWVkTWV0YSBhcyBGZWVkTWV0YSB9O1xuaW1wb3J0IF9GZWVkU3VtbWFyeSBmcm9tICcuL3ZpZXdzL0ZlZWQvRmVlZFN1bW1hcnknO1xuZXhwb3J0IHsgX0ZlZWRTdW1tYXJ5IGFzIEZlZWRTdW1tYXJ5IH07XG5pbXBvcnQgX0ZlZWRVc2VyIGZyb20gJy4vdmlld3MvRmVlZC9GZWVkVXNlcic7XG5leHBvcnQgeyBfRmVlZFVzZXIgYXMgRmVlZFVzZXIgfTtcbmltcG9ydCBfSXRlbSBmcm9tICcuL3ZpZXdzL0l0ZW0nO1xuZXhwb3J0IHsgX0l0ZW0gYXMgSXRlbSB9O1xuaW1wb3J0IF9JdGVtQ29udGVudCBmcm9tICcuL3ZpZXdzL0l0ZW0vSXRlbUNvbnRlbnQnO1xuZXhwb3J0IHsgX0l0ZW1Db250ZW50IGFzIEl0ZW1Db250ZW50IH07XG5pbXBvcnQgX0l0ZW1EZXNjcmlwdGlvbiBmcm9tICcuL3ZpZXdzL0l0ZW0vSXRlbURlc2NyaXB0aW9uJztcbmV4cG9ydCB7IF9JdGVtRGVzY3JpcHRpb24gYXMgSXRlbURlc2NyaXB0aW9uIH07XG5pbXBvcnQgX0l0ZW1FeHRyYSBmcm9tICcuL3ZpZXdzL0l0ZW0vSXRlbUV4dHJhJztcbmV4cG9ydCB7IF9JdGVtRXh0cmEgYXMgSXRlbUV4dHJhIH07XG5pbXBvcnQgX0l0ZW1Hcm91cCBmcm9tICcuL3ZpZXdzL0l0ZW0vSXRlbUdyb3VwJztcbmV4cG9ydCB7IF9JdGVtR3JvdXAgYXMgSXRlbUdyb3VwIH07XG5pbXBvcnQgX0l0ZW1IZWFkZXIgZnJvbSAnLi92aWV3cy9JdGVtL0l0ZW1IZWFkZXInO1xuZXhwb3J0IHsgX0l0ZW1IZWFkZXIgYXMgSXRlbUhlYWRlciB9O1xuaW1wb3J0IF9JdGVtSW1hZ2UgZnJvbSAnLi92aWV3cy9JdGVtL0l0ZW1JbWFnZSc7XG5leHBvcnQgeyBfSXRlbUltYWdlIGFzIEl0ZW1JbWFnZSB9O1xuaW1wb3J0IF9JdGVtTWV0YSBmcm9tICcuL3ZpZXdzL0l0ZW0vSXRlbU1ldGEnO1xuZXhwb3J0IHsgX0l0ZW1NZXRhIGFzIEl0ZW1NZXRhIH07XG5pbXBvcnQgX1N0YXRpc3RpYyBmcm9tICcuL3ZpZXdzL1N0YXRpc3RpYyc7XG5leHBvcnQgeyBfU3RhdGlzdGljIGFzIFN0YXRpc3RpYyB9O1xuaW1wb3J0IF9TdGF0aXN0aWNHcm91cCBmcm9tICcuL3ZpZXdzL1N0YXRpc3RpYy9TdGF0aXN0aWNHcm91cCc7XG5leHBvcnQgeyBfU3RhdGlzdGljR3JvdXAgYXMgU3RhdGlzdGljR3JvdXAgfTtcbmltcG9ydCBfU3RhdGlzdGljTGFiZWwgZnJvbSAnLi92aWV3cy9TdGF0aXN0aWMvU3RhdGlzdGljTGFiZWwnO1xuZXhwb3J0IHsgX1N0YXRpc3RpY0xhYmVsIGFzIFN0YXRpc3RpY0xhYmVsIH07XG5pbXBvcnQgX1N0YXRpc3RpY1ZhbHVlIGZyb20gJy4vdmlld3MvU3RhdGlzdGljL1N0YXRpc3RpY1ZhbHVlJztcbmV4cG9ydCB7IF9TdGF0aXN0aWNWYWx1ZSBhcyBTdGF0aXN0aWNWYWx1ZSB9OyJdLCJzb3VyY2VSb290IjoiIn0=