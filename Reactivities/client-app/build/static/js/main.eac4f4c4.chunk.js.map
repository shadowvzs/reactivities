{"version":3,"sources":["app/api/service.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/models/Activity.ts","app/common/options/categoryOptions.ts","app/common/form/TextInput.tsx","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/form/DateInput.tsx","features/activities/form/ActivityForm.tsx","app/layout/LoadingComponent.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","app/common/form/ErrorMessage.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfileActivities.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhoto.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileDescription.tsx","features/profiles/ProfileCard.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/NotFound.tsx","app/common/modal/ModalContainer.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","history","push","removeItem","info","method","errors","id","responseBody","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","params","list","details","create","activity","update","attend","unattend","current","login","user","register","username","uploadPhoto","photo","setMainPhoto","deletePhoto","updateProfile","profile","follow","unfollow","listFollowings","predicate","listActivities","combineDateAndTime","date","time","dateString","toISOString","split","timeString","Date","setActivityProps","isHost","attendees","some","x","isGoing","createAttendee","displayName","image","ActivityStore","observable","ref","rootStore","getActivity","activityRegistry","this","reaction","keys","page","clear","loadActivities","activities","sortedActivities","sort","a","b","Object","entries","reduce","activityGroup","URLSearchParams","String","forEach","value","key","Math","ceil","activityCount","groupActivitiesByDate","Array","from","values","Map","action","set","computed","activityId","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","console","log","invoke","state","catch","err","on","comment","runInAction","comments","stop","loadingInitial","services","axiosParams","userStore","service","submitting","setSubmitting","existingActivity","assign","uuid","attendee","ev","target","currentTarget","name","loading","filter","UserStore","setToken","modalStore","closeModal","CommonStore","setItem","appLoaded","ModalStore","shallow","open","content","modal","ProfileStore","activeTab","loadFollowings","followings","loadingActivities","userActivities","activeIndex","loadingProfile","uploadingPhoto","photos","isMain","find","following","followersCount","profiles","configure","enforceActions","createContext","activityStore","profileStore","menuList","label","path","observer","useContext","RootStoreContext","logout","Menu","fixed","inverted","Container","Item","header","as","NavLink","exact","to","src","alt","style","marginRight","map","children","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","followingStyle","borderColor","borderWidth","List","horizontal","Popup","trigger","size","circular","bordered","host","Segment","Group","marginBottom","Content","Header","title","Description","Label","basic","color","Icon","format","venue","city","secondary","clearing","description","floated","activitiesByDate","group","Fragment","divided","setPredicate","vertical","width","marginTop","attached","active","has","onChange","ActivityListItemPlaceholder","Placeholder","fluid","minHeight","Line","Paragraph","disabled","setPage","totalPages","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","hasMore","initialLoad","Loader","ActivityFormValues","init","category","TextInput","props","input","type","placeholder","meta","touched","Form","Field","TextAreaInput","rows","SelectInput","options","Select","e","DateInput","rest","onKeyDown","preventDefault","onBlur","validate","combineValidators","isRequired","composeValidators","hasLengthGreaterThan","match","loadActivity","onCreateOrEdit","setState","setLoading","finally","initialValues","onSubmit","render","handleSubmit","invalid","pristine","component","widths","LoadingComponent","Dimmer","activityImageStyle","activityImageTextStyle","bottom","left","height","attendActivity","cancelAttendance","padding","verticalAlign","createHubConnection","stopHubConnection","addComment","textAlign","border","Comment","Avatar","Author","Metadata","formatDistance","createdAt","Text","form","reset","labelPosition","primary","length","relaxed","ribbon","Extra","ErrorMessage","errorList","Message","negative","statusText","flat","i","email","password","FORM_ERROR","submitError","dirtySinceLastSubmit","HomePage","isLoggedIn","openModal","className","isCurrentUser","Statistic","followingCount","Divider","Reveal","animated","visible","hidden","panes","menuItem","pane","loadUserActivities","Tab","Pane","menu","onTabChange","handleTabChange","Card","itemsPerRow","objectFit","Meta","dropzoneStyles","borderRadius","paddingTop","dropzoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","aspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","elem","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","sub","overflow","addPhotoMode","setPhotoMode","setTarget","deleteTarget","setDeleteTarget","paddingBottom","bio","editMode","setEditMode","ProfileCard","extra","ProfileActivities","ProfileContent","setActiveTab","menuPosition","loadProfile","NotFound","Inline","Modal","onClose","Component","withRouter","location","setAppLoaded","getUser","ModalContainer","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","createBrowserHistory","dateFnsLocalizer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.eac4f4c4.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { IActivity, IActivitiesEnvelope } from \"src/app/models/Activity\";\nimport { IUser, IUserFormValues } from \"src/app/models/User\";\nimport { IProfile, IUserActivity, IPhoto } from \"src/app/models/Profile\";\nimport { history } from \"../..\";\nimport { toast } from \"react-toastify\";\n\nconst API_URL = process.env.REACT_APP_API_URL!;\nexport const API_SIGNALR_URL = process.env.REACT_APP_API_SIGNALR_URL!;\n\naxios.defaults.baseURL = API_URL;\n\naxios.interceptors.request.use(( config ) => {\n    const token = window.localStorage.getItem('jwt');\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n}, error => {\n    return Promise.reject(error);\n});\n\n// we have access for error informations\n// example error.response.data.errors\naxios.interceptors.response.use(undefined, error => {\n    // backend if send 404 error when entity not found with RestError handler\n    if (error.message === 'Network Error' && !error.response) {\n        toast.error('Network error - make sure API is running!');\n    }\n    const { status, data, config, headers } = error.response;\n    if (status === 404) {\n        history.push('/notfound');\n    // if guid is invalid\n    } else if (status === 401 && headers['www-authenticate'] === 'Bearer error=\"invalid_token\", error_description=\"The token is expired\"') {\n        window.localStorage.removeItem('jwt');\n        history.push('/');\n        toast.info('Your session has expired, please login again');\n    } else if (status === 400 && config.method === 'get' && data.errors.id) {\n        history.push('/notfound');\n    } else if (status === 500) {\n        toast.error('Server error - check the terminal for more info!');\n    }\n    \n    throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\n// const sleep = (ms: number) => (response: AxiosResponse) => new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\n// how to implement sleep for testing the loader\n// old: get: (url: string) => axios.get(url).then(responseBody),\n// new: get: (url: string) => axios.get(url).then(sleep(3000)).then(responseBody),\n\nconst requests = {\n    get: (url: string) => axios.get(url).then(responseBody),\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\n    delete: (url: string) => axios.delete(url).then(responseBody),\n    postForm: (url: string, file: Blob) => {\n        const formData = new FormData();\n        formData.append('File', file);\n        return axios.post(url, formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        }).then(responseBody)\n    },\n    getWithParams: (url: string, params: URLSearchParams) => axios.get(url,  { params }).then(responseBody)\n};\n\nconst activityService = {\n    list: (params: URLSearchParams): Promise<IActivitiesEnvelope> => requests.getWithParams('/activities', params),\n    details: (id: string) => requests.get(`/activities/${id}`),\n    create: (activity: IActivity) => requests.post(`/activities`, activity),\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.delete(`/activities/${id}`),\n    attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n    unattend: (id: string) => requests.delete(`/activities/${id}/attend`),\n};\n\nconst userService = {\n    current: (): Promise<IUser> => requests.get('/user'),\n    login: (user: IUserFormValues): Promise<IUser> => requests.post('/user/login', user),\n    register: (user: IUserFormValues): Promise<IUser> => requests.post('/user/register', user),\n};\n\nconst profileService = {\n    get: (username: string): Promise<IProfile> => requests.get(`/profiles/${username}`),\n    uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm('/photos', photo),\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\n    updateProfile: (profile: Partial<IProfile>) => requests.put('/profiles', profile),\n    follow: (username: string) => requests.post(`/profiles/${username}/follow`, {}),\n    unfollow: (username: string) => requests.delete(`/profiles/${username}/follow`),\n    listFollowings: (username: string, predicate: string): Promise<IProfile[]> => requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string): Promise<IUserActivity[]> => requests.get(`/profiles/${username}/activities?predicate=${predicate}`),\n};\n\n\nexport default {\n    activity: activityService,\n    user: userService,\n    profile: profileService\n};\n","import { IActivity, IAttendee } from \"src/app/models/Activity\";\nimport { IUser } from \"src/app/models/User\";\n\nexport const combineDateAndTime = (date: Date, time: Date): Date => {\n    // const timeString = time.getHours().toString().padStart(2, '0') + ':' + time.getMinutes().toString().padStart(2, '0') + ':00';\n    // const dateString = date.getFullYear() + ' ' + date.getMonth().toString().padStart(2, '0') + ' ' + date.getDate().toString().padStart(2, '0');\n    // return new Date(dateString + ' ' + timeString);\n    const dateString = date.toISOString().split('T')[0];\n    const timeString = time.toISOString().split('T')[1];\n    return new Date(dateString + 'T' + timeString);\n};\n\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\n    activity.date = new Date(activity.date!);\n    activity.isHost = activity.attendees.some(x => user && x.isHost && x.username === user.username);\n    activity.isGoing = activity.attendees.some(x => user && x.username === user.username);\n    return activity;\n};\n\nexport const createAttendee = (user: IUser): IAttendee => {\n    return {\n        displayName: user.displayName,\n        isHost: false,\n        username: user.username,\n        image: user.image!\n    }\n};","import { observable, action, computed, runInAction, reaction } from 'mobx';\nimport services, { API_SIGNALR_URL } from \"src/app/api/service\";\nimport { IActivity, IComment } from 'src/app/models/Activity';\nimport { v4 as uuid } from \"uuid\";\nimport service from 'src/app/api/service';\nimport { history } from \"../..\";\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { setActivityProps, createAttendee } from \"src/app/common/util/util\";\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr'\n\nconst LIMIT = 2;\n\nexport default class ActivityStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n\n        reaction(() => this.predicate.keys(), () => {\n            this.page = 0;\n            this.activityRegistry.clear();\n            this.loadActivities();\n        });\n    }\n\n    @observable activityRegistry = new Map();\n    @observable loadingInitial = false;\n    @observable submitting = false;\n    @observable loading = false;\n    @observable activity?: IActivity;\n    @observable target = '';\n    @observable.ref hubConnection: HubConnection | null = null;  // not make deep sub prop checking\n    @observable activityCount = 0;\n    @observable page = 0;\n    @observable predicate = new Map();\n\n    @action setPredicate = (predicate: string, value: string | Date) => {\n        this.predicate.clear();\n        if (predicate !== 'all') {\n            this.predicate.set(predicate, value);\n        }\n    }\n\n    @computed get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('limit', String(LIMIT));\n        params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, value.toISOString());\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    @computed get totalPages() {\n        return Math.ceil(this.activityCount / LIMIT);\n    }\n\n    @action setPage = (page: number) => {\n        this.page = page;\n    }\n\n    @action createHubConnection = (activityId: string) => {\n        this.hubConnection = new HubConnectionBuilder()\n            .withUrl(API_SIGNALR_URL, {\n                accessTokenFactory: () => this.rootStore.commonStore.token!\n            })\n            .configureLogging(LogLevel.Information)\n            .build();\n        \n        this.hubConnection\n            .start()\n            .then(() => {\n                console.log('Attempting to join group');\n                this.hubConnection!.invoke('AddToGroup', activityId);\n            })\n            .then(() => console.log(this.hubConnection!.state))\n            .catch((err: string) => console.error('Error establishing connection:', err));\n\n        this.hubConnection.on('ReceiveComment', (comment: IComment) => {\n            runInAction(() => {\n                this.activity!.comments.push(comment);\n            });\n        })\n\n        this.hubConnection.on('Send', (message: string) => {\n            toast.info(message);\n        })\n    }\n\n    @action stopHubConnection = () => {\n        this.hubConnection!.invoke('RemoveFromGroup', this.activity!.id)\n            .then(() => {\n                this.hubConnection!.stop();\n            })\n            .then(() => {\n                console.log('Connection stopped');\n            })\n            .catch((err: string) => {\n                console.log('Error', err);\n            });\n\n    }\n\n    @action addComment = async (values: any) => {\n        values.activityId = this.activity!.id;\n        try {\n            // SendComment handle was declared in backend - Api/SignalR/ChatHub.cs\n            await this.hubConnection!.invoke('SendComment', values);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    @computed get activitiesByDate() {\n        return this.groupActivitiesByDate(Array.from(this.activityRegistry.values()));\n    }\n\n    groupActivitiesByDate(activities: IActivity[]) {\n        const sortedActivities = activities.sort((a, b) => +a.date! - +b.date!);\n        return Object.entries(sortedActivities.reduce((activityGroup, activity) => {\n            const date = activity.date!.toISOString().split('T')[0];\n            activityGroup[date] = activityGroup[date] ? [...activityGroup[date], activity] : [activity];\n            return activityGroup;\n        }, {} as { [key: string]: IActivity[]}));\n    }\n\n    @action loadActivities = async () => {\n        this.loadingInitial = true;\n        try {\n            const { activities, activityCount } = await services.activity.list(this.axiosParams);\n            // we should add string for 1st param because should be testable easier with mobx devtool\n            // since await use promise then in behind we must run every observable changes in runInAction, before await it is ok\n            runInAction('loading activities', () => {\n                const user = this.rootStore.userStore.user!;\n                activities.forEach(activity => {\n                    setActivityProps(activity, user);\n                    this.activityCount = activityCount;\n                    this.activityRegistry.set(activity.id, activity);\n                });\n            });\n        } catch(err) {\n            console.error(err);\n        }\n        // since await use promise then in behind we must run every observable changes in runInAction\n        // if we call action instead of setting directly the obseravle value then this should be ok\n        runInAction('turn off loading spiner', () => {\n            this.loadingInitial = false;\n        });\n    }\n\n    @action loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.activity = activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await service.activity.details(id);\n                runInAction('load a single activity', () => {\n                    setActivityProps(activity, this.rootStore.userStore.user!);\n                    this.activity = activity;\n                    this.activityRegistry.set(activity.id, activity);\n                    this.loadingInitial = false;\n                });\n            } catch (err) {\n                runInAction('disable loader for activity load', () => this.loadingInitial = false);\n                console.log(err);\n            }            \n        }\n        return activity;\n    }\n\n    getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    @action clearActivity = () => {\n        this.activity = undefined;\n    }\n\n    @action setSubmitting = (value: boolean) => {\n        this.submitting = value;\n    }\n\n    @action onCreateOrEdit = async (activity: IActivity) => {\n        this.setSubmitting(true);\n        if (activity.id) {\n            try {\n                const existingActivity = this.activityRegistry.get(activity.id);\n                if (!existingActivity) return;\n                Object.assign(existingActivity, activity);\n                await services.activity.update(existingActivity);\n                runInAction('update activity', () => {\n                    this.activityRegistry.set(existingActivity.id, existingActivity);\n                    this.activity = existingActivity;\n                });\n            } catch (err) {\n                this.setSubmitting(false);\n                toast.error('Problem submitting data!');\n                return console.error(err.response);\n            }\n        } else {\n            try {\n                activity.id = uuid();\n                await services.activity.create(activity);\n                const attendee = createAttendee(this.rootStore.userStore.user!);\n                attendee.isHost = true;\n                activity.attendees = [ attendee ];\n                activity.comments = [];\n                activity.isHost = true;\n                runInAction('create activity', () => {\n                    this.activityRegistry.set(activity.id, activity);\n                    this.activity = activity;\n                });  \n            } catch (err) {\n                this.setSubmitting(false);\n                toast.error('Problem submitting data!');\n                return console.error(err.response);\n            }            \n        }\n        this.setSubmitting(false);\n        history.push(`/activities/${activity.id}`);\n    }\n\n    @action onDelete = async (ev: React.SyntheticEvent<HTMLButtonElement>, id: string) => {\n        this.target = ev.currentTarget.name;\n        try {\n            await services.activity.delete(id);\n            runInAction('delete activity', () => {\n                this.activityRegistry.delete(id);\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    @action attendActivity = async () => {\n        const attendee = createAttendee(this.rootStore.userStore.user!);\n        this.loading = true;\n        try {\n            await services.activity.attend(this.activity!.id!);\n            runInAction(() => {\n                this.activity!.attendees.push(attendee);\n                this.activity!.isGoing = true;\n                this.activityRegistry.set(this.activity!.id, this.activity);\n                this.loading = false;\n            });\n        } catch (err) {\n            runInAction(() => this.loading = false);\n            toast.error('Problem signing up to activity');\n        }\n    }\n    \n    @action cancelAttendance = async () => {\n        this.loading = true;\n        try {\n            await services.activity.unattend(this.activity!.id!);\n            runInAction(() => {\n                const user = this.rootStore.userStore.user!;\n                this.activity!.attendees = this.activity!.attendees.filter(x => x.username !== user.username);\n                this.activity!.isGoing = false;\n                this.activityRegistry.set(this.activity!.id, this.activity);\n                this.loading = false;\n            });\n        } catch (err) {\n            runInAction(() => this.loading = false);\n            toast.error('Problem at cancel activity');\n        }\n    }\n}\n\n// another option is not using decorator in class and we use it here:\n/*\ndecorate(ActivityStore, {\n    actityRegistry: observable,\n    selectedActivity: observable,\n    .......................\n    activityByDate: computed,\n    .......................\n    loadActivities: action,\n    .......................\n});\n*/","import { observable, action, computed, runInAction } from 'mobx';\nimport { IUser, IUserFormValues } from 'src/app/models/User';\nimport service from 'src/app/api/service';\nimport { RootStore } from './rootStore';\nimport { history } from \"../..\";\n\nexport default class UserStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable user: IUser | null = null;\n\n    @computed get isLoggedIn() {\n        return !!this.user;\n    }\n\n    @action login = async (values: IUserFormValues) => {\n        try {\n            const user = await service.user.login(values);\n            runInAction(() => {\n                this.user = user;\n            });\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities')\n        } catch (err) {\n            throw err;\n        }\n    }\n\n    @action register = async (values: IUserFormValues) => {\n        try {\n            const user = await service.user.register(values);\n            runInAction(() => {\n                this.user = user;\n            });\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities')\n        } catch (err) {\n            throw err;\n        }\n    }\n\n    @action getUser = async () => {\n        try {\n            const user = await service.user.current();\n            runInAction(() => {\n                this.user = user;\n            });\n        } catch (err) {\n            throw err;\n        }\n    }\n\n    @action logout = () => {\n        this.rootStore.commonStore.setToken(null);\n        this.user = null;\n        history.push('/')\n    }\n}\n","import { observable, action, reaction } from 'mobx';\nimport { RootStore } from './rootStore';\n\nexport default class CommonStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n\n        reaction(() => this.token, (token) => {\n            if (token) {\n                window.localStorage.setItem('jwt', token);\n            } else {\n                window.localStorage.removeItem('jwt');\n            }\n        });\n    }\n\n    @observable token: string | null = window.localStorage.getItem('jwt');\n    @observable appLoaded: boolean = false;\n\n    @action setToken = (token: string | null) => {\n        window.localStorage.setItem('jwt', token!);\n        this.token = token;\n    }\n\n    @action setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}\n","import { observable, action } from 'mobx';\nimport { RootStore } from './rootStore';\n\nexport default class ModalStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable.shallow modal = {\n        open: false,\n        body: null as null | string | JSX.Element\n    }\n\n    @action openModal = (content: string | JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    @action closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}\n","import { observable, action, computed, runInAction, reaction } from 'mobx';\nimport { IProfile, IPhoto, IUserActivity } from 'src/app/models/Profile';\nimport service from 'src/app/api/service';\nimport { RootStore } from './rootStore';\nimport { toast } from 'react-toastify';\n\nexport default class ProfileStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n\n        reaction(() => this.activeTab, (activeTab) => {\n            if (activeTab === 3 || activeTab === 4) {\n                const predicate = activeTab === 4 ? 'following' : 'followers';\n                this.loadFollowings(predicate);\n            } else {\n                this.followings = [];\n            }\n        });\n    }\n\n    @observable profile: IProfile | null = null;\n    @observable loadingProfile = true;\n    @observable uploadingPhoto = false;\n    @observable loading = false;\n    @observable followings: IProfile[] = [];\n    @observable activeTab: number = 0;\n    @observable userActivities: IUserActivity[] = [];\n    @observable loadingActivities = false;\n    \n    @computed get isCurrentUser() {\n        const user = this.rootStore.userStore.user;\n        return this.profile && user && this.profile.username === user.username;\n    }\n\n    @action loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await service.profile.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            });\n        } catch (err) {\n            toast.error('Problem loading activities');\n            console.error(err);\n            runInAction(() => this.loadingActivities = false);\n        }\n    }\n\n    @action setActiveTab = (activeIndex: number) => {\n        this.activeTab = activeIndex;\n    };\n\n    @action loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await service.profile.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            });\n        } catch (err) {\n            console.error(err);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n    \n    @action uploadPhoto = async (file: Blob) => {\n        this.uploadingPhoto = true;\n        try {\n            const photo = await service.profile.uploadPhoto(file);\n            runInAction(() => {\n                if (this.profile) {\n                    const user = this.rootStore.userStore.user;\n                    this.profile.photos.push(photo);\n                    if (photo.isMain && user) {\n                        user.image = photo.url;\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploadingPhoto = false;\n            });\n        } catch (err) {\n            console.error(err);\n            toast.error('Problem uploading photo');\n            runInAction(() => this.uploadingPhoto = false );\n        }\n    }\n\n    @action setMainPhoto = async (photo: IPhoto) => {\n        this.loading = true;\n        try {\n            await service.profile.setMainPhoto(photo.id);\n            runInAction(() => {\n                this.rootStore.userStore.user!.image = photo.url;\n                this.profile!.photos.find(a => a.isMain)!.isMain = false;\n                this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\n                this.profile!.image = photo.url;\n                this.loading = false;\n            });\n        } catch (err) {\n            console.error(err);\n            toast.error('Problem changing main photo');\n            runInAction(() => this.loading = false );\n        }\n    }\n\n    @action deletePhoto = async (photo: IPhoto) => {\n        this.loading = true;\n        try {\n            await service.profile.deletePhoto(photo.id);\n            runInAction(() => {\n                this.profile!.photos = this.profile!.photos.filter(x => x.id !== photo.id);\n                this.loading = false;\n            });\n        } catch (err) {\n            console.error(err);\n            toast.error('Problem changing main photo');\n            runInAction(() => this.loading = false );\n        }\n    }\n\n    @action updateProfile = async (profile: Partial<IProfile>) => {\n        this.loading = true;\n        try {\n            await service.profile.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName !== this.rootStore.userStore.user!.displayName) {\n                    this.rootStore.userStore.user!.displayName = profile.displayName!;\n                }\n                this.profile = {...this.profile!, ...profile};\n            });\n        } catch (err) {\n            console.error(err);\n            toast.error('Problem changing main photo');\n            runInAction(() => this.loading = false );\n        }\n    }\n\n    @action unfollow = async (username: string) => {\n        this.loading = true;\n        try {\n            await service.profile.unfollow(username);\n            runInAction(() => {\n                this.profile!.following = false;\n                this.profile!.followersCount--;\n                this.loading = false;\n            });\n        } catch (err) {\n            toast.error('Problem unfollowing user');\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    };\n\n\n    @action follow = async (username: string) => {\n        this.loading = true;\n        try {\n            await service.profile.follow(username);\n            runInAction(() => {\n                this.profile!.following = true;\n                this.profile!.followersCount++;\n                this.loading = false;\n            });\n        } catch (err) {\n            toast.error('Problem following user');\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    };\n\n\n    @action loadFollowings = async (predicate: string) => {\n        this.loading = true;\n        try {\n            const profiles = await service.profile.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = profiles;\n                this.loading = false;\n            });\n        } catch (err) {\n            toast.error('Problem loading following user profiles');\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    };\n}\n","import { configure } from 'mobx';\nimport ActivityStore from \"./activityStore\";\nimport UserStore from \"./userStore\";\nimport { createContext } from 'react';\nimport CommonStore from './commonStore';\nimport ModalStore from './modalStore';\nimport ProfileStore from './profileStore';\n\n// add strict mode\nconfigure({ enforceActions: true });\n\nexport class RootStore {\n    activityStore: ActivityStore;\n    userStore: UserStore;\n    commonStore: CommonStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    \n    constructor() {\n        this.activityStore = new ActivityStore(this);\n        this.userStore = new UserStore(this);\n        this.commonStore = new CommonStore(this);\n        this.modalStore = new ModalStore(this);\n        this.profileStore = new ProfileStore(this);\n    }\n}\n\nexport default createContext(new RootStore());","import React, { useContext } from \"react\";\nimport { observer } from 'mobx-react-lite';\nimport { \n    Menu, \n    Container, \n    Button,\n    Image,\n    Dropdown\n} from 'semantic-ui-react'\nimport { NavLink, Link } from \"react-router-dom\";\nimport RootStoreContext from \"src/app/stores/rootStore\";\n\nconst menuList = [\n    {\n        label: 'Activities',\n        path: '/activities'\n    }\n];\n\nconst NavBar = () => {\n\n    const rootStore = useContext(RootStoreContext);\n    const { user, logout } = rootStore.userStore;\n\n    return (\n        <Menu fixed='top' inverted>\n            <Container>\n                <Menu.Item header as={NavLink} exact to='/'>\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: 10 }}/>\n                    Reactivities\n                </Menu.Item>\n                {menuList.map(x => <Menu.Item key={x.label} as={NavLink} to={x.path} children={x.label} />)}\n                <Menu.Item>\n                    <Button positive content='Create Activity' as={NavLink} to='/createActivity' />\n                </Menu.Item>\n                { user && (\n                    <Menu.Item position='right'>\n                        <Image avatar spaced='right' src={user.image || '/assets/user.png'} />\n                        <Dropdown pointing='top left' text={user.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profile/${user.username}`} text='My profile' icon='user'/>\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                        </Dropdown>\n                    </Menu.Item>\n                )}\n            </Container>\n      </Menu>\n    )\n};\n\nexport default observer(NavBar);\n","import React from \"react\";\nimport { List, Image, Popup } from 'semantic-ui-react'\nimport { observer } from 'mobx-react-lite';\nimport { IAttendee } from \"src/app/models/Activity\";\n\ninterface Props {\n    attendees: IAttendee[];\n}\n\nconst followingStyle = {\n    borderColor: 'orange',\n    borderWidth: 2\n};\n\nconst ActivityList: React.FC<Props> = ({ attendees }) => {\n    \n    return (\n        <List horizontal>\n            { attendees.map((x) => (\n                <List.Item key={x.username}>\n                    <Popup \n                        header={x.displayName}\n                        trigger={(\n                            <Image \n                                size='mini' \n                                circular \n                                src={x.image || '/assets/user.png'} \n                                bordered\n                                style={x.following ? followingStyle : undefined}\n                            />\n                        )}\n                    />\n                </List.Item>\n            ))}\n        </List>\n    );\n};\n\nexport default observer(ActivityList);\n","import React from \"react\";\nimport { Button, Label, Item, Segment, Icon } from 'semantic-ui-react'\nimport { observer } from 'mobx-react-lite';\nimport { Link } from \"react-router-dom\";\nimport { format } from \"date-fns\";\nimport { IActivity } from \"src/app/models/Activity\";\nimport Attendees from \"./ActivityListItemAttendees\";\ninterface ActivityListItemProps {\n    activity: IActivity;\n}\n\nconst ActivityListItem: React.FC<ActivityListItemProps> = ({ activity }) => {\n    const host = activity.attendees.find(x => x.isHost);\n    return (\n        <Segment.Group>\n            <Segment>\n                <Item.Group>\n                    <Item>\n                        <Item.Image size='tiny' circular src={host!.image || `/assets/user.png`} style={{ marginBottom: 3 }} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}> {activity.title}</Item.Header>\n                            <Item.Description>\n                                Hosted by <Link to={`/profile/${host!.username}`}> {host!.displayName} </Link>\n                            </Item.Description>\n                            { activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange' content='You are hosting this activity' />\n                                </Item.Description>\n                            )}\n                            { activity.isGoing && (\n                                <Item.Description>\n                                    <Label basic color='green' content='You are going to this activity' />\n                                </Item.Description>\n                            )}                            \n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <Icon name='clock' /> {format(activity.date!, 'h:mm a')}\n                <Icon name='marker' /> {activity.venue}, {activity.city}\n            </Segment>\n            <Segment secondary>\n                <Attendees attendees={activity.attendees} />\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button \n                    floated='right' \n                    content='View' \n                    color='blue' \n                    as={Link} \n                    to={`/activities/${activity.id}`} \n                />\n            </Segment>\n        </Segment.Group>\n    );\n};\n\nexport default observer(ActivityListItem);\n","import React, { useContext } from \"react\";\nimport { Label, Item } from 'semantic-ui-react'\nimport { observer } from 'mobx-react-lite';\nimport RootStoreContext from \"src/app/stores//rootStore\";\nimport ActivityListItem from \"./ActivityListItem\";\nimport { format } from \"date-fns\";\n\nconst ActivityList = () => {\n    \n    const rootStore = useContext(RootStoreContext);\n    const { activitiesByDate } = rootStore.activityStore;\n\n    return (\n        <>\n            {activitiesByDate.map(([group, activities]) => (\n                <React.Fragment key={group}>\n                    <Label size='large' color='blue'>\n                        {format(group as any, 'eeee do MMMM')}\n                    </Label>\n                    <Item.Group divided>\n                        { activities.map(x => <ActivityListItem key={x.id} activity={x} /> )}\n                    </Item.Group>\n                </React.Fragment>\n            ))}\n        </>\n    );\n};\n\nexport default observer(ActivityList);\n","import React, { useContext } from 'react';\nimport { Menu, Header } from 'semantic-ui-react';\nimport { Calendar } from 'react-widgets';\nimport RootStoreContext from \"src/app/stores/rootStore\";\nimport { observer } from 'mobx-react-lite';\n\nconst ActivityFilters = () => {\n\n    const { activityStore } = useContext(RootStoreContext);\n    const { predicate, setPredicate } = activityStore;\n    \n    return (\n            <>\n                <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\n                    <Header icon={'filter'} attached color={'teal'} content={'Filters'} />\n                    <Menu.Item \n                        active={predicate.size === 0} \n                        color={'blue'} \n                        name={'all'} \n                        content={'All Activities'}\n                        onClick={() => setPredicate('all', 'true')}\n                    />\n                    <Menu.Item \n                        active={predicate.has('isGoing')}\n                        color={'blue'} \n                        name={'username'} \n                        content={\"I'm Going\"} \n                        onClick={() => setPredicate('isGoing', 'true')}\n                    />\n                    <Menu.Item \n                        active={predicate.has('isHost')}\n                        color={'blue'} \n                        name={'host'} \n                        content={\"I'm hosting\"} \n                        onClick={() => setPredicate('isHost', 'true')}\n                    />\n                </Menu>\n                <Header icon={'calendar'} attached color={'teal'} content={'Select Date'} />\n                <Calendar \n                    onChange={(date) => setPredicate('startDate', date!)}\n                    value={predicate.get('startDate') || new Date()}\n                />\n            </>\n        );\n    };\n\nexport default observer(ActivityFilters);","import React from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nconst ActivityListItemPlaceholder = () => {\n    return (\n        <>\n        <Placeholder fluid style={{ marginTop: 50 }}>\n            <Segment.Group>\n            <Segment style={{ minHeight: 110 }}>\n                <Placeholder>\n                <Placeholder.Header image>\n                    <Placeholder.Line />\n                    <Placeholder.Line />\n                </Placeholder.Header>\n                <Placeholder.Paragraph>\n                    <Placeholder.Line />\n                </Placeholder.Paragraph>\n                </Placeholder>\n            </Segment>\n            <Segment>\n                <Placeholder>\n                <Placeholder.Line />\n                <Placeholder.Line />\n                </Placeholder>\n            </Segment>\n            <Segment secondary style={{ minHeight: 70 }} />\n            <Segment clearing>\n                <Button disabled color='blue' floated='right' content='View' />\n            </Segment>\n            </Segment.Group>\n        </Placeholder>\n        </>\n    );\n};\nexport default ActivityListItemPlaceholder;","import React, { useEffect, useState, useContext } from \"react\";\nimport { Grid, Loader } from 'semantic-ui-react'\nimport { observer } from 'mobx-react-lite';\nimport RootStoreContext from \"src/app/stores/rootStore\";\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityList from './ActivityList';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\n\nconst ActivityDashboard = () => {\n\n    const { activityStore } = useContext(RootStoreContext);\n    const { loadingInitial, loadActivities, setPage, page, totalPages } = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    const handleGetNext = () => {\n        setLoadingNext(true);\n        setPage(page + 1);\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        loadActivities();\n    }, [loadActivities]);\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                { loadingInitial && page === 0 ? <ActivityListItemPlaceholder /> : (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && (page + 1 !== totalPages)}\n                        initialLoad={false}\n                    >\n                        <ActivityList />\n                    </InfiniteScroll>\n                )}\n            </Grid.Column>\n            <Grid.Column width={6}> \n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n};\n\nexport default observer(ActivityDashboard);\n","export interface IActivitiesEnvelope {\n    activities: IActivity[],\n    activityCount: number;\n}\n\nexport interface IActivity {\n    id?: string;\n    title: string;\n    description: string;\n    category: string;\n    date: Date;\n    city: string;\n    venue: string;\n    isGoing: boolean;\n    isHost: boolean;\n    attendees: IAttendee[];\n    comments: IComment[];\n}\n\nexport interface IComment {\n    id: string;\n    createdAt: Date,\n    body: string;\n    username: string;\n    displayName: string;\n    image: string;\n}\n\nexport interface IActivityFormValues extends Partial<IActivity> {\n    time?: Date;\n}\n\nexport class ActivityFormValues implements IActivityFormValues {\n    public id?: string = undefined;\n    public title: string = '';\n    public description: string = '';\n    public category: string = '';\n    public date?: Date = undefined;\n    public time?: Date = undefined;\n    public city: string = '';\n    public venue: string = '';\n\n    constructor(init?: IActivityFormValues) {\n        if (init && init.date) {\n            init.time = init.date;\n        }\n        Object.assign(this, init);\n    }\n}\n\nexport interface IAttendee {\n    username: string;\n    displayName: string;\n    image: string;\n    isHost: boolean;\n    following?: boolean;\n}","export const category = [\n    { key: 'drinks', text: 'Drinks', value: 'drinks' },\n    { key: 'culture', text: 'Culture', value: 'culture' },\n    { key: 'film', text: 'Film', value: 'film' },\n    { key: 'food', text: 'Food', value: 'food' },\n    { key: 'music', text: 'Music', value: 'music' },\n    { key: 'travel', text: 'Travel', value: 'travel' }\n];","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps {}\n\nconst TextInput: React.FC<IProps> = (props) => {\n    const {\n        input, \n        width,\n        type,\n        placeholder,\n        meta: { touched, error }\n    } = props;\n    return (\n        <Form.Field error={touched && !!error} type={type} width={width}>\n            <input \n                {...input} \n                placeholder={placeholder} \n            />\n            {touched && error && (\n                <Label basic color='red'>{error}</Label>\n            )}\n        </Form.Field>\n    );\n};\n\nexport default TextInput;","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps {}\n\nconst TextAreaInput: React.FC<IProps> = (props) => {\n    const {\n        input, \n        width,\n        rows,\n        placeholder,\n        meta: { touched, error }\n    } = props;\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n            <textarea \n                {...input} \n                placeholder={placeholder} \n                rows={rows} \n            />\n            {touched && error && (\n                <Label basic color='red'>{error}</Label>\n            )}\n        </Form.Field>\n    );\n};\n\nexport default TextAreaInput;","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps {}\n\nconst SelectInput: React.FC<IProps> = (props) => {\n    const {\n        input, \n        width,\n        options,\n        placeholder,\n        meta: { touched, error }\n    } = props;\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n            <Select \n                value={input.value}\n                onChange={(e, data) => input.onChange(data.value)}\n                options={options}\n                placeholder={placeholder} \n            />\n            {touched && error && (\n                <Label basic color='red'>{error}</Label>\n            )}\n        </Form.Field>\n    );\n};\n\nexport default SelectInput;","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\nimport { DateTimePicker } from 'react-widgets';\n\ninterface IProps extends FieldRenderProps<Date, HTMLElement>, FormFieldProps {}\n\nconst DateInput: React.FC<IProps> = (props) => {\n    const {\n        id,\n        input, \n        date = false,\n        time = false,\n        width,\n        placeholder,\n        meta: { touched, error },\n        ...rest\n    } = props;\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n            <DateTimePicker \n                date={date}\n                time={time}\n                placeholder={placeholder}\n                value={input.value || null}\n                onKeyDown={e => e.preventDefault()}\n                onBlur={input.onBlur}\n                onChange={input.onChange}\n                {...rest}\n            />\n            {touched && error && (\n                <Label basic color='red'>{error}</Label>\n            )}\n        </Form.Field>\n    );\n};\n\nexport default DateInput;","import React, { useState, useContext, useEffect } from \"react\";\nimport { ActivityFormValues, IActivity } from \"src/app/models/Activity\";\nimport { Segment, Form, Button, Grid } from 'semantic-ui-react'\nimport { observer } from 'mobx-react-lite';\nimport RootStoreContext from \"src/app/stores/rootStore\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { category } from \"src/app/common/options/categoryOptions\";\nimport TextInput from \"src/app/common/form/TextInput\";\nimport TextAreaInput from \"src/app/common/form/TextAreaInput\";\nimport SelectInput from \"src/app/common/form/SelectInput\";\nimport DateInput from \"src/app/common/form/DateInput\";\nimport { combineDateAndTime } from \"src/app/common/util/util\";\nimport { combineValidators, isRequired, composeValidators, hasLengthGreaterThan } from \"revalidate\";\n\nconst validate = combineValidators({\n    title: isRequired({message: 'The event title is required'}),\n    category: isRequired('Category'),\n    description: composeValidators(\n        isRequired('Description'),\n        hasLengthGreaterThan(4)({message: 'Description needs to be at least 5 character'})\n    )(),\n    city: isRequired('City'),\n    venue: isRequired('Venue'),\n    date: isRequired('Date'),\n    time: isRequired('Time')\n});\n\ntype IParams = { id: string };\nconst ActivityForm: React.FC<RouteComponentProps<IParams>> = ({ match, history }) => {\n    \n    const rootStore = useContext(RootStoreContext);\n    const { submitting, loadActivity, onCreateOrEdit } = rootStore.activityStore;\n\n    const [state, setState] = useState<ActivityFormValues>(new ActivityFormValues());\n    const [loading, setLoading] = useState<boolean>(false);\n    \n    useEffect(() => {\n        if (match.params.id && !state.id) {\n            setLoading(true);\n            loadActivity(match.params.id).then((activity) => {\n                setState(new ActivityFormValues(activity));\n            }).finally(() => {\n                setLoading(false);\n            });\n        }\n    }, [match.params.id, loadActivity, state.id]);\n\n    const onSubmit = (values: ActivityFormValues) => {\n        const { date, time, ...rest } = values;\n        const activity = { ...rest, date: combineDateAndTime(date!, time!) } as IActivity;\n        onCreateOrEdit(activity);\n    }\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <Segment clearing>\n                    <FinalForm \n                        validate={validate}\n                        initialValues={state}\n                        onSubmit={onSubmit}\n                        render={({ handleSubmit, invalid, pristine }) => (\n                            <Form onSubmit={handleSubmit} loading={loading}>\n                                <Field \n                                    name='title' \n                                    placeholder='Title' \n                                    value={state.title} \n                                    component={TextInput} \n                                />\n                                <Field \n                                    name='description' \n                                    rows={3}\n                                    placeholder='Description' \n                                    value={state.description} \n                                    component={TextAreaInput} \n                                />\n                                <Field \n                                    name='category' \n                                    options={category}\n                                    placeholder='Category' \n                                    value={state.category} \n                                    component={SelectInput} \n                                />\n                                <Form.Group widths='equal'>\n                                    <Field \n                                        date={true}\n                                        name='date' \n                                        placeholder='Date' \n                                        value={state.date!} \n                                        component={DateInput} \n                                    />\n                                    <Field \n                                        time={true}\n                                        name='time' \n                                        placeholder='Time' \n                                        value={state.date!} \n                                        component={DateInput} \n                                    />                                    \n                                </Form.Group>\n\n                                <Field \n                                    name='city' \n                                    placeholder='City' \n                                    value={state.city} \n                                    component={TextInput} \n                                />\n                                <Field \n                                    name='venue' \n                                    placeholder='Venue' \n                                    value={state.venue} \n                                    component={TextInput} \n                                />\n                                <Button \n                                    disabled={loading || invalid || pristine}\n                                    floated='right' \n                                    positive \n                                    type='submit' \n                                    content='Submit' \n                                    loading={submitting} \n                                />\n                                <Button \n                                    disabled={loading}\n                                    floated='right' \n                                    type='button' \n                                    content='Cancel' \n                                    onClick={() => history.push(state.id ? `/activities/${state.id}` : '/activities')} \n                                    loading={submitting} \n                                />\n                            </Form>\n                        )}\n                    />\n                </Segment>\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ActivityForm);","import React from \"react\";\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\n\ninterface LoaderProps {\n    inverted?: boolean;\n    content?: string;\n}\n\nconst LoadingComponent: React.FC<LoaderProps> = ({\n    inverted = true,\n    content\n}) => {\n    return (\n        <Dimmer active inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    );\n};\n\nexport default LoadingComponent;","import React, { useContext } from \"react\";\nimport { observer } from 'mobx-react-lite';\nimport { Segment, Item, Header, Button, Image } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { format } from \"date-fns\";\nimport RootStoreContext, { RootStore } from \"src/app/stores//rootStore\";\nimport { IActivity } from \"src/app/models/Activity\";\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n  position: 'absolute',\n  bottom: '5%',\n  left: '5%',\n  width: '100%',\n  height: 'auto',\n  color: 'white'\n};\n\ninterface HeaderProps {\n    activity: IActivity;\n}\n\nconst ActivityDetailedHeader: React.FC<HeaderProps> = ({ activity }) => {\n\n    const host = activity.attendees.find(x => x.isHost);\n    const rootStore = useContext<RootStore>(RootStoreContext);\n    const { attendActivity, cancelAttendance, loading } = rootStore.activityStore;\n\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{ padding: '0' }}>\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\n                <Segment basic style={activityImageTextStyle}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{ color: 'white' }}\n                                />\n                                <p>{format(activity.date!, 'eeee do MMMM')}</p>\n                                <p>\n                                    Hosted by \n                                    <Link to={`/profile/${host!.username}`}><strong> {host!.displayName} </strong></Link>\n                                </p>\n                            </Item.Content>\n                            </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                { activity.isHost ? (\n                    <Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\n                        Manage Event\n                    </Button>\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={cancelAttendance}>Cancel attendance</Button>\n                ) : (\n                    <Button loading={loading} color='teal' onClick={attendActivity}>Join Activity</Button>\n                )}\n          </Segment>\n        </Segment.Group>\n    );\n};\n\nexport default observer(ActivityDetailedHeader);","import React from \"react\";\nimport { observer } from 'mobx-react-lite';\nimport { Segment, Grid, Icon } from \"semantic-ui-react\";\nimport { IActivity } from \"src/app/models/Activity\";\nimport { format } from \"date-fns\";\n\ninterface HeaderProps {\n    activity: IActivity;\n}\n\nconst ActivityDetailedInfo: React.FC<HeaderProps> = ({ activity }) => {\n\n    return (\n\t\t<Segment.Group>\n\t\t    <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n\t\t    </Segment>\n\t\t    <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <span>\n                            {format(activity.date!, 'eeee do MMMM')} at {format(activity.date!, 'h:mm a')}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n\t\t    </Segment>\n\t\t    <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n\t\t    </Segment>\n\t\t</Segment.Group>\n    );\n};\n\nexport default observer(ActivityDetailedInfo);","import React, { useContext, Fragment, useEffect } from \"react\";\nimport { observer } from 'mobx-react-lite';\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport RootStoreContext, { RootStore } from \"src/app/stores//rootStore\";\nimport { Link } from \"react-router-dom\";\nimport TextAreaInput from \"src/app/common/form/TextAreaInput\";\nimport { formatDistance } from 'date-fns';\n\nconst ActivityDetailedChat: React.FC = () => {\n    const rootStore = useContext<RootStore>(RootStoreContext);\n    const { createHubConnection, stopHubConnection, addComment, activity } = rootStore.activityStore;\n\n    useEffect(() => {\n        createHubConnection(activity!.id!);\n        return () => stopHubConnection();\n    }, [createHubConnection, stopHubConnection, activity]);\n\n    const comments = (activity && activity.comments) || [];\n\n    return (\n        <Fragment>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached>\n                <Comment.Group>\n                    { comments.map( x => (\n                        <Comment key={x.id}>\n                            <Comment.Avatar src={ x.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profile/${x.username}`}>{x.displayName}</Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{ formatDistance(new Date(x.createdAt), new Date()) }</div>\n                                </Comment.Metadata>\n                                <Comment.Text>{x.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n        \n                    <FinalForm \n                        onSubmit={addComment} \n                        render={({ handleSubmit, submitting, form }) => (\n                            <Form onSubmit={() => handleSubmit()!.then(()=> form.reset())}>\n                                <Field \n                                    name='body'\n                                    component={TextAreaInput}\n                                    rows={2}\n                                    placeholder={'Add your comment'}\n                                />\n                                <Button\n                                    content='Add Reply'\n                                    labelPosition='left'\n                                    icon='edit'\n                                    primary\n                                    loading={submitting}\n                                />\n                            </Form>\n                        )}\n                    />\n                </Comment.Group>\n            </Segment>\n        </Fragment>\n    );\n};\n\nexport default observer(ActivityDetailedChat);","import React, { Fragment } from \"react\";\nimport { observer } from 'mobx-react-lite';\nimport { Segment, List, Item, Label, Image } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { IAttendee } from \"src/app/models/Activity\";\n\ninterface Props {\n    attendees: IAttendee[];\n}\n\nconst ActivityDetailedSidebar: React.FC<Props> = ({ attendees }) => {\n\n    return (\n        <Fragment>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} Going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(x => (\n                        <Item key={x.username} style={{ position: 'relative' }}>\n                            { x.isHost && (\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>\n                            )}\n                            <Image size='tiny' src={x.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profile/${x.username}`}>{x.displayName}</Link>\n                                </Item.Header>\n                                { x.following && <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra> }\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n      </Fragment>\n    );\n};\n\nexport default observer(ActivityDetailedSidebar);","import React, { useContext, useEffect } from \"react\";\nimport RootStoreContext, { RootStore } from \"src/app/stores//rootStore\";\nimport { observer } from 'mobx-react-lite';\nimport LoadingComponent from \"src/app/layout/LoadingComponent\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\nimport { Grid } from \"semantic-ui-react\";\n\ntype IParams = { id: string };\nconst ActivityDetails: React.FC<RouteComponentProps<IParams>> = ( { match }) => {\n \n    const rootStore = useContext<RootStore>(RootStoreContext);\n    const { activity, loadActivity, loadingInitial } = rootStore.activityStore;\n\n    useEffect(() => {\n        loadActivity(match.params.id);\n    }, [loadActivity, match.params.id]);\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity' />;\n\n    if (!activity) return <h2>Activity not found</h2>;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo activity={activity} />\n                <ActivityDetailedChat />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar attendees={activity.attendees} />\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ActivityDetails);","\nimport React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport { AxiosResponse } from 'axios';\n\ninterface IProps {\n    error: AxiosResponse,\n    text?: string;\n}\n\nconst ErrorMessage: React.FC<IProps> = (props) => {\n    const {\n        error,\n        text\n    } = props;\n    const errorList = error.data && Object.values(error.data.errors) as any;\n\n    return (\n        <Message negative>\n            <Message.Header>{error.statusText}</Message.Header>\n            {!!errorList.length && (\n                <Message.List>\n                    {errorList.flat().map((err: string, i: number) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n            {text && <Message.Content content={text} />}\n        </Message>  \n    );\n};\n\nexport default ErrorMessage;\n\n ","import React, { useContext } from \"react\";\nimport { Form, Header, Button } from 'semantic-ui-react'\nimport { observer } from 'mobx-react-lite';\nimport RootStoreContext from \"src/app/stores/rootStore\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"src/app/common/form/TextInput\";\nimport { IUserFormValues } from \"src/app/models/User\";\nimport { FORM_ERROR } from \"final-form\";\nimport { combineValidators, isRequired } from \"revalidate\";\nimport ErrorMessage from \"src/app/common/form/ErrorMessage\";\n\nconst validate = combineValidators({\n    email: isRequired('email'),\n    password: isRequired('password'),\n});\n\nconst LoginForm: React.FC = () => {\n\n    const rootStore = useContext(RootStoreContext);\n    const { login } = rootStore.userStore;\n\n    return (\n        <FinalForm \n            validate={validate}\n            onSubmit={(values: IUserFormValues) => login(values).catch(err => ({\n                [FORM_ERROR]: err\n            }))}\n            render={({ handleSubmit, submitting, form, submitError, invalid, pristine, dirtySinceLastSubmit }) => (\n                <Form onSubmit={handleSubmit} error>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\n                    <Field \n                        name='email' \n                        placeholder='Email' \n                        component={TextInput} \n                    />\n                    <Field \n                        name='password' \n                        placeholder='Password' \n                        type='password'\n                        component={TextInput} \n                    />\n                    {submitError && !dirtySinceLastSubmit && (\n                       <ErrorMessage error={submitError} text={'Invalid username or password'} />\n                    )}\n                    <br />\n                    <Button \n                        positive \n                        loading={submitting}\n                        type='submit' \n                        content='Login' \n                        fluid\n                        disabled={pristine || invalid}\n                    />\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default observer(LoginForm);","import React, { useContext } from \"react\";\nimport { Form, Header, Button } from 'semantic-ui-react'\nimport { observer } from 'mobx-react-lite';\nimport RootStoreContext from \"src/app/stores/rootStore\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"src/app/common/form/TextInput\";\nimport { IUserFormValues } from \"src/app/models/User\";\nimport { FORM_ERROR } from \"final-form\";\nimport { combineValidators, isRequired } from \"revalidate\";\nimport ErrorMessage from \"src/app/common/form/ErrorMessage\";\n\nconst validate = combineValidators({\n    username: isRequired('username'),\n    displayName: isRequired('displayName'),\n    email: isRequired('email'),\n    password: isRequired('password'),\n});\n\nconst RegisterForm: React.FC = () => {\n\n    const rootStore = useContext(RootStoreContext);\n    const { register } = rootStore.userStore;\n\n    return (\n        <FinalForm \n            validate={validate}\n            onSubmit={(values: IUserFormValues) => register(values).catch(err => ({\n                [FORM_ERROR]: err\n            }))}\n            render={({ handleSubmit, submitting, form, submitError, invalid, pristine, dirtySinceLastSubmit }) => (\n                <Form onSubmit={handleSubmit} error>\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\n                    <Field \n                        name='username' \n                        placeholder='Username' \n                        component={TextInput} \n                    />\n                    <Field \n                        name='displayName' \n                        placeholder='Display Name' \n                        component={TextInput} \n                    />\n                    <Field \n                        name='email' \n                        placeholder='Email' \n                        component={TextInput} \n                    />\n                    <Field \n                        name='password' \n                        placeholder='Password' \n                        type='password'\n                        component={TextInput} \n                    />\n                    {submitError && !dirtySinceLastSubmit && (\n                       <ErrorMessage error={submitError} text={'Invalid username or password'} />\n                    )}\n                    <br />\n                    <Button \n                        positive \n                        loading={submitting}\n                        type='submit' \n                        content='Register' \n                        fluid\n                        disabled={pristine || invalid}\n                    />\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default observer(RegisterForm);","import React, { useContext } from \"react\";\nimport { Container, Segment, Header, Button, Image } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport RootStoreContext from \"src/app/stores/rootStore\";\nimport LoginForm from \"src/features/user/LoginForm\";\nimport RegisterForm from \"src/features/user/RegisterForm\";\n\nconst HomePage = () => {\n    const token = window.localStorage.getItem('jwt');\n    const rootStore = useContext(RootStoreContext);\n    const { isLoggedIn, user } = rootStore.userStore;\n    const { openModal } = rootStore.modalStore;\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead' >\n                <Container text>\n                    <Header as='h1' inverted>\n                        <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}}/>\n                        Reactivities\n                    </Header>\n                    {isLoggedIn && user && token ? (\n                        <>\n                            <Header as='h2' inverted content={`Welcome back ${user.displayName}`} />\n                            <Button as={Link} to='/activities' size='huge' inverted>\n                                Go to activities!\n                            </Button>\n                        </>\n                    ) : (\n                        <>\n                            <Header as='h2' inverted content='Welcome to Reactivities' />\n                            <Button onClick={() => openModal(<LoginForm />)} size='huge' inverted>\n                                Login\n                            </Button>\n                            <Button onClick={() => openModal(<RegisterForm />)} size='huge' inverted>\n                                Register\n                            </Button>                                                       \n                        </>\n                    )}              \n                </Container>\n        </Segment>\n    );\n};\n\nexport default HomePage;","import React, { useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Segment, Item, Header, Button, Grid, Statistic, Divider, Reveal } from 'semantic-ui-react';\nimport { IProfile } from \"src/app/models/Profile\";\nimport RootStoreContext from \"src/app/stores/rootStore\";\n\ninterface IProps {\n    profile: IProfile;\n}\n\nconst ProfileHeader: React.FC<IProps> = ({ profile }) => {\n\n    const rootStore = useContext(RootStoreContext);\n    const { follow, unfollow, isCurrentUser, loading } = rootStore.profileStore;\n\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                <Item.Group>\n                    <Item>\n                    <Item.Image\n                        avatar\n                        size='small'\n                        src={profile.image || '/assets/user.png'}\n                    />\n                    <Item.Content verticalAlign='middle'>\n                        <Header as='h1'> {profile.displayName} </Header>\n                    </Item.Content>\n                    </Item>\n                </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                <Statistic.Group widths={2}>\n                    <Statistic label='Followers' value={profile.followersCount} />\n                    <Statistic label='Following' value={profile.followingCount} />\n                </Statistic.Group>\n                <Divider/>\n                { !isCurrentUser && (\n                    <Reveal animated='move'>\n                        <Reveal.Content visible style={{ width: '100%' }}>\n                        <Button\n                            fluid\n                            color='teal'\n                            content={ profile.following ? 'Following' : 'Not following' }\n                        />\n                        </Reveal.Content>\n                        <Reveal.Content hidden>\n                        <Button\n                            loading={loading}\n                            fluid\n                            basic\n                            color={profile.following ? 'red' : 'green'}\n                            content={profile.following ? 'Unfollow' : 'Follow'}\n                            onClick={\n                                profile.following \n                                ? () => unfollow(profile.username)\n                                : () => follow(profile.username)\n                            }\n                        />\n                        </Reveal.Content>\n                    </Reveal>\n                )}\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n};\n\nexport default observer(ProfileHeader);","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IUserActivity } from 'src/app/models/Profile';\nimport { format } from 'date-fns';\nimport RootStoreContext from \"src/app/stores/rootStore\";\n\nconst panes = [\n    { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\n    { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\n    { menuItem: 'Hosting', pane: { key: 'hosted' } }\n];\n\nconst ProfileEvents = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = rootStore.profileStore!;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n\n    const handleTabChange = (\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n        data: TabProps\n    ) => {\n        let predicate;\n        switch (data.activeIndex) {\n        case 1:\n            predicate = 'past';\n            break;\n        case 2:\n            predicate = 'hosting';\n            break;\n        default:\n            predicate = 'future';\n            break;\n        }\n        loadUserActivities(profile!.username, predicate);\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: IUserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n};\n\nexport default observer(ProfileEvents);","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface IFile extends File {\n    preview: string;\n}\n\ninterface IProps {\n    setFiles: (files: IFile[]) => void;\n}\n\nconst dropzoneStyles = {\n    border: 'dashed 3px',\n    borderColor: '#eee',\n    borderRadius: 5,\n    paddingTop: 30,\n    textAlign: 'center' as 'center',\n    height: 200\n}\n\nconst dropzoneActive = {\n    borderColor: 'green'\n}\n\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: IFile) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })));\n    }, [setFiles])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dropzoneStyles, ...dropzoneActive} : dropzoneStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content={isDragActive ? 'Drop image here' : 'Drop image here'} />\n        </div>\n    )\n}\n\nexport default PhotoWidgetDropzone;","import React, { useRef } from 'react'\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface IProps {\n    imagePreview: string;\n    setImage: (image: Blob) => void;\n}\n\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\n\n    const cropper = useRef<Cropper>(null);\n    const cropImage = () => {\n        const elem = cropper.current;\n        if (elem && typeof elem.getCroppedCanvas() === 'undefined') {\n            return;\n        }\n\n        elem && elem.getCroppedCanvas().toBlob((blob: any) => {\n            setImage(blob);\n        }, 'image/jpeg');\n    }\n\n    return (\n        <Cropper\n            ref={cropper as any}\n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            // Cropper.js options\n            preview='.img-preview'\n            aspectRatio={1 / 1}\n            guides={false}\n            viewMode={1}\n            dragMode='move'\n            scalable={true}\n            cropBoxMovable={true}\n            cropBoxResizable={true}\n            crop={cropImage} \n        />\n    );\n}\n\nexport default PhotoWidgetCropper;","import React, { useState, useEffect } from 'react';\nimport { Header, Grid, Button } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\n\ninterface IFile extends File {\n    preview: string;\n}\n\ninterface IProps {\n    uploadPhoto: (file: Blob) => void;\n    loading: boolean;\n}\n\nexport const PhotoUploadWidget: React.FC<IProps> = ({ uploadPhoto, loading }) => {\n    \n    const [files, setFiles] = useState<IFile[]>([]);\n    const [image, setImage] = useState<Blob | null>(null);\n\n    useEffect(() => {\n        // useEffect executed when dom is already insert so we can revoke the object url at this moment\n        files.forEach(file => URL.revokeObjectURL(file.preview))\n    }, [files]);\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header color='teal' sub content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {!!files.length && (\n                    <PhotoWidgetCropper \n                        setImage={setImage} \n                        imagePreview={files[0].preview}\n                    />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {!!files.length && (\n                    <>\n                        <div \n                            style={{ minHeight: 200, overflow: 'hidden' }}\n                            className='img-preview' \n                        />\n                        <Button.Group width={2}>\n                            <Button \n                                positive \n                                icon='check' \n                                loading={loading} \n                                disabled={!image} \n                                onClick={() => uploadPhoto(image!)} \n                            />\n                            <Button \n                                icon='close' \n                                loading={loading} \n                                onClick={() => setFiles([])} \n                            />                            \n                        </Button.Group>\n                    </>\n                )}                \n            </Grid.Column>\n        </Grid>\n    )\n};\n\nexport default observer(PhotoUploadWidget);","import React, { useContext, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Header, Card, Image, Button, Grid } from 'semantic-ui-react';\nimport RootStoreContext from \"src/app/stores/rootStore\";\nimport PhotoUploadWidget from \"src/app/common/photoUpload/PhotoUploadWidget\";\n\nconst ProfilePhoto: React.FC = () => {\n    const rootStore = useContext(RootStoreContext);\n    const { profile, isCurrentUser, uploadPhoto, uploadingPhoto, setMainPhoto, loading, deletePhoto } = rootStore.profileStore;\n    const [addPhotoMode, setPhotoMode] = useState<boolean>(true);\n    const [target, setTarget] = useState<string | undefined>(undefined);\n    const [deleteTarget, setDeleteTarget] = useState<string | undefined>(undefined);\n\n    const handleUploadImage = (photo: Blob) => {\n        uploadPhoto(photo).then(() => setPhotoMode(false));\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16} style={{ paddingBottom: 0 }}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    { isCurrentUser && (\n                        <Button \n                            floated='right' \n                            basic \n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'} \n                            onClick={() => setPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    { addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handleUploadImage} loading={uploadingPhoto} />\n                    ) : (\n                        <Card.Group itemsPerRow={5}>\n                            {profile && profile.photos.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    { isCurrentUser && (\n                                        <Button.Group fluid width={2}>\n                                            <Button \n                                                loading={loading && target === photo.id} \n                                                basic \n                                                positive \n                                                disabled={photo.isMain}\n                                                content='Main' \n                                                onClick={() => {\n                                                    setTarget(photo.id);\n                                                    setMainPhoto(photo);\n                                                }} \n                                            />\n                                            <Button \n                                                loading={loading && deleteTarget === photo.id}\n                                                basic \n                                                negative \n                                                disabled={photo.isMain}\n                                                icon='trash' \n                                                onClick={() => {\n                                                    setDeleteTarget(photo.id);\n                                                    deletePhoto(photo);\n                                                }} \n                                            />\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n                        </Card.Group>  \n                    )}\n                      \n                </Grid.Column>\n            </Grid>        \n        </Tab.Pane>\n    );\n};\n\nexport default observer(ProfilePhoto);","import React from \"react\";\nimport { Form, Header, Button } from 'semantic-ui-react'\nimport { observer } from 'mobx-react-lite';\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport TextInput from \"src/app/common/form/TextInput\";\nimport { combineValidators, isRequired } from \"revalidate\";\nimport { IProfile } from \"src/app/models/Profile\";\nimport TextAreaInput from \"src/app/common/form/TextAreaInput\";\n\nconst validate = combineValidators({\n    displayName: isRequired('displayName'),\n});\n\ninterface IProps {\n    profile: IProfile;\n    updateProfile: (profile: IProfile) => void;\n}\n\nconst ProfileEditForm: React.FC<IProps> = ({ profile, updateProfile }) => {\n\n    return (\n        <FinalForm \n            validate={validate}\n            onSubmit={updateProfile}\n            initialValues={profile}\n            render={({ handleSubmit, submitting, invalid, pristine }) => (\n                <Form onSubmit={handleSubmit} error>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\n                    <Field \n                        name='displayName' \n                        placeholder='Display Name' \n                        component={TextInput} \n                        value={profile!.displayName}\n                    />\n                    <Field \n                        name='bio'\n                        value={profile.bio}\n                        placeholder='Bio' \n                        rows={3}\n                        component={TextAreaInput} \n                    />\n                    <Button \n                        positive \n                        loading={submitting}\n                        floated='right'\n                        content='Update profile' \n                        disabled={pristine || invalid}\n                    />\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default observer(ProfileEditForm);","import React, { useContext, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Header, Button, Grid } from 'semantic-ui-react';\nimport RootStoreContext from \"src/app/stores/rootStore\";\nimport ProfileEditForm from \"./ProfileEditForm\";\n\nconst ProfileDescription: React.FC = () => {\n    const rootStore = useContext(RootStoreContext);\n    const { profile, isCurrentUser, updateProfile } = rootStore.profileStore;\n    const [editMode, setEditMode] = useState<boolean>(true);\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user' content={`About ${profile!.username}`} />\n                    { isCurrentUser && (\n                        <Button \n                            floated='right' \n                            basic \n                            content={editMode ? 'Cancel' : 'Edit Profile'} \n                            onClick={() => setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    { editMode ? (\n                        <ProfileEditForm\n                            updateProfile={updateProfile}\n                            profile={profile!}\n                        />\n                    ) : (\n                        <span>{profile!.bio}</span>\n                    )}\n                      \n                </Grid.Column>\n            </Grid>        \n        </Tab.Pane>\n    );\n};\n\nexport default observer(ProfileDescription);","import React from 'react';\nimport { Card, Image, Icon} from 'semantic-ui-react';\nimport { IProfile } from 'src/app/models/Profile';\nimport { Link } from 'react-router-dom';\n\ninterface IProps {\n    profile: IProfile;\n}\n\nconst ProfileCard: React.FC<IProps> = ({ profile }) => {\n    return (\n        <Card as={Link} to={`/profile/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n            </Card.Content>\n            <Card.Content extra>\n                <div>\n                    <Icon name='user' /> {profile.followersCount} Followers\n                </div>\n            </Card.Content>\n        </Card>\n    );\n};\n\nexport default ProfileCard;\n","import React, { useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\nimport RootStoreContext from \"src/app/stores/rootStore\";\nimport ProfileCard from './ProfileCard';\n\nconst ProfileFollowings = () => {\n\n    const rootStore = useContext(RootStoreContext);\n    const { profile, followings, loading, activeTab } = rootStore.profileStore;\n    return (\n        <Tab.Pane loading={loading}>\n        <Grid>\n            <Grid.Column width={16}>\n            <Header\n                floated='left'\n                icon='user'\n                content={\n                    activeTab === 3\n                        ? `People following ${profile!.displayName}`\n                        : `People ${profile!.displayName} is following`\n                }\n            />\n            </Grid.Column>\n            <Grid.Column width={16}>\n            <Card.Group itemsPerRow={5}>\n                { followings.map(x => ( <ProfileCard key={x.username} profile={x} /> ))}\n            </Card.Group>\n            </Grid.Column>\n        </Grid>\n        </Tab.Pane>\n    );\n};\n\nexport default observer(ProfileFollowings);","import React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { IProfile } from \"src/app/models/Profile\";\nimport ProfileActivities from \"./ProfileActivities\";\nimport ProfilePhone from \"./ProfilePhoto\";\nimport ProfileDescription from \"./ProfileDescription\";\nimport ProfileFollowings from \"./ProfileFollowings\";\n\ninterface IProps {\n    profile: IProfile;\n    setActiveTab: (tabIndex: any) => void;\n}\n\nconst panes = [\n    {\n        menuItem: 'About',\n        render: () => <ProfileDescription />\n    },\n    {\n        menuItem: 'Photos',\n        render: () => <ProfilePhone />\n    },\n    {\n        menuItem: 'Activities',\n        render: () => <ProfileActivities />\n    },\n    {\n        menuItem: 'Followers',\n        render: () => <ProfileFollowings />\n    },\n    {\n        menuItem: 'Following',\n        render: () => <ProfileFollowings />\n    },\n];\n\nconst ProfileContent: React.FC<IProps> = ({ setActiveTab }) => {\n\n    return (\n        <Tab\n            menu={{ fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => setActiveTab(data.activeIndex)}\n        />\n    );\n};\n\nexport default ProfileContent;","import React, { useContext, useEffect } from \"react\";\nimport { observer } from 'mobx-react-lite';\nimport { Grid } from \"semantic-ui-react\";\nimport RootStoreContext from \"src/app/stores/rootStore\";\nimport ProfileHeader from \"./ProfileHeader\";\nimport ProfileContent from \"./ProfileContent\";\nimport LoadingComponent from \"src/app/layout/LoadingComponent\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\ninterface RouteParams {\n    username: string;\n}\n\ninterface IProps extends RouteComponentProps<RouteParams> {}\n\nconst ProfilePage: React.FC<IProps> = ({ match }) => {\n\n    const rootStore = useContext(RootStoreContext);\n    const { profile, loadingProfile, loadProfile, setActiveTab } = rootStore.profileStore;\n\n    useEffect(() => {\n        loadProfile(match.params.username);\n    }, [loadProfile, match]);\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile' />;\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                <ProfileHeader profile={profile!} />\n                <ProfileContent profile={profile!} setActiveTab={setActiveTab} />\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ProfilePage);","import React from 'react';\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere but couldn't find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to Activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n};\n\nexport default NotFound;","import React, { useContext } from 'react'\nimport { Modal } from 'semantic-ui-react'\nimport { observer } from 'mobx-react-lite';\nimport RootStoreContext from \"src/app/stores/rootStore\";\n\n \nconst ModalModalExample = () => {\n    const { modalStore } = useContext(RootStoreContext);\n    const { modal: { open, body }, closeModal } = modalStore;\n\n    return (\n        <Modal open={open} onClose={closeModal} size='mini'>\n            <Modal.Content>\n                {body}\n            </Modal.Content>\n        </Modal>\n    )\n};\n\nexport default observer(ModalModalExample);","import React, { useContext } from 'react';\nimport { RouteProps, RouteComponentProps, Route, Redirect } from 'react-router-dom';\nimport RootStoreContext from \"src/app/stores/rootStore\";\nimport { observer } from 'mobx-react-lite';\n\ninterface IProps extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>>;\n}\n\nconst PrivateRoute: React.FC<IProps> = ({ component: Component, ...rest }) => {\n    const rootStore = useContext(RootStoreContext);\n    const { isLoggedIn } = rootStore.userStore;\n\n    return (\n        <Route\n            {...rest}       \n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to={'/'} />} \n        />\n    );\n};\n\nexport default observer(PrivateRoute);","import React, { useEffect, useContext } from \"react\";\nimport { Container } from 'semantic-ui-react'\nimport NavBar from \"src/features/nav/NavBar\";\nimport ActivityDashboard from \"src/features/activities/dashboard/ActivityDashboard\";\nimport ActivityForm from \"src/features/activities/form/ActivityForm\";\nimport ActivityDetails from \"src/features/activities/details/ActivityDetails\";\nimport HomePage from \"src/features/home/HomePage\";\nimport ProfilePage from \"src/features/profiles/ProfilePage\";\nimport NotFound from \"./NotFound\";\nimport { ToastContainer } from 'react-toastify';\nimport { observer } from 'mobx-react-lite';\nimport { Route, withRouter, RouteComponentProps, Switch } from \"react-router-dom\";\nimport ModalContainer from \"src/app/common/modal/ModalContainer\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport RootStoreContext from \"src/app/stores/rootStore\";\nimport LoadingComponent from \"./LoadingComponent\";\n\n// NOTE: issue if we are in edit form and click toc reate form then form not reseted\n//        because not was unmounted and keep the state\n// because of this we use key prop with location.key on route\n\n// anyting which start wityh / and have something after it\n\n// <Route exact path=\"/(.+)\" render={() => <SubComponents/> } />\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n\n    const rootStore = useContext(RootStoreContext);\n    const { appLoaded, setAppLoaded, token } = rootStore.commonStore;\n    const { getUser } = rootStore.userStore;\n\n    useEffect(() => {\n        if (token) {\n            getUser().finally(() => setAppLoaded());\n        } else {\n            setAppLoaded();\n        }\n    }, [getUser, setAppLoaded, token]);\n\n    if (!appLoaded) \n        return <LoadingComponent content='Loading app...' />;\n\n    return (\n        <>\n            <ModalContainer />\n            <ToastContainer position='bottom-right' />\n            <Route exact path=\"/\" component={HomePage} />\n            <Route exact path=\"/(.+)\" render={() => (\n                <>\n                    <NavBar />\n                    <Container style={{ marginTop: '7em' }}>\n                        <Switch>\n                            <PrivateRoute exact path=\"/activities\" component={ActivityDashboard} />\n                            <PrivateRoute path=\"/activities/:id\" component={ActivityDetails} />\n                            <PrivateRoute key={location.key} path={[\"/createActivity\", \"/manage/:id\"]} component={ActivityForm} />\n                            <PrivateRoute path=\"/profile/:username\" component={ProfilePage} />\n                            <Route component={NotFound} />\n                        </Switch>\n                    </Container>\n                </>\n            )} />\n        </>\n    );\n}\n\nexport default withRouter(observer(App));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\nimport App from './app/layout/App'\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport 'react-widgets/dist/css/react-widgets.css';\nimport \"./app/layout/style.css\";\n\nexport const history = createBrowserHistory();\n\ndateFnsLocalizer();\n\nReactDOM.render(\n    <Router history={history}>\n        <App />\n    </Router>\n, document.getElementById(\"root\"));\n"],"sourceRoot":""}